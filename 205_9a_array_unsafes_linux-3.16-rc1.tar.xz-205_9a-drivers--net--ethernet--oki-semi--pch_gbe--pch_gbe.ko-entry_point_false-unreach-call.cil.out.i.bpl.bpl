var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: [ref]ref;

var $M.26: ref;

var $M.27: ref;

var $M.28: ref;

var $M.29: ref;

var $M.30: [ref]i8;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]i64;

var $M.34: [ref]i8;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]i24;

var $M.40: [ref]i8;

var $M.41: i32;

var $M.43: [ref]i32;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]i32;

var $M.47: [ref]i32;

var $M.48: [ref]i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: [ref]ref;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: ref;

var $M.56: [ref]i32;

var $M.57: [ref]ref;

var $M.58: [ref]i8;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: i32;

var $M.68: ref;

var $M.69: i32;

var $M.70: i32;

var $M.71: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.118: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 823542);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const pch_gbe_ethtool_ops_group1: ref;

axiom pch_gbe_ethtool_ops_group1 == $sub.ref(0, 6172);

const pch_gbe_ethtool_ops_group0: ref;

axiom pch_gbe_ethtool_ops_group0 == $sub.ref(0, 7204);

const pch_gbe_ethtool_ops_group2: ref;

axiom pch_gbe_ethtool_ops_group2 == $sub.ref(0, 8236);

const pch_gbe_ethtool_ops_group3: ref;

axiom pch_gbe_ethtool_ops_group3 == $sub.ref(0, 9268);

const pch_gbe_ethtool_ops_group4: ref;

axiom pch_gbe_ethtool_ops_group4 == $sub.ref(0, 10300);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 11328);

const pch_gbe_ops_group0: ref;

axiom pch_gbe_ops_group0 == $sub.ref(0, 12360);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 13388);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 14416);

const {:count 5} pch_driver_version: ref;

axiom pch_driver_version == $sub.ref(0, 15445);

const pch_gbe_err_handler_group0: ref;

axiom pch_gbe_err_handler_group0 == $sub.ref(0, 16477);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 17505);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 18537);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 19565);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 20597);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 21625);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 22657);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 23685);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 24717);

const pch_gbe_pm_ops_group1: ref;

axiom pch_gbe_pm_ops_group1 == $sub.ref(0, 25749);

const pch_gbe_netdev_ops_group1: ref;

axiom pch_gbe_netdev_ops_group1 == $sub.ref(0, 26781);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 27809);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 28837);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 29865);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 30893);

const pch_gbe_driver_group0: ref;

axiom pch_gbe_driver_group0 == $sub.ref(0, 31925);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 32957);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 33989);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 35021);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 36053);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 37081);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 38109);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 39137);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 40165);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 41193);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 42221);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 43249);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 44277);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 45305);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 46333);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 47361);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 48389);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 49417);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 50445);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 51473);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 52501);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 53529);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 54557);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 55585);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 56613);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 57641);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 58669);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 59697);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 60725);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 61753);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 62781);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 63809);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 64837);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 65865);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 66893);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 67921);

const last_index: ref;

axiom last_index == $sub.ref(0, 68949);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 69981);

const __mod_pci__pch_gbe_pcidev_id_device_table: ref;

axiom __mod_pci__pch_gbe_pcidev_id_device_table == $sub.ref(0, 71037);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 72181);

const copybreak: ref;

axiom copybreak == $sub.ref(0, 73209);

const pch_gbe_pm_ops: ref;

axiom pch_gbe_pm_ops == $sub.ref(0, 74417);

const pch_gbe_err_handler: ref;

axiom pch_gbe_err_handler == $sub.ref(0, 75489);

const pch_gbe_minnow_privdata: ref;

axiom pch_gbe_minnow_privdata == $sub.ref(0, 76529);

const {:count 5} pch_gbe_pcidev_id: ref;

axiom pch_gbe_pcidev_id == $sub.ref(0, 77713);

const pch_gbe_driver: ref;

axiom pch_gbe_driver == $sub.ref(0, 79049);

const pch_gbe_netdev_ops: ref;

axiom pch_gbe_netdev_ops == $sub.ref(0, 80553);

const pch_gbe_ops: ref;

axiom pch_gbe_ops == $sub.ref(0, 81649);

const AutoNeg: ref;

axiom AutoNeg == $sub.ref(0, 82677);

const {:count 31} an_list: ref;

axiom an_list == $sub.ref(0, 84197);

const Duplex: ref;

axiom Duplex == $sub.ref(0, 85225);

const {:count 3} dplx_list: ref;

axiom dplx_list == $sub.ref(0, 86297);

const Speed: ref;

axiom Speed == $sub.ref(0, 87325);

const {:count 4} speed_list: ref;

axiom speed_list == $sub.ref(0, 88413);

const FlowControl: ref;

axiom FlowControl == $sub.ref(0, 89441);

const {:count 4} fc_list: ref;

axiom fc_list == $sub.ref(0, 90529);

const XsumTX: ref;

axiom XsumTX == $sub.ref(0, 91557);

const XsumRX: ref;

axiom XsumRX == $sub.ref(0, 92585);

const RxDescriptors: ref;

axiom RxDescriptors == $sub.ref(0, 93613);

const TxDescriptors: ref;

axiom TxDescriptors == $sub.ref(0, 94641);

const {:count 25} pch_gbe_gstrings_stats: ref;

axiom pch_gbe_gstrings_stats == $sub.ref(0, 96865);

const pch_gbe_ethtool_ops: ref;

axiom pch_gbe_ethtool_ops == $sub.ref(0, 98265);

const .str: ref;

axiom .str == $sub.ref(0, 99297);

const {:count 25} .str.23: ref;

axiom .str.23 == $sub.ref(0, 100346);

const {:count 250} .str.21: ref;

axiom .str.21 == $sub.ref(0, 101620);

const {:count 14} .str.24: ref;

axiom .str.24 == $sub.ref(0, 102658);

const {:count 36} .str.25: ref;

axiom .str.25 == $sub.ref(0, 103718);

const {:count 47} .str.26: ref;

axiom .str.26 == $sub.ref(0, 104789);

const {:count 16} .str.32: ref;

axiom .str.32 == $sub.ref(0, 105829);

const {:count 26} .str.19: ref;

axiom .str.19 == $sub.ref(0, 106879);

const {:count 42} .str.112: ref;

axiom .str.112 == $sub.ref(0, 107945);

const {:count 20} .str.113: ref;

axiom .str.113 == $sub.ref(0, 108989);

const {:count 14} .str.114: ref;

axiom .str.114 == $sub.ref(0, 110027);

const {:count 18} .str.141: ref;

axiom .str.141 == $sub.ref(0, 111069);

const {:count 24} .str.142: ref;

axiom .str.142 == $sub.ref(0, 112117);

const {:count 73} .str.143: ref;

axiom .str.143 == $sub.ref(0, 113214);

const {:count 26} .str.20: ref;

axiom .str.20 == $sub.ref(0, 114264);

const {:count 20} .str.22: ref;

axiom .str.22 == $sub.ref(0, 115308);

const {:count 28} .str.38: ref;

axiom .str.38 == $sub.ref(0, 116360);

const {:count 51} .str.39: ref;

axiom .str.39 == $sub.ref(0, 117435);

const {:count 61} .str.40: ref;

axiom .str.40 == $sub.ref(0, 118520);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 17} .str.137: ref;

axiom .str.137 == $sub.ref(0, 119561);

const {:count 22} .str.138: ref;

axiom .str.138 == $sub.ref(0, 120607);

const {:count 19} .str.135: ref;

axiom .str.135 == $sub.ref(0, 121650);

const {:count 21} .str.136: ref;

axiom .str.136 == $sub.ref(0, 122695);

const {:count 26} .str.134: ref;

axiom .str.134 == $sub.ref(0, 123745);

const {:count 25} .str.132: ref;

axiom .str.132 == $sub.ref(0, 124794);

const {:count 65} .str.133: ref;

axiom .str.133 == $sub.ref(0, 125883);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 41} .str.117: ref;

axiom .str.117 == $sub.ref(0, 126948);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 20} .str.127: ref;

axiom .str.127 == $sub.ref(0, 127992);

const {:count 21} .str.128: ref;

axiom .str.128 == $sub.ref(0, 129037);

const {:count 33} .str.129: ref;

axiom .str.129 == $sub.ref(0, 130094);

const {:count 40} .str.130: ref;

axiom .str.130 == $sub.ref(0, 131158);

const {:count 57} .str.131: ref;

axiom .str.131 == $sub.ref(0, 132239);

const {:count 13} .str.151: ref;

axiom .str.151 == $sub.ref(0, 133276);

const {:count 26} .str.152: ref;

axiom .str.152 == $sub.ref(0, 134326);

const {:count 18} .str.153: ref;

axiom .str.153 == $sub.ref(0, 135368);

const {:count 24} .str.154: ref;

axiom .str.154 == $sub.ref(0, 136416);

const {:count 38} .str.155: ref;

axiom .str.155 == $sub.ref(0, 137478);

const {:count 29} .str.156: ref;

axiom .str.156 == $sub.ref(0, 138531);

const {:count 55} .str.157: ref;

axiom .str.157 == $sub.ref(0, 139610);

const {:count 21} .str.124: ref;

axiom .str.124 == $sub.ref(0, 140655);

const {:count 35} .str.125: ref;

axiom .str.125 == $sub.ref(0, 141714);

const {:count 47} .str.126: ref;

axiom .str.126 == $sub.ref(0, 142785);

const {:count 21} .str.122: ref;

axiom .str.122 == $sub.ref(0, 143830);

const {:count 36} .str.123: ref;

axiom .str.123 == $sub.ref(0, 144890);

const {:count 37} .str.118: ref;

axiom .str.118 == $sub.ref(0, 145951);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 34} .str.119: ref;

axiom .str.119 == $sub.ref(0, 147009);

const {:count 22} .str.120: ref;

axiom .str.120 == $sub.ref(0, 148055);

const {:count 52} .str.121: ref;

axiom .str.121 == $sub.ref(0, 149131);

const {:count 22} .str.115: ref;

axiom .str.115 == $sub.ref(0, 150177);

const {:count 52} .str.116: ref;

axiom .str.116 == $sub.ref(0, 151253);

const {:count 72} .str.140: ref;

axiom .str.140 == $sub.ref(0, 152349);

const {:count 20} .str.139: ref;

axiom .str.139 == $sub.ref(0, 153393);

const {:count 28} .str.33: ref;

axiom .str.33 == $sub.ref(0, 154445);

const {:count 27} .str.34: ref;

axiom .str.34 == $sub.ref(0, 155496);

const {:count 92} .str.35: ref;

axiom .str.35 == $sub.ref(0, 156612);

const {:count 27} .str.36: ref;

axiom .str.36 == $sub.ref(0, 157663);

const {:count 92} .str.37: ref;

axiom .str.37 == $sub.ref(0, 158779);

const {:count 25} .str.6: ref;

axiom .str.6 == $sub.ref(0, 159828);

const {:count 22} .str.52: ref;

axiom .str.52 == $sub.ref(0, 160874);

const {:count 26} .str.53: ref;

axiom .str.53 == $sub.ref(0, 161924);

const {:count 27} .str.54: ref;

axiom .str.54 == $sub.ref(0, 162975);

const {:count 21} .str.55: ref;

axiom .str.55 == $sub.ref(0, 164020);

const .str.78: ref;

axiom .str.78 == $sub.ref(0, 165045);

const {:count 26} .str.79: ref;

axiom .str.79 == $sub.ref(0, 166095);

const {:count 26} .str.80: ref;

axiom .str.80 == $sub.ref(0, 167145);

const {:count 33} .str.81: ref;

axiom .str.81 == $sub.ref(0, 168202);

const {:count 27} .str.82: ref;

axiom .str.82 == $sub.ref(0, 169253);

const {:count 34} .str.83: ref;

axiom .str.83 == $sub.ref(0, 170311);

const {:count 34} .str.84: ref;

axiom .str.84 == $sub.ref(0, 171369);

const {:count 41} .str.85: ref;

axiom .str.85 == $sub.ref(0, 172434);

const {:count 27} .str.86: ref;

axiom .str.86 == $sub.ref(0, 173485);

const {:count 34} .str.87: ref;

axiom .str.87 == $sub.ref(0, 174543);

const {:count 34} .str.88: ref;

axiom .str.88 == $sub.ref(0, 175601);

const {:count 41} .str.89: ref;

axiom .str.89 == $sub.ref(0, 176666);

const {:count 35} .str.90: ref;

axiom .str.90 == $sub.ref(0, 177725);

const {:count 42} .str.91: ref;

axiom .str.91 == $sub.ref(0, 178791);

const {:count 42} .str.92: ref;

axiom .str.92 == $sub.ref(0, 179857);

const {:count 49} .str.93: ref;

axiom .str.93 == $sub.ref(0, 180930);

const {:count 28} .str.94: ref;

axiom .str.94 == $sub.ref(0, 181982);

const {:count 35} .str.95: ref;

axiom .str.95 == $sub.ref(0, 183041);

const {:count 35} .str.96: ref;

axiom .str.96 == $sub.ref(0, 184100);

const {:count 42} .str.97: ref;

axiom .str.97 == $sub.ref(0, 185166);

const {:count 36} .str.98: ref;

axiom .str.98 == $sub.ref(0, 186226);

const {:count 43} .str.99: ref;

axiom .str.99 == $sub.ref(0, 187293);

const {:count 43} .str.100: ref;

axiom .str.100 == $sub.ref(0, 188360);

const {:count 50} .str.101: ref;

axiom .str.101 == $sub.ref(0, 189434);

const {:count 36} .str.102: ref;

axiom .str.102 == $sub.ref(0, 190494);

const {:count 43} .str.103: ref;

axiom .str.103 == $sub.ref(0, 191561);

const {:count 43} .str.104: ref;

axiom .str.104 == $sub.ref(0, 192628);

const {:count 50} .str.105: ref;

axiom .str.105 == $sub.ref(0, 193702);

const {:count 44} .str.106: ref;

axiom .str.106 == $sub.ref(0, 194770);

const {:count 51} .str.107: ref;

axiom .str.107 == $sub.ref(0, 195845);

const {:count 51} .str.108: ref;

axiom .str.108 == $sub.ref(0, 196920);

const {:count 58} .str.109: ref;

axiom .str.109 == $sub.ref(0, 198002);

const {:count 32} .str.4: ref;

axiom .str.4 == $sub.ref(0, 199058);

const {:count 29} .str.27: ref;

axiom .str.27 == $sub.ref(0, 200111);

const {:count 22} .str.28: ref;

axiom .str.28 == $sub.ref(0, 201157);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 202210);

const {:count 5} .str.30: ref;

axiom .str.30 == $sub.ref(0, 203239);

const {:count 6} .str.31: ref;

axiom .str.31 == $sub.ref(0, 204269);

const {:count 26} .str.111: ref;

axiom .str.111 == $sub.ref(0, 205319);

const {:count 25} .str.5: ref;

axiom .str.5 == $sub.ref(0, 206368);

const {:count 25} .str.41: ref;

axiom .str.41 == $sub.ref(0, 207417);

const {:count 249} .str.2: ref;

axiom .str.2 == $sub.ref(0, 208690);

const {:count 47} .str.42: ref;

axiom .str.42 == $sub.ref(0, 209761);

const {:count 48} .str.43: ref;

axiom .str.43 == $sub.ref(0, 210833);

const {:count 44} .str.44: ref;

axiom .str.44 == $sub.ref(0, 211901);

const {:count 19} .str.1: ref;

axiom .str.1 == $sub.ref(0, 212944);

const {:count 42} .str.3: ref;

axiom .str.3 == $sub.ref(0, 214010);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 21} .str.213: ref;

axiom .str.213 == $sub.ref(0, 215055);

const {:count 19} .str.214: ref;

axiom .str.214 == $sub.ref(0, 216098);

const {:count 67} .str.215: ref;

axiom .str.215 == $sub.ref(0, 217189);

const {:count 14} .str.203: ref;

axiom .str.203 == $sub.ref(0, 218227);

const {:count 14} .str.204: ref;

axiom .str.204 == $sub.ref(0, 219265);

const {:count 18} .str.205: ref;

axiom .str.205 == $sub.ref(0, 220307);

const {:count 18} .str.206: ref;

axiom .str.206 == $sub.ref(0, 221349);

const {:count 16} .str.216: ref;

axiom .str.216 == $sub.ref(0, 222389);

const {:count 18} .str.217: ref;

axiom .str.217 == $sub.ref(0, 223431);

const {:count 16} .str.218: ref;

axiom .str.218 == $sub.ref(0, 224471);

const {:count 16} .str.219: ref;

axiom .str.219 == $sub.ref(0, 225511);

const {:count 32} .str.220: ref;

axiom .str.220 == $sub.ref(0, 226567);

const {:count 19} .str.210: ref;

axiom .str.210 == $sub.ref(0, 227610);

const {:count 61} .str.211: ref;

axiom .str.211 == $sub.ref(0, 228695);

const {:count 19} .str.212: ref;

axiom .str.212 == $sub.ref(0, 229738);

const {:count 13} .str.207: ref;

axiom .str.207 == $sub.ref(0, 230775);

const {:count 13} .str.208: ref;

axiom .str.208 == $sub.ref(0, 231812);

const {:count 11} .str.209: ref;

axiom .str.209 == $sub.ref(0, 232847);

const system_state: ref;

axiom system_state == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 26} .str.201: ref;

axiom .str.201 == $sub.ref(0, 233897);

const {:count 41} .str.202: ref;

axiom .str.202 == $sub.ref(0, 234962);

const {:count 44} .str.160: ref;

axiom .str.160 == $sub.ref(0, 236030);

const {:count 49} .str.161: ref;

axiom .str.161 == $sub.ref(0, 237103);

const {:count 22} .str.162: ref;

axiom .str.162 == $sub.ref(0, 238149);

const {:count 24} .str.163: ref;

axiom .str.163 == $sub.ref(0, 239197);

const {:count 42} .str.164: ref;

axiom .str.164 == $sub.ref(0, 240263);

const {:count 23} .str.165: ref;

axiom .str.165 == $sub.ref(0, 241310);

const {:count 19} .str.166: ref;

axiom .str.166 == $sub.ref(0, 242353);

const {:count 14} .str.167: ref;

axiom .str.167 == $sub.ref(0, 243391);

const {:count 24} .str.168: ref;

axiom .str.168 == $sub.ref(0, 244439);

const {:count 30} .str.7: ref;

axiom .str.7 == $sub.ref(0, 245493);

const {:count 38} .str.8: ref;

axiom .str.8 == $sub.ref(0, 246555);

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 247628);

const {:count 35} .str.10: ref;

axiom .str.10 == $sub.ref(0, 248687);

const {:count 21} .str.11: ref;

axiom .str.11 == $sub.ref(0, 249732);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 250777);

const {:count 20} .str.13: ref;

axiom .str.13 == $sub.ref(0, 251821);

const {:count 17} .str.14: ref;

axiom .str.14 == $sub.ref(0, 252862);

const {:count 22} .str.15: ref;

axiom .str.15 == $sub.ref(0, 253908);

const {:count 13} .str.16: ref;

axiom .str.16 == $sub.ref(0, 254945);

const {:count 37} .str.17: ref;

axiom .str.17 == $sub.ref(0, 256006);

const {:count 6} .str.56: ref;

axiom .str.56 == $sub.ref(0, 257036);

const {:count 18} .str.57: ref;

axiom .str.57 == $sub.ref(0, 258078);

const {:count 7} .str.58: ref;

axiom .str.58 == $sub.ref(0, 259109);

const {:count 8} .str.59: ref;

axiom .str.59 == $sub.ref(0, 260141);

const {:count 29} .str.60: ref;

axiom .str.60 == $sub.ref(0, 261194);

const {:count 251} .str.46: ref;

axiom .str.46 == $sub.ref(0, 262469);

const {:count 73} .str.61: ref;

axiom .str.61 == $sub.ref(0, 263566);

const {:count 42} .str.62: ref;

axiom .str.62 == $sub.ref(0, 264632);

const {:count 37} .str.63: ref;

axiom .str.63 == $sub.ref(0, 265693);

const {:count 43} .str.64: ref;

axiom .str.64 == $sub.ref(0, 266760);

const {:count 37} .str.65: ref;

axiom .str.65 == $sub.ref(0, 267821);

const {:count 43} .str.66: ref;

axiom .str.66 == $sub.ref(0, 268888);

const {:count 40} .str.67: ref;

axiom .str.67 == $sub.ref(0, 269952);

const {:count 39} .str.68: ref;

axiom .str.68 == $sub.ref(0, 271015);

const {:count 32} .str.69: ref;

axiom .str.69 == $sub.ref(0, 272071);

const {:count 32} .str.70: ref;

axiom .str.70 == $sub.ref(0, 273127);

const {:count 41} .str.71: ref;

axiom .str.71 == $sub.ref(0, 274192);

const {:count 40} .str.72: ref;

axiom .str.72 == $sub.ref(0, 275256);

const {:count 33} .str.73: ref;

axiom .str.73 == $sub.ref(0, 276313);

const {:count 33} .str.74: ref;

axiom .str.74 == $sub.ref(0, 277370);

const {:count 42} .str.75: ref;

axiom .str.75 == $sub.ref(0, 278436);

const {:count 43} .str.76: ref;

axiom .str.76 == $sub.ref(0, 279503);

const {:count 53} .str.77: ref;

axiom .str.77 == $sub.ref(0, 280580);

const {:count 24} .str.45: ref;

axiom .str.45 == $sub.ref(0, 281628);

const {:count 12} .str.47: ref;

axiom .str.47 == $sub.ref(0, 282664);

const {:count 13} .str.48: ref;

axiom .str.48 == $sub.ref(0, 283701);

const {:count 14} .str.49: ref;

axiom .str.49 == $sub.ref(0, 284739);

const {:count 4} .str.50: ref;

axiom .str.50 == $sub.ref(0, 285767);

const {:count 36} .str.51: ref;

axiom .str.51 == $sub.ref(0, 286827);

const {:count 17} .str.144: ref;

axiom .str.144 == $sub.ref(0, 287868);

const {:count 17} .str.145: ref;

axiom .str.145 == $sub.ref(0, 288909);

const {:count 27} .str.146: ref;

axiom .str.146 == $sub.ref(0, 289960);

const {:count 30} .str.147: ref;

axiom .str.147 == $sub.ref(0, 291014);

const {:count 5} .str.148: ref;

axiom .str.148 == $sub.ref(0, 292043);

const {:count 5} .str.149: ref;

axiom .str.149 == $sub.ref(0, 293072);

const {:count 18} .str.150: ref;

axiom .str.150 == $sub.ref(0, 294114);

const {:count 17} .str.199: ref;

axiom .str.199 == $sub.ref(0, 295155);

const {:count 15} .str.200: ref;

axiom .str.200 == $sub.ref(0, 296194);

const {:count 33} .str.192: ref;

axiom .str.192 == $sub.ref(0, 297251);

const {:count 38} .str.193: ref;

axiom .str.193 == $sub.ref(0, 298313);

const {:count 33} .str.194: ref;

axiom .str.194 == $sub.ref(0, 299370);

const {:count 31} .str.195: ref;

axiom .str.195 == $sub.ref(0, 300425);

const {:count 33} .str.196: ref;

axiom .str.196 == $sub.ref(0, 301482);

const {:count 16} .str.197: ref;

axiom .str.197 == $sub.ref(0, 302522);

const {:count 70} .str.198: ref;

axiom .str.198 == $sub.ref(0, 303616);

const {:count 33} .str.18: ref;

axiom .str.18 == $sub.ref(0, 304673);

const {:count 18} .str.169: ref;

axiom .str.169 == $sub.ref(0, 305715);

const {:count 13} .str.170: ref;

axiom .str.170 == $sub.ref(0, 306752);

const {:count 49} .str.171: ref;

axiom .str.171 == $sub.ref(0, 307825);

const {:count 17} .str.178: ref;

axiom .str.178 == $sub.ref(0, 308866);

const {:count 20} .str.179: ref;

axiom .str.179 == $sub.ref(0, 309910);

const {:count 39} .str.180: ref;

axiom .str.180 == $sub.ref(0, 310973);

const {:count 52} .str.181: ref;

axiom .str.181 == $sub.ref(0, 312049);

const {:count 71} .str.182: ref;

axiom .str.182 == $sub.ref(0, 313144);

const {:count 20} .str.183: ref;

axiom .str.183 == $sub.ref(0, 314188);

const {:count 22} .str.184: ref;

axiom .str.184 == $sub.ref(0, 315234);

const {:count 30} .str.185: ref;

axiom .str.185 == $sub.ref(0, 316288);

const {:count 32} .str.186: ref;

axiom .str.186 == $sub.ref(0, 317344);

const {:count 20} .str.187: ref;

axiom .str.187 == $sub.ref(0, 318388);

const {:count 29} .str.188: ref;

axiom .str.188 == $sub.ref(0, 319441);

const {:count 28} .str.189: ref;

axiom .str.189 == $sub.ref(0, 320493);

const {:count 54} .str.190: ref;

axiom .str.190 == $sub.ref(0, 321571);

const {:count 15} .str.191: ref;

axiom .str.191 == $sub.ref(0, 322610);

const {:count 17} .str.172: ref;

axiom .str.172 == $sub.ref(0, 323651);

const {:count 75} .str.173: ref;

axiom .str.173 == $sub.ref(0, 324750);

const {:count 25} .str.174: ref;

axiom .str.174 == $sub.ref(0, 325799);

const {:count 22} .str.175: ref;

axiom .str.175 == $sub.ref(0, 326845);

const {:count 19} .str.176: ref;

axiom .str.176 == $sub.ref(0, 327888);

const {:count 39} .str.177: ref;

axiom .str.177 == $sub.ref(0, 328951);

const {:count 17} .str.158: ref;

axiom .str.158 == $sub.ref(0, 329992);

const {:count 45} .str.159: ref;

axiom .str.159 == $sub.ref(0, 331061);

const {:count 18} .str.221: ref;

axiom .str.221 == $sub.ref(0, 332103);

const {:count 40} .str.222: ref;

axiom .str.222 == $sub.ref(0, 333167);

const {:count 41} .str.223: ref;

axiom .str.223 == $sub.ref(0, 334232);

const {:count 39} .str.228: ref;

axiom .str.228 == $sub.ref(0, 335295);

const {:count 58} .str.224: ref;

axiom .str.224 == $sub.ref(0, 336377);

const {:count 5} .str.225: ref;

axiom .str.225 == $sub.ref(0, 337406);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 30} .str.226: ref;

axiom .str.226 == $sub.ref(0, 338460);

const {:count 53} .str.227: ref;

axiom .str.227 == $sub.ref(0, 339537);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 340569);

const {:count 3} .str.1.352: ref;

axiom .str.1.352 == $sub.ref(0, 341596);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 342634);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 343662);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 344694);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 345726);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 346758);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const pch_gbe_get_settings: ref;

axiom pch_gbe_get_settings == $sub.ref(0, 347790);

procedure pch_gbe_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p2 := netdev_priv($p0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i5 := mii_ethtool_gset($p4, $p1);
    call {:si_unique_call 9} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 145));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $sub.i32(0, 145));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i16 := netif_carrier_ok($p15);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ethtool_cmd_speed_set($p1, $sub.i32(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;
}



const pch_gbe_set_settings: ref;

axiom pch_gbe_set_settings == $sub.ref(0, 348822);

procedure pch_gbe_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i15: i16;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i16;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i16;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i14: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p2 := netdev_priv($p0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i5 := ethtool_cmd_speed($p1);
    call {:si_unique_call 15} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_201 := pch_gbe_hal_write_phy_reg($p4, 0, $sub.i16(0, 32768));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i11 := mii_ethtool_sset($p10, $p1);
    call {:si_unique_call 19} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i9);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i15);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i16($i19);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $i20);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i25);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    $p31 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i29);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i34 := netif_running($p33);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 22} {:cexpr "tmp___1"} boogie_si_record_i8($i35);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} pch_gbe_reset($p3);
    assume {:verifier.code 0} true;
    $i38 := $i11;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i14 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} pch_gbe_down($p3);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i37 := pch_gbe_up($p3);
    call {:si_unique_call 25} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_202 := netdev_err.ref.ref($p0, .str.6);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i14 := $i11;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} ethtool_cmd_speed_set($p1, 1000);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i9 := 1000;
    goto $bb3;
}



const pch_gbe_get_drvinfo: ref;

axiom pch_gbe_get_drvinfo == $sub.ref(0, 349854);

procedure pch_gbe_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $p17: ref;
  var vslice_dummy_var_203: i64;
  var vslice_dummy_var_204: i64;
  var vslice_dummy_var_205: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p2 := netdev_priv($p0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_203 := strlcpy($p5, .str, 32);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_204 := strlcpy($p8, pch_driver_version, 32);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p12 := pci_name($p11);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_205 := strlcpy($p14, $p12, 32);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i16 := pch_gbe_get_regs_len($p0);
    call {:si_unique_call 33} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(192, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_get_regs_len: ref;

axiom pch_gbe_get_regs_len == $sub.ref(0, 350886);

procedure pch_gbe_get_regs_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_gbe_get_regs_len($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $r := 492;
    return;
}



const pch_gbe_get_regs: ref;

axiom pch_gbe_get_regs == $sub.ref(0, 351918);

procedure pch_gbe_get_regs($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation pch_gbe_get_regs($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $i26: i16;
  var $p27: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i64;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i64;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i64;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i64;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i64;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i64;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i64;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i64;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i64;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i32;
  var $i264: i64;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i32;
  var $i272: i64;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i32;
  var $i280: i64;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i64;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i64;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i32;
  var $i304: i64;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i32;
  var $i312: i64;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $i320: i64;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i32;
  var $i328: i64;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i32;
  var $i336: i64;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i32;
  var $i344: i64;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i32;
  var $i352: i64;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $i360: i64;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i32;
  var $i368: i64;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i32;
  var $i376: i64;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $i383: i32;
  var $i384: i64;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i32;
  var $i392: i64;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i32;
  var $i400: i64;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i64;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $p414: ref;
  var $i415: i32;
  var $i416: i64;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $i423: i32;
  var $i424: i64;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $i431: i32;
  var $i432: i64;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $i439: i32;
  var $i440: i64;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i32;
  var $i448: i64;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $i455: i32;
  var $i456: i64;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $i463: i32;
  var $i464: i64;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $i471: i32;
  var $i472: i64;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i479: i32;
  var $i480: i64;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i32;
  var $i488: i64;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i32;
  var $i496: i64;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i32;
  var $i504: i64;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $i511: i32;
  var $i512: i64;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $i519: i32;
  var $i520: i64;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $i527: i32;
  var $i528: i64;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $i535: i32;
  var $i536: i64;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $i543: i32;
  var $i544: i64;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $i551: i32;
  var $i552: i64;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $i559: i32;
  var $i560: i64;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $i567: i32;
  var $i568: i64;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $i575: i32;
  var $i576: i64;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $i583: i32;
  var $i584: i64;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $i591: i32;
  var $i592: i64;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $i599: i32;
  var $i600: i64;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $i607: i32;
  var $i608: i64;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i32;
  var $i616: i64;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $i623: i32;
  var $i624: i64;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i32;
  var $i632: i64;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $i639: i32;
  var $i640: i64;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $i647: i32;
  var $i648: i64;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $i655: i32;
  var $i656: i64;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $i663: i32;
  var $i664: i64;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $i671: i32;
  var $i672: i64;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $i679: i32;
  var $i680: i64;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i32;
  var $i688: i64;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $i695: i32;
  var $i696: i64;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $i703: i32;
  var $i704: i64;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $i711: i32;
  var $i712: i64;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $i719: i32;
  var $i720: i64;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $i727: i32;
  var $i728: i64;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $p734: ref;
  var $i735: i32;
  var $i736: i64;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $i743: i32;
  var $i744: i64;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $i751: i32;
  var $i752: i64;
  var $p28: ref;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $i758: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p4 := netdev_priv($p0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 16);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i13, $i16);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 16777216);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p9, $mul.ref(1, 4));
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i25 := ioread32($p24);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i25);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $i40 := $add.i64(1, 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p9, $mul.ref($i40, 4));
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(1, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i47 := ioread32($p46);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i47);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $i48 := $add.i64($i40, 1);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p9, $mul.ref($i48, 4));
    $p50 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(2, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i55 := ioread32($p54);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i55);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $i56 := $add.i64($i48, 1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p9, $mul.ref($i56, 4));
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(3, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i63 := ioread32($p62);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i63);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $i64 := $add.i64($i56, 1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p9, $mul.ref($i64, 4));
    $p66 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(4, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i71 := ioread32($p70);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i71);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $i72 := $add.i64($i64, 1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p9, $mul.ref($i72, 4));
    $p74 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(5, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i79 := ioread32($p78);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i79);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $i80 := $add.i64($i72, 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p9, $mul.ref($i80, 4));
    $p82 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(6, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i87 := ioread32($p86);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i87);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i88 := $add.i64($i80, 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p9, $mul.ref($i88, 4));
    $p90 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(7, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i95 := ioread32($p94);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i95);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $i96 := $add.i64($i88, 1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p9, $mul.ref($i96, 4));
    $p98 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p101, $mul.ref(8, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i103 := ioread32($p102);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i103);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $i104 := $add.i64($i96, 1);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p9, $mul.ref($i104, 4));
    $p106 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(9, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i111 := ioread32($p110);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i111);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i112 := $add.i64($i104, 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p9, $mul.ref($i112, 4));
    $p114 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p117, $mul.ref(10, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i119 := ioread32($p118);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i119);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $i120 := $add.i64($i112, 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p9, $mul.ref($i120, 4));
    $p122 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(11, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i127 := ioread32($p126);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i127);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $i128 := $add.i64($i120, 1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p9, $mul.ref($i128, 4));
    $p130 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(12, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i135 := ioread32($p134);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, $i135);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $i136 := $add.i64($i128, 1);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p9, $mul.ref($i136, 4));
    $p138 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p141, $mul.ref(13, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i143 := ioread32($p142);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i143);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $i144 := $add.i64($i136, 1);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p9, $mul.ref($i144, 4));
    $p146 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p149, $mul.ref(14, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i151 := ioread32($p150);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i151);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i152 := $add.i64($i144, 1);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p9, $mul.ref($i152, 4));
    $p154 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p157, $mul.ref(15, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i159 := ioread32($p158);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i159);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $i160 := $add.i64($i152, 1);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p9, $mul.ref($i160, 4));
    $p162 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p165, $mul.ref(16, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i167 := ioread32($p166);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i167);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $i168 := $add.i64($i160, 1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p9, $mul.ref($i168, 4));
    $p170 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(17, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i175 := ioread32($p174);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i175);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $i176 := $add.i64($i168, 1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p9, $mul.ref($i176, 4));
    $p178 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p181, $mul.ref(18, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i183 := ioread32($p182);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p169, $i183);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $i184 := $add.i64($i176, 1);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p9, $mul.ref($i184, 4));
    $p186 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p189, $mul.ref(19, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i191 := ioread32($p190);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, $i191);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $i192 := $add.i64($i184, 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p9, $mul.ref($i192, 4));
    $p194 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p197, $mul.ref(20, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i199 := ioread32($p198);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, $i199);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $i200 := $add.i64($i192, 1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p9, $mul.ref($i200, 4));
    $p202 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p205, $mul.ref(21, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i207 := ioread32($p206);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, $i207);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $i208 := $add.i64($i200, 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p9, $mul.ref($i208, 4));
    $p210 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p211, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p213, $mul.ref(22, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i215 := ioread32($p214);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $i215);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i216 := $add.i64($i208, 1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p9, $mul.ref($i216, 4));
    $p218 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($p221, $mul.ref(23, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i223 := ioread32($p222);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, $i223);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i224 := $add.i64($i216, 1);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p9, $mul.ref($i224, 4));
    $p226 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p229, $mul.ref(24, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i231 := ioread32($p230);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i231);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    $i232 := $add.i64($i224, 1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p9, $mul.ref($i232, 4));
    $p234 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p237, $mul.ref(25, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i239 := ioread32($p238);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p225, $i239);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $i240 := $add.i64($i232, 1);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p9, $mul.ref($i240, 4));
    $p242 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p245, $mul.ref(26, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i247 := ioread32($p246);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i247);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $i248 := $add.i64($i240, 1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p9, $mul.ref($i248, 4));
    $p250 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p252);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p253, $mul.ref(27, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i255 := ioread32($p254);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $i255);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $i256 := $add.i64($i248, 1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($p9, $mul.ref($i256, 4));
    $p258 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p259, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p260);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p261, $mul.ref(28, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i263 := ioread32($p262);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, $i263);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $i264 := $add.i64($i256, 1);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p9, $mul.ref($i264, 4));
    $p266 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p267, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p269, $mul.ref(29, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i271 := ioread32($p270);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p257, $i271);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    $i272 := $add.i64($i264, 1);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p9, $mul.ref($i272, 4));
    $p274 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p275, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p277, $mul.ref(30, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i279 := ioread32($p278);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p265, $i279);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    $i280 := $add.i64($i272, 1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p9, $mul.ref($i280, 4));
    $p282 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p283, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($p285, $mul.ref(31, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i287 := ioread32($p286);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p273, $i287);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $i288 := $add.i64($i280, 1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p9, $mul.ref($i288, 4));
    $p290 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p291, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($p293, $mul.ref(32, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i295 := ioread32($p294);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, $i295);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $i296 := $add.i64($i288, 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p9, $mul.ref($i296, 4));
    $p298 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p299, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p301 := $bitcast.ref.ref($p300);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($p301, $mul.ref(33, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i303 := ioread32($p302);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p289, $i303);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    $i304 := $add.i64($i296, 1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($p9, $mul.ref($i304, 4));
    $p306 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p307, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p308);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($p309, $mul.ref(34, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i311 := ioread32($p310);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p297, $i311);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $i312 := $add.i64($i304, 1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($p9, $mul.ref($i312, 4));
    $p314 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p315, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p316);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p317, $mul.ref(35, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i319 := ioread32($p318);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p305, $i319);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $i320 := $add.i64($i312, 1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($p9, $mul.ref($i320, 4));
    $p322 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p323, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p324);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($p325, $mul.ref(36, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i327 := ioread32($p326);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p313, $i327);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $i328 := $add.i64($i320, 1);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p9, $mul.ref($i328, 4));
    $p330 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p331, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p333 := $bitcast.ref.ref($p332);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($p333, $mul.ref(37, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i335 := ioread32($p334);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p321, $i335);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    $i336 := $add.i64($i328, 1);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($p9, $mul.ref($i336, 4));
    $p338 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p339 := $load.ref($M.0, $p338);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p339, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($p341, $mul.ref(38, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i343 := ioread32($p342);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p329, $i343);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i344 := $add.i64($i336, 1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($p9, $mul.ref($i344, 4));
    $p346 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p347, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p349 := $bitcast.ref.ref($p348);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($p349, $mul.ref(39, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i351 := ioread32($p350);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p337, $i351);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    $i352 := $add.i64($i344, 1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p9, $mul.ref($i352, 4));
    $p354 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p355, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($p357, $mul.ref(40, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i359 := ioread32($p358);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p345, $i359);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    $i360 := $add.i64($i352, 1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($p9, $mul.ref($i360, 4));
    $p362 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p363, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p365 := $bitcast.ref.ref($p364);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($p365, $mul.ref(41, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i367 := ioread32($p366);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p353, $i367);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $i368 := $add.i64($i360, 1);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p9, $mul.ref($i368, 4));
    $p370 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p371 := $load.ref($M.0, $p370);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p371, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p372);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p373, $mul.ref(42, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i375 := ioread32($p374);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p361, $i375);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $i376 := $add.i64($i368, 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($p9, $mul.ref($i376, 4));
    $p378 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.0, $p378);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p379, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p381 := $bitcast.ref.ref($p380);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($p381, $mul.ref(43, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i383 := ioread32($p382);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p369, $i383);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    $i384 := $add.i64($i376, 1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p9, $mul.ref($i384, 4));
    $p386 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p387, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p388);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($p389, $mul.ref(44, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i391 := ioread32($p390);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p377, $i391);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    $i392 := $add.i64($i384, 1);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($p9, $mul.ref($i392, 4));
    $p394 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p395, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($p397, $mul.ref(45, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i399 := ioread32($p398);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p385, $i399);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    $i400 := $add.i64($i392, 1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($p9, $mul.ref($i400, 4));
    $p402 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p403 := $load.ref($M.0, $p402);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p403, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p405, $mul.ref(46, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i407 := ioread32($p406);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p393, $i407);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $i408 := $add.i64($i400, 1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($p9, $mul.ref($i408, 4));
    $p410 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.0, $p410);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p411, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p413 := $bitcast.ref.ref($p412);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($p413, $mul.ref(47, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i415 := ioread32($p414);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p401, $i415);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    $i416 := $add.i64($i408, 1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($p9, $mul.ref($i416, 4));
    $p418 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p419, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p421 := $bitcast.ref.ref($p420);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($p421, $mul.ref(48, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i423 := ioread32($p422);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p409, $i423);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    $i424 := $add.i64($i416, 1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($p9, $mul.ref($i424, 4));
    $p426 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p429 := $bitcast.ref.ref($p428);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($p429, $mul.ref(49, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i431 := ioread32($p430);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p417, $i431);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    $i432 := $add.i64($i424, 1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p9, $mul.ref($i432, 4));
    $p434 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.0, $p434);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p435, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p437 := $bitcast.ref.ref($p436);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($p437, $mul.ref(50, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i439 := ioread32($p438);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p425, $i439);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    $i440 := $add.i64($i432, 1);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($p9, $mul.ref($i440, 4));
    $p442 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p443, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p445 := $bitcast.ref.ref($p444);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($p445, $mul.ref(51, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i447 := ioread32($p446);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p433, $i447);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    $i448 := $add.i64($i440, 1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($p9, $mul.ref($i448, 4));
    $p450 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.0, $p450);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p451, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($p453, $mul.ref(52, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i455 := ioread32($p454);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p441, $i455);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    $i456 := $add.i64($i448, 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($p9, $mul.ref($i456, 4));
    $p458 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p459, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p461 := $bitcast.ref.ref($p460);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($p461, $mul.ref(53, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i463 := ioread32($p462);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p449, $i463);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    $i464 := $add.i64($i456, 1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($p9, $mul.ref($i464, 4));
    $p466 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.0, $p466);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p467, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p469 := $bitcast.ref.ref($p468);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($p469, $mul.ref(54, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i471 := ioread32($p470);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p457, $i471);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    $i472 := $add.i64($i464, 1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($p9, $mul.ref($i472, 4));
    $p474 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p475 := $load.ref($M.0, $p474);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p475, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p477 := $bitcast.ref.ref($p476);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($p477, $mul.ref(55, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i479 := ioread32($p478);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p465, $i479);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $i480 := $add.i64($i472, 1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($p9, $mul.ref($i480, 4));
    $p482 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p483 := $load.ref($M.0, $p482);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p483, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p485 := $bitcast.ref.ref($p484);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($p485, $mul.ref(56, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i487 := ioread32($p486);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p473, $i487);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    $i488 := $add.i64($i480, 1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($p9, $mul.ref($i488, 4));
    $p490 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p491, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p493 := $bitcast.ref.ref($p492);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($p493, $mul.ref(57, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i495 := ioread32($p494);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p481, $i495);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    $i496 := $add.i64($i488, 1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($p9, $mul.ref($i496, 4));
    $p498 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p499 := $load.ref($M.0, $p498);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p499, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p501 := $bitcast.ref.ref($p500);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($p501, $mul.ref(58, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i503 := ioread32($p502);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p489, $i503);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    $i504 := $add.i64($i496, 1);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($p9, $mul.ref($i504, 4));
    $p506 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p507 := $load.ref($M.0, $p506);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p507, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p508);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($p509, $mul.ref(59, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i511 := ioread32($p510);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p497, $i511);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    $i512 := $add.i64($i504, 1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($p9, $mul.ref($i512, 4));
    $p514 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p515 := $load.ref($M.0, $p514);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p515, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p517 := $bitcast.ref.ref($p516);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($p517, $mul.ref(60, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i519 := ioread32($p518);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p505, $i519);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    $i520 := $add.i64($i512, 1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($p9, $mul.ref($i520, 4));
    $p522 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.0, $p522);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p523, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p525 := $bitcast.ref.ref($p524);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($p525, $mul.ref(61, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i527 := ioread32($p526);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p513, $i527);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    $i528 := $add.i64($i520, 1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($p9, $mul.ref($i528, 4));
    $p530 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p531 := $load.ref($M.0, $p530);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p531, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p533 := $bitcast.ref.ref($p532);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($p533, $mul.ref(62, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i535 := ioread32($p534);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p521, $i535);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    $i536 := $add.i64($i528, 1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($p9, $mul.ref($i536, 4));
    $p538 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p539 := $load.ref($M.0, $p538);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p539, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p541 := $bitcast.ref.ref($p540);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($p541, $mul.ref(63, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i543 := ioread32($p542);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p529, $i543);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    $i544 := $add.i64($i536, 1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($p9, $mul.ref($i544, 4));
    $p546 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.0, $p546);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p547, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p549 := $bitcast.ref.ref($p548);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($p549, $mul.ref(64, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i551 := ioread32($p550);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p537, $i551);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    $i552 := $add.i64($i544, 1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($p9, $mul.ref($i552, 4));
    $p554 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p555 := $load.ref($M.0, $p554);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p555, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p557 := $bitcast.ref.ref($p556);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($p557, $mul.ref(65, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i559 := ioread32($p558);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p545, $i559);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    $i560 := $add.i64($i552, 1);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($p9, $mul.ref($i560, 4));
    $p562 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p563, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p565 := $bitcast.ref.ref($p564);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($p565, $mul.ref(66, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i567 := ioread32($p566);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p553, $i567);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $i568 := $add.i64($i560, 1);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($p9, $mul.ref($i568, 4));
    $p570 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p571 := $load.ref($M.0, $p570);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p571, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p573 := $bitcast.ref.ref($p572);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($p573, $mul.ref(67, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i575 := ioread32($p574);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p561, $i575);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    $i576 := $add.i64($i568, 1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($p9, $mul.ref($i576, 4));
    $p578 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p579 := $load.ref($M.0, $p578);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p579, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p581 := $bitcast.ref.ref($p580);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($p581, $mul.ref(68, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i583 := ioread32($p582);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p569, $i583);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    $i584 := $add.i64($i576, 1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($p9, $mul.ref($i584, 4));
    $p586 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p587 := $load.ref($M.0, $p586);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p587, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p589 := $bitcast.ref.ref($p588);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($p589, $mul.ref(69, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i591 := ioread32($p590);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p577, $i591);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    $i592 := $add.i64($i584, 1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($p9, $mul.ref($i592, 4));
    $p594 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p595 := $load.ref($M.0, $p594);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p595, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p597 := $bitcast.ref.ref($p596);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($p597, $mul.ref(70, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i599 := ioread32($p598);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p585, $i599);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $i600 := $add.i64($i592, 1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($p9, $mul.ref($i600, 4));
    $p602 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.0, $p602);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p603, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p604);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($p605, $mul.ref(71, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i607 := ioread32($p606);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p593, $i607);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    $i608 := $add.i64($i600, 1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($p9, $mul.ref($i608, 4));
    $p610 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p611, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p613 := $bitcast.ref.ref($p612);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($p613, $mul.ref(72, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i615 := ioread32($p614);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p601, $i615);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    $i616 := $add.i64($i608, 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($p9, $mul.ref($i616, 4));
    $p618 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p619, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p621 := $bitcast.ref.ref($p620);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($p621, $mul.ref(73, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i623 := ioread32($p622);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p609, $i623);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    $i624 := $add.i64($i616, 1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($p9, $mul.ref($i624, 4));
    $p626 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p627 := $load.ref($M.0, $p626);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p627, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p629 := $bitcast.ref.ref($p628);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($p629, $mul.ref(74, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i631 := ioread32($p630);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p617, $i631);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    $i632 := $add.i64($i624, 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($p9, $mul.ref($i632, 4));
    $p634 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p635 := $load.ref($M.0, $p634);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p635, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p637 := $bitcast.ref.ref($p636);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($p637, $mul.ref(75, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i639 := ioread32($p638);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p625, $i639);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    $i640 := $add.i64($i632, 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($p9, $mul.ref($i640, 4));
    $p642 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p643 := $load.ref($M.0, $p642);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p643, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p645 := $bitcast.ref.ref($p644);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($p645, $mul.ref(76, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i647 := ioread32($p646);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p633, $i647);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    $i648 := $add.i64($i640, 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($p9, $mul.ref($i648, 4));
    $p650 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p651 := $load.ref($M.0, $p650);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p651, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p653 := $bitcast.ref.ref($p652);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($p653, $mul.ref(77, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i655 := ioread32($p654);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p641, $i655);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    $i656 := $add.i64($i648, 1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($p9, $mul.ref($i656, 4));
    $p658 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.0, $p658);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p659, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p661 := $bitcast.ref.ref($p660);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($p661, $mul.ref(78, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i663 := ioread32($p662);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p649, $i663);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    $i664 := $add.i64($i656, 1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($p9, $mul.ref($i664, 4));
    $p666 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.0, $p666);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p667, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p669 := $bitcast.ref.ref($p668);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($p669, $mul.ref(79, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i671 := ioread32($p670);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p657, $i671);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    $i672 := $add.i64($i664, 1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($p9, $mul.ref($i672, 4));
    $p674 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p675 := $load.ref($M.0, $p674);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p675, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p677 := $bitcast.ref.ref($p676);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($p677, $mul.ref(80, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i679 := ioread32($p678);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p665, $i679);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    $i680 := $add.i64($i672, 1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($p9, $mul.ref($i680, 4));
    $p682 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p683 := $load.ref($M.0, $p682);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p683, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p685 := $bitcast.ref.ref($p684);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($p685, $mul.ref(81, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i687 := ioread32($p686);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p673, $i687);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    $i688 := $add.i64($i680, 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($p9, $mul.ref($i688, 4));
    $p690 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p691 := $load.ref($M.0, $p690);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p691, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p693 := $bitcast.ref.ref($p692);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($p693, $mul.ref(82, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i695 := ioread32($p694);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p681, $i695);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    $i696 := $add.i64($i688, 1);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($p9, $mul.ref($i696, 4));
    $p698 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.0, $p698);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p699, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p701 := $bitcast.ref.ref($p700);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($p701, $mul.ref(83, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i703 := ioread32($p702);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p689, $i703);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    $i704 := $add.i64($i696, 1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($p9, $mul.ref($i704, 4));
    $p706 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p707 := $load.ref($M.0, $p706);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p707, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p709 := $bitcast.ref.ref($p708);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($p709, $mul.ref(84, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i711 := ioread32($p710);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p697, $i711);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    $i712 := $add.i64($i704, 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($p9, $mul.ref($i712, 4));
    $p714 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p715 := $load.ref($M.0, $p714);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p715, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p717 := $bitcast.ref.ref($p716);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($p717, $mul.ref(85, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i719 := ioread32($p718);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p705, $i719);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    $i720 := $add.i64($i712, 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($p9, $mul.ref($i720, 4));
    $p722 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p723 := $load.ref($M.0, $p722);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p723, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p725 := $bitcast.ref.ref($p724);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($p725, $mul.ref(86, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i727 := ioread32($p726);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p713, $i727);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    $i728 := $add.i64($i720, 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($p9, $mul.ref($i728, 4));
    $p730 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p731 := $load.ref($M.0, $p730);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p731, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p733 := $bitcast.ref.ref($p732);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($p733, $mul.ref(87, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i735 := ioread32($p734);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p721, $i735);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    $i736 := $add.i64($i728, 1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($p9, $mul.ref($i736, 4));
    $p738 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p739 := $load.ref($M.0, $p738);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p739, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p741 := $bitcast.ref.ref($p740);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($p741, $mul.ref(88, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i743 := ioread32($p742);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p729, $i743);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    $i744 := $add.i64($i736, 1);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($p9, $mul.ref($i744, 4));
    $p746 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p747 := $load.ref($M.0, $p746);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($p747, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p749 := $bitcast.ref.ref($p748);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($p749, $mul.ref(89, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i751 := ioread32($p750);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p737, $i751);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    $i752 := $add.i64($i744, 1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p9, $mul.ref($i752, 4));
    $p753 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p754 := $load.ref($M.0, $p753);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p754, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p756 := $bitcast.ref.ref($p755);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($p756, $mul.ref(90, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i758 := ioread32($p757);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p745, $i758);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26, $p27 := 0, $p28;
    goto $bb5;

  $bb5:
    call $p29, $i30, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i26, $p27, vslice_dummy_var_206 := pch_gbe_get_regs_loop_$bb5($p3, $p5, $p29, $i30, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i26, $p27, vslice_dummy_var_206);
    goto $bb5_last;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i26);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_206 := pch_gbe_hal_read_phy_reg($p29, $i30, $p3);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p27, $mul.ref(1, 4));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p3);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i34);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i26);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    call {:si_unique_call 39} {:cexpr "i"} boogie_si_record_i16($i37);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i39 := $ule.i32($i38, 31);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i26, $p27 := $i37, $p32;
    goto $bb7_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_151;
}



const pch_gbe_get_wol: ref;

axiom pch_gbe_get_wol == $sub.ref(0, 352950);

procedure pch_gbe_get_wol($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p2 := netdev_priv($p0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 46);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 4);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 32);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 8);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 4);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_set_wol: ref;

axiom pch_gbe_set_wol == $sub.ref(0, 353982);

procedure pch_gbe_set_wol($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_set_wol($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p2 := netdev_priv($p0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 81);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 4);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 8);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 32);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 8);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 4);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;
}



const pch_gbe_nway_reset: ref;

axiom pch_gbe_nway_reset == $sub.ref(0, 355014);

procedure pch_gbe_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_gbe_nway_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p1 := netdev_priv($p0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i4 := mii_nway_restart($p3);
    call {:si_unique_call 133} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 356046);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_gbe_get_ringparam: ref;

axiom pch_gbe_get_ringparam == $sub.ref(0, 357078);

procedure pch_gbe_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p2 := netdev_priv($p0);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 4096);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 4096);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_set_ringparam: ref;

axiom pch_gbe_set_ringparam == $sub.ref(0, 358110);

procedure pch_gbe_set_ringparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_set_ringparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i8;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i71: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i31: i32;
  var $p87: ref;
  var $i25: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i1;
  var $i91: i8;
  var $i92: i1;
  var $i10: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p2 := netdev_priv($p0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i13 := netif_running($p12);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 139} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64(112);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p21 := kzalloc($i20, 208);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64(64);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p27 := kzalloc($i26, 208);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p21);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p27);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 146} {:cexpr "__val"} boogie_si_record_i32($i35);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32(8, $i35);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i38 := $ult.i32(4096, $i37);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 8);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $sub.i32(0, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i45 := $udiv.i32($i44, 8);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 8);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 147} {:cexpr "__val___0"} boogie_si_record_i32($i49);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32(8, $i49);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i52 := $ult.i32(4096, $i51);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 8);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $sub.i32(0, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i59 := $udiv.i32($i58, 8);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 8);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i64 := netif_running($p63);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i64);
    call {:si_unique_call 149} {:cexpr "tmp___3"} boogie_si_record_i8($i65);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i10 := $i81;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i69 := pch_gbe_setup_rx_resources($p3, $p68);
    call {:si_unique_call 151} {:cexpr "err"} boogie_si_record_i32($i69);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i74 := pch_gbe_setup_tx_resources($p3, $p73);
    call {:si_unique_call 154} {:cexpr "err"} boogie_si_record_i32($i74);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} pch_gbe_free_rx_resources($p3, $p19);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} pch_gbe_free_tx_resources($p3, $p17);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p17);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} kfree($p76);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p19);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} kfree($p77);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p27);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p21);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i80 := pch_gbe_up($p3);
    call {:si_unique_call 161} {:cexpr "err"} boogie_si_record_i32($i80);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb41;

  $bb37:
    assume $i75 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} pch_gbe_free_rx_resources($p3, $p83);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i71 := $i74;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p19);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p17);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p28);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} kfree($p86);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i31 := $i71;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p22);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} kfree($p87);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i25 := $i31;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i90 := netif_running($p89);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i8($i90);
    call {:si_unique_call 143} {:cexpr "tmp___4"} boogie_si_record_i8($i91);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i8.i1($i91);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb6;

  $bb42:
    assume $i92 == 1;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_207 := pch_gbe_up($p3);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb33:
    assume $i70 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i71 := $i69;
    goto $bb35;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i53 := 4096;
    goto $bb30;

  $bb25:
    assume $i50 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i51 := 8;
    goto $bb27;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i39 := 4096;
    goto $bb24;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i37 := 8;
    goto $bb21;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb17;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} pch_gbe_down($p3);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pch_gbe_get_pauseparam: ref;

axiom pch_gbe_get_pauseparam == $sub.ref(0, 359142);

procedure pch_gbe_get_pauseparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_pauseparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p2 := netdev_priv($p0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    $p19 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    $p25 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_set_pauseparam: ref;

axiom pch_gbe_set_pauseparam == $sub.ref(0, 360174);

procedure pch_gbe_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i55: i32;
  var $i54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p2 := netdev_priv($p0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i7);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p43 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i55 := pch_gbe_mac_force_mac_fc($p4);
    call {:si_unique_call 168} {:cexpr "ret"} boogie_si_record_i32($i55);
    assume {:verifier.code 0} true;
    $i54 := $i55;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i49 := netif_running($p48);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 166} {:cexpr "tmp___0"} boogie_si_record_i8($i50);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} pch_gbe_reset($p3);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb30;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} pch_gbe_down($p3);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i52 := pch_gbe_up($p3);
    call {:si_unique_call 171} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb29;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb21;

  $bb22:
    assume $i39 == 1;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb16:
    assume $i31 == 1;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 2);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb10:
    assume $i23 == 1;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 3);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pch_gbe_get_strings: ref;

axiom pch_gbe_get_strings == $sub.ref(0, 361206);

procedure pch_gbe_get_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;
  var cmdloc_dummy_var_144: [ref]i8;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;
  var cmdloc_dummy_var_149: [ref]i8;

  $bb0:
    call {:si_unique_call 173} {:cexpr "pch_gbe_get_strings:arg:stringset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 175} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p2, pch_gbe_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb13, $bb14;

  $bb14:
    assume !(0 == 1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 177} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p4, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i5 := $add.i64(32, 32);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb17, $bb18;

  $bb18:
    assume !(0 == 1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 179} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p6, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $i7 := $add.i64($i5, 32);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref($i7, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb21, $bb22;

  $bb22:
    assume !(0 == 1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 181} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p8, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i9 := $add.i64($i7, 32);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb25, $bb26;

  $bb26:
    assume !(0 == 1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 183} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p10, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $i11 := $add.i64($i9, 32);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref($i11, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb29, $bb30;

  $bb30:
    assume !(0 == 1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 185} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p12, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i13 := $add.i64($i11, 32);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref($i13, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb33, $bb34;

  $bb34:
    assume !(0 == 1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 187} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p14, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $i15 := $add.i64($i13, 32);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref($i15, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb37, $bb38;

  $bb38:
    assume !(0 == 1);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 189} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p16, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    $i17 := $add.i64($i15, 32);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p2, $mul.ref($i17, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb41, $bb42;

  $bb42:
    assume !(0 == 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 191} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p18, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $i19 := $add.i64($i17, 32);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref($i19, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb45, $bb46;

  $bb46:
    assume !(0 == 1);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 193} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p20, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i21 := $add.i64($i19, 32);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p2, $mul.ref($i21, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(0 == 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 195} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p22, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $i23 := $add.i64($i21, 32);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p2, $mul.ref($i23, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb53, $bb54;

  $bb54:
    assume !(0 == 1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 197} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p24, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $i25 := $add.i64($i23, 32);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p2, $mul.ref($i25, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    cmdloc_dummy_var_76 := $M.0;
    call {:si_unique_call 199} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, $p26, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_77;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    $i27 := $add.i64($i25, 32);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref($i27, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(0 == 1);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    cmdloc_dummy_var_82 := $M.0;
    call {:si_unique_call 201} cmdloc_dummy_var_83 := $memcpy.i8(cmdloc_dummy_var_81, cmdloc_dummy_var_82, $p28, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_83;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    $i29 := $add.i64($i27, 32);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref($i29, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb65, $bb66;

  $bb66:
    assume !(0 == 1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_87 := $M.0;
    cmdloc_dummy_var_88 := $M.0;
    call {:si_unique_call 203} cmdloc_dummy_var_89 := $memcpy.i8(cmdloc_dummy_var_87, cmdloc_dummy_var_88, $p30, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_89;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    $i31 := $add.i64($i29, 32);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p2, $mul.ref($i31, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb69, $bb70;

  $bb70:
    assume !(0 == 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_93 := $M.0;
    cmdloc_dummy_var_94 := $M.0;
    call {:si_unique_call 205} cmdloc_dummy_var_95 := $memcpy.i8(cmdloc_dummy_var_93, cmdloc_dummy_var_94, $p32, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_95;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    $i33 := $add.i64($i31, 32);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref($i33, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb73, $bb74;

  $bb74:
    assume !(0 == 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_99 := $M.0;
    cmdloc_dummy_var_100 := $M.0;
    call {:si_unique_call 207} cmdloc_dummy_var_101 := $memcpy.i8(cmdloc_dummy_var_99, cmdloc_dummy_var_100, $p34, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_101;
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $i35 := $add.i64($i33, 32);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref($i35, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb77, $bb78;

  $bb78:
    assume !(0 == 1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_105 := $M.0;
    cmdloc_dummy_var_106 := $M.0;
    call {:si_unique_call 209} cmdloc_dummy_var_107 := $memcpy.i8(cmdloc_dummy_var_105, cmdloc_dummy_var_106, $p36, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_107;
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $i37 := $add.i64($i35, 32);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p2, $mul.ref($i37, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb81, $bb82;

  $bb82:
    assume !(0 == 1);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_111 := $M.0;
    cmdloc_dummy_var_112 := $M.0;
    call {:si_unique_call 211} cmdloc_dummy_var_113 := $memcpy.i8(cmdloc_dummy_var_111, cmdloc_dummy_var_112, $p38, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_113;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    $i39 := $add.i64($i37, 32);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p2, $mul.ref($i39, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(0 == 1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_117 := $M.0;
    cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 213} cmdloc_dummy_var_119 := $memcpy.i8(cmdloc_dummy_var_117, cmdloc_dummy_var_118, $p40, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_119;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    $i41 := $add.i64($i39, 32);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p2, $mul.ref($i41, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb89, $bb90;

  $bb90:
    assume !(0 == 1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_123 := $M.0;
    cmdloc_dummy_var_124 := $M.0;
    call {:si_unique_call 215} cmdloc_dummy_var_125 := $memcpy.i8(cmdloc_dummy_var_123, cmdloc_dummy_var_124, $p42, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_125;
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    $i43 := $add.i64($i41, 32);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p2, $mul.ref($i43, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb93, $bb94;

  $bb94:
    assume !(0 == 1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_129 := $M.0;
    cmdloc_dummy_var_130 := $M.0;
    call {:si_unique_call 217} cmdloc_dummy_var_131 := $memcpy.i8(cmdloc_dummy_var_129, cmdloc_dummy_var_130, $p44, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_131;
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    $i45 := $add.i64($i43, 32);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p2, $mul.ref($i45, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb97, $bb98;

  $bb98:
    assume !(0 == 1);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_135 := $M.0;
    cmdloc_dummy_var_136 := $M.0;
    call {:si_unique_call 219} cmdloc_dummy_var_137 := $memcpy.i8(cmdloc_dummy_var_135, cmdloc_dummy_var_136, $p46, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_137;
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    $i47 := $add.i64($i45, 32);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p2, $mul.ref($i47, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb101, $bb102;

  $bb102:
    assume !(0 == 1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_141 := $M.0;
    cmdloc_dummy_var_142 := $M.0;
    call {:si_unique_call 221} cmdloc_dummy_var_143 := $memcpy.i8(cmdloc_dummy_var_141, cmdloc_dummy_var_142, $p48, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_143;
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    $i49 := $add.i64($i47, 32);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p2, $mul.ref($i49, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb105, $bb106;

  $bb106:
    assume !(0 == 1);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_147 := $M.0;
    cmdloc_dummy_var_148 := $M.0;
    call {:si_unique_call 223} cmdloc_dummy_var_149 := $memcpy.i8(cmdloc_dummy_var_147, cmdloc_dummy_var_148, $p50, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_149;
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb105:
    assume 0 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_144 := $M.0;
    cmdloc_dummy_var_145 := $M.0;
    call {:si_unique_call 222} cmdloc_dummy_var_146 := $memcpy.i8(cmdloc_dummy_var_144, cmdloc_dummy_var_145, $p50, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_146;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb101:
    assume 0 == 1;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_138 := $M.0;
    cmdloc_dummy_var_139 := $M.0;
    call {:si_unique_call 220} cmdloc_dummy_var_140 := $memcpy.i8(cmdloc_dummy_var_138, cmdloc_dummy_var_139, $p48, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_140;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb97:
    assume 0 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_132 := $M.0;
    cmdloc_dummy_var_133 := $M.0;
    call {:si_unique_call 218} cmdloc_dummy_var_134 := $memcpy.i8(cmdloc_dummy_var_132, cmdloc_dummy_var_133, $p46, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_134;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb93:
    assume 0 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_126 := $M.0;
    cmdloc_dummy_var_127 := $M.0;
    call {:si_unique_call 216} cmdloc_dummy_var_128 := $memcpy.i8(cmdloc_dummy_var_126, cmdloc_dummy_var_127, $p44, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_128;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb89:
    assume 0 == 1;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_120 := $M.0;
    cmdloc_dummy_var_121 := $M.0;
    call {:si_unique_call 214} cmdloc_dummy_var_122 := $memcpy.i8(cmdloc_dummy_var_120, cmdloc_dummy_var_121, $p42, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_122;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb85:
    assume 0 == 1;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_114 := $M.0;
    cmdloc_dummy_var_115 := $M.0;
    call {:si_unique_call 212} cmdloc_dummy_var_116 := $memcpy.i8(cmdloc_dummy_var_114, cmdloc_dummy_var_115, $p40, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_116;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb81:
    assume 0 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_108 := $M.0;
    cmdloc_dummy_var_109 := $M.0;
    call {:si_unique_call 210} cmdloc_dummy_var_110 := $memcpy.i8(cmdloc_dummy_var_108, cmdloc_dummy_var_109, $p38, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_110;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume 0 == 1;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_102 := $M.0;
    cmdloc_dummy_var_103 := $M.0;
    call {:si_unique_call 208} cmdloc_dummy_var_104 := $memcpy.i8(cmdloc_dummy_var_102, cmdloc_dummy_var_103, $p36, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_104;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume 0 == 1;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_96 := $M.0;
    cmdloc_dummy_var_97 := $M.0;
    call {:si_unique_call 206} cmdloc_dummy_var_98 := $memcpy.i8(cmdloc_dummy_var_96, cmdloc_dummy_var_97, $p34, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_98;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb69:
    assume 0 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_90 := $M.0;
    cmdloc_dummy_var_91 := $M.0;
    call {:si_unique_call 204} cmdloc_dummy_var_92 := $memcpy.i8(cmdloc_dummy_var_90, cmdloc_dummy_var_91, $p32, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_92;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb65:
    assume 0 == 1;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_84 := $M.0;
    cmdloc_dummy_var_85 := $M.0;
    call {:si_unique_call 202} cmdloc_dummy_var_86 := $memcpy.i8(cmdloc_dummy_var_84, cmdloc_dummy_var_85, $p30, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_86;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb61:
    assume 0 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.0;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 200} cmdloc_dummy_var_80 := $memcpy.i8(cmdloc_dummy_var_78, cmdloc_dummy_var_79, $p28, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 198} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p26, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume 0 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 196} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p24, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume 0 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 194} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p22, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume 0 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 192} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p20, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb41:
    assume 0 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 190} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p18, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume 0 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 188} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p16, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume 0 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 186} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p14, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume 0 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 184} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p12, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume 0 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 182} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p10, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume 0 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 180} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p8, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume 0 == 1;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 178} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p6, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume 0 == 1;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 176} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p4, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 174} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p2, pch_gbe_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const pch_gbe_get_ethtool_stats: ref;

axiom pch_gbe_get_ethtool_stats == $sub.ref(0, 362238);

procedure pch_gbe_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i9: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i17: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i33: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $i43: i64;
  var $i41: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $i49: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $i59: i64;
  var $i57: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $i67: i64;
  var $i65: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $i75: i64;
  var $i73: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p82: ref;
  var $i83: i64;
  var $i81: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p90: ref;
  var $i91: i64;
  var $i89: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p98: ref;
  var $i99: i64;
  var $i97: i64;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $p106: ref;
  var $i107: i64;
  var $i105: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $p114: ref;
  var $i115: i64;
  var $i113: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $p122: ref;
  var $i123: i64;
  var $i121: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $p130: ref;
  var $i131: i64;
  var $i129: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $p138: ref;
  var $i139: i64;
  var $i137: i64;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $p146: ref;
  var $i147: i64;
  var $i145: i64;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $p154: ref;
  var $i155: i64;
  var $i153: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i64;
  var $p162: ref;
  var $i163: i64;
  var $i161: i64;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i64;
  var $p170: ref;
  var $i171: i64;
  var $i169: i64;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i64;
  var $p178: ref;
  var $i179: i64;
  var $i177: i64;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $i187: i64;
  var $i185: i64;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i64;
  var $p194: ref;
  var $i195: i64;
  var $i193: i64;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i64;
  var $p202: ref;
  var $i203: i64;
  var $i201: i64;
  var $p204: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p3 := netdev_priv($p0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(512, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} pch_gbe_update_stats($p4);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p6);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i9);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p6, $mul.ref(4, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(0 == 1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i17);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p6, $mul.ref(8, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb12, $bb13;

  $bb13:
    assume !(0 == 1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i25);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p6, $mul.ref(12, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(0 == 1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i33);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p6, $mul.ref(16, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(0 == 1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i41);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p6, $mul.ref(20, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb24, $bb25;

  $bb25:
    assume !(0 == 1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p2, $mul.ref(5, 8));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i49);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p6, $mul.ref(24, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb28, $bb29;

  $bb29:
    assume !(0 == 1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p2, $mul.ref(6, 8));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i57);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p6, $mul.ref(28, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(0 == 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p2, $mul.ref(7, 8));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, $i65);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p6, $mul.ref(32, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb36, $bb37;

  $bb37:
    assume !(0 == 1);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p2, $mul.ref(8, 8));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i73);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p6, $mul.ref(36, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(0 == 1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p2, $mul.ref(9, 8));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i81);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p6, $mul.ref(40, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb44, $bb45;

  $bb45:
    assume !(0 == 1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p2, $mul.ref(10, 8));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i89);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p6, $mul.ref(44, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb48, $bb49;

  $bb49:
    assume !(0 == 1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p2, $mul.ref(11, 8));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p100, $i97);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p6, $mul.ref(48, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb52, $bb53;

  $bb53:
    assume !(0 == 1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p2, $mul.ref(12, 8));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p108, $i105);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p6, $mul.ref(52, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb56, $bb57;

  $bb57:
    assume !(0 == 1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i111);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p2, $mul.ref(13, 8));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p116, $i113);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p6, $mul.ref(56, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb60, $bb61;

  $bb61:
    assume !(0 == 1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i120 := $zext.i32.i64($i119);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i121 := $i120;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p2, $mul.ref(14, 8));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p124, $i121);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p6, $mul.ref(60, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb64, $bb65;

  $bb65:
    assume !(0 == 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i127);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p2, $mul.ref(15, 8));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p132, $i129);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p6, $mul.ref(64, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb68, $bb69;

  $bb69:
    assume !(0 == 1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i137 := $i136;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p2, $mul.ref(16, 8));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p140, $i137);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p6, $mul.ref(68, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb72, $bb73;

  $bb73:
    assume !(0 == 1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i144 := $zext.i32.i64($i143);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i145 := $i144;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p2, $mul.ref(17, 8));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p148, $i145);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p6, $mul.ref(72, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb76, $bb77;

  $bb77:
    assume !(0 == 1);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i152 := $zext.i32.i64($i151);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i153 := $i152;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p2, $mul.ref(18, 8));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p156, $i153);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p6, $mul.ref(76, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb80, $bb81;

  $bb81:
    assume !(0 == 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i160 := $zext.i32.i64($i159);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i161 := $i160;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p2, $mul.ref(19, 8));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p164, $i161);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p6, $mul.ref(80, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb84, $bb85;

  $bb85:
    assume !(0 == 1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i168 := $zext.i32.i64($i167);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i169 := $i168;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p2, $mul.ref(20, 8));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p172, $i169);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p6, $mul.ref(84, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb88, $bb89;

  $bb89:
    assume !(0 == 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i176 := $zext.i32.i64($i175);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i177 := $i176;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p2, $mul.ref(21, 8));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p180, $i177);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p6, $mul.ref(88, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb92, $bb93;

  $bb93:
    assume !(0 == 1);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i184 := $zext.i32.i64($i183);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i185 := $i184;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p2, $mul.ref(22, 8));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p188, $i185);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p6, $mul.ref(92, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb96, $bb97;

  $bb97:
    assume !(0 == 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i192 := $zext.i32.i64($i191);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i193 := $i192;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p2, $mul.ref(23, 8));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p196, $i193);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p6, $mul.ref(96, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb100, $bb101;

  $bb101:
    assume !(0 == 1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i200 := $zext.i32.i64($i199);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i201 := $i200;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p2, $mul.ref(24, 8));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p204, $i201);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb100:
    assume 0 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p197);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.0, $p202);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i201 := $i203;
    goto $bb102;

  $bb96:
    assume 0 == 1;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p189);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.0, $p194);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i193 := $i195;
    goto $bb98;

  $bb92:
    assume 0 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p181);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i187 := $load.i64($M.0, $p186);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i185 := $i187;
    goto $bb94;

  $bb88:
    assume 0 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p173);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i179 := $load.i64($M.0, $p178);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i177 := $i179;
    goto $bb90;

  $bb84:
    assume 0 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p165);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.0, $p170);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i169 := $i171;
    goto $bb86;

  $bb80:
    assume 0 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p157);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.0, $p162);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i161 := $i163;
    goto $bb82;

  $bb76:
    assume 0 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p149);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i153 := $i155;
    goto $bb78;

  $bb72:
    assume 0 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p141);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i145 := $i147;
    goto $bb74;

  $bb68:
    assume 0 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p133);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i137 := $i139;
    goto $bb70;

  $bb64:
    assume 0 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p125);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, $p130);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i129 := $i131;
    goto $bb66;

  $bb60:
    assume 0 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p117);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i121 := $i123;
    goto $bb62;

  $bb56:
    assume 0 == 1;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p109);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i113 := $i115;
    goto $bb58;

  $bb52:
    assume 0 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p101);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i105 := $i107;
    goto $bb54;

  $bb48:
    assume 0 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p93);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i97 := $i99;
    goto $bb50;

  $bb44:
    assume 0 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p85);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i89 := $i91;
    goto $bb46;

  $bb40:
    assume 0 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p77);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i81 := $i83;
    goto $bb42;

  $bb36:
    assume 0 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p69);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i73 := $i75;
    goto $bb38;

  $bb32:
    assume 0 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p61);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i65 := $i67;
    goto $bb34;

  $bb28:
    assume 0 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p53);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i57 := $i59;
    goto $bb30;

  $bb24:
    assume 0 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p45);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb26;

  $bb20:
    assume 0 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p37);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i41 := $i43;
    goto $bb22;

  $bb16:
    assume 0 == 1;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p29);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i33 := $i35;
    goto $bb18;

  $bb12:
    assume 0 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p21);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb14;

  $bb8:
    assume 0 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p13);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb10;

  $bb3:
    assume 0 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb5;
}



const pch_gbe_get_sset_count: ref;

axiom pch_gbe_get_sset_count == $sub.ref(0, 363270);

procedure pch_gbe_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_gbe_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;

  $bb0:
    call {:si_unique_call 226} {:cexpr "pch_gbe_get_sset_count:arg:sset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 95);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i3 := 25;
    goto $bb4;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 364302);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_gbe_update_stats: ref;

axiom pch_gbe_update_stats == $sub.ref(0, 365334);

procedure pch_gbe_update_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_update_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p102: ref;
  var $p103: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(144, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p13 := spinlock_check($p12);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 229} {:cexpr "flags"} boogie_si_record_i64($i14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(40, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(44, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i16, $i18);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(16, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(52, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(56, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i22, $i24);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(60, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i25, $i27);
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(64, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i28, $i30);
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(20, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(0, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i35);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(8, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i40);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(24, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i45);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(4, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i50);
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(12, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i55);
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(28, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i60);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(32, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(64, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i65);
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(36, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i70);
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(16, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(32, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i75);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(40, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(96, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p82, $i80);
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(44, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p87, $i85);
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(20, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i90);
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(56, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(128, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i95);
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(60, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p102, $i100);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock_irqrestore($p103, $i14);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(144, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 366366);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 367398);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 368430);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 369462);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 370494);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const netif_running: ref;

axiom netif_running == $sub.ref(0, 371526);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 237} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_gbe_down: ref;

axiom pch_gbe_down == $sub.ref(0, 372558);

procedure pch_gbe_down($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17, $M.19, $M.21, $M.41, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_down($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(176, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} napi_disable($p7);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(144, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} atomic_set($p8, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} pch_gbe_irq_disable($p0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} pch_gbe_free_irq($p0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(744, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} vslice_dummy_var_208 := ldv_del_timer_sync_78($p9);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(920, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(944, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} netif_carrier_off($p2);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} netif_stop_queue($p2);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(144, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} pch_gbe_clean_tx_ring($p0, $p21);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} pch_gbe_clean_rx_ring($p0, $p23);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} pci_free_consistent($p25, $i28, $p30, $i32);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(144, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} pch_gbe_reset($p0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pch_gbe_up: ref;

axiom pch_gbe_up == $sub.ref(0, 373590);

procedure pch_gbe_up($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24, $M.41;



implementation pch_gbe_up($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i17: i32;
  var $i39: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i11 := is_valid_ether_addr($p10);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 250} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} pch_gbe_set_multi($p2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} pch_gbe_setup_tctl($p0);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} pch_gbe_configure_tx($p0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} pch_gbe_setup_rctl($p0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} pch_gbe_configure_rx($p0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i18 := pch_gbe_request_irq($p0);
    call {:si_unique_call 258} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i23 := pch_gbe_alloc_rx_buffers_pool($p0, $p6, $i22);
    call {:si_unique_call 261} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} pch_gbe_alloc_tx_buffers($p0, $p4);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} pch_gbe_alloc_rx_buffers($p0, $p6, $i27);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(944, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(920, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} pch_gbe_enable_dma_rx($p31);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} pch_gbe_enable_mac_rx($p32);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(744, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, jiffies);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_212 := ldv_mod_timer_77($p33, $i34);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(176, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} napi_enable($p36);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} pch_gbe_irq_enable($p0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} netif_start_queue($p38);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_211 := netdev_err.ref.ref($p2, .str.40);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} pch_gbe_free_irq($p0);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i39 := $i17;
    goto $bb15;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_210 := netdev_err.ref.ref($p2, .str.39);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb6;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_209 := netdev_err.ref.ref($p2, .str.38);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const pch_gbe_reset: ref;

axiom pch_gbe_reset == $sub.ref(0, 374622);

procedure pch_gbe_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation pch_gbe_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} pch_gbe_mac_reset_hw($p3);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} pch_gbe_set_multi($p2);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} pch_gbe_mac_init_rx_addrs($p4, 16);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i6 := pch_gbe_hal_init_hw($p5);
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_213 := netdev_err.ref.ref($p2, .str.32);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_mac_force_mac_fc: ref;

axiom pch_gbe_mac_force_mac_fc == $sub.ref(0, 375654);

procedure pch_gbe_mac_force_mac_fc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_mac_force_mac_fc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i43: i32;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i53: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.23);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.21);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.24);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 555);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 364)), $mul.ref(36, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i32 := ioread32($p31);
    call {:si_unique_call 284} {:cexpr "rx_fctrl"} boogie_si_record_i32($i32);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_215 := netdev_err.ref.ref($p51, .str.25);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i32, $sub.i32(0, 2147483648));
    call {:si_unique_call 286} {:cexpr "rx_fctrl"} boogie_si_record_i32($i48);
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i43;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 364)), $mul.ref(36, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} iowrite32($i59, $p63);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p64, .str);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p65, .str.23);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p66, .str.21);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str.26);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.5, $p69);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 586);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p69, $i72);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p73, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.6, $p74);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 293} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb18;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 364)), $mul.ref(36, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i84 := ioread32($p83);
    call {:si_unique_call 295} {:cexpr "tmp___0"} boogie_si_record_i32($i84);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_216 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p2, $p86, .str.26, $i84, $i89);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i43, 2147483647);
    call {:si_unique_call 290} {:cexpr "rx_fctrl"} boogie_si_record_i32($i58);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb21;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i32, 2147483647);
    call {:si_unique_call 285} {:cexpr "rx_fctrl"} boogie_si_record_i32($i46);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i43 := $i46;
    goto $bb16;

  $bb5:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i32, $sub.i32(0, 2147483648));
    call {:si_unique_call 287} {:cexpr "rx_fctrl"} boogie_si_record_i32($i44);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb16;

  $bb12:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb11;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i32, 2147483647);
    call {:si_unique_call 288} {:cexpr "rx_fctrl"} boogie_si_record_i32($i41);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb16;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_214 := __dynamic_netdev_dbg.ref.ref.ref.i32($p1, $p23, .str.24, $i26);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 376686);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 298} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 377718);

procedure __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 300} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 301} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 302} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32);



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 303} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 305} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 306} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 307} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 308} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 314} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 317} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i64.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i64.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 325} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 326} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i64, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i64, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 1} true;
    call {:si_unique_call 327} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 378750);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 379782);

procedure netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 380814);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_mac_reset_hw: ref;

axiom pch_gbe_mac_reset_hw == $sub.ref(0, 381846);

procedure pch_gbe_mac_reset_hw($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_reset_hw($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_217: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_217 := pch_gbe_mac_read_mac_addr($p0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364)), $mul.ref(12, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} iowrite32($sub.i32(0, 2147483648), $p5);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 364)), $mul.ref(8, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} iowrite32($sub.i32(0, 2147483648), $p9);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 364)), $mul.ref(12, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} pch_gbe_wait_clr_bit($p13, $sub.i32(0, 2147483648));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} pch_gbe_mac_mar_set($p0, $p16, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_set_multi: ref;

axiom pch_gbe_set_multi == $sub.ref(0, 382878);

procedure pch_gbe_set_multi($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_set_multi($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i51: i32;
  var $i50: i32;
  var $i46: i32;
  var $i39: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i76: i1;
  var $i77: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i86: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i74: i32;
  var $p75: ref;
  var $i100: i32;
  var $i73: i32;
  var $i78: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i24;
  var $i108: i24;
  var $i109: i24;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var cmdloc_dummy_var_150: [ref]i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;
  var cmdloc_dummy_var_153: [ref]i8;
  var cmdloc_dummy_var_154: [ref]i8;
  var cmdloc_dummy_var_155: [ref]i8;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p3 := netdev_priv($p0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.141);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.21);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.142);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 2269);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 345} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 364)), $mul.ref(44, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i29 := ioread32($p28);
    call {:si_unique_call 348} {:cexpr "rctl"} boogie_si_record_i32($i29);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 349} {:cexpr "mc_count"} boogie_si_record_i32($i32);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 256);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 512);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i32, 15);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i29, $sub.i32(0, 1073741824));
    call {:si_unique_call 357} {:cexpr "rctl"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    $i50 := $i51;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i50;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i46;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 364)), $mul.ref(44, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} iowrite32($i39, $p55);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i32, 15);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i57 := $mul.i32($i32, 6);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p59 := kmalloc($i58, 32);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i68, $i71);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i73 := 0;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i78 := $i73;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} pch_gbe_mac_mc_addr_list_update($p5, $p59, $i78, 1, 16);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} kfree($p59);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, .str);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p102, .str.141);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p103, .str.21);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p104, .str.143);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i107 := $load.i24($M.5, $p106);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i108 := $and.i24($i107, $sub.i24(0, 262144));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i109 := $or.i24($i108, 2311);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p106, $i109);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p110, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.6, $p111);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i64($i112);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i114 := $and.i64($i113, 1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 362} {:cexpr "tmp___5"} boogie_si_record_i64($i115);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i116 == 1;
    $p117 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 364)), $mul.ref(44, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i121 := ioread32($p120);
    call {:si_unique_call 368} {:cexpr "tmp___4"} boogie_si_record_i32($i121);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_219 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p2, $p0, .str.143, $i121, $i32);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i74, $p75 := 0, $p65;
    goto $bb23;

  $bb23:
    call $i76, $i77, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $i87, $i88, $i89, $p90, $p91, $p92, $i86, $p94, $p95, $p96, $p97, $i98, $i99, $i74, $p75, $i100, cmdloc_dummy_var_150, cmdloc_dummy_var_151, cmdloc_dummy_var_152, cmdloc_dummy_var_153, cmdloc_dummy_var_154, cmdloc_dummy_var_155 := pch_gbe_set_multi_loop_$bb23($i32, $p59, $i71, $i76, $i77, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $i87, $i88, $i89, $p90, $p91, $p92, $i86, $p94, $p95, $p96, $p97, $i98, $i99, $i74, $p75, $i100, cmdloc_dummy_var_150, cmdloc_dummy_var_151, cmdloc_dummy_var_152, cmdloc_dummy_var_153, cmdloc_dummy_var_154, cmdloc_dummy_var_155);
    goto $bb23_last;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i74, $i32);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i77 := $i74;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i79 := $ugt.i64(6, 63);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i74, 1);
    call {:si_unique_call 365} {:cexpr "i"} boogie_si_record_i32($i87);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i88 := $mul.i32($i74, 6);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p59, $mul.ref($i89, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p75, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_153 := $M.0;
    cmdloc_dummy_var_154 := $M.0;
    call {:si_unique_call 366} cmdloc_dummy_var_155 := $memcpy.i8(cmdloc_dummy_var_153, cmdloc_dummy_var_154, $p90, $p92, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_155;
    assume {:verifier.code 0} true;
    $i86 := $i87;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, $i71);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i100 := $i86;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i73 := $i100;
    goto $bb22;

  $bb32:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i74, $p75 := $i86, $p95;
    goto $bb32_dummy;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i74, 1);
    call {:si_unique_call 363} {:cexpr "i"} boogie_si_record_i32($i80);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i81 := $mul.i32($i74, 6);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p59, $mul.ref($i82, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p75, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_150 := $M.0;
    cmdloc_dummy_var_151 := $M.0;
    call {:si_unique_call 364} cmdloc_dummy_var_152 := $memcpy.i8(cmdloc_dummy_var_150, cmdloc_dummy_var_151, $p83, $p85, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_152;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i86 := $i80;
    goto $bb31;

  $bb25:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb27;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume $i56 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i29, $sub.i32(0, 2147483648));
    call {:si_unique_call 355} {:cexpr "rctl"} boogie_si_record_i32($i48);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, $sub.i32(0, 1073741825));
    call {:si_unique_call 356} {:cexpr "rctl"} boogie_si_record_i32($i49);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb12;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i29, $sub.i32(0, 2147483648));
    call {:si_unique_call 353} {:cexpr "rctl"} boogie_si_record_i32($i44);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 1073741825));
    call {:si_unique_call 354} {:cexpr "rctl"} boogie_si_record_i32($i45);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb9;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i29, 2147483647);
    call {:si_unique_call 350} {:cexpr "rctl"} boogie_si_record_i32($i37);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $sub.i32(0, 1073741825));
    call {:si_unique_call 351} {:cexpr "rctl"} boogie_si_record_i32($i38);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_218 := __dynamic_netdev_dbg.ref.ref.ref.i32($p1, $p0, .str.142, $i23);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;
}



const pch_gbe_mac_init_rx_addrs: ref;

axiom pch_gbe_mac_init_rx_addrs == $sub.ref(0, 383910);

procedure pch_gbe_mac_init_rx_addrs($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_init_rx_addrs($p0: ref, $i1: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "pch_gbe_mac_init_rx_addrs:arg:mar_count"} boogie_si_record_i16($i1);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} pch_gbe_mac_mar_set($p0, $p4, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} iowrite32(65534, $p27);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} pch_gbe_wait_clr_bit($p31, $sub.i32(0, 2147483648));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb4;

  $bb4:
    call $i8, $p9, $p10, $p13, $p14, $i15, $p16, $p17, $p20, $p21, $i22, $i23, $i7 := pch_gbe_mac_init_rx_addrs_loop_$bb4($p0, $i5, $i8, $p9, $p10, $p13, $p14, $i15, $p16, $p17, $p20, $p21, $i22, $i23, $i7);
    goto $bb4_last;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref($i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} iowrite32(0, $p14);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i7);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref($i15, 8)), $mul.ref(4, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} iowrite32(0, $p21);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 374} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i5, $i22);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;
}



const pch_gbe_hal_init_hw: ref;

axiom pch_gbe_hal_init_hw == $sub.ref(0, 384942);

procedure pch_gbe_hal_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation pch_gbe_hal_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i13: i32;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 378} $i19 := devirtbounce($p18, $p0);
    call {:si_unique_call 379} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_220 := netdev_err.ref.ref($p11, .str.19);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 38);
    goto $bb3;
}



const pch_gbe_mac_mar_set: ref;

axiom pch_gbe_mac_mar_set == $sub.ref(0, 385974);

procedure pch_gbe_mac_mar_set($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_mar_set($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 381} {:cexpr "pch_gbe_mac_mar_set:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.113);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.21);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.114);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 425);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 383} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 8);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i26, $i30);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i34, 16);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i31, $i35);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 24);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i36, $i40);
    call {:si_unique_call 385} {:cexpr "mar_high"} boogie_si_record_i32($i41);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 8);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i44, $i48);
    call {:si_unique_call 386} {:cexpr "mar_low"} boogie_si_record_i32($i49);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i54 := ioread32($p53);
    call {:si_unique_call 388} {:cexpr "adrmask"} boogie_si_record_i32($i54);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32(1, $i2);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, $i54);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} iowrite32($i56, $p60);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} pch_gbe_wait_clr_bit($p64, $sub.i32(0, 2147483648));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i2);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p67, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref($i65, 8)), $mul.ref(0, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} iowrite32($i41, $p71);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i2);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p74, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref($i72, 8)), $mul.ref(4, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} iowrite32($i49, $p78);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32(1, $i2);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i80 := $xor.i32($i79, $sub.i32(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, $i54);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} iowrite32($i81, $p85);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} pch_gbe_wait_clr_bit($p89, $sub.i32(0, 2147483648));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_221 := __dynamic_netdev_dbg.ref.ref.ref.i32($p3, $p23, .str.114, $i2);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_wait_clr_bit: ref;

axiom pch_gbe_wait_clr_bit == $sub.ref(0, 387006);

procedure pch_gbe_wait_clr_bit($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_gbe_wait_clr_bit($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i6: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i10: i32;
  var $i5: i32;
  var $i14: i32;
  var $i15: i1;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "pch_gbe_wait_clr_bit:arg:bit"} boogie_si_record_i32($i1);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i2 := ioread32($p0);
    call {:si_unique_call 397} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $i1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i5 := 1000;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} vslice_dummy_var_222 := printk.ref(.str.112);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i6 := 1000;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9, $i6, $i11, $i12, $i13, $i10 := pch_gbe_wait_clr_bit_loop_$bb4($p0, $i1, $i7, $i8, $i9, $i6, $i11, $i12, $i13, $i10);
    goto $bb4_last;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i6, 1);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb10;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} cpu_relax();
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i7 := ioread32($p0);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 388038);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} rep_nop();
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 389070);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 404} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 405} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 406} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 407} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 408} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 409} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 390102);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} devirtbounce.1(0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 391134);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 412} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_gbe_mac_mc_addr_list_update: ref;

axiom pch_gbe_mac_mc_addr_list_update == $sub.ref(0, 392166);

procedure pch_gbe_mac_mc_addr_list_update($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_mc_addr_list_update($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var $i5: i1;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $i12: i32;
  var $p13: ref;
  var $i43: i32;
  var $i44: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "pch_gbe_mac_mc_addr_list_update:arg:mc_addr_count"} boogie_si_record_i32($i2);
    call {:si_unique_call 415} {:cexpr "pch_gbe_mac_mc_addr_list_update:arg:mar_used_count"} boogie_si_record_i32($i3);
    call {:si_unique_call 416} {:cexpr "pch_gbe_mac_mc_addr_list_update:arg:mar_total_num"} boogie_si_record_i32($i4);
    call {:si_unique_call 417} {:cexpr "pch_gbe_mac_mc_addr_list_update:arg:i"} boogie_si_record_i32($i3);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i3, $i4);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i6, $p7, $i8 := $i3, $p1, $i2;
    goto $bb4;

  $bb4:
    call $i9, $i10, $p11, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $p30, $p31, $p34, $p35, $i36, $p37, $p38, $p41, $p42, $i12, $p13, $i43, $i44, $i6, $p7, $i8 := pch_gbe_mac_mc_addr_list_update_loop_$bb4($p0, $i4, $i9, $i10, $p11, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $p30, $p31, $p34, $p35, $i36, $p37, $p38, $p41, $p42, $i12, $p13, $i43, $i44, $i6, $p7, $i8);
    goto $bb4_last;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i18 := ioread32($p17);
    call {:si_unique_call 421} {:cexpr "adrmask"} boogie_si_record_i32($i18);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32(1, $i6);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i18);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} iowrite32($i20, $p24);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} pch_gbe_wait_clr_bit($p28, $sub.i32(0, 2147483648));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i6);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref($i29, 8)), $mul.ref(0, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} iowrite32(0, $p35);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i6);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref($i36, 8)), $mul.ref(4, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} iowrite32(0, $p42);
    assume {:verifier.code 0} true;
    $i12, $p13 := $i8, $p7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i6, 1);
    call {:si_unique_call 426} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i43, $i4);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i6, $p7, $i8 := $i43, $p13, $i12;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} pch_gbe_mac_mar_set($p0, $p7, $i6);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i8, 1);
    call {:si_unique_call 419} {:cexpr "mc_addr_count"} boogie_si_record_i32($i10);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i12, $p13 := $i10, $p11;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 393198);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} free_($p0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 394230);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 428} $free($p0);
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 395262);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 430} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p2 := ldv_malloc($i0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_gbe_mac_read_mac_addr: ref;

axiom pch_gbe_mac_read_mac_addr == $sub.ref(0, 396294);

procedure pch_gbe_mac_read_mac_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_read_mac_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i8;
  var $p26: ref;
  var $i27: i32;
  var $i28: i8;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $p36: ref;
  var $i37: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i8;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var vslice_dummy_var_223: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i10 := ioread32($p9);
    call {:si_unique_call 434} {:cexpr "adr1a"} boogie_si_record_i32($i10);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i17 := ioread32($p16);
    call {:si_unique_call 436} {:cexpr "adr1b"} boogie_si_record_i32($i17);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i10);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i18);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($i10, 8);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i23);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i10, 16);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i28);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i10, 24);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i33);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i17);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i37);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i41 := $lshr.i32($i17, 8);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i42);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, .str);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p47, .str.20);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p48, .str.21);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p49, .str.22);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.5, $p51);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 393);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p51, $i54);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p55, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.6, $p56);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i64($i60);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i61 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_223 := __dynamic_netdev_dbg.ref.ref.ref.ref($p1, $p63, .str.22, $p66);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 397326);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 441} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 443} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const pch_gbe_setup_tctl: ref;

axiom pch_gbe_setup_tctl == $sub.ref(0, 398358);

procedure pch_gbe_setup_tctl($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_setup_tctl($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364)), $mul.ref(48, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} iowrite32(1879065088, $p5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 364)), $mul.ref(16, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i10 := ioread32($p9);
    call {:si_unique_call 446} {:cexpr "tcpip"} boogie_si_record_i32($i10);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 2);
    call {:si_unique_call 447} {:cexpr "tcpip"} boogie_si_record_i32($i11);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 364)), $mul.ref(16, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} iowrite32($i11, $p15);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_configure_tx: ref;

axiom pch_gbe_configure_tx == $sub.ref(0, 399390);

procedure pch_gbe_configure_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_configure_tx($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.122);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.21);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.123);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 944);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 451} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    call {:si_unique_call 453} {:cexpr "tdba"} boogie_si_record_i32($i34);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 16);
    call {:si_unique_call 454} {:cexpr "tdlen"} boogie_si_record_i32($i39);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 364)), $mul.ref(304, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} iowrite32($i34, $p43);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 364)), $mul.ref(308, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} iowrite32($i39, $p47);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 364)), $mul.ref(320, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} iowrite32($i34, $p51);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i56 := ioread32($p55);
    call {:si_unique_call 459} {:cexpr "dctrl"} boogie_si_record_i32($i56);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 1);
    call {:si_unique_call 460} {:cexpr "dctrl"} boogie_si_record_i32($i57);
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} iowrite32($i57, $p61);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_224 := __dynamic_netdev_dbg.ref.ref.ref.i64.i32($p1, $p20, .str.123, $i24, $i28);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_setup_rctl: ref;

axiom pch_gbe_setup_rctl == $sub.ref(0, 400422);

procedure pch_gbe_setup_rctl($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_setup_rctl($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364)), $mul.ref(44, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} iowrite32($sub.i32(0, 1073741312), $p5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 364)), $mul.ref(16, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i10 := ioread32($p9);
    call {:si_unique_call 464} {:cexpr "tcpip"} boogie_si_record_i32($i10);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 4);
    call {:si_unique_call 465} {:cexpr "tcpip"} boogie_si_record_i32($i11);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $sub.i32(0, 2));
    call {:si_unique_call 466} {:cexpr "tcpip"} boogie_si_record_i32($i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 364)), $mul.ref(16, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} iowrite32($i12, $p16);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_configure_rx: ref;

axiom pch_gbe_configure_rx == $sub.ref(0, 401454);

procedure pch_gbe_configure_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_configure_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.124);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.21);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.125);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 992);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 471} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_226 := pch_gbe_mac_force_mac_fc($p3);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} pch_gbe_disable_mac_rx($p3);
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i36 := ioread32($p35);
    call {:si_unique_call 476} {:cexpr "rxdma"} boogie_si_record_i32($i36);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 3));
    call {:si_unique_call 477} {:cexpr "rxdma"} boogie_si_record_i32($i37);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} iowrite32($i37, $p41);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, .str);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, .str.124);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str.21);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.126);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.5, $p47);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 1006);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p47, $i50);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p51, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.6, $p52);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 480} {:cexpr "tmp___2"} boogie_si_record_i64($i56);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i74);
    call {:si_unique_call 486} {:cexpr "rdba"} boogie_si_record_i32($i75);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 16);
    call {:si_unique_call 487} {:cexpr "rdlen"} boogie_si_record_i32($i80);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 364)), $mul.ref(272, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} iowrite32($i75, $p84);
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 364)), $mul.ref(276, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} iowrite32($i80, $p88);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i75, $i80);
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 364)), $mul.ref(288, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} iowrite32($i89, $p93);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i57 == 1;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i62 := ioread32($p61);
    call {:si_unique_call 482} {:cexpr "tmp___0"} boogie_si_record_i32($i62);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 364)), $mul.ref(32, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i67 := ioread32($p66);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i32($i67);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_227 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p2, $p69, .str.126, $i67, $i62);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_225 := __dynamic_netdev_dbg.ref.ref.ref.i64.i32($p1, $p21, .str.125, $i25, $i29);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_request_irq: ref;

axiom pch_gbe_request_irq == $sub.ref(0, 402486);

procedure pch_gbe_request_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13;



implementation pch_gbe_request_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p46: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i24;
  var $i65: i24;
  var $i66: i24;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $i77: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(928, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i9 := pci_enable_msi_exact($p8, 1);
    call {:si_unique_call 495} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.127);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.21);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.128);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1997);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i9, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(928, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 1);
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i45);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p5);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i55 := ldv_request_irq_76($i50, pch_gbe_intr, $i51, $p53, $p54);
    call {:si_unique_call 503} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p58, .str);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p59, .str.127);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p60, .str.21);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p61, .str.131);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i64 := $load.i24($M.5, $p63);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, $sub.i24(0, 262144));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i66 := $or.i24($i65, 2011);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p63, $i66);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p67, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.6, $p68);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i64($i69);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i70, 1);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 506} {:cexpr "tmp___1"} boogie_si_record_i64($i72);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb13:
    assume $i73 == 1;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(928, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_231 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p3, $p5, .str.131, $i77, $i45, $i55);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i56 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_230 := netdev_err.ref.ref.i32($p5, .str.130, $i55);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, .str);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, .str.127);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, .str.21);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, .str.129);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.5, $p33);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 1999);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p33, $i36);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, 0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.6, $p38);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 500} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i45 := 128;
    goto $bb9;

  $bb6:
    assume $i43 == 1;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_229 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p5, .str.129, $i9);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_228 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p5, .str.128);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_alloc_rx_buffers_pool: ref;

axiom pch_gbe_alloc_rx_buffers_pool == $sub.ref(0, 403518);

procedure pch_gbe_alloc_rx_buffers_pool($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_alloc_rx_buffers_pool($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i26: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "pch_gbe_alloc_rx_buffers_pool:arg:cleaned_count"} boogie_si_record_i32($i2);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 509} {:cexpr "bufsz"} boogie_si_record_i32($i7);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, $i7);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 2097152);
    call {:si_unique_call 510} {:cexpr "size"} boogie_si_record_i32($i11);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i11);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p15 := dma_zalloc_coherent($p12, $i13, $p14, 208);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p15);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i11);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    call $p27, $p28, $i29, $p31, $p32, $i33, $i34, $p35, $p36, $i37, $p38, $i39, $i40, $i41, $i26 := pch_gbe_alloc_rx_buffers_pool_loop_$bb8($p1, $i7, $p23, $p27, $p28, $i29, $p31, $p32, $i33, $i34, $p35, $p36, $i37, $p38, $i39, $i40, $i41, $i26);
    goto $bb8_last;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i26);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i7, $i26);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p32, $mul.ref($i34, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref($i29, 40)), $mul.ref(16, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p35);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i7);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p28, $mul.ref($i29, 40)), $mul.ref(32, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i37);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i26, 1);
    call {:si_unique_call 512} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p23);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, $i39);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i39;
    goto $bb10_dummy;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3288;
}



const pch_gbe_alloc_tx_buffers: ref;

axiom pch_gbe_alloc_tx_buffers == $sub.ref(0, 404550);

procedure pch_gbe_alloc_tx_buffers($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.24, $CurrAddr;



implementation pch_gbe_alloc_tx_buffers($p0: ref, $p1: ref)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(12, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 513} {:cexpr "bufsz"} boogie_si_record_i32($i5);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $p15, $p16, $p17, $p18, $p19, $i20, $p22, $i23, $i24, $i25, $i9 := pch_gbe_alloc_tx_buffers_loop_$bb4($p0, $p1, $i5, $p6, $p10, $p11, $i12, $p14, $p15, $p16, $p17, $p18, $p19, $i20, $p22, $i23, $i24, $i25, $i9);
    goto $bb4_last;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i9);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p16 := ldv_netdev_alloc_skb_74($p15, $i5);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} skb_reserve($p16, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref($i12, 40)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i9);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 16)), $mul.ref(14, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $sub.i16(0, 16384));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i9, 1);
    call {:si_unique_call 516} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p6);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, $i23);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;
}



const pch_gbe_alloc_rx_buffers: ref;

axiom pch_gbe_alloc_rx_buffers == $sub.ref(0, 405582);

procedure pch_gbe_alloc_rx_buffers($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.25, $M.24, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.41;



implementation pch_gbe_alloc_rx_buffers($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i17: i32;
  var $i18: i32;
  var $i109: i32;
  var $i16: i32;
  var $i37: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i64;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var vslice_dummy_var_232: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 518} {:cexpr "pch_gbe_alloc_rx_buffers:arg:cleaned_count"} boogie_si_record_i32($i2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 519} {:cexpr "bufsz"} boogie_si_record_i32($i11);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 520} {:cexpr "i"} boogie_si_record_i32($i13);
    call {:si_unique_call 521} {:cexpr "pch_gbe_alloc_rx_buffers:arg:tmp___3"} boogie_si_record_i32($i2);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i2, 1);
    call {:si_unique_call 522} {:cexpr "cleaned_count"} boogie_si_record_i32($i14);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i2, 0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i37 := $i16;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, $i37);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i112);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i115 := ldv__builtin_expect($i114, 1);
    call {:si_unique_call 527} {:cexpr "tmp___6"} boogie_si_record_i64($i115);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i116 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i37);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i118 := $sub.i32($i37, 1);
    call {:si_unique_call 540} {:cexpr "i"} boogie_si_record_i32($i118);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i37, 0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i32($i119);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i120);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i122 := ldv__builtin_expect($i121, 0);
    call {:si_unique_call 542} {:cexpr "tmp___5"} boogie_si_record_i64($i122);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i127 := $i118;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i64.i32($i129);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i131 := $mul.i32($i127, 16);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i130, $i131);
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 364)), $mul.ref(288, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} iowrite32($i132, $p136);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i123 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32($i125, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i127 := $i126;
    goto $bb26;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i14, $i13;
    goto $bb4;

  $bb4:
    call $p19, $p20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $p55, $p56, $p66, $p67, $p68, $i69, $p71, $i72, $i73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $i82, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $p94, $i95, $i96, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i17, $i18, $i109, vslice_dummy_var_232 := pch_gbe_alloc_rx_buffers_loop_$bb4($p0, $p1, $p3, $p5, $p7, $i11, $p19, $p20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $p55, $p56, $p66, $p67, $p68, $i69, $p71, $i72, $i73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $i82, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $p94, $i95, $i96, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i17, $i18, $i109, vslice_dummy_var_232);
    goto $bb4_last;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i18);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 40));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p23 := ldv_netdev_alloc_skb_74($p5, $i11);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i30 := $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} skb_reserve($p23, 0);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p23);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(16, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(32, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i64($i43);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i45 := dma_map_single_attrs($p39, $p41, $i44, 2, $0.ref);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i52 := dma_mapping_error($p49, $i51);
    call {:si_unique_call 531} {:cexpr "tmp___0"} boogie_si_record_i32($i52);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i54, $p55, $p56 := $i18, $p22, $p23;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(34, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i18);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p68, $mul.ref($i69, 16)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p68, $mul.ref($i69, 16)), $mul.ref(10, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $sub.i16(0, 16384));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p76, .str);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p77, .str.132);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p78, .str.21);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p79, .str.133);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.5, $p81);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 1539);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p81, $i84);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p85, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.6, $p86);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 534} {:cexpr "tmp___1"} boogie_si_record_i64($i90);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i18, 1);
    call {:si_unique_call 536} {:cexpr "i"} boogie_si_record_i32($i98);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i98, $i100);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 538} {:cexpr "tmp___2"} boogie_si_record_i64($i104);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i98;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32($i17, 1);
    call {:si_unique_call 539} {:cexpr "cleaned_count"} boogie_si_record_i32($i107);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i17, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i109 := $i106;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i16 := $i109;
    goto $bb3;

  $bb19:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i107, $i106;
    goto $bb19_dummy;

  $bb16:
    assume $i105 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb18;

  $bb13:
    assume $i91 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p20, $mul.ref($i21, 40)), $mul.ref(32, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_232 := __dynamic_netdev_dbg.ref.ref.ref.i32.i64.i32($p3, $p5, .str.133, $i18, $i93, $i96);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} ldv_skb_free($p57);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(48, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(48, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i63);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i37 := $i54;
    goto $bb8;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(48, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(48, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i37 := $i30;
    goto $bb8;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3359;
}



const pch_gbe_enable_dma_rx: ref;

axiom pch_gbe_enable_dma_rx == $sub.ref(0, 406614);

procedure pch_gbe_enable_dma_rx($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_enable_dma_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i5 := ioread32($p4);
    call {:si_unique_call 546} {:cexpr "rxdma"} boogie_si_record_i32($i5);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 2);
    call {:si_unique_call 547} {:cexpr "rxdma"} boogie_si_record_i32($i6);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} iowrite32($i6, $p10);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_enable_mac_rx: ref;

axiom pch_gbe_enable_mac_rx == $sub.ref(0, 407646);

procedure pch_gbe_enable_mac_rx($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_enable_mac_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364)), $mul.ref(32, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i5 := ioread32($p4);
    call {:si_unique_call 550} {:cexpr "rctl"} boogie_si_record_i32($i5);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 364)), $mul.ref(32, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} iowrite32($i6, $p10);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_77: ref;

axiom ldv_mod_timer_77 == $sub.ref(0, 408678);

procedure ldv_mod_timer_77($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation ldv_mod_timer_77($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "ldv_mod_timer_77:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 409710);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 557} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 561} devirtbounce.1(0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} clear_bit(0, $p8);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 560} devirtbounce.2(0, .str.134, 492, 12);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const pch_gbe_irq_enable: ref;

axiom pch_gbe_irq_enable == $sub.ref(0, 410742);

procedure pch_gbe_irq_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.0;



implementation pch_gbe_irq_enable($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(144, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i4 := atomic_dec_and_test($p3);
    call {:si_unique_call 565} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i8 := ldv__builtin_expect($i7, 1);
    call {:si_unique_call 567} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_233 := ioread32($p17);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, .str.135);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p21, .str.21);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.136);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.5, $p24);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 905);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p24, $i27);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 0);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.6, $p29);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 571} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i39 := ioread32($p38);
    call {:si_unique_call 573} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_234 := __dynamic_netdev_dbg.ref.ref.ref.i32($p1, $p41, .str.136, $i39);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} iowrite32(16777513, $p13);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 411774);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} netif_tx_start_queue($p1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_free_irq: ref;

axiom pch_gbe_free_irq == $sub.ref(0, 412806);

procedure pch_gbe_free_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, $M.9, $M.11, $M.13;



implementation pch_gbe_free_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var vslice_dummy_var_235: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} ldv_free_irq_71($i7, $p8);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(928, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} pci_disable_msi($p13);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, .str);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, .str.137);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.21);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str.138);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.5, $p19);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 872);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p19, $i22);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.6, $p24);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 581} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_235 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p3, .str.138);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_free_irq_71: ref;

axiom ldv_free_irq_71 == $sub.ref(0, 413838);

procedure ldv_free_irq_71($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation ldv_free_irq_71($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} {:cexpr "ldv_free_irq_71:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} free_irq($i0, $p1);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 414870);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 415902);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 416934);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.13;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 591} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i12 := $M.12;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 590} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 589} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 588} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 417966);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 418998);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} clear_bit(0, $p1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 420030);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 595} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 421062);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 597} devirtbounce.4(0, $p2, $p1, $p2);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p1);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 422094);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 423126);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 599} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_2: ref;

axiom activate_pending_timer_2 == $sub.ref(0, 424158);

procedure activate_pending_timer_2($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation activate_pending_timer_2($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} {:cexpr "activate_pending_timer_2:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 603} {:cexpr "activate_pending_timer_2:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p3 := $M.15;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.19;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.21;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} activate_suitable_timer_2($p0, $i1);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i34 := $M.22;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p37 := $M.21;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 607} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i25 := $M.20;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p28 := $M.19;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 606} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i16 := $M.18;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p19 := $M.17;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 605} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i7 := $M.16;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p10 := $M.15;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 604} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_2: ref;

axiom activate_suitable_timer_2 == $sub.ref(0, 425190);

procedure activate_suitable_timer_2($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation activate_suitable_timer_2($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} {:cexpr "activate_suitable_timer_2:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i2 := $M.16;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i4 := $M.16;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.20;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.22;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i22 := $M.22;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p24 := $M.21;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 613} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p18 := $M.19;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 612} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 611} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p6 := $M.15;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 610} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const ldv_netdev_alloc_skb_74: ref;

axiom ldv_netdev_alloc_skb_74 == $sub.ref(0, 426222);

procedure ldv_netdev_alloc_skb_74($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24, $M.0, $CurrAddr;



implementation ldv_netdev_alloc_skb_74($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} {:cexpr "ldv_netdev_alloc_skb_74:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p2 := ldv_skb_alloc();
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 427254);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 428286);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 618} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p5 := get_dma_ops($p0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 624} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i14 := __phys_addr($i13);
    call {:si_unique_call 627} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 628} $i21 := devirtbounce.5($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 629} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i23 := __phys_addr($i22);
    call {:si_unique_call 631} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 625} devirtbounce.2(0, .str.117, 19, 12);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 429318);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p2 := get_dma_ops($p0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 636} $i9 := devirtbounce.6($p8, $p0, $i1);
    call {:si_unique_call 637} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 430350);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p1 := $M.23;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ldv_set_remove($p1, $p2);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 431382);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 640} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i18 := $M.24;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.24;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.24 := $i31;
    call {:si_unique_call 642} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.25, $p22);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p26, $p23);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 641} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i28 := $M.24;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.25, $p7);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 639} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i14 := $M.24;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3965;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 432414);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 644} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 433446);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 434478);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 435510);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 436542);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 648} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 437574);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 652} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 653} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 654} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 655} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 438606);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p0 := ldv_zalloc(232);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p5 := $M.23;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_set_add($p5, $p2);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 439638);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 658} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 1} true;
    call {:si_unique_call 659} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p4 := calloc(1, $i0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} __VERIFIER_assume($i7);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 440670);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.24;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i16 := $M.24;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p18, $p1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i19 := $M.24;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.24 := $i20;
    call {:si_unique_call 665} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.25, $p6);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 664} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i12 := $M.24;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;
}



const dma_zalloc_coherent: ref;

axiom dma_zalloc_coherent == $sub.ref(0, 441702);

procedure dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} {:cexpr "dma_zalloc_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 667} {:cexpr "dma_zalloc_coherent:arg:flag"} boogie_si_record_i32($i3);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 32768);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p5 := dma_alloc_attrs($p0, $i1, $p2, $i4, $0.ref);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 442734);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 670} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p5 := get_dma_ops($p0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 672} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 674} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 676} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 677} $p20 := devirtbounce.7($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 443766);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 444798);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 681} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 683} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 682} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 445830);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 685} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 446862);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 687} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 688} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const pci_enable_msi_exact: ref;

axiom pci_enable_msi_exact == $sub.ref(0, 447894);

procedure pci_enable_msi_exact($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_exact($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "pci_enable_msi_exact:arg:nvec"} boogie_si_record_i32($i1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i2 := pci_enable_msi_range($p0, $i1, $i1);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const pch_gbe_intr: ref;

axiom pch_gbe_intr == $sub.ref(0, 448926);

procedure pch_gbe_intr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_intr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i8;
  var $i182: i1;
  var $p183: ref;
  var $i184: i1;
  var $i185: i8;
  var $i186: i1;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i24;
  var $i209: i24;
  var $i210: i24;
  var $p211: ref;
  var $p212: ref;
  var $i213: i8;
  var $i214: i64;
  var $i215: i64;
  var $i216: i64;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i32;
  var $i26: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 696} {:cexpr "pch_gbe_intr:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p7 := netdev_priv($p6);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1));
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i14 := ioread32($p13);
    call {:si_unique_call 699} {:cexpr "int_st"} boogie_si_record_i32($i14);
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i19 := ioread32($p18);
    call {:si_unique_call 701} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, $i14);
    call {:si_unique_call 702} {:cexpr "int_st"} boogie_si_record_i32($i20);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 704} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.151);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.21);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.152);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1432);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 706} {:cexpr "tmp___2"} boogie_si_record_i64($i41);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i20, 4);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i20, 8);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i20;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 16);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i105, 1024);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i105, 2048);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i105, 268435456);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i105, 32);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i105, 257);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i179 == 1);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(929, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i8.i1($i181);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p202, .str);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p203, .str.151);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p204, .str.21);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p205, .str.155);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i208 := $load.i24($M.5, $p207);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i209 := $and.i24($i208, $sub.i24(0, 262144));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i210 := $or.i24($i209, 1482);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p207, $i210);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p211, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.6, $p212);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i64($i213);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i215 := $and.i64($i214, 1);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i216 := ldv__builtin_expect($i215, 0);
    call {:si_unique_call 739} {:cexpr "tmp___10"} boogie_si_record_i64($i216);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i217 := $ne.i64($i216, 0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb50:
    assume $i217 == 1;
    $p218 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i222 := ioread32($p221);
    call {:si_unique_call 741} {:cexpr "tmp___9"} boogie_si_record_i32($i222);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_239 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p5, $p6, .str.155, 1, $i222);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(176, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i184 := napi_schedule_prep($p183);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i185 := $zext.i1.i8($i184);
    call {:si_unique_call 729} {:cexpr "tmp___7"} boogie_si_record_i8($i185);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i8.i1($i185);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i187 := $zext.i1.i64($i186);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i188 := ldv__builtin_expect($i187, 1);
    call {:si_unique_call 731} {:cexpr "tmp___8"} boogie_si_record_i64($i188);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i189 == 1;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(144, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} atomic_inc($p190);
    $p191 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i195 := ioread32($p194);
    call {:si_unique_call 734} {:cexpr "int_en"} boogie_si_record_i32($i195);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, $sub.i32(0, 258));
    call {:si_unique_call 735} {:cexpr "int_en"} boogie_si_record_i32($i196);
    $p197 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} iowrite32($i196, $p200);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(176, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __napi_schedule($p201);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb42;

  $bb32:
    assume $i139 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(72, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 1);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(72, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i143);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p146, .str);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p147, .str.151);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p148, .str.21);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p149, .str.154);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.5, $p151);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 1458);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p151, $i154);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p155, 0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.6, $p156);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 722} {:cexpr "tmp___6"} boogie_si_record_i64($i160);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $p163 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i167 := ioread32($p166);
    call {:si_unique_call 725} {:cexpr "int_en"} boogie_si_record_i32($i167);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, $sub.i32(0, 33));
    $p169 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p170, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} iowrite32($i168, $p172);
    $p174 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i177 == 1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} pch_gbe_mac_set_pause_packet($p9);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i161 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_238 := __dynamic_netdev_dbg.ref.ref.ref($p4, $p6, .str.154);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i131 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(96, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, 1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(96, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i135);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i123 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(92, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(92, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i127);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i115 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(88, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(88, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, $i119);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i107 == 1;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(84, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(84, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i111);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(929, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(80, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(80, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i60);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, .str);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p64, .str.151);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p65, .str.21);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p66, .str.153);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.5, $p68);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 1438);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p68, $i71);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p72, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.6, $p73);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 709} {:cexpr "tmp___3"} boogie_si_record_i64($i77);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(929, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 1);
    $p81 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i85 := ioread32($p84);
    call {:si_unique_call 712} {:cexpr "int_en"} boogie_si_record_i32($i85);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, $sub.i32(0, 9));
    $p87 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} iowrite32($i86, $p90);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} pch_gbe_disable_dma_rx($p91);
    $p92 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i96 := ioread32($p95);
    call {:si_unique_call 716} {:cexpr "tmp___4"} boogie_si_record_i32($i96);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, $i20);
    call {:si_unique_call 717} {:cexpr "int_st"} boogie_si_record_i32($i97);
    $p98 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i102 := ioread32($p101);
    call {:si_unique_call 719} {:cexpr "tmp___5"} boogie_si_record_i32($i102);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, $i97);
    call {:si_unique_call 720} {:cexpr "int_st"} boogie_si_record_i32($i103);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i104 := $i103;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb19;

  $bb15:
    assume $i78 == 1;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_237 := __dynamic_netdev_dbg.ref.ref.ref($p3, $p6, .str.153);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i104 := $i20;
    goto $bb18;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(76, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(76, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i49);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i42 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_236 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p2, $p6, .str.152, .str.151, $i20);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;
}



const ldv_request_irq_76: ref;

axiom ldv_request_irq_76 == $sub.ref(0, 449958);

procedure ldv_request_irq_76($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13;



implementation ldv_request_irq_76($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} {:cexpr "ldv_request_irq_76:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 744} {:cexpr "ldv_request_irq_76:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 746} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i6 := reg_check_1($p1);
    call {:si_unique_call 748} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 450990);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 751} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 753} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 452022);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(pch_gbe_intr));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 453054);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.9;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.13;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.14 := $i0;
    call {:si_unique_call 761} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $M.29 := $p1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 762} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.12 := $i0;
    call {:si_unique_call 759} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.28 := $p1;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 760} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 757} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.27 := $p1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 758} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 755} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.26 := $p1;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 756} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 454086);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 764} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 765} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_gbe_disable_dma_rx: ref;

axiom pch_gbe_disable_dma_rx == $sub.ref(0, 455118);

procedure pch_gbe_disable_dma_rx($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_disable_dma_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i5 := ioread32($p4);
    call {:si_unique_call 768} {:cexpr "rxdma"} boogie_si_record_i32($i5);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 3));
    call {:si_unique_call 769} {:cexpr "rxdma"} boogie_si_record_i32($i6);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 364)), $mul.ref(256, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} iowrite32($i6, $p10);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_mac_set_pause_packet: ref;

axiom pch_gbe_mac_set_pause_packet == $sub.ref(0, 456150);

procedure pch_gbe_mac_set_pause_packet($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_set_pause_packet($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $i9: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i24;
  var $i77: i24;
  var $i78: i24;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var vslice_dummy_var_240: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i64($i7);
    call {:si_unique_call 772} {:cexpr "tmp2"} boogie_si_record_i64($i8);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i9 := $shl.i64($i8, 8);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i15 := $or.i64($i9, $i14);
    call {:si_unique_call 773} {:cexpr "tmp2"} boogie_si_record_i64($i15);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i16 := $shl.i64($i15, 16);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i17 := $or.i64($i16, 256);
    call {:si_unique_call 774} {:cexpr "tmp2"} boogie_si_record_i64($i17);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    call {:si_unique_call 775} {:cexpr "tmp3"} boogie_si_record_i64($i22);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i23 := $shl.i64($i22, 8);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i29 := $or.i64($i23, $i28);
    call {:si_unique_call 776} {:cexpr "tmp3"} boogie_si_record_i64($i29);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i30 := $shl.i64($i29, 8);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i36 := $or.i64($i30, $i35);
    call {:si_unique_call 777} {:cexpr "tmp3"} boogie_si_record_i64($i36);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i37 := $shl.i64($i36, 8);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i43 := $or.i64($i37, $i42);
    call {:si_unique_call 778} {:cexpr "tmp3"} boogie_si_record_i64($i43);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 364)), $mul.ref(68, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} iowrite32(12746753, $p47);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i17);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 364)), $mul.ref(72, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} iowrite32($i48, $p52);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i43);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 364)), $mul.ref(76, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} iowrite32($i53, $p57);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 364)), $mul.ref(80, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} iowrite32(16779400, $p61);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 364)), $mul.ref(84, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} iowrite32(65535, $p65);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 364)), $mul.ref(40, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} iowrite32($sub.i32(0, 2147483648), $p69);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p70, .str);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p71, .str.156);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p72, .str.21);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p73, .str.157);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i76 := $load.i24($M.5, $p75);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i77 := $and.i24($i76, $sub.i24(0, 262144));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i78 := $or.i24($i77, 701);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p75, $i78);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p79, 0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.6, $p80);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i64($i81);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 786} {:cexpr "tmp___4"} boogie_si_record_i64($i84);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i85 == 1;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 364)), $mul.ref(84, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i90 := ioread32($p89);
    call {:si_unique_call 788} {:cexpr "tmp"} boogie_si_record_i32($i90);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 364)), $mul.ref(80, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i95 := ioread32($p94);
    call {:si_unique_call 790} {:cexpr "tmp___0"} boogie_si_record_i32($i95);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 364)), $mul.ref(76, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i100 := ioread32($p99);
    call {:si_unique_call 792} {:cexpr "tmp___1"} boogie_si_record_i32($i100);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 364)), $mul.ref(72, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i105 := ioread32($p104);
    call {:si_unique_call 794} {:cexpr "tmp___2"} boogie_si_record_i32($i105);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 364)), $mul.ref(68, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i110 := ioread32($p109);
    call {:si_unique_call 796} {:cexpr "tmp___3"} boogie_si_record_i32($i110);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_240 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p1, $p112, .str.157, $i110, $i105, $i100, $i95, $i90);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 457182);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i1 := napi_disable_pending($p0);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 801} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 458214);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 802} devirtbounce.8(0, $p1, $p1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    return;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 459246);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 460278);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 804} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 461310);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 806} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 807} devirtbounce.9(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.30, $p2);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pci_enable_msi_range: ref;

axiom pci_enable_msi_range == $sub.ref(0, 462342);

procedure pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} {:cexpr "pci_enable_msi_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 809} {:cexpr "pci_enable_msi_range:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_gbe_disable_mac_rx: ref;

axiom pch_gbe_disable_mac_rx == $sub.ref(0, 463374);

procedure pch_gbe_disable_mac_rx($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_disable_mac_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364)), $mul.ref(32, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i5 := ioread32($p4);
    call {:si_unique_call 813} {:cexpr "rctl"} boogie_si_record_i32($i5);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 2));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 364)), $mul.ref(32, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} iowrite32($i6, $p10);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 464406);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 465438);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 466470);

procedure napi_disable($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __might_sleep(.str.134, 476, 0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} set_bit(1, $p1);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 818} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} clear_bit(1, $p7);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} msleep(1);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 467502);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_irq_disable: ref;

axiom pch_gbe_irq_disable == $sub.ref(0, 468534);

procedure pch_gbe_irq_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_irq_disable($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(144, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} atomic_inc($p3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} iowrite32(0, $p7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 364)), $mul.ref(0, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_241 := ioread32($p11);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} synchronize_irq($i16);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.139);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.21);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.136);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 890);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 830} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i37 := ioread32($p36);
    call {:si_unique_call 832} {:cexpr "tmp"} boogie_si_record_i32($i37);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_242 := __dynamic_netdev_dbg.ref.ref.ref.i32($p1, $p39, .str.136, $i37);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_del_timer_sync_78: ref;

axiom ldv_del_timer_sync_78 == $sub.ref(0, 469566);

procedure ldv_del_timer_sync_78($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_78($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i1 := del_timer_sync($p0);
    call {:si_unique_call 835} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} disable_suitable_timer_2($p0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 470598);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 471630);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} netif_tx_stop_queue($p1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_clean_tx_ring: ref;

axiom pch_gbe_clean_tx_ring == $sub.ref(0, 472662);

procedure pch_gbe_clean_tx_ring($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_clean_tx_ring($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i8: i32;
  var $i16: i32;
  var $i7: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var cmdloc_dummy_var_156: [ref]i8;
  var cmdloc_dummy_var_157: [ref]i8;
  var cmdloc_dummy_var_158: [ref]i8;
  var cmdloc_dummy_var_159: [ref]i8;
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.115);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.21);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.116);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1075);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i39 := $mul.i64($i38, 40);
    call {:si_unique_call 845} {:cexpr "size"} boogie_si_record_i64($i39);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_156 := $M.0;
    call {:si_unique_call 846} cmdloc_dummy_var_157 := $memset.i8(cmdloc_dummy_var_156, $p42, 0, $i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_157;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_158 := $M.0;
    call {:si_unique_call 847} cmdloc_dummy_var_159 := $memset.i8(cmdloc_dummy_var_158, $p45, 0, $i48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_159;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 364)), $mul.ref(312, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} iowrite32($i53, $p57);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, 16);
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 364)), $mul.ref(308, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} iowrite32($i60, $p64);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_243 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p34, .str.116, $i7);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i8, $i16 := pch_gbe_clean_tx_ring_loop_$bb4($p0, $p1, $p4, $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i8, $i16);
    goto $bb4_last;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 40));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} pch_gbe_unmap_and_free_tx_resource($p0, $p12);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, 1);
    call {:si_unique_call 841} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p4);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, $i13);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;
}



const pch_gbe_clean_rx_ring: ref;

axiom pch_gbe_clean_rx_ring == $sub.ref(0, 473694);

procedure pch_gbe_clean_rx_ring($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_clean_rx_ring($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i8: i32;
  var $i16: i32;
  var $i7: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var cmdloc_dummy_var_160: [ref]i8;
  var cmdloc_dummy_var_161: [ref]i8;
  var cmdloc_dummy_var_162: [ref]i8;
  var cmdloc_dummy_var_163: [ref]i8;
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 0);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.120);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.21);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.121);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1108);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 854} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i39 := $mul.i64($i38, 40);
    call {:si_unique_call 856} {:cexpr "size"} boogie_si_record_i64($i39);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_160 := $M.0;
    call {:si_unique_call 857} cmdloc_dummy_var_161 := $memset.i8(cmdloc_dummy_var_160, $p42, 0, $i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_161;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_162 := $M.0;
    call {:si_unique_call 858} cmdloc_dummy_var_163 := $memset.i8(cmdloc_dummy_var_162, $p45, 0, $i48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_163;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 364)), $mul.ref(280, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} iowrite32($i53, $p57);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, 16);
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 364)), $mul.ref(276, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} iowrite32($i60, $p64);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_244 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p34, .str.121, $i7);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i8, $i16 := pch_gbe_clean_rx_ring_loop_$bb4($p0, $p1, $p4, $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i8, $i16);
    goto $bb4_last;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 40));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} pch_gbe_unmap_and_free_rx_resource($p0, $p12);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, 1);
    call {:si_unique_call 852} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p4);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, $i13);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4890;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 474726);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 862} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 475758);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_245: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 865} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p5 := get_dma_ops($p0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i6 := arch_local_save_flags();
    call {:si_unique_call 868} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 870} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 871} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 873} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_245 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 877} devirtbounce.10($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} warn_slowpath_null(.str.118, 166);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 476790);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 879} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 881} $i7 := devirtbounce.11(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 882} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 880} devirtbounce.2(0, .str.119, 804, 12);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 477822);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 478854);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 479886);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 886} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_unmap_and_free_rx_resource: ref;

axiom pch_gbe_unmap_and_free_rx_resource == $sub.ref(0, 480918);

procedure pch_gbe_unmap_and_free_rx_resource($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_unmap_and_free_rx_resource($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} dev_kfree_skb_any($p19);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i64($i11);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} dma_unmap_single_attrs($p7, $i9, $i12, 2, $0.ref);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 481950);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 482982);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 890} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 891} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p5 := get_dma_ops($p0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 894} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 896} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 898} devirtbounce.12($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 897} devirtbounce.2(0, .str.117, 36, 12);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 484014);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 485046);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 486078);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 903} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 904} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 905} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_unmap_and_free_tx_resource: ref;

axiom pch_gbe_unmap_and_free_tx_resource == $sub.ref(0, 487110);

procedure pch_gbe_unmap_and_free_tx_resource($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_unmap_and_free_tx_resource($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} dev_kfree_skb_any($p19);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i64($i11);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} dma_unmap_single_attrs($p7, $i9, $i12, 1, $0.ref);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 488142);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 908} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 910} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 913} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} set_bit(0, $p15);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_246 := printk.ref(.str.140);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} warn_slowpath_null(.str.134, 2212);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 489174);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 917} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 490206);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 918} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 919} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_2: ref;

axiom disable_suitable_timer_2 == $sub.ref(0, 491238);

procedure disable_suitable_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation disable_suitable_timer_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.18;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.20;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.22;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p22 := $M.21;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 923} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p16 := $M.19;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 922} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 921} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p4 := $M.15;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 920} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const synchronize_irq: ref;

axiom synchronize_irq == $sub.ref(0, 492270);

procedure synchronize_irq($i0: i32);
  free requires assertsPassed;



implementation synchronize_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "synchronize_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 493302);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 926} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 494334);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 495366);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 929} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pch_gbe_setup_rx_resources: ref;

axiom pch_gbe_setup_rx_resources == $sub.ref(0, 496398);

procedure pch_gbe_setup_rx_resources($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_setup_rx_resources($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i41: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i16: i32;
  var vslice_dummy_var_247: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 40);
    call {:si_unique_call 932} {:cexpr "size"} boogie_si_record_i32($i7);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p9 := vzalloc($i8);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 16);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p26 := dma_zalloc_coherent($p21, $i24, $p25, 208);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p26);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32(0, $i39);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, .str);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p51, .str.36);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p52, .str.21);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p53, .str.37);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.5, $p55);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 1943);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p55, $i58);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p59, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.6, $p60);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 938} {:cexpr "tmp___1"} boogie_si_record_i64($i64);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_247 := __dynamic_netdev_dbg.ref.ref.ref.ref.i64.i32.i32($p2, $p67, .str.37, $p69, $i71, $i73, $i75);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb11:
    call $p42, $p43, $i44, $p46, $i47, $i48, $i49, $i41 := pch_gbe_setup_rx_resources_loop_$bb11($p1, $p38, $p42, $p43, $i44, $p46, $i47, $i48, $i49, $i41);
    goto $bb11_last;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i41);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 16)), $mul.ref(10, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $sub.i16(0, 16384));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i41, 1);
    call {:si_unique_call 936} {:cexpr "desNo"} boogie_si_record_i32($i47);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p38);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i47, $i48);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i49 == 1);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb13_dummy;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vfree($p35);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5261;
}



const pch_gbe_setup_tx_resources: ref;

axiom pch_gbe_setup_tx_resources == $sub.ref(0, 497430);

procedure pch_gbe_setup_tx_resources($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_setup_tx_resources($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i47: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i17: i32;
  var vslice_dummy_var_248: ref;
  var vslice_dummy_var_249: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 40);
    call {:si_unique_call 942} {:cexpr "size"} boogie_si_record_i32($i8);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p10 := vzalloc($i9);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p10);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 16);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p27 := dma_zalloc_coherent($p22, $i25, $p26, 208);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p27);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_248 := spinlock_check($p39);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __raw_spin_lock_init($p43, .str.33, $p2);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i46 := $ult.i32(0, $i45);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, .str);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p57, .str.34);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str.21);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.35);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.5, $p61);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 1902);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p61, $i64);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 950} {:cexpr "tmp___1"} boogie_si_record_i64($i70);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb16:
    assume $i71 == 1;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_249 := __dynamic_netdev_dbg.ref.ref.ref.ref.i64.i32.i32($p3, $p73, .str.35, $p75, $i77, $i79, $i81);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb11;

  $bb11:
    call $p48, $p49, $i50, $p52, $i53, $i54, $i55, $i47 := pch_gbe_setup_tx_resources_loop_$bb11($p1, $p44, $p48, $p49, $i50, $p52, $i53, $i54, $i55, $i47);
    goto $bb11_last;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i47);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref($i50, 16)), $mul.ref(14, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $sub.i16(0, 16384));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i47, 1);
    call {:si_unique_call 948} {:cexpr "desNo"} boogie_si_record_i32($i53);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p44);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i53, $i54);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i53;
    goto $bb13_dummy;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vfree($p36);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5371;
}



const pch_gbe_free_rx_resources: ref;

axiom pch_gbe_free_rx_resources == $sub.ref(0, 498462);

procedure pch_gbe_free_rx_resources($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_free_rx_resources($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} pch_gbe_clean_rx_ring($p0, $p1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vfree($p6);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} pci_free_consistent($p3, $i10, $p13, $i15);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_free_tx_resources: ref;

axiom pch_gbe_free_tx_resources == $sub.ref(0, 499494);

procedure pch_gbe_free_tx_resources($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_free_tx_resources($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} pch_gbe_clean_tx_ring($p0, $p1);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vfree($p6);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} pci_free_consistent($p3, $i10, $p13, $i15);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 500526);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    return;
}



const vzalloc: ref;

axiom vzalloc == $sub.ref(0, 501558);

procedure vzalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vzalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} {:cexpr "vzalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p1 := external_alloc();
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 502590);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 503622);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 961} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mii_nway_restart: ref;

axiom mii_nway_restart == $sub.ref(0, 504654);

procedure mii_nway_restart($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_nway_restart($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 963} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_gbe_hal_read_phy_reg: ref;

axiom pch_gbe_hal_read_phy_reg == $sub.ref(0, 505686);

procedure pch_gbe_hal_read_phy_reg($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_hal_read_phy_reg($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} {:cexpr "pch_gbe_hal_read_phy_reg:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 965} $i14 := devirtbounce.13($p13, $p0, $i1, $p2);
    call {:si_unique_call 966} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 506718);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 967} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 968} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 969} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 507750);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p2 := dev_name($p1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 508782);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p9 := kobject_name($p8);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 509814);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ethtool_cmd_speed: ref;

axiom ethtool_cmd_speed == $sub.ref(0, 510846);

procedure ethtool_cmd_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_cmd_speed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 16);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, $i7);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const pch_gbe_hal_write_phy_reg: ref;

axiom pch_gbe_hal_write_phy_reg == $sub.ref(0, 511878);

procedure pch_gbe_hal_write_phy_reg($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_hal_write_phy_reg($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} {:cexpr "pch_gbe_hal_write_phy_reg:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 973} {:cexpr "pch_gbe_hal_write_phy_reg:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i2);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    call {:si_unique_call 974} $i16 := devirtbounce.14($p13, $p0, $i1, $i15);
    call {:si_unique_call 975} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const ethtool_cmd_speed_set: ref;

axiom ethtool_cmd_speed_set == $sub.ref(0, 512910);

procedure ethtool_cmd_speed_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ethtool_cmd_speed_set($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} {:cexpr "ethtool_cmd_speed_set:arg:speed"} boogie_si_record_i32($i1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 16);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    return;
}



const mii_ethtool_sset: ref;

axiom mii_ethtool_sset == $sub.ref(0, 513942);

procedure mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 978} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mii_ethtool_gset: ref;

axiom mii_ethtool_gset == $sub.ref(0, 514974);

procedure mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 516006);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 982} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_gbe_plat_get_bus_info: ref;

axiom pch_gbe_plat_get_bus_info == $sub.ref(0, 517038);

procedure pch_gbe_plat_get_bus_info($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_plat_get_bus_info($p0: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 3);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(144, 1)), $mul.ref(1, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 6);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(144, 1)), $mul.ref(2, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 1);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_plat_init_hw: ref;

axiom pch_gbe_plat_init_hw == $sub.ref(0, 518070);

procedure pch_gbe_plat_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_plat_init_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_250: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i1 := pch_gbe_phy_get_id($p0);
    call {:si_unique_call 984} {:cexpr "ret_val"} boogie_si_record_i32($i1);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} pch_gbe_phy_init_setting($p0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} pch_gbe_phy_set_rgmii($p0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_250 := netdev_err.ref.ref($p6, .str.111);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_phy_read_reg_miic: ref;

axiom pch_gbe_phy_read_reg_miic == $sub.ref(0, 519102);

procedure pch_gbe_phy_read_reg_miic($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_read_reg_miic($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i16;
  var $i10: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} {:cexpr "pch_gbe_phy_read_reg_miic:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i1, 31);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(0, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i13 := pch_gbe_mac_ctrl_miim($p0, $i12, 0, $i1, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i13);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_251 := netdev_err.ref.ref.i32($p8, .str.4, $i1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_gbe_phy_write_reg_miic: ref;

axiom pch_gbe_phy_write_reg_miic == $sub.ref(0, 520134);

procedure pch_gbe_phy_write_reg_miic($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_write_reg_miic($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i10: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} {:cexpr "pch_gbe_phy_write_reg_miic:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 992} {:cexpr "pch_gbe_phy_write_reg_miic:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i1, 31);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(0, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i2);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_253 := pch_gbe_mac_ctrl_miim($p0, $i12, 67108864, $i1, $i14);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_252 := netdev_err.ref.ref.i32($p8, .str.4, $i1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_gbe_phy_hw_reset: ref;

axiom pch_gbe_phy_hw_reset == $sub.ref(0, 521166);

procedure pch_gbe_phy_hw_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_hw_reset($p0: ref)
{
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_254 := pch_gbe_phy_write_reg_miic($p0, 0, 4416);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_255 := pch_gbe_phy_write_reg_miic($p0, 4, 480);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_256 := pch_gbe_phy_write_reg_miic($p0, 7, 8193);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_257 := pch_gbe_phy_write_reg_miic($p0, 9, 768);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_258 := pch_gbe_phy_write_reg_miic($p0, 16, 494);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_phy_sw_reset: ref;

axiom pch_gbe_phy_sw_reset == $sub.ref(0, 522198);

procedure pch_gbe_phy_sw_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_sw_reset($p0: ref)
{
  var $p1: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_259 := pch_gbe_phy_read_reg_miic($p0, 0, $p1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 32768);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i6);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_260 := pch_gbe_phy_write_reg_miic($p0, 0, $i9);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __const_udelay(4295);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_phy_power_up: ref;

axiom pch_gbe_phy_power_up == $sub.ref(0, 523230);

procedure pch_gbe_phy_power_up($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_power_up($p0: ref)
{
  var $p1: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, 0);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_261 := pch_gbe_phy_read_reg_miic($p0, 0, $p1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p1);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 63487);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i6);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_262 := pch_gbe_phy_write_reg_miic($p0, 0, $i9);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_phy_power_down: ref;

axiom pch_gbe_phy_power_down == $sub.ref(0, 524262);

procedure pch_gbe_phy_power_down($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_power_down($p0: ref)
{
  var $p1: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, 0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_263 := pch_gbe_phy_read_reg_miic($p0, 0, $p1);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p1);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 2048);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i6);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p1);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_264 := pch_gbe_phy_write_reg_miic($p0, 0, $i9);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __const_udelay(4295000);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 525294);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_mac_ctrl_miim: ref;

axiom pch_gbe_mac_ctrl_miim == $sub.ref(0, 526326);

procedure pch_gbe_mac_ctrl_miim($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i16) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_ctrl_miim($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i16) returns ($r: i16)
{
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $p66: ref;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i71: i16;
  var $i25: i16;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $i349: i32;
  var $i350: i32;
  var $i351: i1;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $i356: i32;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i32;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
  var $i372: i1;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i32;
  var $i385: i32;
  var $i386: i1;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $i405: i32;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $i412: i32;
  var $i413: i32;
  var $i414: i1;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $i419: i32;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $i426: i32;
  var $i427: i32;
  var $i428: i1;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i32;
  var $i434: i32;
  var $i435: i1;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $i441: i32;
  var $i442: i1;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i32;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i32;
  var $i455: i32;
  var $i456: i1;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $i461: i32;
  var $i462: i32;
  var $i463: i1;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i32;
  var $i469: i32;
  var $i470: i1;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $i475: i32;
  var $i476: i32;
  var $i477: i1;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $i482: i32;
  var $i483: i32;
  var $i484: i1;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $i489: i32;
  var $i490: i32;
  var $i491: i1;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $i496: i32;
  var $i497: i32;
  var $i498: i1;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i32;
  var $i504: i32;
  var $i505: i1;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i32;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $i517: i32;
  var $i518: i32;
  var $i519: i1;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $i524: i32;
  var $i525: i32;
  var $i526: i1;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $i531: i32;
  var $i532: i32;
  var $i533: i1;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $i538: i32;
  var $i539: i32;
  var $i540: i1;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $i545: i32;
  var $i546: i32;
  var $i547: i1;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $i552: i32;
  var $i553: i32;
  var $i554: i1;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $i559: i32;
  var $i560: i32;
  var $i561: i1;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $i566: i32;
  var $i567: i32;
  var $i568: i1;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $i573: i32;
  var $i574: i32;
  var $i575: i1;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i32;
  var $i581: i32;
  var $i582: i1;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $i587: i32;
  var $i588: i32;
  var $i589: i1;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $i594: i32;
  var $i595: i32;
  var $i596: i1;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $i601: i32;
  var $i602: i32;
  var $i603: i1;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $i608: i32;
  var $i609: i32;
  var $i610: i1;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i32;
  var $i616: i32;
  var $i617: i1;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $i622: i32;
  var $i623: i32;
  var $i624: i1;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $i629: i32;
  var $i630: i32;
  var $i631: i1;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $i636: i32;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $i643: i32;
  var $i644: i32;
  var $i645: i1;
  var $p646: ref;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $i650: i32;
  var $i651: i32;
  var $i652: i1;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $i657: i32;
  var $i658: i32;
  var $i659: i1;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $i664: i32;
  var $i665: i32;
  var $i666: i1;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $i671: i32;
  var $i672: i32;
  var $i673: i1;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $i678: i32;
  var $i679: i32;
  var $i680: i1;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $i685: i32;
  var $i686: i32;
  var $i687: i1;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $i692: i32;
  var $i693: i32;
  var $i694: i1;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $i699: i32;
  var $i700: i32;
  var $i701: i1;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $i706: i32;
  var $i707: i32;
  var $i708: i1;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $i713: i32;
  var $i714: i32;
  var $i715: i1;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $i720: i32;
  var $i721: i32;
  var $i722: i1;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $i727: i32;
  var $i728: i32;
  var $i729: i1;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i32;
  var $i735: i32;
  var $i736: i1;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $i741: i32;
  var $i742: i32;
  var $i743: i1;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $i748: i32;
  var $i749: i32;
  var $i750: i1;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $i755: i32;
  var $i756: i32;
  var $i757: i1;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $p761: ref;
  var $i45: i32;
  var $i762: i32;
  var $i763: i1;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $i768: i32;
  var $i769: i32;
  var $i770: i1;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $i775: i32;
  var $i776: i32;
  var $i777: i1;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $i782: i32;
  var $i783: i32;
  var $i784: i1;
  var $p785: ref;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $i789: i32;
  var $i790: i32;
  var $i791: i1;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $i796: i32;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $i803: i32;
  var $i804: i32;
  var $i805: i1;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $i810: i32;
  var $i811: i32;
  var $i812: i1;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $i817: i32;
  var $i818: i32;
  var $i819: i1;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $i824: i32;
  var $i825: i32;
  var $i826: i1;
  var $p827: ref;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $i831: i32;
  var $i832: i32;
  var $i833: i1;
  var $p834: ref;
  var $p835: ref;
  var $p836: ref;
  var $p837: ref;
  var $i838: i32;
  var $i839: i32;
  var $i840: i1;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $i845: i32;
  var $i846: i32;
  var $i847: i1;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $i852: i32;
  var $i853: i32;
  var $i854: i1;
  var $p855: ref;
  var $p856: ref;
  var $p857: ref;
  var $p858: ref;
  var $i859: i32;
  var $i860: i32;
  var $i861: i1;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $p865: ref;
  var $i866: i32;
  var $i867: i32;
  var $i868: i1;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $i873: i32;
  var $i874: i32;
  var $i875: i1;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $p879: ref;
  var $i880: i32;
  var $i881: i32;
  var $i882: i1;
  var $p883: ref;
  var $p884: ref;
  var $p885: ref;
  var $p886: ref;
  var $i887: i32;
  var $i888: i32;
  var $i889: i1;
  var $p890: ref;
  var $p891: ref;
  var $p892: ref;
  var $p893: ref;
  var $i894: i32;
  var $i895: i32;
  var $i896: i1;
  var $p897: ref;
  var $p898: ref;
  var $p899: ref;
  var $p900: ref;
  var $i901: i32;
  var $i902: i32;
  var $i903: i1;
  var $p904: ref;
  var $p905: ref;
  var $p906: ref;
  var $p907: ref;
  var $i908: i32;
  var $i909: i32;
  var $i910: i1;
  var $p911: ref;
  var $p912: ref;
  var $p913: ref;
  var $p914: ref;
  var $i915: i32;
  var $i916: i32;
  var $i917: i1;
  var $p918: ref;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $i922: i32;
  var $i923: i32;
  var $i924: i1;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p928: ref;
  var $i929: i32;
  var $i930: i32;
  var $i931: i1;
  var $p932: ref;
  var $p933: ref;
  var $p934: ref;
  var $p935: ref;
  var $i936: i32;
  var $i937: i32;
  var $i938: i1;
  var $p939: ref;
  var $p940: ref;
  var $p941: ref;
  var $p942: ref;
  var $i943: i32;
  var $i944: i32;
  var $i945: i1;
  var $p946: ref;
  var $p947: ref;
  var $p948: ref;
  var $p949: ref;
  var $i950: i32;
  var $i951: i32;
  var $i952: i1;
  var $p953: ref;
  var $p954: ref;
  var $p955: ref;
  var $p956: ref;
  var $i957: i32;
  var $i958: i32;
  var $i959: i1;
  var $p960: ref;
  var $p961: ref;
  var $p962: ref;
  var $p963: ref;
  var $i964: i32;
  var $i965: i32;
  var $i966: i1;
  var $p967: ref;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $i971: i32;
  var $i972: i32;
  var $i973: i1;
  var $p974: ref;
  var $p975: ref;
  var $p976: ref;
  var $p977: ref;
  var $i978: i32;
  var $i979: i32;
  var $i980: i1;
  var $p981: ref;
  var $p982: ref;
  var $p983: ref;
  var $p984: ref;
  var $i985: i32;
  var $i986: i32;
  var $i987: i1;
  var $p988: ref;
  var $p989: ref;
  var $p990: ref;
  var $p991: ref;
  var $i992: i32;
  var $i993: i32;
  var $i994: i1;
  var $p995: ref;
  var $p996: ref;
  var $p997: ref;
  var $p998: ref;
  var $i999: i32;
  var $i1000: i32;
  var $i1001: i1;
  var $p1002: ref;
  var $p1003: ref;
  var $p1004: ref;
  var $p1005: ref;
  var $i1006: i32;
  var $i1007: i32;
  var $i1008: i1;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $i1013: i32;
  var $i1014: i32;
  var $i1015: i1;
  var $p1016: ref;
  var $p1017: ref;
  var $p1018: ref;
  var $p1019: ref;
  var $i1020: i32;
  var $i1021: i32;
  var $i1022: i1;
  var $p1023: ref;
  var $p1024: ref;
  var $p1025: ref;
  var $p1026: ref;
  var $i1027: i32;
  var $i1028: i32;
  var $i1029: i1;
  var $p1030: ref;
  var $p1031: ref;
  var $p1032: ref;
  var $p1033: ref;
  var $i1034: i32;
  var $i1035: i32;
  var $i1036: i1;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $p1040: ref;
  var $i1041: i32;
  var $i1042: i32;
  var $i1043: i1;
  var $p1044: ref;
  var $p1045: ref;
  var $p1046: ref;
  var $p1047: ref;
  var $i1048: i32;
  var $i1049: i32;
  var $i1050: i1;
  var $p1051: ref;
  var $p1052: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $i1055: i32;
  var $i1056: i32;
  var $i1057: i1;
  var $p1058: ref;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $i1062: i32;
  var $i1063: i32;
  var $i1064: i1;
  var $p1065: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $p1068: ref;
  var $i1069: i32;
  var $i1070: i32;
  var $i1071: i1;
  var $p1072: ref;
  var $p1073: ref;
  var $p1074: ref;
  var $p1075: ref;
  var $i1076: i32;
  var $i1077: i32;
  var $i1078: i1;
  var $p1079: ref;
  var $p1080: ref;
  var $p1081: ref;
  var $p1082: ref;
  var $i1083: i32;
  var $i1084: i32;
  var $i1085: i1;
  var $p1086: ref;
  var $p1087: ref;
  var $p1088: ref;
  var $p1089: ref;
  var $i1090: i32;
  var $i1091: i32;
  var $i1092: i1;
  var $p1093: ref;
  var $p1094: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $i1097: i32;
  var $i1098: i32;
  var $i1099: i1;
  var $p1100: ref;
  var $p1101: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $i1104: i32;
  var $i1105: i32;
  var $i1106: i1;
  var $p1107: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $p1110: ref;
  var $i1111: i32;
  var $i1112: i32;
  var $i1113: i1;
  var $p1114: ref;
  var $p1115: ref;
  var $p1116: ref;
  var $p1117: ref;
  var $i1118: i32;
  var $i1119: i32;
  var $i1120: i1;
  var $p1121: ref;
  var $p1122: ref;
  var $p1123: ref;
  var $p1124: ref;
  var $i1125: i32;
  var $i1126: i32;
  var $i1127: i1;
  var $p1128: ref;
  var $p1129: ref;
  var $p1130: ref;
  var $p1131: ref;
  var $i1132: i32;
  var $i1133: i32;
  var $i1134: i1;
  var $p1135: ref;
  var $p1136: ref;
  var $p1137: ref;
  var $p1138: ref;
  var $i1139: i32;
  var $i1140: i32;
  var $i1141: i1;
  var $p1142: ref;
  var $p1143: ref;
  var $p1144: ref;
  var $p1145: ref;
  var $i1146: i32;
  var $i1147: i32;
  var $i1148: i1;
  var $p1149: ref;
  var $p1150: ref;
  var $p1151: ref;
  var $p1152: ref;
  var $i1153: i32;
  var $i1154: i32;
  var $i1155: i1;
  var $p1156: ref;
  var $p1157: ref;
  var $p1158: ref;
  var $p1159: ref;
  var $i1160: i32;
  var $i1161: i32;
  var $i1162: i1;
  var $p1163: ref;
  var $p1164: ref;
  var $p1165: ref;
  var $p1166: ref;
  var $i1167: i32;
  var $i1168: i32;
  var $i1169: i1;
  var $p1170: ref;
  var $p1171: ref;
  var $p1172: ref;
  var $p1173: ref;
  var $i1174: i32;
  var $i1175: i32;
  var $i1176: i1;
  var $p1177: ref;
  var $p1178: ref;
  var $p1179: ref;
  var $p1180: ref;
  var $i1181: i32;
  var $i1182: i32;
  var $i1183: i1;
  var $p1184: ref;
  var $p1185: ref;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i32;
  var $i1189: i32;
  var $i1190: i1;
  var $p1191: ref;
  var $p1192: ref;
  var $p1193: ref;
  var $p1194: ref;
  var $i1195: i32;
  var $i1196: i32;
  var $i1197: i1;
  var $p1198: ref;
  var $p1199: ref;
  var $p1200: ref;
  var $p1201: ref;
  var $i1202: i32;
  var $i1203: i32;
  var $i1204: i1;
  var $p1205: ref;
  var $p1206: ref;
  var $p1207: ref;
  var $p1208: ref;
  var $i1209: i32;
  var $i1210: i32;
  var $i1211: i1;
  var $p1212: ref;
  var $p1213: ref;
  var $p1214: ref;
  var $p1215: ref;
  var $i1216: i32;
  var $i1217: i32;
  var $i1218: i1;
  var $p1219: ref;
  var $p1220: ref;
  var $p1221: ref;
  var $p1222: ref;
  var $i1223: i32;
  var $i1224: i32;
  var $i1225: i1;
  var $p1226: ref;
  var $p1227: ref;
  var $p1228: ref;
  var $p1229: ref;
  var $i1230: i32;
  var $i1231: i32;
  var $i1232: i1;
  var $p1233: ref;
  var $p1234: ref;
  var $p1235: ref;
  var $p1236: ref;
  var $i1237: i32;
  var $i1238: i32;
  var $i1239: i1;
  var $p1240: ref;
  var $p1241: ref;
  var $p1242: ref;
  var $p1243: ref;
  var $i1244: i32;
  var $i1245: i32;
  var $i1246: i1;
  var $p1247: ref;
  var $p1248: ref;
  var $p1249: ref;
  var $p1250: ref;
  var $i1251: i32;
  var $i1252: i32;
  var $i1253: i1;
  var $p1254: ref;
  var $p1255: ref;
  var $p1256: ref;
  var $p1257: ref;
  var $i1258: i32;
  var $i1259: i32;
  var $i1260: i1;
  var $p1261: ref;
  var $p1262: ref;
  var $p1263: ref;
  var $p1264: ref;
  var $i1265: i32;
  var $i1266: i32;
  var $i1267: i1;
  var $p1268: ref;
  var $p1269: ref;
  var $p1270: ref;
  var $p1271: ref;
  var $i1272: i32;
  var $i1273: i32;
  var $i1274: i1;
  var $p1275: ref;
  var $p1276: ref;
  var $p1277: ref;
  var $p1278: ref;
  var $i1279: i32;
  var $i1280: i32;
  var $i1281: i1;
  var $p1282: ref;
  var $p1283: ref;
  var $p1284: ref;
  var $p1285: ref;
  var $i1286: i32;
  var $i1287: i32;
  var $i1288: i1;
  var $p1289: ref;
  var $p1290: ref;
  var $p1291: ref;
  var $p1292: ref;
  var $i1293: i32;
  var $i1294: i32;
  var $i1295: i1;
  var $p1296: ref;
  var $p1297: ref;
  var $p1298: ref;
  var $p1299: ref;
  var $i1300: i32;
  var $i1301: i32;
  var $i1302: i1;
  var $p1303: ref;
  var $p1304: ref;
  var $p1305: ref;
  var $p1306: ref;
  var $i1307: i32;
  var $i1308: i32;
  var $i1309: i1;
  var $p1310: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $p1313: ref;
  var $i1314: i32;
  var $i1315: i32;
  var $i1316: i1;
  var $p1317: ref;
  var $p1318: ref;
  var $p1319: ref;
  var $p1320: ref;
  var $i1321: i32;
  var $i1322: i32;
  var $i1323: i1;
  var $p1324: ref;
  var $p1325: ref;
  var $p1326: ref;
  var $p1327: ref;
  var $i1328: i32;
  var $i1329: i32;
  var $i1330: i1;
  var $p1331: ref;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $i1335: i32;
  var $i1336: i32;
  var $i1337: i1;
  var $p1338: ref;
  var $p1339: ref;
  var $p1340: ref;
  var $p1341: ref;
  var $i1342: i32;
  var $i1343: i32;
  var $i1344: i1;
  var $p1345: ref;
  var $p1346: ref;
  var $p1347: ref;
  var $p1348: ref;
  var $i1349: i32;
  var $i1350: i32;
  var $i1351: i1;
  var $p1352: ref;
  var $p1353: ref;
  var $p1354: ref;
  var $p1355: ref;
  var $i1356: i32;
  var $i1357: i32;
  var $i1358: i1;
  var $p1359: ref;
  var $p1360: ref;
  var $p1361: ref;
  var $p1362: ref;
  var $i1363: i32;
  var $i1364: i32;
  var $i1365: i1;
  var $p1366: ref;
  var $p1367: ref;
  var $p1368: ref;
  var $p1369: ref;
  var $i1370: i32;
  var $i1371: i32;
  var $i1372: i1;
  var $p1373: ref;
  var $p1374: ref;
  var $p1375: ref;
  var $p1376: ref;
  var $i1377: i32;
  var $i1378: i32;
  var $i1379: i1;
  var $p1380: ref;
  var $p1381: ref;
  var $p1382: ref;
  var $p1383: ref;
  var $i1384: i32;
  var $i1385: i32;
  var $i1386: i1;
  var $p1387: ref;
  var $p1388: ref;
  var $p1389: ref;
  var $p1390: ref;
  var $i1391: i32;
  var $i1392: i32;
  var $i1393: i1;
  var $p1394: ref;
  var $p1395: ref;
  var $p1396: ref;
  var $p1397: ref;
  var $i1398: i32;
  var $i1399: i32;
  var $i1400: i1;
  var $p1401: ref;
  var $p1402: ref;
  var $p1403: ref;
  var $p1404: ref;
  var $i1405: i32;
  var $i1406: i32;
  var $i1407: i1;
  var $p1408: ref;
  var $p1409: ref;
  var $p1410: ref;
  var $p1411: ref;
  var $i1412: i32;
  var $i1413: i32;
  var $i1414: i1;
  var $p1415: ref;
  var $p1416: ref;
  var $p1417: ref;
  var $p1418: ref;
  var $i1419: i32;
  var $i1420: i32;
  var $i1421: i1;
  var $p1422: ref;
  var $p1423: ref;
  var $p1424: ref;
  var $p1425: ref;
  var $i1426: i32;
  var $i1427: i32;
  var $i1428: i1;
  var $p1429: ref;
  var $p1430: ref;
  var $p1431: ref;
  var $p1432: ref;
  var $i1433: i32;
  var $i1434: i32;
  var $i1435: i1;
  var $p1436: ref;
  var $p1437: ref;
  var $p1438: ref;
  var $p1439: ref;
  var $i1440: i32;
  var $i1441: i32;
  var $i1442: i1;
  var $p1443: ref;
  var $p1444: ref;
  var $p1445: ref;
  var $p1446: ref;
  var $i1447: i32;
  var $i1448: i32;
  var $i1449: i1;
  var $p1450: ref;
  var $p1451: ref;
  var $p1452: ref;
  var $p1453: ref;
  var $i1454: i32;
  var $i1455: i32;
  var $i1456: i1;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1014} {:cexpr "pch_gbe_mac_ctrl_miim:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1015} {:cexpr "pch_gbe_mac_ctrl_miim:arg:dir"} boogie_si_record_i32($i2);
    call {:si_unique_call 1016} {:cexpr "pch_gbe_mac_ctrl_miim:arg:reg"} boogie_si_record_i32($i3);
    call {:si_unique_call 1017} {:cexpr "pch_gbe_mac_ctrl_miim:arg:data"} boogie_si_record_i16($i4);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p9 := spinlock_check($p8);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 1020} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i15 := ioread32($p14);
    call {:si_unique_call 1022} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 67108864);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i18 := 100;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} __const_udelay(85900);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p765 := $load.ref($M.0, $p764);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p765, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p767 := $bitcast.ref.ref($p766);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i768 := ioread32($p767);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i769 := $and.i32($i768, 67108864);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i770 := $ne.i32($i769, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i18 := 99;
    assume {:branchcond $i770} true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i770 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} __const_udelay(85900);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.0, $p771);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p772, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p774 := $bitcast.ref.ref($p773);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i775 := ioread32($p774);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i776 := $and.i32($i775, 67108864);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i777 := $ne.i32($i776, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i18 := 98;
    assume {:branchcond $i777} true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} __const_udelay(85900);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p779 := $load.ref($M.0, $p778);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p779, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p781 := $bitcast.ref.ref($p780);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i782 := ioread32($p781);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i783 := $and.i32($i782, 67108864);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i784 := $ne.i32($i783, 0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i18 := 97;
    assume {:branchcond $i784} true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i784 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} __const_udelay(85900);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p786 := $load.ref($M.0, $p785);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p786, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p788 := $bitcast.ref.ref($p787);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i789 := ioread32($p788);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i790 := $and.i32($i789, 67108864);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i791 := $ne.i32($i790, 0);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i18 := 96;
    assume {:branchcond $i791} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} __const_udelay(85900);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p793 := $load.ref($M.0, $p792);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p793, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p795 := $bitcast.ref.ref($p794);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i796 := ioread32($p795);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i797 := $and.i32($i796, 67108864);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i798 := $ne.i32($i797, 0);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i18 := 95;
    assume {:branchcond $i798} true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} __const_udelay(85900);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p800 := $load.ref($M.0, $p799);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p800, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p802 := $bitcast.ref.ref($p801);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i803 := ioread32($p802);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i804 := $and.i32($i803, 67108864);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i805 := $ne.i32($i804, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i18 := 94;
    assume {:branchcond $i805} true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} __const_udelay(85900);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p807 := $load.ref($M.0, $p806);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($p807, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p809 := $bitcast.ref.ref($p808);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i810 := ioread32($p809);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i811 := $and.i32($i810, 67108864);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i812 := $ne.i32($i811, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i18 := 93;
    assume {:branchcond $i812} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} __const_udelay(85900);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.0, $p813);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p814, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p816 := $bitcast.ref.ref($p815);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i817 := ioread32($p816);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i818 := $and.i32($i817, 67108864);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i819 := $ne.i32($i818, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i18 := 92;
    assume {:branchcond $i819} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} __const_udelay(85900);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p821 := $load.ref($M.0, $p820);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p821, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p823 := $bitcast.ref.ref($p822);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i824 := ioread32($p823);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i825 := $and.i32($i824, 67108864);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i826 := $ne.i32($i825, 0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i18 := 91;
    assume {:branchcond $i826} true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} __const_udelay(85900);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.0, $p827);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p828, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p830 := $bitcast.ref.ref($p829);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i831 := ioread32($p830);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i832 := $and.i32($i831, 67108864);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i833 := $ne.i32($i832, 0);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i18 := 90;
    assume {:branchcond $i833} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} __const_udelay(85900);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p835 := $load.ref($M.0, $p834);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p835, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p837 := $bitcast.ref.ref($p836);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i838 := ioread32($p837);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i839 := $and.i32($i838, 67108864);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i840 := $ne.i32($i839, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i18 := 89;
    assume {:branchcond $i840} true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} __const_udelay(85900);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.0, $p841);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($p842, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p844 := $bitcast.ref.ref($p843);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i845 := ioread32($p844);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i846 := $and.i32($i845, 67108864);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i847 := $ne.i32($i846, 0);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i18 := 88;
    assume {:branchcond $i847} true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i847 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} __const_udelay(85900);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p849 := $load.ref($M.0, $p848);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p849, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p851 := $bitcast.ref.ref($p850);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i852 := ioread32($p851);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i853 := $and.i32($i852, 67108864);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i854 := $ne.i32($i853, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i18 := 87;
    assume {:branchcond $i854} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i854 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} __const_udelay(85900);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p856 := $load.ref($M.0, $p855);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref($p856, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p858 := $bitcast.ref.ref($p857);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i859 := ioread32($p858);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i860 := $and.i32($i859, 67108864);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i861 := $ne.i32($i860, 0);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i18 := 86;
    assume {:branchcond $i861} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} __const_udelay(85900);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p863 := $load.ref($M.0, $p862);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($p863, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p865 := $bitcast.ref.ref($p864);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i866 := ioread32($p865);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i867 := $and.i32($i866, 67108864);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i868 := $ne.i32($i867, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i18 := 85;
    assume {:branchcond $i868} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} __const_udelay(85900);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.0, $p869);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p870, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p872 := $bitcast.ref.ref($p871);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i873 := ioread32($p872);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i874 := $and.i32($i873, 67108864);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i875 := $ne.i32($i874, 0);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i18 := 84;
    assume {:branchcond $i875} true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} __const_udelay(85900);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p877 := $load.ref($M.0, $p876);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p877, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p879 := $bitcast.ref.ref($p878);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i880 := ioread32($p879);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i881 := $and.i32($i880, 67108864);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i882 := $ne.i32($i881, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i18 := 83;
    assume {:branchcond $i882} true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __const_udelay(85900);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p884 := $load.ref($M.0, $p883);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($p884, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p886 := $bitcast.ref.ref($p885);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i887 := ioread32($p886);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i888 := $and.i32($i887, 67108864);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i889 := $ne.i32($i888, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i18 := 82;
    assume {:branchcond $i889} true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i889 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} __const_udelay(85900);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p891 := $load.ref($M.0, $p890);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($p891, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p893 := $bitcast.ref.ref($p892);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i894 := ioread32($p893);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i895 := $and.i32($i894, 67108864);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i896 := $ne.i32($i895, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i18 := 81;
    assume {:branchcond $i896} true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} __const_udelay(85900);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p898 := $load.ref($M.0, $p897);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($p898, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p900 := $bitcast.ref.ref($p899);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i901 := ioread32($p900);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i902 := $and.i32($i901, 67108864);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i903 := $ne.i32($i902, 0);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i18 := 80;
    assume {:branchcond $i903} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} __const_udelay(85900);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p905 := $load.ref($M.0, $p904);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p905, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p907 := $bitcast.ref.ref($p906);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i908 := ioread32($p907);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i909 := $and.i32($i908, 67108864);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i910 := $ne.i32($i909, 0);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i18 := 79;
    assume {:branchcond $i910} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i910 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} __const_udelay(85900);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.0, $p911);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($p912, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p914 := $bitcast.ref.ref($p913);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i915 := ioread32($p914);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i916 := $and.i32($i915, 67108864);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i917 := $ne.i32($i916, 0);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i18 := 78;
    assume {:branchcond $i917} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} __const_udelay(85900);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p919 := $load.ref($M.0, $p918);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($p919, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p921 := $bitcast.ref.ref($p920);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i922 := ioread32($p921);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i923 := $and.i32($i922, 67108864);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i924 := $ne.i32($i923, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i18 := 77;
    assume {:branchcond $i924} true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __const_udelay(85900);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p926, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p928 := $bitcast.ref.ref($p927);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i929 := ioread32($p928);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i930 := $and.i32($i929, 67108864);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i931 := $ne.i32($i930, 0);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i18 := 76;
    assume {:branchcond $i931} true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} __const_udelay(85900);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p933 := $load.ref($M.0, $p932);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p933, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p935 := $bitcast.ref.ref($p934);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i936 := ioread32($p935);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i937 := $and.i32($i936, 67108864);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i938 := $ne.i32($i937, 0);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i18 := 75;
    assume {:branchcond $i938} true;
    goto $bb520, $bb521;

  $bb521:
    assume !($i938 == 1);
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} __const_udelay(85900);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p940 := $load.ref($M.0, $p939);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($add.ref($p940, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p942 := $bitcast.ref.ref($p941);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i943 := ioread32($p942);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i944 := $and.i32($i943, 67108864);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i945 := $ne.i32($i944, 0);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i18 := 74;
    assume {:branchcond $i945} true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} __const_udelay(85900);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p947 := $load.ref($M.0, $p946);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($p947, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p949 := $bitcast.ref.ref($p948);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i950 := ioread32($p949);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i951 := $and.i32($i950, 67108864);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i952 := $ne.i32($i951, 0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i18 := 73;
    assume {:branchcond $i952} true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} __const_udelay(85900);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p954 := $load.ref($M.0, $p953);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($p954, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p956 := $bitcast.ref.ref($p955);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i957 := ioread32($p956);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i958 := $and.i32($i957, 67108864);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i959 := $ne.i32($i958, 0);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i18 := 72;
    assume {:branchcond $i959} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __const_udelay(85900);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    $p960 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p961 := $load.ref($M.0, $p960);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p961, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p963 := $bitcast.ref.ref($p962);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i964 := ioread32($p963);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i965 := $and.i32($i964, 67108864);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i966 := $ne.i32($i965, 0);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i18 := 71;
    assume {:branchcond $i966} true;
    goto $bb536, $bb537;

  $bb537:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} __const_udelay(85900);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p968 := $load.ref($M.0, $p967);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($p968, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p970 := $bitcast.ref.ref($p969);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i971 := ioread32($p970);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i972 := $and.i32($i971, 67108864);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i973 := $ne.i32($i972, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i18 := 70;
    assume {:branchcond $i973} true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i973 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} __const_udelay(85900);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p975 := $load.ref($M.0, $p974);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($p975, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p977 := $bitcast.ref.ref($p976);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i978 := ioread32($p977);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i979 := $and.i32($i978, 67108864);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i980 := $ne.i32($i979, 0);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i18 := 69;
    assume {:branchcond $i980} true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i980 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} __const_udelay(85900);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p982 := $load.ref($M.0, $p981);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($p982, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p984 := $bitcast.ref.ref($p983);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i985 := ioread32($p984);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i986 := $and.i32($i985, 67108864);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i987 := $ne.i32($i986, 0);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i18 := 68;
    assume {:branchcond $i987} true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __const_udelay(85900);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p989 := $load.ref($M.0, $p988);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($p989, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p991 := $bitcast.ref.ref($p990);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i992 := ioread32($p991);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i993 := $and.i32($i992, 67108864);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i994 := $ne.i32($i993, 0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i18 := 67;
    assume {:branchcond $i994} true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i994 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} __const_udelay(85900);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p996 := $load.ref($M.0, $p995);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p996, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p998 := $bitcast.ref.ref($p997);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i999 := ioread32($p998);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i1000 := $and.i32($i999, 67108864);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i1001 := $ne.i32($i1000, 0);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i18 := 66;
    assume {:branchcond $i1001} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i1001 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} __const_udelay(85900);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p1003 := $load.ref($M.0, $p1002);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($p1003, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p1005 := $bitcast.ref.ref($p1004);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i1006 := ioread32($p1005);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i1007 := $and.i32($i1006, 67108864);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i1008 := $ne.i32($i1007, 0);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i18 := 65;
    assume {:branchcond $i1008} true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i1008 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} __const_udelay(85900);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p1010 := $load.ref($M.0, $p1009);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p1010, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p1012 := $bitcast.ref.ref($p1011);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i1013 := ioread32($p1012);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i1014 := $and.i32($i1013, 67108864);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i1015 := $ne.i32($i1014, 0);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i18 := 64;
    assume {:branchcond $i1015} true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i1015 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} __const_udelay(85900);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    $p1016 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p1017 := $load.ref($M.0, $p1016);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($p1017, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p1019 := $bitcast.ref.ref($p1018);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i1020 := ioread32($p1019);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i1021 := $and.i32($i1020, 67108864);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i1022 := $ne.i32($i1021, 0);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i18 := 63;
    assume {:branchcond $i1022} true;
    goto $bb568, $bb569;

  $bb569:
    assume !($i1022 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} __const_udelay(85900);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p1024 := $load.ref($M.0, $p1023);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p1025 := $add.ref($add.ref($p1024, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p1026 := $bitcast.ref.ref($p1025);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i1027 := ioread32($p1026);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i1028 := $and.i32($i1027, 67108864);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i1029 := $ne.i32($i1028, 0);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i18 := 62;
    assume {:branchcond $i1029} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i1029 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} __const_udelay(85900);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    $p1030 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p1031 := $load.ref($M.0, $p1030);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($p1031, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p1033 := $bitcast.ref.ref($p1032);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i1034 := ioread32($p1033);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i1035 := $and.i32($i1034, 67108864);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i1036 := $ne.i32($i1035, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i18 := 61;
    assume {:branchcond $i1036} true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i1036 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} __const_udelay(85900);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p1038 := $load.ref($M.0, $p1037);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p1039 := $add.ref($add.ref($p1038, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p1040 := $bitcast.ref.ref($p1039);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i1041 := ioread32($p1040);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i1042 := $and.i32($i1041, 67108864);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i1043 := $ne.i32($i1042, 0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i18 := 60;
    assume {:branchcond $i1043} true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i1043 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} __const_udelay(85900);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p1045 := $load.ref($M.0, $p1044);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p1045, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p1047 := $bitcast.ref.ref($p1046);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i1048 := ioread32($p1047);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i1049 := $and.i32($i1048, 67108864);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i1050 := $ne.i32($i1049, 0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i18 := 59;
    assume {:branchcond $i1050} true;
    goto $bb584, $bb585;

  $bb585:
    assume !($i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} __const_udelay(85900);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p1052 := $load.ref($M.0, $p1051);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($p1052, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p1054 := $bitcast.ref.ref($p1053);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i1055 := ioread32($p1054);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i1056 := $and.i32($i1055, 67108864);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i1057 := $ne.i32($i1056, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i18 := 58;
    assume {:branchcond $i1057} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i1057 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} __const_udelay(85900);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p1059 := $load.ref($M.0, $p1058);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($p1059, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p1061 := $bitcast.ref.ref($p1060);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i1062 := ioread32($p1061);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i1063 := $and.i32($i1062, 67108864);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i1064 := $ne.i32($i1063, 0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i18 := 57;
    assume {:branchcond $i1064} true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i1064 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} __const_udelay(85900);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p1066 := $load.ref($M.0, $p1065);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p1067 := $add.ref($add.ref($p1066, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p1068 := $bitcast.ref.ref($p1067);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i1069 := ioread32($p1068);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i1070 := $and.i32($i1069, 67108864);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i1071 := $ne.i32($i1070, 0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i18 := 56;
    assume {:branchcond $i1071} true;
    goto $bb596, $bb597;

  $bb597:
    assume !($i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __const_udelay(85900);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    $p1072 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p1073 := $load.ref($M.0, $p1072);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($p1073, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p1075 := $bitcast.ref.ref($p1074);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i1076 := ioread32($p1075);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i1077 := $and.i32($i1076, 67108864);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i1078 := $ne.i32($i1077, 0);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i18 := 55;
    assume {:branchcond $i1078} true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i1078 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} __const_udelay(85900);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p1080 := $load.ref($M.0, $p1079);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($add.ref($p1080, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p1082 := $bitcast.ref.ref($p1081);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i1083 := ioread32($p1082);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i1084 := $and.i32($i1083, 67108864);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i1085 := $ne.i32($i1084, 0);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i18 := 54;
    assume {:branchcond $i1085} true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i1085 == 1);
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} __const_udelay(85900);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p1087 := $load.ref($M.0, $p1086);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p1088 := $add.ref($add.ref($p1087, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p1089 := $bitcast.ref.ref($p1088);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i1090 := ioread32($p1089);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i1091 := $and.i32($i1090, 67108864);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i1092 := $ne.i32($i1091, 0);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i18 := 53;
    assume {:branchcond $i1092} true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} __const_udelay(85900);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    $p1093 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p1094 := $load.ref($M.0, $p1093);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p1095 := $add.ref($add.ref($p1094, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p1096 := $bitcast.ref.ref($p1095);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i1097 := ioread32($p1096);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i1098 := $and.i32($i1097, 67108864);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i1099 := $ne.i32($i1098, 0);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i18 := 52;
    assume {:branchcond $i1099} true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i1099 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} __const_udelay(85900);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p1101 := $load.ref($M.0, $p1100);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p1102 := $add.ref($add.ref($p1101, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p1103 := $bitcast.ref.ref($p1102);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i1104 := ioread32($p1103);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i1105 := $and.i32($i1104, 67108864);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i1106 := $ne.i32($i1105, 0);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i18 := 51;
    assume {:branchcond $i1106} true;
    goto $bb616, $bb617;

  $bb617:
    assume !($i1106 == 1);
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} __const_udelay(85900);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p1108 := $load.ref($M.0, $p1107);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p1108, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p1110 := $bitcast.ref.ref($p1109);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i1111 := ioread32($p1110);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i1112 := $and.i32($i1111, 67108864);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i1113 := $ne.i32($i1112, 0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i18 := 50;
    assume {:branchcond $i1113} true;
    goto $bb620, $bb621;

  $bb621:
    assume !($i1113 == 1);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} __const_udelay(85900);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    $p1114 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p1115 := $load.ref($M.0, $p1114);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref($p1115, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p1117 := $bitcast.ref.ref($p1116);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i1118 := ioread32($p1117);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i1119 := $and.i32($i1118, 67108864);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i1120 := $ne.i32($i1119, 0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i18 := 49;
    assume {:branchcond $i1120} true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i1120 == 1);
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} __const_udelay(85900);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.0, $p1121);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p1123 := $add.ref($add.ref($p1122, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p1124 := $bitcast.ref.ref($p1123);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i1125 := ioread32($p1124);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i1126 := $and.i32($i1125, 67108864);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i1127 := $ne.i32($i1126, 0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i18 := 48;
    assume {:branchcond $i1127} true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i1127 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} __const_udelay(85900);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p1129 := $load.ref($M.0, $p1128);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($p1129, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p1131 := $bitcast.ref.ref($p1130);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i1132 := ioread32($p1131);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i1133 := $and.i32($i1132, 67108864);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i1134 := $ne.i32($i1133, 0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i18 := 47;
    assume {:branchcond $i1134} true;
    goto $bb632, $bb633;

  $bb633:
    assume !($i1134 == 1);
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} __const_udelay(85900);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    $p1135 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p1136 := $load.ref($M.0, $p1135);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p1137 := $add.ref($add.ref($p1136, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p1138 := $bitcast.ref.ref($p1137);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i1139 := ioread32($p1138);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i1140 := $and.i32($i1139, 67108864);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i1141 := $ne.i32($i1140, 0);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i18 := 46;
    assume {:branchcond $i1141} true;
    goto $bb636, $bb637;

  $bb637:
    assume !($i1141 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} __const_udelay(85900);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $p1142 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p1143 := $load.ref($M.0, $p1142);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p1144 := $add.ref($add.ref($p1143, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p1145 := $bitcast.ref.ref($p1144);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i1146 := ioread32($p1145);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i1147 := $and.i32($i1146, 67108864);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i1148 := $ne.i32($i1147, 0);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i18 := 45;
    assume {:branchcond $i1148} true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i1148 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __const_udelay(85900);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p1150 := $load.ref($M.0, $p1149);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p1151 := $add.ref($add.ref($p1150, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p1152 := $bitcast.ref.ref($p1151);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i1153 := ioread32($p1152);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i1154 := $and.i32($i1153, 67108864);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i1155 := $ne.i32($i1154, 0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i18 := 44;
    assume {:branchcond $i1155} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i1155 == 1);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} __const_udelay(85900);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p1157 := $load.ref($M.0, $p1156);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p1158 := $add.ref($add.ref($p1157, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p1159 := $bitcast.ref.ref($p1158);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i1160 := ioread32($p1159);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i1161 := $and.i32($i1160, 67108864);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i1162 := $ne.i32($i1161, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i18 := 43;
    assume {:branchcond $i1162} true;
    goto $bb648, $bb649;

  $bb649:
    assume !($i1162 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} __const_udelay(85900);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p1163 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p1164 := $load.ref($M.0, $p1163);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p1165 := $add.ref($add.ref($p1164, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p1166 := $bitcast.ref.ref($p1165);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i1167 := ioread32($p1166);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i1168 := $and.i32($i1167, 67108864);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i1169 := $ne.i32($i1168, 0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i18 := 42;
    assume {:branchcond $i1169} true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i1169 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} __const_udelay(85900);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    $p1170 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p1171 := $load.ref($M.0, $p1170);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p1172 := $add.ref($add.ref($p1171, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p1173 := $bitcast.ref.ref($p1172);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i1174 := ioread32($p1173);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i1175 := $and.i32($i1174, 67108864);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i1176 := $ne.i32($i1175, 0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i18 := 41;
    assume {:branchcond $i1176} true;
    goto $bb656, $bb657;

  $bb657:
    assume !($i1176 == 1);
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} __const_udelay(85900);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    $p1177 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p1178 := $load.ref($M.0, $p1177);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p1179 := $add.ref($add.ref($p1178, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p1180 := $bitcast.ref.ref($p1179);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i1181 := ioread32($p1180);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i1182 := $and.i32($i1181, 67108864);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i1183 := $ne.i32($i1182, 0);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i18 := 40;
    assume {:branchcond $i1183} true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i1183 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} __const_udelay(85900);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $p1184 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p1185 := $load.ref($M.0, $p1184);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($p1185, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p1187 := $bitcast.ref.ref($p1186);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i1188 := ioread32($p1187);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i1189 := $and.i32($i1188, 67108864);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i1190 := $ne.i32($i1189, 0);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i18 := 39;
    assume {:branchcond $i1190} true;
    goto $bb664, $bb665;

  $bb665:
    assume !($i1190 == 1);
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} __const_udelay(85900);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p1192 := $load.ref($M.0, $p1191);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p1193 := $add.ref($add.ref($p1192, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p1194 := $bitcast.ref.ref($p1193);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i1195 := ioread32($p1194);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i1196 := $and.i32($i1195, 67108864);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i1197 := $ne.i32($i1196, 0);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i18 := 38;
    assume {:branchcond $i1197} true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i1197 == 1);
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} __const_udelay(85900);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    $p1198 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p1199 := $load.ref($M.0, $p1198);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($p1199, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p1201 := $bitcast.ref.ref($p1200);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i1202 := ioread32($p1201);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i1203 := $and.i32($i1202, 67108864);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i1204 := $ne.i32($i1203, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i18 := 37;
    assume {:branchcond $i1204} true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i1204 == 1);
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} __const_udelay(85900);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $p1205 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p1206 := $load.ref($M.0, $p1205);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p1207 := $add.ref($add.ref($p1206, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p1208 := $bitcast.ref.ref($p1207);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i1209 := ioread32($p1208);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i1210 := $and.i32($i1209, 67108864);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i1211 := $ne.i32($i1210, 0);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i18 := 36;
    assume {:branchcond $i1211} true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i1211 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} __const_udelay(85900);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p1213 := $load.ref($M.0, $p1212);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p1214 := $add.ref($add.ref($p1213, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p1215 := $bitcast.ref.ref($p1214);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i1216 := ioread32($p1215);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i1217 := $and.i32($i1216, 67108864);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i1218 := $ne.i32($i1217, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i18 := 35;
    assume {:branchcond $i1218} true;
    goto $bb680, $bb681;

  $bb681:
    assume !($i1218 == 1);
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} __const_udelay(85900);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p1220 := $load.ref($M.0, $p1219);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($p1220, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p1222 := $bitcast.ref.ref($p1221);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i1223 := ioread32($p1222);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i1224 := $and.i32($i1223, 67108864);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i1225 := $ne.i32($i1224, 0);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i18 := 34;
    assume {:branchcond $i1225} true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i1225 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} __const_udelay(85900);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    $p1226 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p1227 := $load.ref($M.0, $p1226);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p1228 := $add.ref($add.ref($p1227, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p1229 := $bitcast.ref.ref($p1228);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i1230 := ioread32($p1229);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i1231 := $and.i32($i1230, 67108864);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i1232 := $ne.i32($i1231, 0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i18 := 33;
    assume {:branchcond $i1232} true;
    goto $bb688, $bb689;

  $bb689:
    assume !($i1232 == 1);
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} __const_udelay(85900);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p1234 := $load.ref($M.0, $p1233);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p1235 := $add.ref($add.ref($p1234, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p1236 := $bitcast.ref.ref($p1235);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i1237 := ioread32($p1236);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i1238 := $and.i32($i1237, 67108864);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i1239 := $ne.i32($i1238, 0);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i18 := 32;
    assume {:branchcond $i1239} true;
    goto $bb692, $bb693;

  $bb693:
    assume !($i1239 == 1);
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} __const_udelay(85900);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    $p1240 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p1241 := $load.ref($M.0, $p1240);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($p1241, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p1243 := $bitcast.ref.ref($p1242);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i1244 := ioread32($p1243);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i1245 := $and.i32($i1244, 67108864);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i1246 := $ne.i32($i1245, 0);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i18 := 31;
    assume {:branchcond $i1246} true;
    goto $bb696, $bb697;

  $bb697:
    assume !($i1246 == 1);
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} __const_udelay(85900);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $p1247 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p1248 := $load.ref($M.0, $p1247);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p1249 := $add.ref($add.ref($p1248, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p1250 := $bitcast.ref.ref($p1249);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i1251 := ioread32($p1250);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i1252 := $and.i32($i1251, 67108864);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i1253 := $ne.i32($i1252, 0);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i18 := 30;
    assume {:branchcond $i1253} true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i1253 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} __const_udelay(85900);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    $p1254 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p1255 := $load.ref($M.0, $p1254);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($p1255, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p1257 := $bitcast.ref.ref($p1256);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i1258 := ioread32($p1257);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i1259 := $and.i32($i1258, 67108864);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i1260 := $ne.i32($i1259, 0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i18 := 29;
    assume {:branchcond $i1260} true;
    goto $bb704, $bb705;

  $bb705:
    assume !($i1260 == 1);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} __const_udelay(85900);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    $p1261 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p1262 := $load.ref($M.0, $p1261);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($p1262, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p1264 := $bitcast.ref.ref($p1263);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i1265 := ioread32($p1264);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i1266 := $and.i32($i1265, 67108864);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i1267 := $ne.i32($i1266, 0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i18 := 28;
    assume {:branchcond $i1267} true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i1267 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __const_udelay(85900);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    $p1268 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p1269 := $load.ref($M.0, $p1268);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($add.ref($p1269, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p1271 := $bitcast.ref.ref($p1270);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i1272 := ioread32($p1271);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i1273 := $and.i32($i1272, 67108864);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i1274 := $ne.i32($i1273, 0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i18 := 27;
    assume {:branchcond $i1274} true;
    goto $bb712, $bb713;

  $bb713:
    assume !($i1274 == 1);
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} __const_udelay(85900);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $p1275 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p1276 := $load.ref($M.0, $p1275);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p1277 := $add.ref($add.ref($p1276, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p1278 := $bitcast.ref.ref($p1277);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i1279 := ioread32($p1278);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i1280 := $and.i32($i1279, 67108864);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i1281 := $ne.i32($i1280, 0);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i18 := 26;
    assume {:branchcond $i1281} true;
    goto $bb716, $bb717;

  $bb717:
    assume !($i1281 == 1);
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} __const_udelay(85900);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p1283 := $load.ref($M.0, $p1282);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($p1283, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p1285 := $bitcast.ref.ref($p1284);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i1286 := ioread32($p1285);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i1287 := $and.i32($i1286, 67108864);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i1288 := $ne.i32($i1287, 0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i18 := 25;
    assume {:branchcond $i1288} true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i1288 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} __const_udelay(85900);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p1290 := $load.ref($M.0, $p1289);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p1291 := $add.ref($add.ref($p1290, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p1292 := $bitcast.ref.ref($p1291);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i1293 := ioread32($p1292);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i1294 := $and.i32($i1293, 67108864);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i1295 := $ne.i32($i1294, 0);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i18 := 24;
    assume {:branchcond $i1295} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i1295 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} __const_udelay(85900);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    $p1296 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p1297 := $load.ref($M.0, $p1296);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($p1297, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p1299 := $bitcast.ref.ref($p1298);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i1300 := ioread32($p1299);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i1301 := $and.i32($i1300, 67108864);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i1302 := $ne.i32($i1301, 0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i18 := 23;
    assume {:branchcond $i1302} true;
    goto $bb728, $bb729;

  $bb729:
    assume !($i1302 == 1);
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} __const_udelay(85900);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    $p1303 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p1304 := $load.ref($M.0, $p1303);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($add.ref($p1304, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p1306 := $bitcast.ref.ref($p1305);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i1307 := ioread32($p1306);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i1308 := $and.i32($i1307, 67108864);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i1309 := $ne.i32($i1308, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i18 := 22;
    assume {:branchcond $i1309} true;
    goto $bb732, $bb733;

  $bb733:
    assume !($i1309 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} __const_udelay(85900);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    $p1310 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p1311 := $load.ref($M.0, $p1310);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p1312 := $add.ref($add.ref($p1311, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p1313 := $bitcast.ref.ref($p1312);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i1314 := ioread32($p1313);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i1315 := $and.i32($i1314, 67108864);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i1316 := $ne.i32($i1315, 0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i18 := 21;
    assume {:branchcond $i1316} true;
    goto $bb736, $bb737;

  $bb737:
    assume !($i1316 == 1);
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} __const_udelay(85900);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p1318 := $load.ref($M.0, $p1317);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p1319 := $add.ref($add.ref($p1318, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p1320 := $bitcast.ref.ref($p1319);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i1321 := ioread32($p1320);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i1322 := $and.i32($i1321, 67108864);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i1323 := $ne.i32($i1322, 0);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i18 := 20;
    assume {:branchcond $i1323} true;
    goto $bb740, $bb741;

  $bb741:
    assume !($i1323 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} __const_udelay(85900);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p1325 := $load.ref($M.0, $p1324);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $p1326 := $add.ref($add.ref($p1325, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p1327 := $bitcast.ref.ref($p1326);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i1328 := ioread32($p1327);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i1329 := $and.i32($i1328, 67108864);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i1330 := $ne.i32($i1329, 0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i18 := 19;
    assume {:branchcond $i1330} true;
    goto $bb744, $bb745;

  $bb745:
    assume !($i1330 == 1);
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} __const_udelay(85900);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $p1331 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p1332 := $load.ref($M.0, $p1331);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p1333 := $add.ref($add.ref($p1332, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p1334 := $bitcast.ref.ref($p1333);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $i1335 := ioread32($p1334);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i1336 := $and.i32($i1335, 67108864);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i1337 := $ne.i32($i1336, 0);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i18 := 18;
    assume {:branchcond $i1337} true;
    goto $bb748, $bb749;

  $bb749:
    assume !($i1337 == 1);
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} __const_udelay(85900);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    $p1338 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p1339 := $load.ref($M.0, $p1338);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p1340 := $add.ref($add.ref($p1339, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p1341 := $bitcast.ref.ref($p1340);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i1342 := ioread32($p1341);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i1343 := $and.i32($i1342, 67108864);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i1344 := $ne.i32($i1343, 0);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i18 := 17;
    assume {:branchcond $i1344} true;
    goto $bb752, $bb753;

  $bb753:
    assume !($i1344 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __const_udelay(85900);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p1346 := $load.ref($M.0, $p1345);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p1347 := $add.ref($add.ref($p1346, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p1348 := $bitcast.ref.ref($p1347);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i1349 := ioread32($p1348);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i1350 := $and.i32($i1349, 67108864);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i1351 := $ne.i32($i1350, 0);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i18 := 16;
    assume {:branchcond $i1351} true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i1351 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} __const_udelay(85900);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    $p1352 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p1353 := $load.ref($M.0, $p1352);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p1354 := $add.ref($add.ref($p1353, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p1355 := $bitcast.ref.ref($p1354);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i1356 := ioread32($p1355);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i1357 := $and.i32($i1356, 67108864);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i1358 := $ne.i32($i1357, 0);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i18 := 15;
    assume {:branchcond $i1358} true;
    goto $bb760, $bb761;

  $bb761:
    assume !($i1358 == 1);
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} __const_udelay(85900);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    $p1359 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p1360 := $load.ref($M.0, $p1359);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($p1360, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p1362 := $bitcast.ref.ref($p1361);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i1363 := ioread32($p1362);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i1364 := $and.i32($i1363, 67108864);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i1365 := $ne.i32($i1364, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i18 := 14;
    assume {:branchcond $i1365} true;
    goto $bb764, $bb765;

  $bb765:
    assume !($i1365 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} __const_udelay(85900);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    $p1366 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p1367 := $load.ref($M.0, $p1366);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p1368 := $add.ref($add.ref($p1367, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p1369 := $bitcast.ref.ref($p1368);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i1370 := ioread32($p1369);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i1371 := $and.i32($i1370, 67108864);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i1372 := $ne.i32($i1371, 0);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i18 := 13;
    assume {:branchcond $i1372} true;
    goto $bb768, $bb769;

  $bb769:
    assume !($i1372 == 1);
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} __const_udelay(85900);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $p1373 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p1374 := $load.ref($M.0, $p1373);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p1375 := $add.ref($add.ref($p1374, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p1376 := $bitcast.ref.ref($p1375);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i1377 := ioread32($p1376);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i1378 := $and.i32($i1377, 67108864);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i1379 := $ne.i32($i1378, 0);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i18 := 12;
    assume {:branchcond $i1379} true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i1379 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} __const_udelay(85900);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    $p1380 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p1381 := $load.ref($M.0, $p1380);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p1382 := $add.ref($add.ref($p1381, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p1383 := $bitcast.ref.ref($p1382);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i1384 := ioread32($p1383);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i1385 := $and.i32($i1384, 67108864);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i1386 := $ne.i32($i1385, 0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i18 := 11;
    assume {:branchcond $i1386} true;
    goto $bb776, $bb777;

  $bb777:
    assume !($i1386 == 1);
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} __const_udelay(85900);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    $p1387 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p1388 := $load.ref($M.0, $p1387);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($add.ref($p1388, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p1390 := $bitcast.ref.ref($p1389);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i1391 := ioread32($p1390);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i1392 := $and.i32($i1391, 67108864);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i1393 := $ne.i32($i1392, 0);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i18 := 10;
    assume {:branchcond $i1393} true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i1393 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __const_udelay(85900);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    $p1394 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p1395 := $load.ref($M.0, $p1394);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p1396 := $add.ref($add.ref($p1395, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p1397 := $bitcast.ref.ref($p1396);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i1398 := ioread32($p1397);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i1399 := $and.i32($i1398, 67108864);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i1400 := $ne.i32($i1399, 0);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i18 := 9;
    assume {:branchcond $i1400} true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i1400 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} __const_udelay(85900);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $p1401 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p1402 := $load.ref($M.0, $p1401);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p1403 := $add.ref($add.ref($p1402, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p1404 := $bitcast.ref.ref($p1403);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $i1405 := ioread32($p1404);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i1406 := $and.i32($i1405, 67108864);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i1407 := $ne.i32($i1406, 0);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i18 := 8;
    assume {:branchcond $i1407} true;
    goto $bb788, $bb789;

  $bb789:
    assume !($i1407 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} __const_udelay(85900);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    $p1408 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p1409 := $load.ref($M.0, $p1408);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p1410 := $add.ref($add.ref($p1409, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $p1411 := $bitcast.ref.ref($p1410);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i1412 := ioread32($p1411);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i1413 := $and.i32($i1412, 67108864);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i1414 := $ne.i32($i1413, 0);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i18 := 7;
    assume {:branchcond $i1414} true;
    goto $bb792, $bb793;

  $bb793:
    assume !($i1414 == 1);
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} __const_udelay(85900);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    $p1415 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p1416 := $load.ref($M.0, $p1415);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p1417 := $add.ref($add.ref($p1416, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p1418 := $bitcast.ref.ref($p1417);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i1419 := ioread32($p1418);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i1420 := $and.i32($i1419, 67108864);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i1421 := $ne.i32($i1420, 0);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i18 := 6;
    assume {:branchcond $i1421} true;
    goto $bb796, $bb797;

  $bb797:
    assume !($i1421 == 1);
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} __const_udelay(85900);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    $p1422 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p1423 := $load.ref($M.0, $p1422);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p1424 := $add.ref($add.ref($p1423, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p1425 := $bitcast.ref.ref($p1424);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i1426 := ioread32($p1425);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i1427 := $and.i32($i1426, 67108864);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i1428 := $ne.i32($i1427, 0);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i18 := 5;
    assume {:branchcond $i1428} true;
    goto $bb800, $bb801;

  $bb801:
    assume !($i1428 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} __const_udelay(85900);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    $p1429 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p1430 := $load.ref($M.0, $p1429);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p1430, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p1432 := $bitcast.ref.ref($p1431);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i1433 := ioread32($p1432);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i1434 := $and.i32($i1433, 67108864);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i1435 := $ne.i32($i1434, 0);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i18 := 4;
    assume {:branchcond $i1435} true;
    goto $bb804, $bb805;

  $bb805:
    assume !($i1435 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} __const_udelay(85900);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    $p1436 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p1437 := $load.ref($M.0, $p1436);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p1438 := $add.ref($add.ref($p1437, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p1439 := $bitcast.ref.ref($p1438);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i1440 := ioread32($p1439);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i1441 := $and.i32($i1440, 67108864);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i1442 := $ne.i32($i1441, 0);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i18 := 3;
    assume {:branchcond $i1442} true;
    goto $bb808, $bb809;

  $bb809:
    assume !($i1442 == 1);
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} __const_udelay(85900);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    $p1443 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p1444 := $load.ref($M.0, $p1443);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p1445 := $add.ref($add.ref($p1444, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p1446 := $bitcast.ref.ref($p1445);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i1447 := ioread32($p1446);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i1448 := $and.i32($i1447, 67108864);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i1449 := $ne.i32($i1448, 0);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i18 := 2;
    assume {:branchcond $i1449} true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i1449 == 1);
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} __const_udelay(85900);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    $p1450 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p1451 := $load.ref($M.0, $p1450);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p1452 := $add.ref($add.ref($p1451, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p1453 := $bitcast.ref.ref($p1452);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i1454 := ioread32($p1453);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i1455 := $and.i32($i1454, 67108864);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i1456 := $ne.i32($i1455, 0);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i18 := 1;
    assume {:branchcond $i1456} true;
    goto $bb816, $bb817;

  $bb817:
    assume !($i1456 == 1);
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} __const_udelay(85900);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i3, 16);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i1, 21);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i26, $i27);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, $i2);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i4);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i29, $i30);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} iowrite32($i31, $p35);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __const_udelay(85900);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i40 := ioread32($p39);
    call {:si_unique_call 1030} {:cexpr "data_out"} boogie_si_record_i32($i40);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 67108864);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __const_udelay(85900);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i76 := ioread32($p75);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 67108864);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i43 := $i76;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __const_udelay(85900);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i83 := ioread32($p82);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 67108864);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i43 := $i83;
    assume {:branchcond $i85} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __const_udelay(85900);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i90 := ioread32($p89);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 67108864);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i43 := $i90;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} __const_udelay(85900);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i97 := ioread32($p96);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 67108864);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i43 := $i97;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __const_udelay(85900);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i104 := ioread32($p103);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 67108864);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i43 := $i104;
    assume {:branchcond $i106} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(85900);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i111 := ioread32($p110);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 67108864);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i43 := $i111;
    assume {:branchcond $i113} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __const_udelay(85900);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i118 := ioread32($p117);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 67108864);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i43 := $i118;
    assume {:branchcond $i120} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} __const_udelay(85900);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i125 := ioread32($p124);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 67108864);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i43 := $i125;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(85900);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i132 := ioread32($p131);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 67108864);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i43 := $i132;
    assume {:branchcond $i134} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __const_udelay(85900);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i139 := ioread32($p138);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 67108864);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i43 := $i139;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(85900);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i146 := ioread32($p145);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 67108864);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i43 := $i146;
    assume {:branchcond $i148} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(85900);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i153 := ioread32($p152);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 67108864);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i43 := $i153;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __const_udelay(85900);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i160 := ioread32($p159);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, 67108864);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i43 := $i160;
    assume {:branchcond $i162} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(85900);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i167 := ioread32($p166);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, 67108864);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i43 := $i167;
    assume {:branchcond $i169} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(85900);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i174 := ioread32($p173);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 67108864);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i43 := $i174;
    assume {:branchcond $i176} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __const_udelay(85900);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i181 := ioread32($p180);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 67108864);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i43 := $i181;
    assume {:branchcond $i183} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __const_udelay(85900);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p185, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i188 := ioread32($p187);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 67108864);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i43 := $i188;
    assume {:branchcond $i190} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(85900);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i195 := ioread32($p194);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 67108864);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i43 := $i195;
    assume {:branchcond $i197} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} __const_udelay(85900);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i202 := ioread32($p201);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 67108864);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i43 := $i202;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(85900);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i209 := ioread32($p208);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 67108864);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i43 := $i209;
    assume {:branchcond $i211} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(85900);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i216 := ioread32($p215);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, 67108864);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i43 := $i216;
    assume {:branchcond $i218} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __const_udelay(85900);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p220, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i223 := ioread32($p222);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 67108864);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i43 := $i223;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __const_udelay(85900);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i230 := ioread32($p229);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 67108864);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i43 := $i230;
    assume {:branchcond $i232} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} __const_udelay(85900);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i237 := ioread32($p236);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, 67108864);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i43 := $i237;
    assume {:branchcond $i239} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __const_udelay(85900);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p241, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i244 := ioread32($p243);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i245 := $and.i32($i244, 67108864);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i43 := $i244;
    assume {:branchcond $i246} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(85900);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p250 := $bitcast.ref.ref($p249);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i251 := ioread32($p250);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i252 := $and.i32($i251, 67108864);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i43 := $i251;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(85900);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p255, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p256);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i258 := ioread32($p257);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 67108864);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i43 := $i258;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} __const_udelay(85900);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i265 := ioread32($p264);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 67108864);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i43 := $i265;
    assume {:branchcond $i267} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(85900);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p269, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i272 := ioread32($p271);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i273 := $and.i32($i272, 67108864);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i43 := $i272;
    assume {:branchcond $i274} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} __const_udelay(85900);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p276, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p278 := $bitcast.ref.ref($p277);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i279 := ioread32($p278);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i280 := $and.i32($i279, 67108864);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i43 := $i279;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __const_udelay(85900);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p283, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i286 := ioread32($p285);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i287 := $and.i32($i286, 67108864);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i43 := $i286;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(85900);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p290, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p291);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i293 := ioread32($p292);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i294 := $and.i32($i293, 67108864);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i43 := $i293;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(85900);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p297, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p299 := $bitcast.ref.ref($p298);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i300 := ioread32($p299);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i301 := $and.i32($i300, 67108864);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i43 := $i300;
    assume {:branchcond $i302} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} __const_udelay(85900);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i307 := ioread32($p306);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i308 := $and.i32($i307, 67108864);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i43 := $i307;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(85900);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p311, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i314 := ioread32($p313);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 67108864);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i43 := $i314;
    assume {:branchcond $i316} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(85900);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p318, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p319);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i321 := ioread32($p320);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i321, 67108864);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i43 := $i321;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(85900);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p327 := $bitcast.ref.ref($p326);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i328 := ioread32($p327);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i329 := $and.i32($i328, 67108864);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 0);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i43 := $i328;
    assume {:branchcond $i330} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(85900);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p332, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i335 := ioread32($p334);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i336 := $and.i32($i335, 67108864);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i43 := $i335;
    assume {:branchcond $i337} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(85900);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p339 := $load.ref($M.0, $p338);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p339, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i342 := ioread32($p341);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i343 := $and.i32($i342, 67108864);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i43 := $i342;
    assume {:branchcond $i344} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(85900);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p346, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p348 := $bitcast.ref.ref($p347);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i349 := ioread32($p348);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i350 := $and.i32($i349, 67108864);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i43 := $i349;
    assume {:branchcond $i351} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(85900);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p353, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p354);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i356 := ioread32($p355);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i357 := $and.i32($i356, 67108864);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i43 := $i356;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(85900);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i363 := ioread32($p362);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i364 := $and.i32($i363, 67108864);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i43 := $i363;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __const_udelay(85900);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p367, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p368);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i370 := ioread32($p369);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i371 := $and.i32($i370, 67108864);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i372 := $ne.i32($i371, 0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i43 := $i370;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(85900);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.0, $p373);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p374, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p376 := $bitcast.ref.ref($p375);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i377 := ioread32($p376);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i378 := $and.i32($i377, 67108864);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i379 := $ne.i32($i378, 0);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i43 := $i377;
    assume {:branchcond $i379} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(85900);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p381, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p383 := $bitcast.ref.ref($p382);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i384 := ioread32($p383);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i385 := $and.i32($i384, 67108864);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i386 := $ne.i32($i385, 0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i43 := $i384;
    assume {:branchcond $i386} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __const_udelay(85900);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.0, $p387);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p388, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i391 := ioread32($p390);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i392 := $and.i32($i391, 67108864);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i393 := $ne.i32($i392, 0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i43 := $i391;
    assume {:branchcond $i393} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(85900);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p395, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i398 := ioread32($p397);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i399 := $and.i32($i398, 67108864);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i43 := $i398;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(85900);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p404 := $bitcast.ref.ref($p403);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i405 := ioread32($p404);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i406 := $and.i32($i405, 67108864);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i407 := $ne.i32($i406, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i43 := $i405;
    assume {:branchcond $i407} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(85900);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.0, $p408);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p409, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p410);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i412 := ioread32($p411);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i413 := $and.i32($i412, 67108864);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i414 := $ne.i32($i413, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i43 := $i412;
    assume {:branchcond $i414} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(85900);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p416, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p418 := $bitcast.ref.ref($p417);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i419 := ioread32($p418);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i420 := $and.i32($i419, 67108864);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i421 := $ne.i32($i420, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i43 := $i419;
    assume {:branchcond $i421} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(85900);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p423 := $load.ref($M.0, $p422);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p423, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p425 := $bitcast.ref.ref($p424);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i426 := ioread32($p425);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i427 := $and.i32($i426, 67108864);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i428 := $ne.i32($i427, 0);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i43 := $i426;
    assume {:branchcond $i428} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __const_udelay(85900);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.0, $p429);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p430, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p431);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i433 := ioread32($p432);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i434 := $and.i32($i433, 67108864);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i435 := $ne.i32($i434, 0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i43 := $i433;
    assume {:branchcond $i435} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __const_udelay(85900);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p437, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p439 := $bitcast.ref.ref($p438);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i440 := ioread32($p439);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i441 := $and.i32($i440, 67108864);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i442 := $ne.i32($i441, 0);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i43 := $i440;
    assume {:branchcond $i442} true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} __const_udelay(85900);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.0, $p443);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p444, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p446 := $bitcast.ref.ref($p445);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i447 := ioread32($p446);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i448 := $and.i32($i447, 67108864);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i449 := $ne.i32($i448, 0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i43 := $i447;
    assume {:branchcond $i449} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} __const_udelay(85900);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p451 := $load.ref($M.0, $p450);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p451, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i454 := ioread32($p453);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i455 := $and.i32($i454, 67108864);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i456 := $ne.i32($i455, 0);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i43 := $i454;
    assume {:branchcond $i456} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} __const_udelay(85900);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $p457);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p458, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p460 := $bitcast.ref.ref($p459);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i461 := ioread32($p460);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i462 := $and.i32($i461, 67108864);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i463 := $ne.i32($i462, 0);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i43 := $i461;
    assume {:branchcond $i463} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} __const_udelay(85900);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p465 := $load.ref($M.0, $p464);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p465, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p467 := $bitcast.ref.ref($p466);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i468 := ioread32($p467);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i469 := $and.i32($i468, 67108864);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i470 := $ne.i32($i469, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i43 := $i468;
    assume {:branchcond $i470} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} __const_udelay(85900);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p472, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p474 := $bitcast.ref.ref($p473);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i475 := ioread32($p474);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i476 := $and.i32($i475, 67108864);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i477 := $ne.i32($i476, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i43 := $i475;
    assume {:branchcond $i477} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(85900);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.0, $p478);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p479, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p481 := $bitcast.ref.ref($p480);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i482 := ioread32($p481);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i483 := $and.i32($i482, 67108864);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i484 := $ne.i32($i483, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i43 := $i482;
    assume {:branchcond $i484} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __const_udelay(85900);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.0, $p485);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p486, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p488 := $bitcast.ref.ref($p487);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i489 := ioread32($p488);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i490 := $and.i32($i489, 67108864);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i491 := $ne.i32($i490, 0);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i43 := $i489;
    assume {:branchcond $i491} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} __const_udelay(85900);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p492);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p493, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p495 := $bitcast.ref.ref($p494);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i496 := ioread32($p495);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i497 := $and.i32($i496, 67108864);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 0);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i43 := $i496;
    assume {:branchcond $i498} true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} __const_udelay(85900);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.0, $p499);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p500, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p502 := $bitcast.ref.ref($p501);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i503 := ioread32($p502);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i504 := $and.i32($i503, 67108864);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i505 := $ne.i32($i504, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i43 := $i503;
    assume {:branchcond $i505} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} __const_udelay(85900);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p507 := $load.ref($M.0, $p506);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p507, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p508);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i510 := ioread32($p509);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i511 := $and.i32($i510, 67108864);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i43 := $i510;
    assume {:branchcond $i512} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} __const_udelay(85900);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p514 := $load.ref($M.0, $p513);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p514, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p516 := $bitcast.ref.ref($p515);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i517 := ioread32($p516);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i518 := $and.i32($i517, 67108864);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i519 := $ne.i32($i518, 0);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i43 := $i517;
    assume {:branchcond $i519} true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __const_udelay(85900);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.0, $p520);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p521, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p523 := $bitcast.ref.ref($p522);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i524 := ioread32($p523);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i525 := $and.i32($i524, 67108864);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i526 := $ne.i32($i525, 0);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i43 := $i524;
    assume {:branchcond $i526} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} __const_udelay(85900);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p528 := $load.ref($M.0, $p527);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p528, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p530 := $bitcast.ref.ref($p529);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i531 := ioread32($p530);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i532 := $and.i32($i531, 67108864);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i533 := $ne.i32($i532, 0);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i43 := $i531;
    assume {:branchcond $i533} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} __const_udelay(85900);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p535, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p537 := $bitcast.ref.ref($p536);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i538 := ioread32($p537);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i539 := $and.i32($i538, 67108864);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i540 := $ne.i32($i539, 0);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i43 := $i538;
    assume {:branchcond $i540} true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} __const_udelay(85900);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p542, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p544 := $bitcast.ref.ref($p543);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i545 := ioread32($p544);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i546 := $and.i32($i545, 67108864);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i547 := $ne.i32($i546, 0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i43 := $i545;
    assume {:branchcond $i547} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} __const_udelay(85900);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p549 := $load.ref($M.0, $p548);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($p549, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p551 := $bitcast.ref.ref($p550);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i552 := ioread32($p551);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i553 := $and.i32($i552, 67108864);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i554 := $ne.i32($i553, 0);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i43 := $i552;
    assume {:branchcond $i554} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} __const_udelay(85900);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p556, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p558 := $bitcast.ref.ref($p557);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i559 := ioread32($p558);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i560 := $and.i32($i559, 67108864);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i561 := $ne.i32($i560, 0);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i43 := $i559;
    assume {:branchcond $i561} true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __const_udelay(85900);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p563, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p565 := $bitcast.ref.ref($p564);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i566 := ioread32($p565);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i567 := $and.i32($i566, 67108864);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i568 := $ne.i32($i567, 0);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i43 := $i566;
    assume {:branchcond $i568} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __const_udelay(85900);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.0, $p569);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p570, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p572 := $bitcast.ref.ref($p571);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i573 := ioread32($p572);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i574 := $and.i32($i573, 67108864);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i575 := $ne.i32($i574, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i43 := $i573;
    assume {:branchcond $i575} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i575 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} __const_udelay(85900);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p577 := $load.ref($M.0, $p576);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p577, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p579 := $bitcast.ref.ref($p578);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i580 := ioread32($p579);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i581 := $and.i32($i580, 67108864);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i582 := $ne.i32($i581, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i43 := $i580;
    assume {:branchcond $i582} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} __const_udelay(85900);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.0, $p583);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p584, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p586 := $bitcast.ref.ref($p585);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i587 := ioread32($p586);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i588 := $and.i32($i587, 67108864);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i589 := $ne.i32($i588, 0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i43 := $i587;
    assume {:branchcond $i589} true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} __const_udelay(85900);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p591 := $load.ref($M.0, $p590);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p591, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p593 := $bitcast.ref.ref($p592);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i594 := ioread32($p593);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i595 := $and.i32($i594, 67108864);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i596 := $ne.i32($i595, 0);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i43 := $i594;
    assume {:branchcond $i596} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} __const_udelay(85900);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.0, $p597);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p598, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p600 := $bitcast.ref.ref($p599);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i601 := ioread32($p600);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i602 := $and.i32($i601, 67108864);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i603 := $ne.i32($i602, 0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i43 := $i601;
    assume {:branchcond $i603} true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} __const_udelay(85900);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p605 := $load.ref($M.0, $p604);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p605, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p607 := $bitcast.ref.ref($p606);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i608 := ioread32($p607);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i609 := $and.i32($i608, 67108864);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i610 := $ne.i32($i609, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i43 := $i608;
    assume {:branchcond $i610} true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} __const_udelay(85900);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p612, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p614 := $bitcast.ref.ref($p613);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i615 := ioread32($p614);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i616 := $and.i32($i615, 67108864);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i617 := $ne.i32($i616, 0);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i43 := $i615;
    assume {:branchcond $i617} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} __const_udelay(85900);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p619, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p621 := $bitcast.ref.ref($p620);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i622 := ioread32($p621);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i623 := $and.i32($i622, 67108864);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i624 := $ne.i32($i623, 0);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i43 := $i622;
    assume {:branchcond $i624} true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} __const_udelay(85900);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.0, $p625);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p626, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p628 := $bitcast.ref.ref($p627);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i629 := ioread32($p628);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i630 := $and.i32($i629, 67108864);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i631 := $ne.i32($i630, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i43 := $i629;
    assume {:branchcond $i631} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __const_udelay(85900);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p633 := $load.ref($M.0, $p632);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p633, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p635 := $bitcast.ref.ref($p634);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i636 := ioread32($p635);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i637 := $and.i32($i636, 67108864);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i43 := $i636;
    assume {:branchcond $i638} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __const_udelay(85900);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.0, $p639);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p640, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p642 := $bitcast.ref.ref($p641);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i643 := ioread32($p642);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i644 := $and.i32($i643, 67108864);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i645 := $ne.i32($i644, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i43 := $i643;
    assume {:branchcond $i645} true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __const_udelay(85900);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.0, $p646);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($p647, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p649 := $bitcast.ref.ref($p648);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i650 := ioread32($p649);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i651 := $and.i32($i650, 67108864);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i652 := $ne.i32($i651, 0);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i43 := $i650;
    assume {:branchcond $i652} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i652 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __const_udelay(85900);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p654 := $load.ref($M.0, $p653);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p654, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p656 := $bitcast.ref.ref($p655);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i657 := ioread32($p656);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i658 := $and.i32($i657, 67108864);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i659 := $ne.i32($i658, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i43 := $i657;
    assume {:branchcond $i659} true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} __const_udelay(85900);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.0, $p660);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p661, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p663 := $bitcast.ref.ref($p662);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i664 := ioread32($p663);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i665 := $and.i32($i664, 67108864);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i666 := $ne.i32($i665, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i43 := $i664;
    assume {:branchcond $i666} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __const_udelay(85900);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $p667);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p668, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p670 := $bitcast.ref.ref($p669);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i671 := ioread32($p670);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i672 := $and.i32($i671, 67108864);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i673 := $ne.i32($i672, 0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i43 := $i671;
    assume {:branchcond $i673} true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i673 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __const_udelay(85900);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p675 := $load.ref($M.0, $p674);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p675, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p677 := $bitcast.ref.ref($p676);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i678 := ioread32($p677);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i679 := $and.i32($i678, 67108864);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i680 := $ne.i32($i679, 0);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i43 := $i678;
    assume {:branchcond $i680} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(85900);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.0, $p681);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p682, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p684 := $bitcast.ref.ref($p683);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i685 := ioread32($p684);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i686 := $and.i32($i685, 67108864);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i687 := $ne.i32($i686, 0);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i43 := $i685;
    assume {:branchcond $i687} true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __const_udelay(85900);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.0, $p688);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p689, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p691 := $bitcast.ref.ref($p690);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i692 := ioread32($p691);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i693 := $and.i32($i692, 67108864);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i694 := $ne.i32($i693, 0);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i43 := $i692;
    assume {:branchcond $i694} true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i694 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __const_udelay(85900);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p696 := $load.ref($M.0, $p695);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p696, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p698 := $bitcast.ref.ref($p697);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i699 := ioread32($p698);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i700 := $and.i32($i699, 67108864);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i701 := $ne.i32($i700, 0);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i43 := $i699;
    assume {:branchcond $i701} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i701 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(85900);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p703 := $load.ref($M.0, $p702);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p703, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p705 := $bitcast.ref.ref($p704);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i706 := ioread32($p705);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i707 := $and.i32($i706, 67108864);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i708 := $ne.i32($i707, 0);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i43 := $i706;
    assume {:branchcond $i708} true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(85900);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $p709);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p710, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p712 := $bitcast.ref.ref($p711);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i713 := ioread32($p712);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i714 := $and.i32($i713, 67108864);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i715 := $ne.i32($i714, 0);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i43 := $i713;
    assume {:branchcond $i715} true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __const_udelay(85900);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p717 := $load.ref($M.0, $p716);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p717, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p719 := $bitcast.ref.ref($p718);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i720 := ioread32($p719);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i721 := $and.i32($i720, 67108864);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i722 := $ne.i32($i721, 0);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i43 := $i720;
    assume {:branchcond $i722} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __const_udelay(85900);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.0, $p723);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p724, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p726 := $bitcast.ref.ref($p725);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i727 := ioread32($p726);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i728 := $and.i32($i727, 67108864);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i729 := $ne.i32($i728, 0);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i43 := $i727;
    assume {:branchcond $i729} true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(85900);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p731 := $load.ref($M.0, $p730);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p731, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p733 := $bitcast.ref.ref($p732);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i734 := ioread32($p733);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i735 := $and.i32($i734, 67108864);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i736 := $ne.i32($i735, 0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i43 := $i734;
    assume {:branchcond $i736} true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} __const_udelay(85900);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.0, $p737);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p738, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p740 := $bitcast.ref.ref($p739);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i741 := ioread32($p740);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i742 := $and.i32($i741, 67108864);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i743 := $ne.i32($i742, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i43 := $i741;
    assume {:branchcond $i743} true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __const_udelay(85900);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p745 := $load.ref($M.0, $p744);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p745, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p747 := $bitcast.ref.ref($p746);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i748 := ioread32($p747);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i749 := $and.i32($i748, 67108864);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i750 := $ne.i32($i749, 0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i43 := $i748;
    assume {:branchcond $i750} true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i750 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} __const_udelay(85900);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($p752, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p754 := $bitcast.ref.ref($p753);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i755 := ioread32($p754);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i756 := $and.i32($i755, 67108864);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i757 := $ne.i32($i756, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i43 := $i755;
    assume {:branchcond $i757} true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i757 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} __const_udelay(85900);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p759 := $load.ref($M.0, $p758);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p759, $mul.ref(0, 364)), $mul.ref(228, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p761 := $bitcast.ref.ref($p760);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i45 := ioread32($p761);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i762 := $and.i32($i45, 67108864);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i763 := $ne.i32($i762, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i43 := $i45;
    assume {:branchcond $i763} true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} spin_unlock_irqrestore($p46, $i10);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, .str);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.28);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.21);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.29);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.5, $p52);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 663);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p52, $i55);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p56, 0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.6, $p57);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 1033} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i44);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i25 := $i71;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i2, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p66 := (if $i65 == 1 then .str.30 else .str.31);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i2, 0);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i67 == 1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i69 := $i44;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_266 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p5, $p64, .str.29, $p66, $i3, $i69);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i67 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i4);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb27;

  $bb421:
    assume {:verifier.code 0} true;
    assume $i763 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb19;

  $bb417:
    assume {:verifier.code 0} true;
    assume $i757 == 1;
    goto $bb17;

  $bb413:
    assume {:verifier.code 0} true;
    assume $i750 == 1;
    goto $bb17;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i743 == 1;
    goto $bb17;

  $bb405:
    assume {:verifier.code 0} true;
    assume $i736 == 1;
    goto $bb17;

  $bb401:
    assume {:verifier.code 0} true;
    assume $i729 == 1;
    goto $bb17;

  $bb397:
    assume {:verifier.code 0} true;
    assume $i722 == 1;
    goto $bb17;

  $bb393:
    assume {:verifier.code 0} true;
    assume $i715 == 1;
    goto $bb17;

  $bb389:
    assume {:verifier.code 0} true;
    assume $i708 == 1;
    goto $bb17;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i701 == 1;
    goto $bb17;

  $bb381:
    assume {:verifier.code 0} true;
    assume $i694 == 1;
    goto $bb17;

  $bb377:
    assume {:verifier.code 0} true;
    assume $i687 == 1;
    goto $bb17;

  $bb373:
    assume {:verifier.code 0} true;
    assume $i680 == 1;
    goto $bb17;

  $bb369:
    assume {:verifier.code 0} true;
    assume $i673 == 1;
    goto $bb17;

  $bb365:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb17;

  $bb361:
    assume {:verifier.code 0} true;
    assume $i659 == 1;
    goto $bb17;

  $bb357:
    assume {:verifier.code 0} true;
    assume $i652 == 1;
    goto $bb17;

  $bb353:
    assume {:verifier.code 0} true;
    assume $i645 == 1;
    goto $bb17;

  $bb349:
    assume {:verifier.code 0} true;
    assume $i638 == 1;
    goto $bb17;

  $bb345:
    assume {:verifier.code 0} true;
    assume $i631 == 1;
    goto $bb17;

  $bb341:
    assume {:verifier.code 0} true;
    assume $i624 == 1;
    goto $bb17;

  $bb337:
    assume {:verifier.code 0} true;
    assume $i617 == 1;
    goto $bb17;

  $bb333:
    assume {:verifier.code 0} true;
    assume $i610 == 1;
    goto $bb17;

  $bb329:
    assume {:verifier.code 0} true;
    assume $i603 == 1;
    goto $bb17;

  $bb325:
    assume {:verifier.code 0} true;
    assume $i596 == 1;
    goto $bb17;

  $bb321:
    assume {:verifier.code 0} true;
    assume $i589 == 1;
    goto $bb17;

  $bb317:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb17;

  $bb313:
    assume {:verifier.code 0} true;
    assume $i575 == 1;
    goto $bb17;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb17;

  $bb305:
    assume {:verifier.code 0} true;
    assume $i561 == 1;
    goto $bb17;

  $bb301:
    assume {:verifier.code 0} true;
    assume $i554 == 1;
    goto $bb17;

  $bb297:
    assume {:verifier.code 0} true;
    assume $i547 == 1;
    goto $bb17;

  $bb293:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb17;

  $bb289:
    assume {:verifier.code 0} true;
    assume $i533 == 1;
    goto $bb17;

  $bb285:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb17;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i519 == 1;
    goto $bb17;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i512 == 1;
    goto $bb17;

  $bb273:
    assume {:verifier.code 0} true;
    assume $i505 == 1;
    goto $bb17;

  $bb269:
    assume {:verifier.code 0} true;
    assume $i498 == 1;
    goto $bb17;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i491 == 1;
    goto $bb17;

  $bb261:
    assume {:verifier.code 0} true;
    assume $i484 == 1;
    goto $bb17;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i477 == 1;
    goto $bb17;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb17;

  $bb249:
    assume {:verifier.code 0} true;
    assume $i463 == 1;
    goto $bb17;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb17;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i449 == 1;
    goto $bb17;

  $bb237:
    assume {:verifier.code 0} true;
    assume $i442 == 1;
    goto $bb17;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb17;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i428 == 1;
    goto $bb17;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i421 == 1;
    goto $bb17;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb17;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i407 == 1;
    goto $bb17;

  $bb213:
    assume {:verifier.code 0} true;
    assume $i400 == 1;
    goto $bb17;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb17;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i386 == 1;
    goto $bb17;

  $bb201:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb17;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i372 == 1;
    goto $bb17;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb17;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb17;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb17;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb17;

  $bb177:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb17;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb17;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb17;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb17;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb17;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb17;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb17;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb17;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb17;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb17;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb17;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb17;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb17;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb17;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb17;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb17;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb17;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb17;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb17;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb17;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb17;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb17;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb17;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb17;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb17;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb17;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb17;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb17;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb17;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb17;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb17;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb17;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb17;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb17;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb17;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb17;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb17;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb17;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_265 := netdev_err.ref.ref($p22, .str.27);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} spin_unlock_irqrestore($p24, $i10);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb12;

  $bb816:
    assume {:verifier.code 0} true;
    assume $i1456 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb812:
    assume {:verifier.code 0} true;
    assume $i1449 == 1;
    goto $bb4;

  $bb808:
    assume {:verifier.code 0} true;
    assume $i1442 == 1;
    goto $bb4;

  $bb804:
    assume {:verifier.code 0} true;
    assume $i1435 == 1;
    goto $bb4;

  $bb800:
    assume {:verifier.code 0} true;
    assume $i1428 == 1;
    goto $bb4;

  $bb796:
    assume {:verifier.code 0} true;
    assume $i1421 == 1;
    goto $bb4;

  $bb792:
    assume {:verifier.code 0} true;
    assume $i1414 == 1;
    goto $bb4;

  $bb788:
    assume {:verifier.code 0} true;
    assume $i1407 == 1;
    goto $bb4;

  $bb784:
    assume {:verifier.code 0} true;
    assume $i1400 == 1;
    goto $bb4;

  $bb780:
    assume {:verifier.code 0} true;
    assume $i1393 == 1;
    goto $bb4;

  $bb776:
    assume {:verifier.code 0} true;
    assume $i1386 == 1;
    goto $bb4;

  $bb772:
    assume {:verifier.code 0} true;
    assume $i1379 == 1;
    goto $bb4;

  $bb768:
    assume {:verifier.code 0} true;
    assume $i1372 == 1;
    goto $bb4;

  $bb764:
    assume {:verifier.code 0} true;
    assume $i1365 == 1;
    goto $bb4;

  $bb760:
    assume {:verifier.code 0} true;
    assume $i1358 == 1;
    goto $bb4;

  $bb756:
    assume {:verifier.code 0} true;
    assume $i1351 == 1;
    goto $bb4;

  $bb752:
    assume {:verifier.code 0} true;
    assume $i1344 == 1;
    goto $bb4;

  $bb748:
    assume {:verifier.code 0} true;
    assume $i1337 == 1;
    goto $bb4;

  $bb744:
    assume {:verifier.code 0} true;
    assume $i1330 == 1;
    goto $bb4;

  $bb740:
    assume {:verifier.code 0} true;
    assume $i1323 == 1;
    goto $bb4;

  $bb736:
    assume {:verifier.code 0} true;
    assume $i1316 == 1;
    goto $bb4;

  $bb732:
    assume {:verifier.code 0} true;
    assume $i1309 == 1;
    goto $bb4;

  $bb728:
    assume {:verifier.code 0} true;
    assume $i1302 == 1;
    goto $bb4;

  $bb724:
    assume {:verifier.code 0} true;
    assume $i1295 == 1;
    goto $bb4;

  $bb720:
    assume {:verifier.code 0} true;
    assume $i1288 == 1;
    goto $bb4;

  $bb716:
    assume {:verifier.code 0} true;
    assume $i1281 == 1;
    goto $bb4;

  $bb712:
    assume {:verifier.code 0} true;
    assume $i1274 == 1;
    goto $bb4;

  $bb708:
    assume {:verifier.code 0} true;
    assume $i1267 == 1;
    goto $bb4;

  $bb704:
    assume {:verifier.code 0} true;
    assume $i1260 == 1;
    goto $bb4;

  $bb700:
    assume {:verifier.code 0} true;
    assume $i1253 == 1;
    goto $bb4;

  $bb696:
    assume {:verifier.code 0} true;
    assume $i1246 == 1;
    goto $bb4;

  $bb692:
    assume {:verifier.code 0} true;
    assume $i1239 == 1;
    goto $bb4;

  $bb688:
    assume {:verifier.code 0} true;
    assume $i1232 == 1;
    goto $bb4;

  $bb684:
    assume {:verifier.code 0} true;
    assume $i1225 == 1;
    goto $bb4;

  $bb680:
    assume {:verifier.code 0} true;
    assume $i1218 == 1;
    goto $bb4;

  $bb676:
    assume {:verifier.code 0} true;
    assume $i1211 == 1;
    goto $bb4;

  $bb672:
    assume {:verifier.code 0} true;
    assume $i1204 == 1;
    goto $bb4;

  $bb668:
    assume {:verifier.code 0} true;
    assume $i1197 == 1;
    goto $bb4;

  $bb664:
    assume {:verifier.code 0} true;
    assume $i1190 == 1;
    goto $bb4;

  $bb660:
    assume {:verifier.code 0} true;
    assume $i1183 == 1;
    goto $bb4;

  $bb656:
    assume {:verifier.code 0} true;
    assume $i1176 == 1;
    goto $bb4;

  $bb652:
    assume {:verifier.code 0} true;
    assume $i1169 == 1;
    goto $bb4;

  $bb648:
    assume {:verifier.code 0} true;
    assume $i1162 == 1;
    goto $bb4;

  $bb644:
    assume {:verifier.code 0} true;
    assume $i1155 == 1;
    goto $bb4;

  $bb640:
    assume {:verifier.code 0} true;
    assume $i1148 == 1;
    goto $bb4;

  $bb636:
    assume {:verifier.code 0} true;
    assume $i1141 == 1;
    goto $bb4;

  $bb632:
    assume {:verifier.code 0} true;
    assume $i1134 == 1;
    goto $bb4;

  $bb628:
    assume {:verifier.code 0} true;
    assume $i1127 == 1;
    goto $bb4;

  $bb624:
    assume {:verifier.code 0} true;
    assume $i1120 == 1;
    goto $bb4;

  $bb620:
    assume {:verifier.code 0} true;
    assume $i1113 == 1;
    goto $bb4;

  $bb616:
    assume {:verifier.code 0} true;
    assume $i1106 == 1;
    goto $bb4;

  $bb612:
    assume {:verifier.code 0} true;
    assume $i1099 == 1;
    goto $bb4;

  $bb608:
    assume {:verifier.code 0} true;
    assume $i1092 == 1;
    goto $bb4;

  $bb604:
    assume {:verifier.code 0} true;
    assume $i1085 == 1;
    goto $bb4;

  $bb600:
    assume {:verifier.code 0} true;
    assume $i1078 == 1;
    goto $bb4;

  $bb596:
    assume {:verifier.code 0} true;
    assume $i1071 == 1;
    goto $bb4;

  $bb592:
    assume {:verifier.code 0} true;
    assume $i1064 == 1;
    goto $bb4;

  $bb588:
    assume {:verifier.code 0} true;
    assume $i1057 == 1;
    goto $bb4;

  $bb584:
    assume {:verifier.code 0} true;
    assume $i1050 == 1;
    goto $bb4;

  $bb580:
    assume {:verifier.code 0} true;
    assume $i1043 == 1;
    goto $bb4;

  $bb576:
    assume {:verifier.code 0} true;
    assume $i1036 == 1;
    goto $bb4;

  $bb572:
    assume {:verifier.code 0} true;
    assume $i1029 == 1;
    goto $bb4;

  $bb568:
    assume {:verifier.code 0} true;
    assume $i1022 == 1;
    goto $bb4;

  $bb564:
    assume {:verifier.code 0} true;
    assume $i1015 == 1;
    goto $bb4;

  $bb560:
    assume {:verifier.code 0} true;
    assume $i1008 == 1;
    goto $bb4;

  $bb556:
    assume {:verifier.code 0} true;
    assume $i1001 == 1;
    goto $bb4;

  $bb552:
    assume {:verifier.code 0} true;
    assume $i994 == 1;
    goto $bb4;

  $bb548:
    assume {:verifier.code 0} true;
    assume $i987 == 1;
    goto $bb4;

  $bb544:
    assume {:verifier.code 0} true;
    assume $i980 == 1;
    goto $bb4;

  $bb540:
    assume {:verifier.code 0} true;
    assume $i973 == 1;
    goto $bb4;

  $bb536:
    assume {:verifier.code 0} true;
    assume $i966 == 1;
    goto $bb4;

  $bb532:
    assume {:verifier.code 0} true;
    assume $i959 == 1;
    goto $bb4;

  $bb528:
    assume {:verifier.code 0} true;
    assume $i952 == 1;
    goto $bb4;

  $bb524:
    assume {:verifier.code 0} true;
    assume $i945 == 1;
    goto $bb4;

  $bb520:
    assume {:verifier.code 0} true;
    assume $i938 == 1;
    goto $bb4;

  $bb516:
    assume {:verifier.code 0} true;
    assume $i931 == 1;
    goto $bb4;

  $bb512:
    assume {:verifier.code 0} true;
    assume $i924 == 1;
    goto $bb4;

  $bb508:
    assume {:verifier.code 0} true;
    assume $i917 == 1;
    goto $bb4;

  $bb504:
    assume {:verifier.code 0} true;
    assume $i910 == 1;
    goto $bb4;

  $bb500:
    assume {:verifier.code 0} true;
    assume $i903 == 1;
    goto $bb4;

  $bb496:
    assume {:verifier.code 0} true;
    assume $i896 == 1;
    goto $bb4;

  $bb492:
    assume {:verifier.code 0} true;
    assume $i889 == 1;
    goto $bb4;

  $bb488:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb4;

  $bb484:
    assume {:verifier.code 0} true;
    assume $i875 == 1;
    goto $bb4;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i868 == 1;
    goto $bb4;

  $bb476:
    assume {:verifier.code 0} true;
    assume $i861 == 1;
    goto $bb4;

  $bb472:
    assume {:verifier.code 0} true;
    assume $i854 == 1;
    goto $bb4;

  $bb468:
    assume {:verifier.code 0} true;
    assume $i847 == 1;
    goto $bb4;

  $bb464:
    assume {:verifier.code 0} true;
    assume $i840 == 1;
    goto $bb4;

  $bb460:
    assume {:verifier.code 0} true;
    assume $i833 == 1;
    goto $bb4;

  $bb456:
    assume {:verifier.code 0} true;
    assume $i826 == 1;
    goto $bb4;

  $bb452:
    assume {:verifier.code 0} true;
    assume $i819 == 1;
    goto $bb4;

  $bb448:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb4;

  $bb444:
    assume {:verifier.code 0} true;
    assume $i805 == 1;
    goto $bb4;

  $bb440:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb4;

  $bb436:
    assume {:verifier.code 0} true;
    assume $i791 == 1;
    goto $bb4;

  $bb432:
    assume {:verifier.code 0} true;
    assume $i784 == 1;
    goto $bb4;

  $bb428:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb4;

  $bb424:
    assume {:verifier.code 0} true;
    assume $i770 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;
}



const pch_gbe_phy_get_id: ref;

axiom pch_gbe_phy_get_id == $sub.ref(0, 527358);

procedure pch_gbe_phy_get_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_get_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i9: i32;
  var vslice_dummy_var_267: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i7 := pch_gbe_phy_read_reg_miic($p0, 2, $p1);
    call {:si_unique_call 1434} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i10 := pch_gbe_phy_read_reg_miic($p0, 3, $p2);
    call {:si_unique_call 1436} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p1);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 6);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p2);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i20 := $ashr.i32($i19, 10);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p2);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 15);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(8, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.1);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.2);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.3);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 213);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1438} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(8, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_267 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p3, $p44, .str.3, $i46, $i48);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const pch_gbe_phy_init_setting: ref;

axiom pch_gbe_phy_init_setting == $sub.ref(0, 528390);

procedure pch_gbe_phy_init_setting($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_init_setting($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i8;
  var $p39: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $p44: ref;
  var $p46: ref;
  var $i47: i8;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $i62: i32;
  var $i63: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i1;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p1 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(19, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(30, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(31, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(36, 1)), $mul.ref(1, 4));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(696, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i26 := mii_ethtool_gset($p25, $p1);
    call {:si_unique_call 1443} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ethtool_cmd_speed_set($p1, $i34);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i16.i8($i37);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i47);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_269 := pch_gbe_phy_write_reg_miic($p0, 0, $sub.i16(0, 32768));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(696, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i51 := mii_ethtool_sset($p50, $p1);
    call {:si_unique_call 1448} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} pch_gbe_phy_sw_reset($p0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_271 := pch_gbe_phy_read_reg_miic($p0, 16, $p2);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p2);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 2048);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i60);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p2);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} vslice_dummy_var_272 := pch_gbe_phy_write_reg_miic($p0, 16, $i63);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(952, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i68 == 1;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(952, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb9;

  $bb10:
    assume $i73 == 1;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_273 := pch_gbe_phy_tx_clk_delay($p0);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i52 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_270 := netdev_err.ref.ref($p54, .str.6);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_268 := netdev_err.ref.ref($p29, .str.5);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_phy_set_rgmii: ref;

axiom pch_gbe_phy_set_rgmii == $sub.ref(0, 529422);

procedure pch_gbe_phy_set_rgmii($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_phy_set_rgmii($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} pch_gbe_phy_sw_reset($p0);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_phy_tx_clk_delay: ref;

axiom pch_gbe_phy_tx_clk_delay == $sub.ref(0, 530454);

procedure pch_gbe_phy_tx_clk_delay($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_phy_tx_clk_delay($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i29: i32;
  var $i30: i1;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i31: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i47: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 4980);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} vslice_dummy_var_277 := netdev_err.ref.ref.i32($p42, .str.43, $i45);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.41);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.2);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.42);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 363);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1458} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} vslice_dummy_var_275 := pch_gbe_phy_read_reg_miic($p0, 29, $p1);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i29 := pch_gbe_phy_write_reg_miic($p0, 29, 5);
    call {:si_unique_call 1462} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_276 := pch_gbe_phy_read_reg_miic($p0, 30, $p1);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 256);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i36);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p1);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i40 := pch_gbe_phy_write_reg_miic($p0, 30, $i39);
    call {:si_unique_call 1465} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i31 := $i40;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i31, 0);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i47 := $i31;
    goto $bb12;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_278 := netdev_err.ref.ref($p50, .str.44);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_274 := __dynamic_netdev_dbg.ref.ref.ref($p2, $p26, .str.42);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pch_gbe_open: ref;

axiom pch_gbe_open == $sub.ref(0, 531486);

procedure pch_gbe_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation pch_gbe_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i14: i32;
  var $p40: ref;
  var $p41: ref;
  var $i9: i32;
  var $i34: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p2 := netdev_priv($p0);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $i7 := pch_gbe_setup_tx_resources($p3, $p6);
    call {:si_unique_call 1471} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i12 := pch_gbe_setup_rx_resources($p3, $p11);
    call {:si_unique_call 1475} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} pch_gbe_hal_power_up_phy($p4);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i15 := pch_gbe_up($p3);
    call {:si_unique_call 1479} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.207);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.21);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.208);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 2177);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1481} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_280 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p0, .str.208);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} pch_gbe_free_rx_resources($p3, $p39);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} pch_gbe_free_tx_resources($p3, $p41);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} pch_gbe_reset($p3);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_279 := netdev_err.ref.ref($p0, .str.209);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i34 := $i9;
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} pch_gbe_hal_power_down_phy($p4);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const pch_gbe_stop: ref;

axiom pch_gbe_stop == $sub.ref(0, 532518);

procedure pch_gbe_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.41, $M.15, $M.17, $M.19, $M.21, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p1 := netdev_priv($p0);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} pch_gbe_down($p2);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} pch_gbe_free_tx_resources($p2, $p8);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} pch_gbe_free_rx_resources($p2, $p10);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} pch_gbe_hal_power_down_phy($p3);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_xmit_frame: ref;

axiom pch_gbe_xmit_frame == $sub.ref(0, 533550);

procedure pch_gbe_xmit_frame($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.32, $M.33, $M.34, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_xmit_frame($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $i16: i32;
  var vslice_dummy_var_281: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p3 := netdev_priv($p1);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i7 := arch_local_irq_save();
    call {:si_unique_call 1493} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} trace_hardirqs_off();
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p9 := spinlock_check($p8);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i10 := _raw_spin_trylock($p9);
    call {:si_unique_call 1497} {:cexpr "tmp___5"} boogie_si_record_i32($i10);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i18, $i20);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i24, $i26);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i27, $i29);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1505} {:cexpr "tmp___7"} boogie_si_record_i64($i34);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} pch_gbe_tx_queue($p4, $p6, $p0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} spin_unlock_irqrestore($p58, $i7);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} netif_stop_queue($p1);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} spin_unlock_irqrestore($p36, $i7);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.210);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.21);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.211);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 2234);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 0);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1509} {:cexpr "tmp___6"} boogie_si_record_i64($i51);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i16 := 16;
    goto $bb9;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} vslice_dummy_var_281 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p2, $p1, .str.211, $i54, $i56);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb13;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i16 := 32;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i12 := arch_irqs_disabled_flags($i7);
    call {:si_unique_call 1499} {:cexpr "tmp___2"} boogie_si_record_i32($i12);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} trace_hardirqs_on();
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} arch_local_irq_restore($i7);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} arch_local_irq_restore($i7);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} trace_hardirqs_off();
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_gbe_set_mac: ref;

axiom pch_gbe_set_mac == $sub.ref(0, 534582);

procedure pch_gbe_set_mac($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_set_mac($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $i16: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i24;
  var $i81: i24;
  var $i82: i24;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i24;
  var $i102: i24;
  var $i103: i24;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $p112: ref;
  var $p113: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $p120: ref;
  var $p121: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var cmdloc_dummy_var_164: [ref]i8;
  var cmdloc_dummy_var_165: [ref]i8;
  var cmdloc_dummy_var_166: [ref]i8;
  var cmdloc_dummy_var_167: [ref]i8;
  var cmdloc_dummy_var_168: [ref]i8;
  var cmdloc_dummy_var_169: [ref]i8;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p6 := netdev_priv($p0);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i11 := is_valid_ether_addr($p10);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1519} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    call {:si_unique_call 1520} {:cexpr "__len"} boogie_si_record_i64($i19);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_164 := $M.0;
    cmdloc_dummy_var_165 := $M.0;
    call {:si_unique_call 1521} cmdloc_dummy_var_166 := $memcpy.i8(cmdloc_dummy_var_164, cmdloc_dummy_var_165, $p21, $p23, $i19, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_166;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    call {:si_unique_call 1522} {:cexpr "__len___0"} boogie_si_record_i64($i26);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_167 := $M.0;
    cmdloc_dummy_var_168 := $M.0;
    call {:si_unique_call 1523} cmdloc_dummy_var_169 := $memcpy.i8(cmdloc_dummy_var_167, cmdloc_dummy_var_168, $p30, $p32, $i26, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_169;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} pch_gbe_mac_mar_set($p33, $p37, 0);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.216);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.21);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, .str.217);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.5, $p43);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 2336);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p43, $i46);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 0);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 1526} {:cexpr "tmp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, .str);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, .str.216);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p57, .str.21);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p58, .str.218);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.5, $p60);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 2337);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p60, $i63);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p64, 0);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.6, $p65);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 1529} {:cexpr "tmp___3"} boogie_si_record_i64($i69);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p74, .str);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p75, .str.216);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p76, .str.21);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p77, .str.219);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i80 := $load.i24($M.5, $p79);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i81 := $and.i24($i80, $sub.i24(0, 262144));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i82 := $or.i24($i81, 2338);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p79, $i82);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p83, 0);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 1);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 1532} {:cexpr "tmp___4"} boogie_si_record_i64($i88);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p95, .str);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p96, .str.216);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p97, .str.21);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p98, .str.220);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i101 := $load.i24($M.5, $p100);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i102 := $and.i24($i101, $sub.i24(0, 262144));
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i103 := $or.i24($i102, 2341);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p100, $i103);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p104, 0);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.6, $p105);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i64($i106);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i108 := $and.i64($i107, 1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i109 := ldv__builtin_expect($i108, 0);
    call {:si_unique_call 1535} {:cexpr "tmp___7"} boogie_si_record_i64($i109);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb16:
    assume $i110 == 1;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p113, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i118 := ioread32($p117);
    call {:si_unique_call 1537} {:cexpr "tmp___5"} boogie_si_record_i32($i118);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p121, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i126 := ioread32($p125);
    call {:si_unique_call 1539} {:cexpr "tmp___6"} boogie_si_record_i32($i126);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_285 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p5, $p0, .str.220, $i126, $i118);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i89 == 1;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_284 := __dynamic_netdev_dbg.ref.ref.ref.ref($p4, $p0, .str.219, $p93);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i70 == 1;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_283 := __dynamic_netdev_dbg.ref.ref.ref.ref($p3, $p0, .str.218, $p72);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i53 == 1;
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_282 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p0, .str.217, $i16);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 99);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const pch_gbe_ioctl: ref;

axiom pch_gbe_ioctl == $sub.ref(0, 535614);

procedure pch_gbe_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i25: i32;
  var vslice_dummy_var_286: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1542} {:cexpr "pch_gbe_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p4 := netdev_priv($p0);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.203);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.21);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.204);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 2436);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1545} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i2, 35248);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $p26 := if_mii($p1);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i28 := generic_mii_ioctl($p27, $p26, $i2, $0.ref);
    call {:si_unique_call 1551} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i25 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i24 := hwtstamp_ioctl($p0, $p1, $i2);
    call {:si_unique_call 1548} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} vslice_dummy_var_286 := __dynamic_netdev_dbg.ref.ref.ref.i32($p3, $p0, .str.204, $i2);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_change_mtu: ref;

axiom pch_gbe_change_mtu == $sub.ref(0, 536646);

procedure pch_gbe_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p57: ref;
  var $i58: i32;
  var $i11: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1553} {:cexpr "pch_gbe_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p3 := netdev_priv($p0);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 1555} {:cexpr "old_rx_buffer_len"} boogie_si_record_i64($i6);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i1, 18);
    call {:si_unique_call 1556} {:cexpr "max_frame"} boogie_si_record_i32($i7);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i7, 63);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i7, 10318);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $sle.i32($i7, 2048);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i7, 4096);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i7, 8192);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 10368);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i19 := netif_running($p0);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1559} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} pch_gbe_reset($p4);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i1);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(12, 1));
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i7);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.214);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.21);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.215);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 2395);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 1566} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(12, 1));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_289 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p2, $p0, .str.215, $i7, $i52, $i54, $i58);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} pch_gbe_down($p4);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i22 := pch_gbe_up($p4);
    call {:si_unique_call 1562} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i1);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(12, 1));
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i7);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i6);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_288 := pch_gbe_up($p4);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb6;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, 8192);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 4096);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, 2048);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_287 := netdev_err.ref.ref($p0, .str.213);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const pch_gbe_tx_timeout: ref;

axiom pch_gbe_tx_timeout == $sub.ref(0, 537678);

procedure pch_gbe_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_290: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $p1 := netdev_priv($p0);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(64, 1));
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(512, 1)), $mul.ref(64, 1));
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i6);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(616, 1));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_290 := schedule_work($p9);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_get_stats: ref;

axiom pch_gbe_get_stats == $sub.ref(0, 538710);

procedure pch_gbe_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pch_gbe_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const pch_gbe_netpoll: ref;

axiom pch_gbe_netpoll == $sub.ref(0, 539742);

procedure pch_gbe_netpoll($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var vslice_dummy_var_291: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $p1 := netdev_priv($p0);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} disable_irq($i6);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_291 := pch_gbe_intr($i10, $p11);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} enable_irq($i16);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_set_features: ref;

axiom pch_gbe_set_features == $sub.ref(0, 540774);

procedure pch_gbe_set_features($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_set_features($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} {:cexpr "pch_gbe_set_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $p2 := netdev_priv($p0);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i6 := $xor.i64($i5, $i1);
    call {:si_unique_call 1576} {:cexpr "changed"} boogie_si_record_i64($i6);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 17179869184);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i9 := netif_running($p0);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1578} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} pch_gbe_reset($p3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} pch_gbe_reinit_locked($p3);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_reinit_locked: ref;

axiom pch_gbe_reinit_locked == $sub.ref(0, 541806);

procedure pch_gbe_reinit_locked($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_reinit_locked($p0: ref)
{
  var vslice_dummy_var_292: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} pch_gbe_down($p0);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_292 := pch_gbe_up($p0);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    return;
}



const disable_irq: ref;

axiom disable_irq == $sub.ref(0, 542838);

procedure disable_irq($i0: i32);
  free requires assertsPassed;



implementation disable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} {:cexpr "disable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    return;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 543870);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 544902);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $i2 := queue_work($p1, $p0);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1586} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 545934);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1588} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 546966);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1590} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1591} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hwtstamp_ioctl: ref;

axiom hwtstamp_ioctl == $sub.ref(0, 547998);

procedure hwtstamp_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hwtstamp_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $i13: i32;
  var vslice_dummy_var_293: ref;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: ref;
  var vslice_dummy_var_296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $p4 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 1594} {:cexpr "hwtstamp_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p5 := netdev_priv($p0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $i11 := copy_from_user($p7, $p10, 12);
    call {:si_unique_call 1597} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(944, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 34);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(936, 1));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} pch_ch_control_write($p18, $sub.i32(0, 2147352576));
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} vslice_dummy_var_293 := strcpy($p43, .str.206);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p4);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} vslice_dummy_var_294 := pch_set_station_address($p45, $p18);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(932, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} pch_ch_event_write($p18, 3);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i56 := copy_to_user($p54, $p55, 12);
    call {:si_unique_call 1608} {:cexpr "tmp___1"} boogie_si_record_i64($i56);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i58 := (if $i57 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i13 := $i58;
    goto $bb3;

  $bb19:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb23;

  $bb24:
    assume $i31 == 1;
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(936, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} pch_ch_control_write($p18, $sub.i32(0, 2147352576));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} vslice_dummy_var_295 := strcpy($p38, .str.205);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} vslice_dummy_var_296 := pch_set_station_address($p40, $p18);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(936, 1));
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} pch_ch_control_write($p18, 1);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i32 == 1);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(936, 1));
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} pch_ch_control_write($p18, 0);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb23;

  $bb28:
    assume $i33 == 1;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(936, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 1);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 34);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb3;
}



const if_mii: ref;

axiom if_mii == $sub.ref(0, 549030);

procedure if_mii($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation if_mii($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const generic_mii_ioctl: ref;

axiom generic_mii_ioctl == $sub.ref(0, 550062);

procedure generic_mii_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation generic_mii_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1609} {:cexpr "generic_mii_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 551094);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1614} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1615} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} might_fault();
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 1618} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1622} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 1624} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 1620} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const pch_ch_control_write: ref;

axiom pch_ch_control_write == $sub.ref(0, 552126);

procedure pch_ch_control_write($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_ch_control_write($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} {:cexpr "pch_ch_control_write:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 553158);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const pch_set_station_address: ref;

axiom pch_set_station_address == $sub.ref(0, 554190);

procedure pch_set_station_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_set_station_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pch_ch_event_write: ref;

axiom pch_ch_event_write == $sub.ref(0, 555222);

procedure pch_ch_event_write($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_ch_event_write($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} {:cexpr "pch_ch_event_write:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 556254);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1632} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1633} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} might_fault();
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 1636} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1640} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $i21 := _copy_to_user($p0, $p1, $i20);
    call {:si_unique_call 1642} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $i12 := _copy_to_user($p0, $p1, $i11);
    call {:si_unique_call 1638} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 557286);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 558318);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 559350);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1644} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1645} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1646} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 560382);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 561414);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1648} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1649} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 562446);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_irq_save: ref;

axiom arch_local_irq_save == $sub.ref(0, 563478);

procedure arch_local_irq_save() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_irq_save() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i0 := arch_local_save_flags();
    call {:si_unique_call 1651} {:cexpr "f"} boogie_si_record_i64($i0);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} arch_local_irq_disable();
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 564510);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_trylock: ref;

axiom _raw_spin_trylock == $sub.ref(0, 565542);

procedure _raw_spin_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _raw_spin_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1653} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const arch_local_irq_restore: ref;

axiom arch_local_irq_restore == $sub.ref(0, 566574);

procedure arch_local_irq_restore($i0: i64);
  free requires assertsPassed;



implementation arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1657} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1659} $i8 := devirtbounce.15(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
    call {:si_unique_call 1660} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1658} devirtbounce.2(0, .str.119, 809, 12);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_restore_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 567606);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_tx_queue: ref;

axiom pch_gbe_tx_queue == $sub.ref(0, 568638);

procedure pch_gbe_tx_queue($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.33, $M.34, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_tx_queue($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i16;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i16;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i16;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i16;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i16;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i16;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i16;
  var $i192: i32;
  var $i193: i32;
  var $i194: i16;
  var $p195: ref;
  var $i196: i16;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i64;
  var $i205: i64;
  var $i206: i1;
  var $i207: i32;
  var $p208: ref;
  var $i209: i64;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var cmdloc_dummy_var_170: [ref]i8;
  var cmdloc_dummy_var_171: [ref]i8;
  var cmdloc_dummy_var_172: [ref]i8;
  var cmdloc_dummy_var_173: [ref]i8;
  var cmdloc_dummy_var_174: [ref]i8;
  var cmdloc_dummy_var_175: [ref]i8;
  var cmdloc_dummy_var_176: [ref]i8;
  var cmdloc_dummy_var_177: [ref]i8;
  var cmdloc_dummy_var_178: [ref]i8;
  var vslice_dummy_var_297: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 63);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1662} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(124, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 63);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i99 := $i19;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    call {:si_unique_call 1677} {:cexpr "ring_num"} boogie_si_record_i32($i101);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i101, 1);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i102, $i104);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i106);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i108 := ldv__builtin_expect($i107, 0);
    call {:si_unique_call 1679} {:cexpr "tmp___6"} boogie_si_record_i64($i108);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i109 == 1);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i101, 1);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i111);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i101);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(0, 1));
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i119 := $ugt.i64(14, 63);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i119 == 1);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_173 := $M.0;
    cmdloc_dummy_var_174 := $M.0;
    call {:si_unique_call 1681} cmdloc_dummy_var_175 := $memcpy.i8(cmdloc_dummy_var_173, cmdloc_dummy_var_174, $p125, $p127, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_175;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(14, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 0);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(15, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i138, 14);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    call {:si_unique_call 1682} {:cexpr "__len___0"} boogie_si_record_i64($i140);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p142, $mul.ref(16, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref(14, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_176 := $M.0;
    cmdloc_dummy_var_177 := $M.0;
    call {:si_unique_call 1683} cmdloc_dummy_var_178 := $memcpy.i8(cmdloc_dummy_var_176, cmdloc_dummy_var_177, $p143, $p146, $i140, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_178;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(32, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, $i149);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(32, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i64($i157);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i159 := dma_map_single_attrs($p153, $p155, $i158, 1, $0.ref);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(8, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p160, $i159);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(8, 1));
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.0, $p164);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $i166 := dma_mapping_error($p163, $i165);
    call {:si_unique_call 1686} {:cexpr "tmp___7"} boogie_si_record_i32($i166);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(34, 1));
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p174, 1);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, jiffies);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(24, 1));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p176, $i175);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i179 := $zext.i32.i64($i101);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(8, 1));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.0, $p181);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i64.i32($i182);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p178, $mul.ref($i179, 16)), $mul.ref(0, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i183);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i16($i186);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p178, $mul.ref($i179, 16)), $mul.ref(4, 1));
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p188, $i187);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i190);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i191);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i192, 3);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i16($i193);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p178, $mul.ref($i179, 16)), $mul.ref(8, 1));
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, $i194);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i99);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p178, $mul.ref($i179, 16)), $mul.ref(10, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, $i196);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p178, $mul.ref($i179, 16)), $mul.ref(14, 1));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p198, $sub.i16(0, 16384));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i199 := $add.i32($i101, 1);
    call {:si_unique_call 1688} {:cexpr "ring_num"} boogie_si_record_i32($i199);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i199, $i201);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i203 := $zext.i1.i32($i202);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i204 := $sext.i32.i64($i203);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $i205 := ldv__builtin_expect($i204, 0);
    call {:si_unique_call 1690} {:cexpr "tmp___8"} boogie_si_record_i64($i205);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $i199;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.0, $p208);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i64.i32($i209);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i211 := $mul.i32($i207, 16);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i212 := $add.i32($i210, $i211);
    $p213 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p214, $mul.ref(0, 364)), $mul.ref(320, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} iowrite32($i212, $p216);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} pch_tx_timestamp($p0, $p2);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} dev_kfree_skb_any($p2);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i206 == 1;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i207 := 0;
    goto $bb34;

  $bb28:
    assume $i167 == 1;
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} vslice_dummy_var_297 := netdev_err.ref.ref($p169, .str.212);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(8, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p171, 0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p114, $mul.ref($i115, 40)), $mul.ref(24, 1));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p172, 0);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, $i101);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i119 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_170 := $M.0;
    cmdloc_dummy_var_171 := $M.0;
    call {:si_unique_call 1680} cmdloc_dummy_var_172 := $memcpy.i8(cmdloc_dummy_var_170, cmdloc_dummy_var_171, $p121, $p123, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_172;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i109 == 1;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(124, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i19, 9);
    call {:si_unique_call 1665} {:cexpr "frame_ctrl"} boogie_si_record_i32($i28);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 8);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i99 := $i28;
    goto $bb21;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p33 := ip_hdr($p2);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $i34 := skb_transport_offset($p2);
    call {:si_unique_call 1668} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 6);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 17);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $p73 := udp_hdr($p2);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, 0);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i76, $i34);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $i78 := skb_checksum($p2, $i34, $i77, 0);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i78);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p81 := udp_hdr($p2);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i34);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i89, $i91);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i97 := csum_tcpudp_magic($i83, $i85, $i93, 17, $i96);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p81, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $i97);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p41 := tcp_hdr($p2);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, 0);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, $i34);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i46 := skb_checksum($p2, $i34, $i45, 0);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i46);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p49 := tcp_hdr($p2);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i34);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i57, $i59);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(116, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $i65 := csum_tcpudp_magic($i51, $i53, $i61, 6, $i64);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p49, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, $i65);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i12, 8);
    call {:si_unique_call 1664} {:cexpr "frame_ctrl"} boogie_si_record_i32($i18);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i11 := $or.i32(0, 1);
    call {:si_unique_call 1663} {:cexpr "frame_ctrl"} boogie_si_record_i32($i11);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 569670);

procedure ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $p1 := skb_network_header($p0);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_transport_offset: ref;

axiom skb_transport_offset == $sub.ref(0, 570702);

procedure skb_transport_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_transport_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $p1 := skb_transport_header($p0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, $i7);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcp_hdr: ref;

axiom tcp_hdr == $sub.ref(0, 571734);

procedure tcp_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcp_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $p1 := skb_transport_header($p0);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_checksum: ref;

axiom skb_checksum == $sub.ref(0, 572766);

procedure skb_checksum($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_checksum($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} {:cexpr "skb_checksum:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1698} {:cexpr "skb_checksum:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1699} {:cexpr "skb_checksum:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1700} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1701} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const csum_tcpudp_magic: ref;

axiom csum_tcpudp_magic == $sub.ref(0, 573798);

procedure csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} {:cexpr "csum_tcpudp_magic:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1703} {:cexpr "csum_tcpudp_magic:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1704} {:cexpr "csum_tcpudp_magic:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 1705} {:cexpr "csum_tcpudp_magic:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 1706} {:cexpr "csum_tcpudp_magic:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i3);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i9 := csum_tcpudp_nofold($i0, $i1, $i6, $i8, $i4);
    call {:si_unique_call 1708} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i10 := csum_fold($i9);
    call {:si_unique_call 1710} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const udp_hdr: ref;

axiom udp_hdr == $sub.ref(0, 574830);

procedure udp_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation udp_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p1 := skb_transport_header($p0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_tx_timestamp: ref;

axiom pch_tx_timestamp == $sub.ref(0, 575862);

procedure pch_tx_timestamp($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $M.34, $CurrAddr;



implementation pch_tx_timestamp($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $i324: i32;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i328: i32;
  var $i329: i1;
  var $i330: i32;
  var $i331: i32;
  var $i332: i1;
  var $i333: i32;
  var $i334: i32;
  var $i335: i1;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i32;
  var $i341: i1;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i35: i32;
  var $i345: i32;
  var $i346: i1;
  var cmdloc_dummy_var_179: [ref]i8;
  var cmdloc_dummy_var_180: [ref]i8;
  var cmdloc_dummy_var_181: [ref]i8;
  var cmdloc_dummy_var_182: [ref]i8;
  var cmdloc_dummy_var_183: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $p4 := skb_end_pointer($p1);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i13 := ldv__builtin_expect($i12, 1);
    call {:si_unique_call 1716} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(932, 1));
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $i20 := ldv__builtin_expect($i19, 1);
    call {:si_unique_call 1718} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 4);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i26);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(944, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $i30 := pch_ch_event_read($p29);
    call {:si_unique_call 1720} {:cexpr "val"} boogie_si_record_i32($i30);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} __const_udelay(4295);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i51 := pch_ch_event_read($p29);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 1);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i33 := $i51;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} __const_udelay(4295);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $i54 := pch_ch_event_read($p29);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i33 := $i54;
    assume {:branchcond $i56} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} __const_udelay(4295);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $i57 := pch_ch_event_read($p29);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 1);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i33 := $i57;
    assume {:branchcond $i59} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} __const_udelay(4295);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $i60 := pch_ch_event_read($p29);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 1);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i33 := $i60;
    assume {:branchcond $i62} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} __const_udelay(4295);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $i63 := pch_ch_event_read($p29);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 1);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i33 := $i63;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} __const_udelay(4295);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i66 := pch_ch_event_read($p29);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i33 := $i66;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} __const_udelay(4295);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $i69 := pch_ch_event_read($p29);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 1);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i33 := $i69;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} __const_udelay(4295);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $i72 := pch_ch_event_read($p29);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i33 := $i72;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} __const_udelay(4295);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $i75 := pch_ch_event_read($p29);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 1);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i33 := $i75;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __const_udelay(4295);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $i78 := pch_ch_event_read($p29);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i33 := $i78;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __const_udelay(4295);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i81 := pch_ch_event_read($p29);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 1);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i33 := $i81;
    assume {:branchcond $i83} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} __const_udelay(4295);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i84 := pch_ch_event_read($p29);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 1);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i33 := $i84;
    assume {:branchcond $i86} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} __const_udelay(4295);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i87 := pch_ch_event_read($p29);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 1);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i33 := $i87;
    assume {:branchcond $i89} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} __const_udelay(4295);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i90 := pch_ch_event_read($p29);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 1);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i33 := $i90;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} __const_udelay(4295);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $i93 := pch_ch_event_read($p29);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 1);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i33 := $i93;
    assume {:branchcond $i95} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} __const_udelay(4295);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i96 := pch_ch_event_read($p29);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 1);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i33 := $i96;
    assume {:branchcond $i98} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} __const_udelay(4295);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i99 := pch_ch_event_read($p29);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 1);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i33 := $i99;
    assume {:branchcond $i101} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} __const_udelay(4295);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $i102 := pch_ch_event_read($p29);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 1);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i33 := $i102;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} __const_udelay(4295);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $i105 := pch_ch_event_read($p29);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 1);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i33 := $i105;
    assume {:branchcond $i107} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} __const_udelay(4295);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $i108 := pch_ch_event_read($p29);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 1);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i33 := $i108;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} __const_udelay(4295);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i111 := pch_ch_event_read($p29);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 1);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i33 := $i111;
    assume {:branchcond $i113} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} __const_udelay(4295);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $i114 := pch_ch_event_read($p29);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 1);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i33 := $i114;
    assume {:branchcond $i116} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} __const_udelay(4295);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $i117 := pch_ch_event_read($p29);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 1);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i33 := $i117;
    assume {:branchcond $i119} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} __const_udelay(4295);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i120 := pch_ch_event_read($p29);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 1);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i33 := $i120;
    assume {:branchcond $i122} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} __const_udelay(4295);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $i123 := pch_ch_event_read($p29);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 1);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i33 := $i123;
    assume {:branchcond $i125} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} __const_udelay(4295);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} $i126 := pch_ch_event_read($p29);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 1);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i33 := $i126;
    assume {:branchcond $i128} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} __const_udelay(4295);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i129 := pch_ch_event_read($p29);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 1);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i33 := $i129;
    assume {:branchcond $i131} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} __const_udelay(4295);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $i132 := pch_ch_event_read($p29);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 1);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i33 := $i132;
    assume {:branchcond $i134} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} __const_udelay(4295);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $i135 := pch_ch_event_read($p29);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 1);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i33 := $i135;
    assume {:branchcond $i137} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} __const_udelay(4295);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i138 := pch_ch_event_read($p29);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i138, 1);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i33 := $i138;
    assume {:branchcond $i140} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} __const_udelay(4295);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i141 := pch_ch_event_read($p29);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 1);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i33 := $i141;
    assume {:branchcond $i143} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} __const_udelay(4295);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i144 := pch_ch_event_read($p29);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, 1);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i33 := $i144;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} __const_udelay(4295);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $i147 := pch_ch_event_read($p29);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 1);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i33 := $i147;
    assume {:branchcond $i149} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} __const_udelay(4295);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $i150 := pch_ch_event_read($p29);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, 1);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i33 := $i150;
    assume {:branchcond $i152} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} __const_udelay(4295);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $i153 := pch_ch_event_read($p29);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 1);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i33 := $i153;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} __const_udelay(4295);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} $i156 := pch_ch_event_read($p29);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, 1);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i33 := $i156;
    assume {:branchcond $i158} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} __const_udelay(4295);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $i159 := pch_ch_event_read($p29);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 1);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i33 := $i159;
    assume {:branchcond $i161} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} __const_udelay(4295);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $i162 := pch_ch_event_read($p29);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 1);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i33 := $i162;
    assume {:branchcond $i164} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} __const_udelay(4295);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $i165 := pch_ch_event_read($p29);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 1);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i33 := $i165;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} __const_udelay(4295);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $i168 := pch_ch_event_read($p29);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 1);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i33 := $i168;
    assume {:branchcond $i170} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} __const_udelay(4295);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $i171 := pch_ch_event_read($p29);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 1);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i33 := $i171;
    assume {:branchcond $i173} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} __const_udelay(4295);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $i174 := pch_ch_event_read($p29);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 1);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i33 := $i174;
    assume {:branchcond $i176} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} __const_udelay(4295);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i177 := pch_ch_event_read($p29);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 1);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i33 := $i177;
    assume {:branchcond $i179} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} __const_udelay(4295);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} $i180 := pch_ch_event_read($p29);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, 1);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i33 := $i180;
    assume {:branchcond $i182} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} __const_udelay(4295);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i183 := pch_ch_event_read($p29);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 1);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i33 := $i183;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} __const_udelay(4295);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $i186 := pch_ch_event_read($p29);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 1);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i33 := $i186;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} __const_udelay(4295);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $i189 := pch_ch_event_read($p29);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i190 := $and.i32($i189, 1);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i33 := $i189;
    assume {:branchcond $i191} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} __const_udelay(4295);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i192 := pch_ch_event_read($p29);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i193 := $and.i32($i192, 1);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i33 := $i192;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} __const_udelay(4295);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $i195 := pch_ch_event_read($p29);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 1);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i33 := $i195;
    assume {:branchcond $i197} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} __const_udelay(4295);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $i198 := pch_ch_event_read($p29);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i198, 1);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i33 := $i198;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} __const_udelay(4295);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i201 := pch_ch_event_read($p29);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i202 := $and.i32($i201, 1);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i33 := $i201;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} __const_udelay(4295);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $i204 := pch_ch_event_read($p29);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 1);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i33 := $i204;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} __const_udelay(4295);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i207 := pch_ch_event_read($p29);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 1);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i33 := $i207;
    assume {:branchcond $i209} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} __const_udelay(4295);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i210 := pch_ch_event_read($p29);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i211 := $and.i32($i210, 1);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 0);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i33 := $i210;
    assume {:branchcond $i212} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} __const_udelay(4295);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i213 := pch_ch_event_read($p29);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 1);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i33 := $i213;
    assume {:branchcond $i215} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} __const_udelay(4295);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} $i216 := pch_ch_event_read($p29);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, 1);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i33 := $i216;
    assume {:branchcond $i218} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} __const_udelay(4295);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $i219 := pch_ch_event_read($p29);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i220 := $and.i32($i219, 1);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i33 := $i219;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} __const_udelay(4295);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $i222 := pch_ch_event_read($p29);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 1);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i33 := $i222;
    assume {:branchcond $i224} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} __const_udelay(4295);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} $i225 := pch_ch_event_read($p29);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i225, 1);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i33 := $i225;
    assume {:branchcond $i227} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} __const_udelay(4295);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i228 := pch_ch_event_read($p29);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i229 := $and.i32($i228, 1);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i229, 0);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i33 := $i228;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} __const_udelay(4295);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i231 := pch_ch_event_read($p29);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i232 := $and.i32($i231, 1);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i33 := $i231;
    assume {:branchcond $i233} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} __const_udelay(4295);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i234 := pch_ch_event_read($p29);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 1);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i33 := $i234;
    assume {:branchcond $i236} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} __const_udelay(4295);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i237 := pch_ch_event_read($p29);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, 1);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i33 := $i237;
    assume {:branchcond $i239} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} __const_udelay(4295);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $i240 := pch_ch_event_read($p29);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i241 := $and.i32($i240, 1);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i33 := $i240;
    assume {:branchcond $i242} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} __const_udelay(4295);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $i243 := pch_ch_event_read($p29);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $i244 := $and.i32($i243, 1);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i33 := $i243;
    assume {:branchcond $i245} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} __const_udelay(4295);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i246 := pch_ch_event_read($p29);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i247 := $and.i32($i246, 1);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i247, 0);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i33 := $i246;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} __const_udelay(4295);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i249 := pch_ch_event_read($p29);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i249, 1);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i33 := $i249;
    assume {:branchcond $i251} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} __const_udelay(4295);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i252 := pch_ch_event_read($p29);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i253 := $and.i32($i252, 1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i33 := $i252;
    assume {:branchcond $i254} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} __const_udelay(4295);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i255 := pch_ch_event_read($p29);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i256 := $and.i32($i255, 1);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i33 := $i255;
    assume {:branchcond $i257} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} __const_udelay(4295);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i258 := pch_ch_event_read($p29);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i33 := $i258;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} __const_udelay(4295);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $i261 := pch_ch_event_read($p29);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i262 := $and.i32($i261, 1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i33 := $i261;
    assume {:branchcond $i263} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} __const_udelay(4295);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} $i264 := pch_ch_event_read($p29);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i265 := $and.i32($i264, 1);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i33 := $i264;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} __const_udelay(4295);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $i267 := pch_ch_event_read($p29);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i268 := $and.i32($i267, 1);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i33 := $i267;
    assume {:branchcond $i269} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} __const_udelay(4295);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $i270 := pch_ch_event_read($p29);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i270, 1);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i33 := $i270;
    assume {:branchcond $i272} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} __const_udelay(4295);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i273 := pch_ch_event_read($p29);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i274 := $and.i32($i273, 1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i33 := $i273;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} __const_udelay(4295);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $i276 := pch_ch_event_read($p29);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i277 := $and.i32($i276, 1);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i33 := $i276;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} __const_udelay(4295);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $i279 := pch_ch_event_read($p29);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i280 := $and.i32($i279, 1);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i33 := $i279;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} __const_udelay(4295);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} $i282 := pch_ch_event_read($p29);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i283 := $and.i32($i282, 1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i33 := $i282;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} __const_udelay(4295);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i285 := pch_ch_event_read($p29);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i286 := $and.i32($i285, 1);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i287 := $ne.i32($i286, 0);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i33 := $i285;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} __const_udelay(4295);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $i288 := pch_ch_event_read($p29);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i289 := $and.i32($i288, 1);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i33 := $i288;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} __const_udelay(4295);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i291 := pch_ch_event_read($p29);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i292 := $and.i32($i291, 1);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, 0);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i33 := $i291;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} __const_udelay(4295);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i294 := pch_ch_event_read($p29);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i294, 1);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $i33 := $i294;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} __const_udelay(4295);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $i297 := pch_ch_event_read($p29);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i297, 1);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i33 := $i297;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} __const_udelay(4295);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $i300 := pch_ch_event_read($p29);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i301 := $and.i32($i300, 1);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i33 := $i300;
    assume {:branchcond $i302} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} __const_udelay(4295);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $i303 := pch_ch_event_read($p29);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i304 := $and.i32($i303, 1);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 0);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i33 := $i303;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} __const_udelay(4295);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $i306 := pch_ch_event_read($p29);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i307 := $and.i32($i306, 1);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i33 := $i306;
    assume {:branchcond $i308} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} __const_udelay(4295);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} $i309 := pch_ch_event_read($p29);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i310 := $and.i32($i309, 1);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i33 := $i309;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} __const_udelay(4295);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $i312 := pch_ch_event_read($p29);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 1);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i33 := $i312;
    assume {:branchcond $i314} true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} __const_udelay(4295);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $i315 := pch_ch_event_read($p29);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i316 := $and.i32($i315, 1);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i33 := $i315;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} __const_udelay(4295);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $i318 := pch_ch_event_read($p29);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i319 := $and.i32($i318, 1);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i33 := $i318;
    assume {:branchcond $i320} true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} __const_udelay(4295);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $i321 := pch_ch_event_read($p29);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i321, 1);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i33 := $i321;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} __const_udelay(4295);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i324 := pch_ch_event_read($p29);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i325 := $and.i32($i324, 1);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i326 := $ne.i32($i325, 0);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i33 := $i324;
    assume {:branchcond $i326} true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} __const_udelay(4295);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i327 := pch_ch_event_read($p29);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i328 := $and.i32($i327, 1);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i33 := $i327;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} __const_udelay(4295);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $i330 := pch_ch_event_read($p29);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i331 := $and.i32($i330, 1);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i332 := $ne.i32($i331, 0);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i33 := $i330;
    assume {:branchcond $i332} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} __const_udelay(4295);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $i333 := pch_ch_event_read($p29);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i334 := $and.i32($i333, 1);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i33 := $i333;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} __const_udelay(4295);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i336 := pch_ch_event_read($p29);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i337 := $and.i32($i336, 1);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i338 := $ne.i32($i337, 0);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i33 := $i336;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} __const_udelay(4295);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $i339 := pch_ch_event_read($p29);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i340 := $and.i32($i339, 1);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i33 := $i339;
    assume {:branchcond $i341} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} __const_udelay(4295);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i342 := pch_ch_event_read($p29);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i343 := $and.i32($i342, 1);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i33 := $i342;
    assume {:branchcond $i344} true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} __const_udelay(4295);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i35 := pch_ch_event_read($p29);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i345 := $and.i32($i35, 1);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 0);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i33 := $i35;
    assume {:branchcond $i346} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} __const_udelay(4295);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $i35;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i34, 1);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $i44 := pch_tx_snap_read($p29);
    call {:si_unique_call 1724} {:cexpr "ns"} boogie_si_record_i64($i44);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_179 := $M.32;
    call {:si_unique_call 1725} cmdloc_dummy_var_180 := $memset.i8(cmdloc_dummy_var_179, $p45, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.32 := cmdloc_dummy_var_180;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $i47 := ns_to_ktime($i44);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p48, $i47);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p46);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_181 := $M.32;
    cmdloc_dummy_var_182 := $M.32;
    call {:si_unique_call 1727} cmdloc_dummy_var_183 := $memcpy.i8(cmdloc_dummy_var_181, cmdloc_dummy_var_182, $p49, $p50, 8, $zext.i32.i64(8), 0 == 1);
    $M.32 := cmdloc_dummy_var_183;
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} skb_tstamp_tx($p1, $p2);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} pch_ch_event_write($p29, 1);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 251);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb412:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb13;

  $bb408:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb11;

  $bb404:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb11;

  $bb400:
    assume {:verifier.code 0} true;
    assume $i338 == 1;
    goto $bb11;

  $bb396:
    assume {:verifier.code 0} true;
    assume $i335 == 1;
    goto $bb11;

  $bb392:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb11;

  $bb388:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb11;

  $bb384:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb11;

  $bb380:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb11;

  $bb376:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb11;

  $bb372:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb11;

  $bb368:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb11;

  $bb364:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb11;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb11;

  $bb356:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb11;

  $bb352:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb11;

  $bb348:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb11;

  $bb344:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb11;

  $bb340:
    assume {:verifier.code 0} true;
    assume $i293 == 1;
    goto $bb11;

  $bb336:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb11;

  $bb332:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb11;

  $bb328:
    assume {:verifier.code 0} true;
    assume $i284 == 1;
    goto $bb11;

  $bb324:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb11;

  $bb320:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb11;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb11;

  $bb312:
    assume {:verifier.code 0} true;
    assume $i272 == 1;
    goto $bb11;

  $bb308:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb11;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb11;

  $bb300:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb11;

  $bb296:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb11;

  $bb292:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb11;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i254 == 1;
    goto $bb11;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb11;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb11;

  $bb276:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb11;

  $bb272:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb11;

  $bb268:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb11;

  $bb264:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb11;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb11;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb11;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb11;

  $bb248:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb11;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb11;

  $bb240:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb11;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb11;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb11;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i209 == 1;
    goto $bb11;

  $bb224:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb11;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb11;

  $bb216:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb11;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb11;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb11;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb11;

  $bb200:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb11;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb11;

  $bb192:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb11;

  $bb188:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb11;

  $bb184:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb11;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb11;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb11;

  $bb172:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb11;

  $bb168:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb11;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb11;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb11;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb11;

  $bb152:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb11;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb11;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb11;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb11;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb11;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb11;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb11;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb11;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb11;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb11;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb11;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb11;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb11;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb11;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb11;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb11;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb11;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb11;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb11;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb11;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb11;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb11;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb11;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb11;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb11;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb11;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb11;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb11;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb11;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb11;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb11;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb11;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb11;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb11;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 576894);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const pch_ch_event_read: ref;

axiom pch_ch_event_read == $sub.ref(0, 577926);

procedure pch_ch_event_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_ch_event_read($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1928} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_tx_snap_read: ref;

axiom pch_tx_snap_read == $sub.ref(0, 578958);

procedure pch_tx_snap_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation pch_tx_snap_read($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1929} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1930} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ns_to_ktime: ref;

axiom ns_to_ktime == $sub.ref(0, 579990);

procedure ns_to_ktime($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.33, $M.34, $CurrAddr;



implementation ns_to_ktime($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var cmdloc_dummy_var_184: [ref]i8;
  var cmdloc_dummy_var_185: [ref]i8;
  var cmdloc_dummy_var_186: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1934} {:cexpr "ns_to_ktime:arg:ns"} boogie_si_record_i64($i0);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p4, 0);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.33, $p5);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i0);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p8, $i7);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_184 := $M.34;
    cmdloc_dummy_var_185 := $M.34;
    call {:si_unique_call 1935} cmdloc_dummy_var_186 := $memcpy.i8(cmdloc_dummy_var_184, cmdloc_dummy_var_185, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.34 := cmdloc_dummy_var_186;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.34, $p11);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const skb_tstamp_tx: ref;

axiom skb_tstamp_tx == $sub.ref(0, 581022);

procedure skb_tstamp_tx($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_tstamp_tx($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    return;
}



const skb_transport_header: ref;

axiom skb_transport_header == $sub.ref(0, 582054);

procedure skb_transport_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_transport_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const csum_tcpudp_nofold: ref;

axiom csum_tcpudp_nofold == $sub.ref(0, 583086);

procedure csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} {:cexpr "csum_tcpudp_nofold:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1937} {:cexpr "csum_tcpudp_nofold:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1938} {:cexpr "csum_tcpudp_nofold:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 1939} {:cexpr "csum_tcpudp_nofold:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 1940} {:cexpr "csum_tcpudp_nofold:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i3);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, $i6);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 8);
    call {:si_unique_call 1941} $i9 := devirtbounce.16(0, $i1, $i0, $i8, $i4);
    call {:si_unique_call 1942} {:cexpr "sum"} boogie_si_record_i32($i9);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const csum_fold: ref;

axiom csum_fold == $sub.ref(0, 584118);

procedure csum_fold($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_fold($i0: i32) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} {:cexpr "csum_fold:arg:sum"} boogie_si_record_i32($i0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 16);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, $sub.i32(0, 65536));
    call {:si_unique_call 1944} $i3 := devirtbounce.17(0, $i1, $i2);
    call {:si_unique_call 1945} {:cexpr "sum"} boogie_si_record_i32($i3);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 16);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 585150);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(194, 1));
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 586182);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1947} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1949} $i7 := devirtbounce.11(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 1950} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1948} devirtbounce.2(0, .str.119, 814, 12);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_disable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const pch_gbe_hal_power_down_phy: ref;

axiom pch_gbe_hal_power_down_phy == $sub.ref(0, 587214);

procedure pch_gbe_hal_power_down_phy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_hal_power_down_phy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1951} devirtbounce.18($p10, $p0);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_hal_power_up_phy: ref;

axiom pch_gbe_hal_power_up_phy == $sub.ref(0, 588246);

procedure pch_gbe_hal_power_up_phy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_hal_power_up_phy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1952} devirtbounce.18($p10, $p0);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_probe: ref;

axiom pch_gbe_probe == $sub.ref(0, 589278);

procedure pch_gbe_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.41, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.51, $CurrAddr, $M.55, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation pch_gbe_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p112: ref;
  var $i113: i64;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i24;
  var $i141: i24;
  var $i142: i24;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i1;
  var $p161: ref;
  var $p163: ref;
  var $i87: i32;
  var $p165: ref;
  var $i82: i32;
  var $i7: i32;
  var cmdloc_dummy_var_187: [ref]i8;
  var cmdloc_dummy_var_188: [ref]i8;
  var cmdloc_dummy_var_189: [ref]i8;
  var cmdloc_dummy_var_190: [ref]i8;
  var cmdloc_dummy_var_191: [ref]i8;
  var cmdloc_dummy_var_192: [ref]i8;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $i5 := pcim_enable_device($p0);
    call {:si_unique_call 1957} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $i8 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 1959} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $i10 := pci_set_consistent_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 1961} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} $p18 := pci_name($p0);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $i19 := pcim_iomap_regions($p0, 2, $p18);
    call {:si_unique_call 1969} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} pci_set_master($p0);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $p23 := alloc_etherdev_mqs(960, 1, 1);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p26);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p23);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} pci_set_drvdata($p0, $p29);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $p30 := netdev_priv($p23);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p23);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p0);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p30);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $p37 := pcim_iomap_table($p0);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(1, 8));
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p39);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(952, 1));
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p45);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(952, 1));
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $p69 := pci_get_bus_and_slot($i68, 100);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(944, 1));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p69);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, pch_gbe_netdev_ops);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(1048, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 1250);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(176, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} netif_napi_add($p23, $p73, pch_gbe_napi_poll, 64);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, 17179869202);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i76);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} pch_gbe_set_ethtool_ops($p23);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} pch_gbe_mac_load_mac_addr($p78);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} pch_gbe_mac_reset_hw($p79);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $i80 := pch_gbe_sw_init($p31);
    call {:si_unique_call 1983} {:cexpr "ret"} boogie_si_record_i32($i80);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $i83 := pch_gbe_init_phy($p31);
    call {:si_unique_call 1986} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} pch_gbe_hal_get_bus_info($p88);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $i90 := pch_gbe_hal_read_mac_addr($p89);
    call {:si_unique_call 1991} {:cexpr "ret"} boogie_si_record_i32($i90);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    call {:si_unique_call 1993} {:cexpr "__len"} boogie_si_record_i64($i96);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_187 := $M.0;
    cmdloc_dummy_var_188 := $M.0;
    call {:si_unique_call 1994} cmdloc_dummy_var_189 := $memcpy.i8(cmdloc_dummy_var_187, cmdloc_dummy_var_188, $p98, $p102, $i96, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_189;
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i105 := is_valid_ether_addr($p104);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    call {:si_unique_call 1996} {:cexpr "tmp___4"} boogie_si_record_i8($i106);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(744, 1));
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p31);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} vslice_dummy_var_304 := reg_timer_2($p112, pch_gbe_watchdog, $i113);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(616, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} __init_work($p115, 0);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p116, 137438953408);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(616, 1)), $mul.ref(0, 1));
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p3);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_190 := $M.0;
    cmdloc_dummy_var_191 := $M.0;
    call {:si_unique_call 2000} cmdloc_dummy_var_192 := $memcpy.i8(cmdloc_dummy_var_190, cmdloc_dummy_var_191, $p119, $p120, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_192;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(616, 1)), $mul.ref(32, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} lockdep_init_map($p122, .str.165, $p2, 0);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(616, 1)), $mul.ref(8, 1));
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} INIT_LIST_HEAD($p124);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(616, 1)), $mul.ref(24, 1));
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, pch_gbe_reset_task);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} pch_gbe_check_options($p31);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 1);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p23, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} vslice_dummy_var_305 := _dev_info.ref.ref.ref($p128, .str.166, $p130);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} pch_gbe_reset($p31);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i132 := ldv_register_netdev_81($p23);
    call {:si_unique_call 2007} {:cexpr "ret"} boogie_si_record_i32($i132);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} netif_carrier_off($p23);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} netif_stop_queue($p23);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p134, .str);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p135, .str.167);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p136, .str.21);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p137, .str.168);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i140 := $load.i24($M.39, $p139);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i141 := $and.i24($i140, $sub.i24(0, 262144));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i142 := $or.i24($i141, 2784);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p139, $i142);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p143, 0);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.40, $p144);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i64($i145);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i147 := $and.i64($i146, 1);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} $i148 := ldv__builtin_expect($i147, 0);
    call {:si_unique_call 2011} {:cexpr "tmp___6"} boogie_si_record_i64($i148);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(952, 1));
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} vslice_dummy_var_308 := device_set_wakeup_enable($p163, 1);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb53:
    assume $i155 == 1;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(952, 1));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i8.i1($i159);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb55;

  $bb56:
    assume $i160 == 1;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} vslice_dummy_var_307 := pch_gbe_phy_disable_hibernate($p161);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i149 == 1;
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} vslice_dummy_var_306 := __dynamic_dev_dbg.ref.ref.ref($p4, $p150, .str.168);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i133 == 1;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i87 := $i132;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} pch_gbe_hal_phy_hw_reset($p165);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i82 := $i87;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} ldv_free_netdev_82($p23);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i7 := $i82;
    goto $bb3;

  $bb44:
    assume $i109 == 1;
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} vslice_dummy_var_303 := dev_err.ref.ref($p110, .str.164);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i107 == 1;
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb43;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} vslice_dummy_var_302 := dev_err.ref.ref($p92, .str.163);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i87 := $i90;
    goto $bb36;

  $bb34:
    assume $i84 == 1;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} vslice_dummy_var_301 := dev_err.ref.ref($p85, .str.162);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i87 := $i83;
    goto $bb36;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    goto $bb32;

  $bb24:
    assume $i50 == 1;
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(952, 1));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb26;

  $bb27:
    assume $i56 == 1;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p31, $mul.ref(0, 960)), $mul.ref(952, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    call {:si_unique_call 1976} vslice_dummy_var_300 := devirtbounce.19($p60, $p0);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb18:
    assume $i20 == 1;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} vslice_dummy_var_299 := dev_err.ref.ref($p21, .str.161);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i12 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 1963} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i14 := pci_set_consistent_dma_mask($p0, 4294967295);
    call {:si_unique_call 1965} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} vslice_dummy_var_298 := dev_err.ref.ref($p16, .str.160);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const pch_gbe_remove: ref;

axiom pch_gbe_remove == $sub.ref(0, 590310);

procedure pch_gbe_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.41, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_309: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $p3 := netdev_priv($p2);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(616, 1));
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} vslice_dummy_var_309 := cancel_work_sync($p5);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} ldv_unregister_netdev_79($p2);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} pch_gbe_hal_phy_hw_reset($p7);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} ldv_free_netdev_80($p2);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_shutdown: ref;

axiom pch_gbe_shutdown == $sub.ref(0, 591342);

procedure pch_gbe_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.41, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17, $M.19, $M.21, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_shutdown($p0: ref)
{
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} vslice_dummy_var_310 := __pch_gbe_suspend($p0);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, system_state);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 3);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} vslice_dummy_var_311 := pci_wake_from_d3($p0, 1);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} vslice_dummy_var_312 := pci_set_power_state($p0, 3);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __pch_gbe_suspend: ref;

axiom __pch_gbe_suspend == $sub.ref(0, 592374);

procedure __pch_gbe_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.41, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17, $M.19, $M.21, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation __pch_gbe_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $p3 := netdev_priv($p2);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(872, 1));
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 2026} {:cexpr "wufc"} boogie_si_record_i32($i7);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} netif_device_detach($p2);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $i8 := netif_running($p2);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 2029} {:cexpr "tmp___1"} boogie_si_record_i8($i9);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, 0);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} pch_gbe_hal_power_down_phy($p5);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} pch_gbe_mac_set_wol_event($p5, $i7);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} pci_disable_device($p0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} pch_gbe_set_multi($p2);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} pch_gbe_setup_rctl($p4);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} pch_gbe_configure_rx($p4);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} pch_gbe_set_rgmii_ctrl($p4, $i16, $i21);
    $p23 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} pch_gbe_set_mode($p4, $i26, $i31);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} pch_gbe_mac_set_wol_event($p5, $i7);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} pci_disable_device($p0);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} pch_gbe_down($p4);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_wake_from_d3: ref;

axiom pci_wake_from_d3 == $sub.ref(0, 593406);

procedure pci_wake_from_d3($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_wake_from_d3($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2041} {:cexpr "pci_wake_from_d3:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2042} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 594438);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2044} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2045} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2046} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 595470);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 596502);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_set_rgmii_ctrl: ref;

axiom pch_gbe_set_rgmii_ctrl == $sub.ref(0, 597534);

procedure pch_gbe_set_rgmii_ctrl($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;



implementation pch_gbe_set_rgmii_ctrl($p0: ref, $i1: i16, $i2: i16)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} {:cexpr "pch_gbe_set_rgmii_ctrl:arg:speed"} boogie_si_record_i16($i1);
    call {:si_unique_call 2049} {:cexpr "pch_gbe_set_rgmii_ctrl:arg:duplex"} boogie_si_record_i16($i2);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 1000);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 1000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 364)), $mul.ref(240, 1));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} iowrite32($i11, $p15);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i10 := 3;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i10 := 11;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i10 := 15;
    goto $bb13;
}



const pch_gbe_set_mode: ref;

axiom pch_gbe_set_mode == $sub.ref(0, 598566);

procedure pch_gbe_set_mode($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_set_mode($p0: ref, $i1: i16, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $i13: i64;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} {:cexpr "pch_gbe_set_mode:arg:speed"} boogie_si_record_i16($i1);
    call {:si_unique_call 2052} {:cexpr "pch_gbe_set_mode:arg:duplex"} boogie_si_record_i16($i2);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 1000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 1000);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i13;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 364)), $mul.ref(8, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} iowrite32($i19, $p23);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i17 := $or.i64($i13, 1073741824);
    call {:si_unique_call 2053} {:cexpr "mode"} boogie_si_record_i64($i17);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb17;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i13 := 2147483648;
    goto $bb13;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 100);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(944, 1));
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 100);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb13;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(944, 1));
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 10);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb13;
}



const pch_gbe_mac_set_wol_event: ref;

axiom pch_gbe_mac_set_wol_event == $sub.ref(0, 599598);

procedure pch_gbe_mac_set_wol_event($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mac_set_wol_event($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var vslice_dummy_var_313: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 2056} {:cexpr "pch_gbe_mac_set_wol_event:arg:wu_evt"} boogie_si_record_i32($i1);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.201);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.21);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.202);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 601);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 2058} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i1, 0);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 364)), $mul.ref(356, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} iowrite32(0, $p63);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 364)), $mul.ref(352, 1));
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} iowrite32(0, $p67);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $i34 := ioread32($p33);
    call {:si_unique_call 2063} {:cexpr "addr_mask"} boogie_si_record_i32($i34);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 364)), $mul.ref(360, 1));
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} iowrite32($i34, $p38);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 364)), $mul.ref(360, 1));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} pch_gbe_wait_clr_bit($p42, $sub.i32(0, 2147483648));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 364)), $mul.ref(352, 1));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} iowrite32(0, $p46);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i1, 65536);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 364)), $mul.ref(356, 1));
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} iowrite32($i47, $p51);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 364)), $mul.ref(16, 1));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} iowrite32(2, $p55);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 364)), $mul.ref(4, 1));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} iowrite32(16777513, $p59);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $i25 := ioread32($p24);
    call {:si_unique_call 2060} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} vslice_dummy_var_313 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p2, $p27, .str.202, $i1, $i25);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 600630);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 601662);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 602694);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2072} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2073} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_unregister_netdev_79: ref;

axiom ldv_unregister_netdev_79 == $sub.ref(0, 603726);

procedure ldv_unregister_netdev_79($p0: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_unregister_netdev_79($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} unregister_netdev($p0);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 2075} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_hal_phy_hw_reset: ref;

axiom pch_gbe_hal_phy_hw_reset == $sub.ref(0, 604758);

procedure pch_gbe_hal_phy_hw_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_hal_phy_hw_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_314: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 2077} devirtbounce.18($p15, $p0);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} vslice_dummy_var_314 := netdev_err.ref.ref($p10, .str.19);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_netdev_80: ref;

axiom ldv_free_netdev_80 == $sub.ref(0, 605790);

procedure ldv_free_netdev_80($p0: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_free_netdev_80($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} free_netdev($p0);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 2079} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 606822);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 607854);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    return;
}



const pcim_enable_device: ref;

axiom pcim_enable_device == $sub.ref(0, 608886);

procedure pcim_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pcim_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2080} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2081} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 609918);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 2084} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_consistent_dma_mask: ref;

axiom pci_set_consistent_dma_mask == $sub.ref(0, 610950);

procedure pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} {:cexpr "pci_set_consistent_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} $i3 := dma_set_coherent_mask($p2, $i1);
    call {:si_unique_call 2087} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 611982);

procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2088} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2089} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2090} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2091} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pcim_iomap_regions: ref;

axiom pcim_iomap_regions == $sub.ref(0, 613014);

procedure pcim_iomap_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pcim_iomap_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2092} {:cexpr "pcim_iomap_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2093} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 614046);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 615078);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2096} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2097} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $p3 := external_alloc();
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 616110);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} dev_set_drvdata($p2, $p1);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    return;
}



const pcim_iomap_table: ref;

axiom pcim_iomap_table == $sub.ref(0, 617142);

procedure pcim_iomap_table($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pcim_iomap_table($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $p1 := external_alloc();
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_get_bus_and_slot: ref;

axiom pci_get_bus_and_slot == $sub.ref(0, 618174);

procedure pci_get_bus_and_slot($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_bus_and_slot($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} {:cexpr "pci_get_bus_and_slot:arg:bus"} boogie_si_record_i32($i0);
    call {:si_unique_call 2102} {:cexpr "pci_get_bus_and_slot:arg:devfn"} boogie_si_record_i32($i1);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $p2 := pci_get_domain_bus_and_slot(0, $i0, $i1);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_gbe_napi_poll: ref;

axiom pch_gbe_napi_poll == $sub.ref(0, 619206);

procedure pch_gbe_napi_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 620238);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_set_ethtool_ops: ref;

axiom pch_gbe_set_ethtool_ops == $sub.ref(0, 621270);

procedure pch_gbe_set_ethtool_ops($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_set_ethtool_ops($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, pch_gbe_ethtool_ops);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_mac_load_mac_addr: ref;

axiom pch_gbe_mac_load_mac_addr == $sub.ref(0, 622302);

procedure pch_gbe_mac_load_mac_addr($p0: ref);
  free requires assertsPassed;



implementation pch_gbe_mac_load_mac_addr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364)), $mul.ref(232, 1));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} iowrite32(1, $p4);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_sw_init: ref;

axiom pch_gbe_sw_init == $sub.ref(0, 623334);

procedure pch_gbe_sw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_sw_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i24;
  var $i48: i24;
  var $i49: i24;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $i65: i32;
  var $i19: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: ref;
  var vslice_dummy_var_318: ref;
  var vslice_dummy_var_319: ref;
  var vslice_dummy_var_320: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 2048);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 18);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(12, 1));
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(16, 1));
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 64);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $i16 := pch_gbe_hal_setup_init_funcs($p5);
    call {:si_unique_call 2111} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $i20 := pch_gbe_alloc_queues($p0);
    call {:si_unique_call 2114} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} vslice_dummy_var_317 := spinlock_check($p24);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} __raw_spin_lock_init($p29, .str.194, $p1);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} vslice_dummy_var_318 := spinlock_check($p30);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} __raw_spin_lock_init($p34, .str.195, $p2);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(72, 1));
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} vslice_dummy_var_319 := spinlock_check($p35);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} __raw_spin_lock_init($p39, .str.196, $p3);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(144, 1));
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} atomic_set($p40, 0);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} pch_gbe_irq_disable($p0);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} pch_gbe_init_stats($p0);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, .str);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, .str.197);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.21);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.198);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i47 := $load.i24($M.5, $p46);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i48 := $and.i24($i47, $sub.i24(0, 262144));
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i49 := $or.i24($i48, 2148);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p46, $i49);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p50, 0);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.6, $p51);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 1);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 2126} {:cexpr "tmp___1"} boogie_si_record_i64($i55);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb8:
    assume $i56 == 1;
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(912, 1));
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(16, 1));
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(12, 1));
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} vslice_dummy_var_320 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p4, $p7, .str.198, $i59, $i62, $i65);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} vslice_dummy_var_316 := netdev_err.ref.ref($p7, .str.193);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} vslice_dummy_var_315 := netdev_err.ref.ref($p7, .str.192);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb3;
}



const pch_gbe_init_phy: ref;

axiom pch_gbe_init_phy == $sub.ref(0, 624366);

procedure pch_gbe_init_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_init_phy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i25: i32;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i55: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i8;
  var $p81: ref;
  var $i82: i8;
  var $i83: i8;
  var $i84: i8;
  var $i85: i8;
  var $i86: i8;
  var $i56: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i16;
  var $i117: i32;
  var $i118: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i16;
  var $i133: i32;
  var $i134: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i16;
  var $i149: i32;
  var $i150: i32;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i16;
  var $i157: i32;
  var $i158: i32;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i16;
  var $i165: i32;
  var $i166: i32;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i16;
  var $i173: i32;
  var $i174: i32;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i16;
  var $i181: i32;
  var $i182: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i16;
  var $i189: i32;
  var $i190: i32;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i16;
  var $i197: i32;
  var $i198: i32;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i16;
  var $i205: i32;
  var $i206: i32;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i16;
  var $i213: i32;
  var $i214: i32;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i16;
  var $i221: i32;
  var $i222: i32;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i16;
  var $i229: i32;
  var $i230: i32;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i16;
  var $i237: i32;
  var $i238: i32;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i16;
  var $i245: i32;
  var $i246: i32;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i16;
  var $i253: i32;
  var $i254: i32;
  var $p256: ref;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i16;
  var $i261: i32;
  var $i262: i32;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i16;
  var $i269: i32;
  var $i270: i32;
  var $p272: ref;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i16;
  var $i277: i32;
  var $i278: i32;
  var $p280: ref;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i284: i16;
  var $i285: i32;
  var $i286: i32;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i16;
  var $i293: i32;
  var $i294: i32;
  var $p296: ref;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i16;
  var $i301: i32;
  var $i302: i32;
  var $p304: ref;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i16;
  var $i309: i32;
  var $i310: i32;
  var $p312: ref;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i16;
  var $i317: i32;
  var $i318: i32;
  var $p320: ref;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i16;
  var $i325: i32;
  var $i326: i32;
  var $p328: ref;
  var $i329: i32;
  var $i330: i1;
  var $i331: i32;
  var $i332: i16;
  var $i333: i32;
  var $i334: i32;
  var $i336: i32;
  var $i335: i32;
  var $p338: ref;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i16;
  var $p345: ref;
  var $i346: i32;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $i352: i16;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $i360: i32;
  var $i359: i32;
  var $p362: ref;
  var $p364: ref;
  var $i365: i32;
  var $i366: i32;
  var $i367: i16;
  var $p369: ref;
  var $i370: i32;
  var $p373: ref;
  var $i374: i32;
  var $i375: i32;
  var $i376: i16;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $i384: i32;
  var $i383: i32;
  var $p386: ref;
  var $p388: ref;
  var $i389: i32;
  var $i390: i32;
  var $i391: i16;
  var $p393: ref;
  var $i394: i32;
  var $p397: ref;
  var $i398: i32;
  var $i399: i32;
  var $i400: i16;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i408: i32;
  var $i407: i32;
  var $p410: ref;
  var $p412: ref;
  var $i413: i32;
  var $i414: i32;
  var $i415: i16;
  var $p417: ref;
  var $i418: i32;
  var $p421: ref;
  var $i422: i32;
  var $i423: i32;
  var $i424: i16;
  var $i425: i32;
  var $i426: i1;
  var $i427: i32;
  var $i428: i1;
  var $i429: i32;
  var $i430: i1;
  var $i432: i32;
  var $i431: i32;
  var $p434: ref;
  var $p436: ref;
  var $i437: i32;
  var $i438: i32;
  var $i439: i16;
  var $p441: ref;
  var $i442: i32;
  var $p445: ref;
  var $i446: i32;
  var $i447: i32;
  var $i448: i16;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i456: i32;
  var $i455: i32;
  var $p458: ref;
  var $p460: ref;
  var $i461: i32;
  var $i462: i32;
  var $i463: i16;
  var $p465: ref;
  var $i466: i32;
  var $p469: ref;
  var $i470: i32;
  var $i471: i32;
  var $i472: i16;
  var $i473: i32;
  var $i474: i1;
  var $i475: i32;
  var $i476: i1;
  var $i477: i32;
  var $i478: i1;
  var $i480: i32;
  var $i479: i32;
  var $p482: ref;
  var $p484: ref;
  var $i485: i32;
  var $i486: i32;
  var $i487: i16;
  var $p489: ref;
  var $i490: i32;
  var $p493: ref;
  var $i494: i32;
  var $i495: i32;
  var $i496: i16;
  var $i497: i32;
  var $i498: i1;
  var $i499: i32;
  var $i500: i1;
  var $i501: i32;
  var $i502: i1;
  var $i504: i32;
  var $i503: i32;
  var $p506: ref;
  var $p508: ref;
  var $i509: i32;
  var $i510: i32;
  var $i511: i16;
  var $p513: ref;
  var $i514: i32;
  var $p517: ref;
  var $i518: i32;
  var $i519: i32;
  var $i520: i16;
  var $i521: i32;
  var $i522: i1;
  var $i523: i32;
  var $i524: i1;
  var $i525: i32;
  var $i526: i1;
  var $i528: i32;
  var $i527: i32;
  var $p530: ref;
  var $p532: ref;
  var $i533: i32;
  var $i534: i32;
  var $i535: i16;
  var $p537: ref;
  var $i538: i32;
  var $p541: ref;
  var $i542: i32;
  var $i543: i32;
  var $i544: i16;
  var $i545: i32;
  var $i546: i1;
  var $i547: i32;
  var $i548: i1;
  var $i549: i32;
  var $i550: i1;
  var $i552: i32;
  var $i551: i32;
  var $p554: ref;
  var $p556: ref;
  var $i557: i32;
  var $i558: i32;
  var $i559: i16;
  var $p561: ref;
  var $i562: i32;
  var $p565: ref;
  var $i566: i32;
  var $i567: i32;
  var $i568: i16;
  var $i569: i32;
  var $i570: i1;
  var $i571: i32;
  var $i572: i1;
  var $i573: i32;
  var $i574: i1;
  var $i576: i32;
  var $i575: i32;
  var $p578: ref;
  var $p580: ref;
  var $i581: i32;
  var $i582: i32;
  var $i583: i16;
  var $p585: ref;
  var $i586: i32;
  var $p589: ref;
  var $i590: i32;
  var $i591: i32;
  var $i592: i16;
  var $i593: i32;
  var $i594: i1;
  var $i595: i32;
  var $i596: i1;
  var $i597: i32;
  var $i598: i1;
  var $i600: i32;
  var $i599: i32;
  var $p602: ref;
  var $p604: ref;
  var $i605: i32;
  var $i606: i32;
  var $i607: i16;
  var $p609: ref;
  var $i610: i32;
  var $p613: ref;
  var $i614: i32;
  var $i615: i32;
  var $i616: i16;
  var $i617: i32;
  var $i618: i1;
  var $i619: i32;
  var $i620: i1;
  var $i621: i32;
  var $i622: i1;
  var $i624: i32;
  var $i623: i32;
  var $p626: ref;
  var $p628: ref;
  var $i629: i32;
  var $i630: i32;
  var $i631: i16;
  var $p633: ref;
  var $i634: i32;
  var $p637: ref;
  var $i638: i32;
  var $i639: i32;
  var $i640: i16;
  var $i641: i32;
  var $i642: i1;
  var $i643: i32;
  var $i644: i1;
  var $i645: i32;
  var $i646: i1;
  var $i648: i32;
  var $i647: i32;
  var $p650: ref;
  var $p652: ref;
  var $i653: i32;
  var $i654: i32;
  var $i655: i16;
  var $p657: ref;
  var $i658: i32;
  var $p661: ref;
  var $i662: i32;
  var $i663: i32;
  var $i664: i16;
  var $i665: i32;
  var $i666: i1;
  var $i667: i32;
  var $i668: i1;
  var $i669: i32;
  var $i670: i1;
  var $i672: i32;
  var $i671: i32;
  var $p674: ref;
  var $p676: ref;
  var $i677: i32;
  var $i678: i32;
  var $i679: i16;
  var $p681: ref;
  var $i682: i32;
  var $p685: ref;
  var $i686: i32;
  var $i687: i32;
  var $i688: i16;
  var $i689: i32;
  var $i690: i1;
  var $i691: i32;
  var $i692: i1;
  var $i693: i32;
  var $i694: i1;
  var $i696: i32;
  var $i695: i32;
  var $p698: ref;
  var $p700: ref;
  var $i701: i32;
  var $i702: i32;
  var $i703: i16;
  var $p705: ref;
  var $i706: i32;
  var $p709: ref;
  var $i710: i32;
  var $i711: i32;
  var $i712: i16;
  var $i713: i32;
  var $i714: i1;
  var $i715: i32;
  var $i716: i1;
  var $i717: i32;
  var $i718: i1;
  var $i720: i32;
  var $i719: i32;
  var $p722: ref;
  var $p724: ref;
  var $i725: i32;
  var $i726: i32;
  var $i727: i16;
  var $p729: ref;
  var $i730: i32;
  var $p733: ref;
  var $i734: i32;
  var $i735: i32;
  var $i736: i16;
  var $i737: i32;
  var $i738: i1;
  var $i739: i32;
  var $i740: i1;
  var $i741: i32;
  var $i742: i1;
  var $i744: i32;
  var $i743: i32;
  var $p746: ref;
  var $p748: ref;
  var $i749: i32;
  var $i750: i32;
  var $i751: i16;
  var $p753: ref;
  var $i754: i32;
  var $p757: ref;
  var $i758: i32;
  var $i759: i32;
  var $i760: i16;
  var $i761: i32;
  var $i762: i1;
  var $i763: i32;
  var $i764: i1;
  var $i765: i32;
  var $i766: i1;
  var $i768: i32;
  var $i767: i32;
  var $p770: ref;
  var $p772: ref;
  var $i773: i32;
  var $i774: i32;
  var $i775: i16;
  var $p777: ref;
  var $i778: i32;
  var $p781: ref;
  var $i782: i32;
  var $i783: i32;
  var $i784: i16;
  var $i785: i32;
  var $i786: i1;
  var $i787: i32;
  var $i788: i1;
  var $i789: i32;
  var $i790: i1;
  var $i792: i32;
  var $i791: i32;
  var $p794: ref;
  var $p796: ref;
  var $i797: i32;
  var $i798: i32;
  var $i799: i16;
  var $p801: ref;
  var $i802: i32;
  var $p805: ref;
  var $i806: i32;
  var $i807: i32;
  var $i808: i16;
  var $i809: i32;
  var $i810: i1;
  var $i811: i32;
  var $i812: i1;
  var $i813: i32;
  var $i814: i1;
  var $i816: i32;
  var $i815: i32;
  var $p818: ref;
  var $p820: ref;
  var $i821: i32;
  var $i822: i32;
  var $i823: i16;
  var $p825: ref;
  var $i826: i32;
  var $p829: ref;
  var $i830: i32;
  var $i831: i32;
  var $i832: i16;
  var $i833: i32;
  var $i834: i1;
  var $i835: i32;
  var $i836: i1;
  var $i837: i32;
  var $i838: i1;
  var $i840: i32;
  var $i839: i32;
  var $p842: ref;
  var $p844: ref;
  var $i845: i32;
  var $i846: i32;
  var $i847: i16;
  var $p849: ref;
  var $i850: i32;
  var $p853: ref;
  var $i854: i32;
  var $i855: i32;
  var $i856: i16;
  var $i857: i32;
  var $i858: i1;
  var $i859: i32;
  var $i860: i1;
  var $i861: i32;
  var $i862: i1;
  var $i864: i32;
  var $i863: i32;
  var $p866: ref;
  var $p868: ref;
  var $i869: i32;
  var $i870: i32;
  var $i871: i16;
  var $p873: ref;
  var $i874: i32;
  var $p877: ref;
  var $i878: i32;
  var $i879: i32;
  var $i880: i16;
  var $i881: i32;
  var $i882: i1;
  var $i883: i32;
  var $i884: i1;
  var $i885: i32;
  var $i886: i1;
  var $i888: i32;
  var $i887: i32;
  var $p890: ref;
  var $p892: ref;
  var $i893: i32;
  var $i894: i32;
  var $i895: i16;
  var $p897: ref;
  var $i898: i32;
  var $p901: ref;
  var $i902: i32;
  var $i903: i32;
  var $i904: i16;
  var $i905: i32;
  var $i906: i1;
  var $i907: i32;
  var $i908: i1;
  var $i909: i32;
  var $i910: i1;
  var $i912: i32;
  var $i911: i32;
  var $p914: ref;
  var $p916: ref;
  var $i917: i32;
  var $i918: i32;
  var $i919: i16;
  var $p921: ref;
  var $i922: i32;
  var $p925: ref;
  var $i926: i32;
  var $i927: i32;
  var $i928: i16;
  var $i929: i32;
  var $i930: i1;
  var $i931: i32;
  var $i932: i1;
  var $i933: i32;
  var $i934: i1;
  var $i936: i32;
  var $i935: i32;
  var $p938: ref;
  var $p940: ref;
  var $i941: i32;
  var $i942: i32;
  var $i943: i16;
  var $p945: ref;
  var $i946: i32;
  var $p949: ref;
  var $i950: i32;
  var $i951: i32;
  var $i952: i16;
  var $i953: i32;
  var $i954: i1;
  var $i955: i32;
  var $i956: i1;
  var $i957: i32;
  var $i958: i1;
  var $i960: i32;
  var $i959: i32;
  var $p962: ref;
  var $p964: ref;
  var $i965: i32;
  var $i966: i32;
  var $i967: i16;
  var $p969: ref;
  var $i970: i32;
  var $p973: ref;
  var $i974: i32;
  var $i975: i32;
  var $i976: i16;
  var $i977: i32;
  var $i978: i1;
  var $i979: i32;
  var $i980: i1;
  var $i981: i32;
  var $i982: i1;
  var $i984: i32;
  var $i983: i32;
  var $p986: ref;
  var $p988: ref;
  var $i989: i32;
  var $i990: i32;
  var $i991: i16;
  var $p993: ref;
  var $i994: i32;
  var $p997: ref;
  var $i998: i32;
  var $i999: i32;
  var $i1000: i16;
  var $i1001: i32;
  var $i1002: i1;
  var $i1003: i32;
  var $i1004: i1;
  var $i1005: i32;
  var $i1006: i1;
  var $i1008: i32;
  var $i1007: i32;
  var $p1010: ref;
  var $p1012: ref;
  var $i1013: i32;
  var $i1014: i32;
  var $i1015: i16;
  var $p1017: ref;
  var $i1018: i32;
  var $p1021: ref;
  var $i1022: i32;
  var $i1023: i32;
  var $i1024: i16;
  var $i1025: i32;
  var $i1026: i1;
  var $i1027: i32;
  var $i1028: i1;
  var $i1029: i32;
  var $i1030: i1;
  var $i1032: i32;
  var $i1031: i32;
  var $p1034: ref;
  var $p1036: ref;
  var $i1037: i32;
  var $i1038: i32;
  var $i1039: i16;
  var $p1041: ref;
  var $i1042: i32;
  var $p1045: ref;
  var $i1046: i32;
  var $i1047: i32;
  var $i1048: i16;
  var $i1049: i32;
  var $i1050: i1;
  var $i1051: i32;
  var $i1052: i1;
  var $i1053: i32;
  var $i1054: i1;
  var $i1056: i32;
  var $i1055: i32;
  var $p1058: ref;
  var $p1060: ref;
  var $i1061: i32;
  var $i1062: i32;
  var $i1063: i16;
  var $p1065: ref;
  var $i1066: i32;
  var $p1069: ref;
  var $i1070: i32;
  var $i1071: i32;
  var $i1072: i16;
  var $i1073: i32;
  var $i1074: i1;
  var $i1075: i32;
  var $i1076: i1;
  var $i1077: i32;
  var $i1078: i1;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;
  var vslice_dummy_var_351: i32;
  var vslice_dummy_var_352: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $i10 := pch_gbe_mdio_read($p3, $i9, 0);
    call {:si_unique_call 2130} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    call {:si_unique_call 2131} {:cexpr "bmcr"} boogie_si_record_i16($i11);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $i15 := pch_gbe_mdio_read($p3, $i14, 1);
    call {:si_unique_call 2133} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $i19 := pch_gbe_mdio_read($p3, $i18, 1);
    call {:si_unique_call 2135} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    call {:si_unique_call 2136} {:cexpr "stat"} boogie_si_record_i16($i20);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i11);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 65535);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb158, $bb159;

  $bb159:
    assume !(1 == 1);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i335 := 1;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p338, $i335);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.0, $p340);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} $i342 := pch_gbe_mdio_read($p3, $i341, 0);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i16($i342);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.0, $p345);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} vslice_dummy_var_322 := pch_gbe_mdio_read($p3, $i346, 1);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} $i351 := pch_gbe_mdio_read($p3, $i350, 1);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i32.i16($i351);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i353 := $zext.i16.i32($i343);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 65535);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb173, $bb174;

  $bb174:
    assume !(1 == 1);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i359 := 1;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p362, $i359);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.0, $p364);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $i366 := pch_gbe_mdio_read($p3, $i365, 0);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i16($i366);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} vslice_dummy_var_323 := pch_gbe_mdio_read($p3, $i370, 1);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p373);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $i375 := pch_gbe_mdio_read($p3, $i374, 1);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i16($i375);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i367);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i378 := $ne.i32($i377, 65535);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i378 == 1);
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb188, $bb189;

  $bb189:
    assume !(1 == 1);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i383 := 1;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p386, $i383);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.0, $p388);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $i390 := pch_gbe_mdio_read($p3, $i389, 0);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i32.i16($i390);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.0, $p393);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} vslice_dummy_var_324 := pch_gbe_mdio_read($p3, $i394, 1);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i399 := pch_gbe_mdio_read($p3, $i398, 1);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i32.i16($i399);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $i401 := $zext.i16.i32($i391);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i402 := $ne.i32($i401, 65535);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb203, $bb204;

  $bb204:
    assume !(1 == 1);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i407 := 1;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p410, $i407);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.0, $p412);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $i414 := pch_gbe_mdio_read($p3, $i413, 0);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i32.i16($i414);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i418 := $load.i32($M.0, $p417);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} vslice_dummy_var_325 := pch_gbe_mdio_read($p3, $i418, 1);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.0, $p421);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $i423 := pch_gbe_mdio_read($p3, $i422, 1);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i424 := $trunc.i32.i16($i423);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i425 := $zext.i16.i32($i415);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i426 := $ne.i32($i425, 65535);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb218, $bb219;

  $bb219:
    assume !(1 == 1);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i431 := 1;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p434, $i431);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i437 := $load.i32($M.0, $p436);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} $i438 := pch_gbe_mdio_read($p3, $i437, 0);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i439 := $trunc.i32.i16($i438);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i442 := $load.i32($M.0, $p441);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} vslice_dummy_var_326 := pch_gbe_mdio_read($p3, $i442, 1);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i446 := $load.i32($M.0, $p445);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $i447 := pch_gbe_mdio_read($p3, $i446, 1);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i32.i16($i447);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i449 := $zext.i16.i32($i439);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i449, 65535);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i450 == 1);
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb233, $bb234;

  $bb234:
    assume !(1 == 1);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i455 := 1;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p458, $i455);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.0, $p460);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $i462 := pch_gbe_mdio_read($p3, $i461, 0);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i463 := $trunc.i32.i16($i462);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i466 := $load.i32($M.0, $p465);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} vslice_dummy_var_327 := pch_gbe_mdio_read($p3, $i466, 1);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i470 := $load.i32($M.0, $p469);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $i471 := pch_gbe_mdio_read($p3, $i470, 1);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i472 := $trunc.i32.i16($i471);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i473 := $zext.i16.i32($i463);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i474 := $ne.i32($i473, 65535);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i474 == 1);
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb248, $bb249;

  $bb249:
    assume !(1 == 1);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i479 := 1;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p482, $i479);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.0, $p484);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} $i486 := pch_gbe_mdio_read($p3, $i485, 0);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $i487 := $trunc.i32.i16($i486);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i490 := $load.i32($M.0, $p489);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} vslice_dummy_var_328 := pch_gbe_mdio_read($p3, $i490, 1);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i494 := $load.i32($M.0, $p493);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $i495 := pch_gbe_mdio_read($p3, $i494, 1);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $i496 := $trunc.i32.i16($i495);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i497 := $zext.i16.i32($i487);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 65535);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i498} true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i498 == 1);
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb263, $bb264;

  $bb264:
    assume !(1 == 1);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i503 := 1;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p506, $i503);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i509 := $load.i32($M.0, $p508);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $i510 := pch_gbe_mdio_read($p3, $i509, 0);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i16($i510);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.0, $p513);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} vslice_dummy_var_329 := pch_gbe_mdio_read($p3, $i514, 1);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $i518 := $load.i32($M.0, $p517);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} $i519 := pch_gbe_mdio_read($p3, $i518, 1);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i520 := $trunc.i32.i16($i519);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i521 := $zext.i16.i32($i511);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i522 := $ne.i32($i521, 65535);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i522 == 1);
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb278, $bb279;

  $bb279:
    assume !(1 == 1);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i527 := 1;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p530, $i527);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $i533 := $load.i32($M.0, $p532);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i534 := pch_gbe_mdio_read($p3, $i533, 0);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $i535 := $trunc.i32.i16($i534);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.0, $p537);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} vslice_dummy_var_330 := pch_gbe_mdio_read($p3, $i538, 1);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i542 := $load.i32($M.0, $p541);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $i543 := pch_gbe_mdio_read($p3, $i542, 1);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i544 := $trunc.i32.i16($i543);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i545 := $zext.i16.i32($i535);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i546 := $ne.i32($i545, 65535);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb284, $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    assume !($i546 == 1);
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb293, $bb294;

  $bb294:
    assume !(1 == 1);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i551 := 1;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p554, $i551);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.0, $p556);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $i558 := pch_gbe_mdio_read($p3, $i557, 0);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i559 := $trunc.i32.i16($i558);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i562 := $load.i32($M.0, $p561);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} vslice_dummy_var_331 := pch_gbe_mdio_read($p3, $i562, 1);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i566 := $load.i32($M.0, $p565);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $i567 := pch_gbe_mdio_read($p3, $i566, 1);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i568 := $trunc.i32.i16($i567);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i569 := $zext.i16.i32($i559);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i570 := $ne.i32($i569, 65535);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i570 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb308, $bb309;

  $bb309:
    assume !(1 == 1);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $i575 := 1;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p578, $i575);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i581 := $load.i32($M.0, $p580);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $i582 := pch_gbe_mdio_read($p3, $i581, 0);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $i583 := $trunc.i32.i16($i582);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i586 := $load.i32($M.0, $p585);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} vslice_dummy_var_332 := pch_gbe_mdio_read($p3, $i586, 1);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i590 := $load.i32($M.0, $p589);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $i591 := pch_gbe_mdio_read($p3, $i590, 1);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i592 := $trunc.i32.i16($i591);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $i593 := $zext.i16.i32($i583);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i594 := $ne.i32($i593, 65535);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i594} true;
    goto $bb314, $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    assume !($i594 == 1);
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb323, $bb324;

  $bb324:
    assume !(1 == 1);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i599 := 1;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p602, $i599);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.0, $p604);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} $i606 := pch_gbe_mdio_read($p3, $i605, 0);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i607 := $trunc.i32.i16($i606);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i610 := $load.i32($M.0, $p609);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} vslice_dummy_var_333 := pch_gbe_mdio_read($p3, $i610, 1);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.0, $p613);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} $i615 := pch_gbe_mdio_read($p3, $i614, 1);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i616 := $trunc.i32.i16($i615);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i617 := $zext.i16.i32($i607);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i618 := $ne.i32($i617, 65535);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i618} true;
    goto $bb329, $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    assume !($i618 == 1);
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb338, $bb339;

  $bb339:
    assume !(1 == 1);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $i623 := 1;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p626, $i623);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i629 := $load.i32($M.0, $p628);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} $i630 := pch_gbe_mdio_read($p3, $i629, 0);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $i631 := $trunc.i32.i16($i630);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $i634 := $load.i32($M.0, $p633);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} vslice_dummy_var_334 := pch_gbe_mdio_read($p3, $i634, 1);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i638 := $load.i32($M.0, $p637);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} $i639 := pch_gbe_mdio_read($p3, $i638, 1);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $i640 := $trunc.i32.i16($i639);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i641 := $zext.i16.i32($i631);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i642 := $ne.i32($i641, 65535);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i642} true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i642 == 1);
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb353, $bb354;

  $bb354:
    assume !(1 == 1);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i647 := 1;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p650, $i647);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i653 := $load.i32($M.0, $p652);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} $i654 := pch_gbe_mdio_read($p3, $i653, 0);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i655 := $trunc.i32.i16($i654);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i658 := $load.i32($M.0, $p657);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} vslice_dummy_var_335 := pch_gbe_mdio_read($p3, $i658, 1);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i662 := $load.i32($M.0, $p661);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i663 := pch_gbe_mdio_read($p3, $i662, 1);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i664 := $trunc.i32.i16($i663);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i665 := $zext.i16.i32($i655);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i666 := $ne.i32($i665, 65535);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i666} true;
    goto $bb359, $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume !($i666 == 1);
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb368, $bb369;

  $bb369:
    assume !(1 == 1);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $i671 := 1;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p674, $i671);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $i677 := $load.i32($M.0, $p676);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} $i678 := pch_gbe_mdio_read($p3, $i677, 0);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $i679 := $trunc.i32.i16($i678);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i682 := $load.i32($M.0, $p681);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} vslice_dummy_var_336 := pch_gbe_mdio_read($p3, $i682, 1);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i686 := $load.i32($M.0, $p685);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} $i687 := pch_gbe_mdio_read($p3, $i686, 1);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $i688 := $trunc.i32.i16($i687);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $i689 := $zext.i16.i32($i679);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i690 := $ne.i32($i689, 65535);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i690} true;
    goto $bb374, $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    assume !($i690 == 1);
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb383, $bb384;

  $bb384:
    assume !(1 == 1);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i695 := 1;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p698, $i695);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $i701 := $load.i32($M.0, $p700);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} $i702 := pch_gbe_mdio_read($p3, $i701, 0);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $i703 := $trunc.i32.i16($i702);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $i706 := $load.i32($M.0, $p705);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} vslice_dummy_var_337 := pch_gbe_mdio_read($p3, $i706, 1);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i710 := $load.i32($M.0, $p709);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} $i711 := pch_gbe_mdio_read($p3, $i710, 1);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i712 := $trunc.i32.i16($i711);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i713 := $zext.i16.i32($i703);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $i714 := $ne.i32($i713, 65535);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb389, $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    assume !($i714 == 1);
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb398, $bb399;

  $bb399:
    assume !(1 == 1);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $i719 := 1;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p722, $i719);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $i725 := $load.i32($M.0, $p724);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} $i726 := pch_gbe_mdio_read($p3, $i725, 0);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i727 := $trunc.i32.i16($i726);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i730 := $load.i32($M.0, $p729);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} vslice_dummy_var_338 := pch_gbe_mdio_read($p3, $i730, 1);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $i734 := $load.i32($M.0, $p733);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} $i735 := pch_gbe_mdio_read($p3, $i734, 1);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i736 := $trunc.i32.i16($i735);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i737 := $zext.i16.i32($i727);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i738 := $ne.i32($i737, 65535);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i738} true;
    goto $bb404, $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    assume !($i738 == 1);
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb413, $bb414;

  $bb414:
    assume !(1 == 1);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i743 := 1;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p746, $i743);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i749 := $load.i32($M.0, $p748);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} $i750 := pch_gbe_mdio_read($p3, $i749, 0);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i751 := $trunc.i32.i16($i750);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i754 := $load.i32($M.0, $p753);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} vslice_dummy_var_339 := pch_gbe_mdio_read($p3, $i754, 1);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $i758 := $load.i32($M.0, $p757);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} $i759 := pch_gbe_mdio_read($p3, $i758, 1);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i760 := $trunc.i32.i16($i759);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i761 := $zext.i16.i32($i751);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i762 := $ne.i32($i761, 65535);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i762} true;
    goto $bb419, $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb428, $bb429;

  $bb429:
    assume !(1 == 1);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i767 := 1;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p770, $i767);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i773 := $load.i32($M.0, $p772);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $i774 := pch_gbe_mdio_read($p3, $i773, 0);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i775 := $trunc.i32.i16($i774);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i778 := $load.i32($M.0, $p777);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} vslice_dummy_var_340 := pch_gbe_mdio_read($p3, $i778, 1);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i782 := $load.i32($M.0, $p781);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $i783 := pch_gbe_mdio_read($p3, $i782, 1);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i784 := $trunc.i32.i16($i783);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i785 := $zext.i16.i32($i775);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i786 := $ne.i32($i785, 65535);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i786} true;
    goto $bb434, $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    assume !($i786 == 1);
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb443, $bb444;

  $bb444:
    assume !(1 == 1);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $i791 := 1;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p794, $i791);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i797 := $load.i32($M.0, $p796);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $i798 := pch_gbe_mdio_read($p3, $i797, 0);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $i799 := $trunc.i32.i16($i798);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p801);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} vslice_dummy_var_341 := pch_gbe_mdio_read($p3, $i802, 1);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $i806 := $load.i32($M.0, $p805);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} $i807 := pch_gbe_mdio_read($p3, $i806, 1);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i808 := $trunc.i32.i16($i807);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $i809 := $zext.i16.i32($i799);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i810 := $ne.i32($i809, 65535);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i810} true;
    goto $bb449, $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    assume !($i810 == 1);
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb458, $bb459;

  $bb459:
    assume !(1 == 1);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i815 := 1;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p818, $i815);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i821 := $load.i32($M.0, $p820);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} $i822 := pch_gbe_mdio_read($p3, $i821, 0);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i823 := $trunc.i32.i16($i822);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $i826 := $load.i32($M.0, $p825);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} vslice_dummy_var_342 := pch_gbe_mdio_read($p3, $i826, 1);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $i830 := $load.i32($M.0, $p829);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $i831 := pch_gbe_mdio_read($p3, $i830, 1);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i832 := $trunc.i32.i16($i831);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i833 := $zext.i16.i32($i823);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i834 := $ne.i32($i833, 65535);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i834} true;
    goto $bb464, $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    assume !($i834 == 1);
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb473, $bb474;

  $bb474:
    assume !(1 == 1);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $i839 := 1;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p842, $i839);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i845 := $load.i32($M.0, $p844);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i846 := pch_gbe_mdio_read($p3, $i845, 0);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $i847 := $trunc.i32.i16($i846);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $i850 := $load.i32($M.0, $p849);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} vslice_dummy_var_343 := pch_gbe_mdio_read($p3, $i850, 1);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i854 := $load.i32($M.0, $p853);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} $i855 := pch_gbe_mdio_read($p3, $i854, 1);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i856 := $trunc.i32.i16($i855);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i857 := $zext.i16.i32($i847);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i858 := $ne.i32($i857, 65535);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i858} true;
    goto $bb479, $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    assume !($i858 == 1);
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb488, $bb489;

  $bb489:
    assume !(1 == 1);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i863 := 1;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p866, $i863);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i869 := $load.i32($M.0, $p868);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i870 := pch_gbe_mdio_read($p3, $i869, 0);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $i871 := $trunc.i32.i16($i870);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i874 := $load.i32($M.0, $p873);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} vslice_dummy_var_344 := pch_gbe_mdio_read($p3, $i874, 1);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i878 := $load.i32($M.0, $p877);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $i879 := pch_gbe_mdio_read($p3, $i878, 1);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $i880 := $trunc.i32.i16($i879);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $i881 := $zext.i16.i32($i871);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $i882 := $ne.i32($i881, 65535);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i882} true;
    goto $bb494, $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    assume !($i882 == 1);
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb503, $bb504;

  $bb504:
    assume !(1 == 1);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $i887 := 1;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p890, $i887);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $i893 := $load.i32($M.0, $p892);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} $i894 := pch_gbe_mdio_read($p3, $i893, 0);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i895 := $trunc.i32.i16($i894);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $i898 := $load.i32($M.0, $p897);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} vslice_dummy_var_345 := pch_gbe_mdio_read($p3, $i898, 1);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i902 := $load.i32($M.0, $p901);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} $i903 := pch_gbe_mdio_read($p3, $i902, 1);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i904 := $trunc.i32.i16($i903);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $i905 := $zext.i16.i32($i895);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $i906 := $ne.i32($i905, 65535);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i906} true;
    goto $bb509, $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    assume !($i906 == 1);
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb518, $bb519;

  $bb519:
    assume !(1 == 1);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $i911 := 1;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p914, $i911);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $i917 := $load.i32($M.0, $p916);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i918 := pch_gbe_mdio_read($p3, $i917, 0);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i919 := $trunc.i32.i16($i918);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i922 := $load.i32($M.0, $p921);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} vslice_dummy_var_346 := pch_gbe_mdio_read($p3, $i922, 1);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $i926 := $load.i32($M.0, $p925);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i927 := pch_gbe_mdio_read($p3, $i926, 1);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i928 := $trunc.i32.i16($i927);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $i929 := $zext.i16.i32($i919);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $i930 := $ne.i32($i929, 65535);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i930} true;
    goto $bb524, $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    assume !($i930 == 1);
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb533, $bb534;

  $bb534:
    assume !(1 == 1);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $i935 := 1;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p938, $i935);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $i941 := $load.i32($M.0, $p940);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} $i942 := pch_gbe_mdio_read($p3, $i941, 0);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i943 := $trunc.i32.i16($i942);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i946 := $load.i32($M.0, $p945);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} vslice_dummy_var_347 := pch_gbe_mdio_read($p3, $i946, 1);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $i950 := $load.i32($M.0, $p949);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} $i951 := pch_gbe_mdio_read($p3, $i950, 1);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i952 := $trunc.i32.i16($i951);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $i953 := $zext.i16.i32($i943);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i954 := $ne.i32($i953, 65535);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i954} true;
    goto $bb539, $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    assume !($i954 == 1);
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb548, $bb549;

  $bb549:
    assume !(1 == 1);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $i959 := 1;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p962, $i959);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $p964 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i965 := $load.i32($M.0, $p964);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} $i966 := pch_gbe_mdio_read($p3, $i965, 0);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $i967 := $trunc.i32.i16($i966);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i970 := $load.i32($M.0, $p969);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} vslice_dummy_var_348 := pch_gbe_mdio_read($p3, $i970, 1);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i974 := $load.i32($M.0, $p973);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} $i975 := pch_gbe_mdio_read($p3, $i974, 1);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i976 := $trunc.i32.i16($i975);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $i977 := $zext.i16.i32($i967);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $i978 := $ne.i32($i977, 65535);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i978} true;
    goto $bb554, $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    assume !($i978 == 1);
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb563, $bb564;

  $bb564:
    assume !(1 == 1);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $i983 := 1;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p986, $i983);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i989 := $load.i32($M.0, $p988);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $i990 := pch_gbe_mdio_read($p3, $i989, 0);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $i991 := $trunc.i32.i16($i990);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i994 := $load.i32($M.0, $p993);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} vslice_dummy_var_349 := pch_gbe_mdio_read($p3, $i994, 1);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $i998 := $load.i32($M.0, $p997);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} $i999 := pch_gbe_mdio_read($p3, $i998, 1);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i1000 := $trunc.i32.i16($i999);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $i1001 := $zext.i16.i32($i991);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $i1002 := $ne.i32($i1001, 65535);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1002} true;
    goto $bb569, $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    assume !($i1002 == 1);
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb578, $bb579;

  $bb579:
    assume !(1 == 1);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i1007 := 1;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1010, $i1007);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i1013 := $load.i32($M.0, $p1012);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $i1014 := pch_gbe_mdio_read($p3, $i1013, 0);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i1015 := $trunc.i32.i16($i1014);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $i1018 := $load.i32($M.0, $p1017);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} vslice_dummy_var_350 := pch_gbe_mdio_read($p3, $i1018, 1);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i1022 := $load.i32($M.0, $p1021);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} $i1023 := pch_gbe_mdio_read($p3, $i1022, 1);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i1024 := $trunc.i32.i16($i1023);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i1025 := $zext.i16.i32($i1015);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $i1026 := $ne.i32($i1025, 65535);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1026} true;
    goto $bb584, $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    assume !($i1026 == 1);
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb593, $bb594;

  $bb594:
    assume !(1 == 1);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i1031 := 1;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p1034 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1034, $i1031);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i1037 := $load.i32($M.0, $p1036);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $i1038 := pch_gbe_mdio_read($p3, $i1037, 0);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i1039 := $trunc.i32.i16($i1038);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $i1042 := $load.i32($M.0, $p1041);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} vslice_dummy_var_351 := pch_gbe_mdio_read($p3, $i1042, 1);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $p1045 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i1046 := $load.i32($M.0, $p1045);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $i1047 := pch_gbe_mdio_read($p3, $i1046, 1);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $i1048 := $trunc.i32.i16($i1047);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i1049 := $zext.i16.i32($i1039);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i1050 := $ne.i32($i1049, 65535);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1050} true;
    goto $bb599, $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    assume !($i1050 == 1);
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb608, $bb609;

  $bb609:
    assume !(1 == 1);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i1055 := 1;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1058, $i1055);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i1061 := $load.i32($M.0, $p1060);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} $i1062 := pch_gbe_mdio_read($p3, $i1061, 0);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $i1063 := $trunc.i32.i16($i1062);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i1066 := $load.i32($M.0, $p1065);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} vslice_dummy_var_352 := pch_gbe_mdio_read($p3, $i1066, 1);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $p1069 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $i1070 := $load.i32($M.0, $p1069);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $i1071 := pch_gbe_mdio_read($p3, $i1070, 1);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $i1072 := $trunc.i32.i16($i1071);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i1073 := $zext.i16.i32($i1063);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $i1074 := $ne.i32($i1073, 65535);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1074} true;
    goto $bb614, $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    assume !($i1074 == 1);
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := 32;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(0, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, .str);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, .str.199);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p37, .str.21);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, .str.200);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.5, $p40);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 761);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p40, $i43);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p44, 0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.6, $p45);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 2138} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i28, 32);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i60 == 1);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i61 := pch_gbe_mdio_read($p3, 0, 0);
    call {:si_unique_call 2142} {:cexpr "tmp___3"} boogie_si_record_i32($i61);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    call {:si_unique_call 2143} {:cexpr "bmcr"} boogie_si_record_i16($i62);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, $sub.i32(0, 1025));
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} pch_gbe_mdio_write($p3, 0, 0, $i64);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 1);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i90 == 1);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} $i91 := pch_gbe_mdio_read($p3, 1, 0);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, $sub.i32(0, 1025));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} pch_gbe_mdio_write($p3, 1, 0, $i94);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 2);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i98 == 1);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $i99 := pch_gbe_mdio_read($p3, 2, 0);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, $sub.i32(0, 1025));
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} pch_gbe_mdio_write($p3, 2, 0, $i102);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 3);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i106 == 1);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} $i107 := pch_gbe_mdio_read($p3, 3, 0);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, $sub.i32(0, 1025));
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} pch_gbe_mdio_write($p3, 3, 0, $i110);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 4);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i114 == 1);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $i115 := pch_gbe_mdio_read($p3, 4, 0);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, $sub.i32(0, 1025));
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} pch_gbe_mdio_write($p3, 4, 0, $i118);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 5);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i122 == 1);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i123 := pch_gbe_mdio_read($p3, 5, 0);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, $sub.i32(0, 1025));
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} pch_gbe_mdio_write($p3, 5, 0, $i126);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 6);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i130 == 1);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $i131 := pch_gbe_mdio_read($p3, 6, 0);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i16($i131);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, $sub.i32(0, 1025));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} pch_gbe_mdio_write($p3, 6, 0, $i134);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 7);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i138 == 1);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} $i139 := pch_gbe_mdio_read($p3, 7, 0);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, $sub.i32(0, 1025));
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} pch_gbe_mdio_write($p3, 7, 0, $i142);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 8);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i146 == 1);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $i147 := pch_gbe_mdio_read($p3, 8, 0);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i148);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, $sub.i32(0, 1025));
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} pch_gbe_mdio_write($p3, 8, 0, $i150);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 9);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i154 == 1);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} $i155 := pch_gbe_mdio_read($p3, 9, 0);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i156);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, $sub.i32(0, 1025));
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} pch_gbe_mdio_write($p3, 9, 0, $i158);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 10);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i162 == 1);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $i163 := pch_gbe_mdio_read($p3, 10, 0);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i16($i163);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, $sub.i32(0, 1025));
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} pch_gbe_mdio_write($p3, 10, 0, $i166);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 11);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i170 == 1);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $i171 := pch_gbe_mdio_read($p3, 11, 0);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, $sub.i32(0, 1025));
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} pch_gbe_mdio_write($p3, 11, 0, $i174);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 12);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i178 == 1);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $i179 := pch_gbe_mdio_read($p3, 12, 0);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i16($i179);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i181 := $zext.i16.i32($i180);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, $sub.i32(0, 1025));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} pch_gbe_mdio_write($p3, 12, 0, $i182);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 13);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i186 == 1);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $i187 := pch_gbe_mdio_read($p3, 13, 0);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i16($i187);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i190 := $and.i32($i189, $sub.i32(0, 1025));
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} pch_gbe_mdio_write($p3, 13, 0, $i190);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 14);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i194 == 1);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $i195 := pch_gbe_mdio_read($p3, 14, 0);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i195);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i196);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, $sub.i32(0, 1025));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} pch_gbe_mdio_write($p3, 14, 0, $i198);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 15);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i202 == 1);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} $i203 := pch_gbe_mdio_read($p3, 15, 0);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i16($i203);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i204);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, $sub.i32(0, 1025));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} pch_gbe_mdio_write($p3, 15, 0, $i206);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 16);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i210 == 1);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i211 := pch_gbe_mdio_read($p3, 16, 0);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i16($i211);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i32($i212);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, $sub.i32(0, 1025));
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} pch_gbe_mdio_write($p3, 16, 0, $i214);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 17);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i218 == 1);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} $i219 := pch_gbe_mdio_read($p3, 17, 0);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i16($i219);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i221 := $zext.i16.i32($i220);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, $sub.i32(0, 1025));
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} pch_gbe_mdio_write($p3, 17, 0, $i222);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 18);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i226 == 1);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $i227 := pch_gbe_mdio_read($p3, 18, 0);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i16($i227);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i228);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i229, $sub.i32(0, 1025));
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} pch_gbe_mdio_write($p3, 18, 0, $i230);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 19);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i234 == 1);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $i235 := pch_gbe_mdio_read($p3, 19, 0);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i16($i235);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, $sub.i32(0, 1025));
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} pch_gbe_mdio_write($p3, 19, 0, $i238);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 20);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i242 == 1);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $i243 := pch_gbe_mdio_read($p3, 20, 0);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i32.i16($i243);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i245 := $zext.i16.i32($i244);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i246 := $and.i32($i245, $sub.i32(0, 1025));
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} pch_gbe_mdio_write($p3, 20, 0, $i246);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.0, $p248);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 21);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i250 == 1);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $i251 := pch_gbe_mdio_read($p3, 21, 0);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i16($i251);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32($i252);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i254 := $and.i32($i253, $sub.i32(0, 1025));
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} pch_gbe_mdio_write($p3, 21, 0, $i254);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.0, $p256);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 22);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i258 == 1);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $i259 := pch_gbe_mdio_read($p3, 22, 0);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i16($i259);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i261 := $zext.i16.i32($i260);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i262 := $and.i32($i261, $sub.i32(0, 1025));
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} pch_gbe_mdio_write($p3, 22, 0, $i262);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 23);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i266 == 1);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} $i267 := pch_gbe_mdio_read($p3, 23, 0);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i16($i267);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i269 := $zext.i16.i32($i268);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i269, $sub.i32(0, 1025));
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} pch_gbe_mdio_write($p3, 23, 0, $i270);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 24);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i274 == 1);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} $i275 := pch_gbe_mdio_read($p3, 24, 0);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i32.i16($i275);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i277 := $zext.i16.i32($i276);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i278 := $and.i32($i277, $sub.i32(0, 1025));
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} pch_gbe_mdio_write($p3, 24, 0, $i278);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p280);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i281, 25);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i282 == 1);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $i283 := pch_gbe_mdio_read($p3, 25, 0);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i32.i16($i283);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i285 := $zext.i16.i32($i284);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i286 := $and.i32($i285, $sub.i32(0, 1025));
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} pch_gbe_mdio_write($p3, 25, 0, $i286);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p288);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 26);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i290 == 1);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i291 := pch_gbe_mdio_read($p3, 26, 0);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i293 := $zext.i16.i32($i292);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i294 := $and.i32($i293, $sub.i32(0, 1025));
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} pch_gbe_mdio_write($p3, 26, 0, $i294);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 27);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i298 == 1);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $i299 := pch_gbe_mdio_read($p3, 27, 0);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i32.i16($i299);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i301 := $zext.i16.i32($i300);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $i302 := $and.i32($i301, $sub.i32(0, 1025));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} pch_gbe_mdio_write($p3, 27, 0, $i302);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p304);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i306 := $ne.i32($i305, 28);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i306 == 1);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} $i307 := pch_gbe_mdio_read($p3, 28, 0);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i307);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i309 := $zext.i16.i32($i308);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i310 := $and.i32($i309, $sub.i32(0, 1025));
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} pch_gbe_mdio_write($p3, 28, 0, $i310);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p312);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 29);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i314 == 1);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} $i315 := pch_gbe_mdio_read($p3, 29, 0);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i16($i315);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i317 := $zext.i16.i32($i316);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $i318 := $and.i32($i317, $sub.i32(0, 1025));
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} pch_gbe_mdio_write($p3, 29, 0, $i318);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.0, $p320);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 30);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i322 == 1);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $i323 := pch_gbe_mdio_read($p3, 30, 0);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i16($i323);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i325 := $zext.i16.i32($i324);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $i326 := $and.i32($i325, $sub.i32(0, 1025));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} pch_gbe_mdio_write($p3, 30, 0, $i326);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p328);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 31);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i330 == 1);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $i331 := pch_gbe_mdio_read($p3, 31, 0);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i16($i331);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i333 := $zext.i16.i32($i332);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i334 := $and.i32($i333, $sub.i32(0, 1025));
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} pch_gbe_mdio_write($p3, 31, 0, $i334);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(8, 1));
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 31);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(12, 1));
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 31);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(24, 1));
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p70);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(32, 1));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, pch_gbe_mdio_read);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(40, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, pch_gbe_mdio_write);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $i78 := mii_check_gmii_support($p77);
    call {:si_unique_call 2146} {:cexpr "tmp___4"} boogie_si_record_i32($i78);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(16, 1));
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i83 := $and.i8($i79, 1);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i84 := $shl.i8($i83, 2);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i85 := $and.i8($i82, $sub.i8(0, 5));
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i86 := $or.i8($i85, $i84);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i86);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb155:
    assume $i330 == 1;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} pch_gbe_mdio_write($p3, 31, 0, 1024);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb151:
    assume $i322 == 1;
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} pch_gbe_mdio_write($p3, 30, 0, 1024);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb147:
    assume $i314 == 1;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} pch_gbe_mdio_write($p3, 29, 0, 1024);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb143:
    assume $i306 == 1;
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} pch_gbe_mdio_write($p3, 28, 0, 1024);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb139:
    assume $i298 == 1;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} pch_gbe_mdio_write($p3, 27, 0, 1024);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb135:
    assume $i290 == 1;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} pch_gbe_mdio_write($p3, 26, 0, 1024);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb131:
    assume $i282 == 1;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} pch_gbe_mdio_write($p3, 25, 0, 1024);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb127:
    assume $i274 == 1;
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} pch_gbe_mdio_write($p3, 24, 0, 1024);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb123:
    assume $i266 == 1;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} pch_gbe_mdio_write($p3, 23, 0, 1024);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb119:
    assume $i258 == 1;
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} pch_gbe_mdio_write($p3, 22, 0, 1024);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb115:
    assume $i250 == 1;
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} pch_gbe_mdio_write($p3, 21, 0, 1024);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb111:
    assume $i242 == 1;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} pch_gbe_mdio_write($p3, 20, 0, 1024);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb107:
    assume $i234 == 1;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} pch_gbe_mdio_write($p3, 19, 0, 1024);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb103:
    assume $i226 == 1;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} pch_gbe_mdio_write($p3, 18, 0, 1024);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb99:
    assume $i218 == 1;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} pch_gbe_mdio_write($p3, 17, 0, 1024);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb95:
    assume $i210 == 1;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} pch_gbe_mdio_write($p3, 16, 0, 1024);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb91:
    assume $i202 == 1;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} pch_gbe_mdio_write($p3, 15, 0, 1024);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb87:
    assume $i194 == 1;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} pch_gbe_mdio_write($p3, 14, 0, 1024);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb83:
    assume $i186 == 1;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} pch_gbe_mdio_write($p3, 13, 0, 1024);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb79:
    assume $i178 == 1;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} pch_gbe_mdio_write($p3, 12, 0, 1024);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb75:
    assume $i170 == 1;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} pch_gbe_mdio_write($p3, 11, 0, 1024);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb71:
    assume $i162 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} pch_gbe_mdio_write($p3, 10, 0, 1024);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb67:
    assume $i154 == 1;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} pch_gbe_mdio_write($p3, 9, 0, 1024);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume $i146 == 1;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} pch_gbe_mdio_write($p3, 8, 0, 1024);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume $i138 == 1;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} pch_gbe_mdio_write($p3, 7, 0, 1024);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb55:
    assume $i130 == 1;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} pch_gbe_mdio_write($p3, 6, 0, 1024);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i122 == 1;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} pch_gbe_mdio_write($p3, 5, 0, 1024);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i114 == 1;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} pch_gbe_mdio_write($p3, 4, 0, 1024);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i106 == 1;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} pch_gbe_mdio_write($p3, 3, 0, 1024);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i98 == 1;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} pch_gbe_mdio_write($p3, 2, 0, 1024);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i90 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} pch_gbe_mdio_write($p3, 1, 0, 1024);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb30:
    assume $i60 == 1;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} pch_gbe_mdio_write($p3, 0, 0, 1024);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 11);
    goto $bb26;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} vslice_dummy_var_321 := __dynamic_netdev_dbg.ref.ref.ref.i32($p1, $p3, .str.200, $i53);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb614:
    assume $i1074 == 1;
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $i1075 := $zext.i16.i32($i1072);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $i1076 := $ne.i32($i1075, 0);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $i25 := 31;
    assume {:branchcond $i1076} true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i1076 == 1);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $i1077 := $zext.i16.i32($i1063);
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $i1078 := $ne.i32($i1077, 0);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i25 := 31;
    assume {:branchcond $i1078} true;
    goto $bb619, $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    assume !($i1078 == 1);
    goto $bb616;

  $bb619:
    assume {:verifier.code 0} true;
    assume $i1078 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i28 := $i25;
    goto $bb17;

  $bb617:
    assume {:verifier.code 0} true;
    assume $i1076 == 1;
    goto $bb13;

  $bb608:
    assume 1 == 1;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb611, $bb612;

  $bb612:
    assume !(1 == 1);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $i1056 := 0;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i1055 := $i1056;
    goto $bb610;

  $bb611:
    assume 1 == 1;
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i1056 := 31;
    goto $bb613;

  $bb599:
    assume $i1050 == 1;
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i1051 := $zext.i16.i32($i1048);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $i1052 := $ne.i32($i1051, 0);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i25 := 30;
    assume {:branchcond $i1052} true;
    goto $bb602, $bb603;

  $bb603:
    assume !($i1052 == 1);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i1053 := $zext.i16.i32($i1039);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $i1054 := $ne.i32($i1053, 0);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $i25 := 30;
    assume {:branchcond $i1054} true;
    goto $bb604, $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    assume !($i1054 == 1);
    goto $bb601;

  $bb604:
    assume {:verifier.code 0} true;
    assume $i1054 == 1;
    goto $bb13;

  $bb602:
    assume {:verifier.code 0} true;
    assume $i1052 == 1;
    goto $bb13;

  $bb593:
    assume 1 == 1;
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb596, $bb597;

  $bb597:
    assume !(1 == 1);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $i1032 := 0;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $i1031 := $i1032;
    goto $bb595;

  $bb596:
    assume 1 == 1;
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i1032 := 30;
    goto $bb598;

  $bb584:
    assume $i1026 == 1;
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $i1027 := $zext.i16.i32($i1024);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $i1028 := $ne.i32($i1027, 0);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i25 := 29;
    assume {:branchcond $i1028} true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i1028 == 1);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $i1029 := $zext.i16.i32($i1015);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i1030 := $ne.i32($i1029, 0);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i25 := 29;
    assume {:branchcond $i1030} true;
    goto $bb589, $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    assume !($i1030 == 1);
    goto $bb586;

  $bb589:
    assume {:verifier.code 0} true;
    assume $i1030 == 1;
    goto $bb13;

  $bb587:
    assume {:verifier.code 0} true;
    assume $i1028 == 1;
    goto $bb13;

  $bb578:
    assume 1 == 1;
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb581, $bb582;

  $bb582:
    assume !(1 == 1);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $i1008 := 0;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i1007 := $i1008;
    goto $bb580;

  $bb581:
    assume 1 == 1;
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $i1008 := 29;
    goto $bb583;

  $bb569:
    assume $i1002 == 1;
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $i1003 := $zext.i16.i32($i1000);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $i1004 := $ne.i32($i1003, 0);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $i25 := 28;
    assume {:branchcond $i1004} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i1004 == 1);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i1005 := $zext.i16.i32($i991);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $i1006 := $ne.i32($i1005, 0);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $i25 := 28;
    assume {:branchcond $i1006} true;
    goto $bb574, $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    assume !($i1006 == 1);
    goto $bb571;

  $bb574:
    assume {:verifier.code 0} true;
    assume $i1006 == 1;
    goto $bb13;

  $bb572:
    assume {:verifier.code 0} true;
    assume $i1004 == 1;
    goto $bb13;

  $bb563:
    assume 1 == 1;
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb566, $bb567;

  $bb567:
    assume !(1 == 1);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $i984 := 0;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i983 := $i984;
    goto $bb565;

  $bb566:
    assume 1 == 1;
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i984 := 28;
    goto $bb568;

  $bb554:
    assume $i978 == 1;
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i979 := $zext.i16.i32($i976);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $i980 := $ne.i32($i979, 0);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i25 := 27;
    assume {:branchcond $i980} true;
    goto $bb557, $bb558;

  $bb558:
    assume !($i980 == 1);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $i981 := $zext.i16.i32($i967);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i982 := $ne.i32($i981, 0);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i25 := 27;
    assume {:branchcond $i982} true;
    goto $bb559, $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    assume !($i982 == 1);
    goto $bb556;

  $bb559:
    assume {:verifier.code 0} true;
    assume $i982 == 1;
    goto $bb13;

  $bb557:
    assume {:verifier.code 0} true;
    assume $i980 == 1;
    goto $bb13;

  $bb548:
    assume 1 == 1;
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb551, $bb552;

  $bb552:
    assume !(1 == 1);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i960 := 0;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $i959 := $i960;
    goto $bb550;

  $bb551:
    assume 1 == 1;
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $i960 := 27;
    goto $bb553;

  $bb539:
    assume $i954 == 1;
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i955 := $zext.i16.i32($i952);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i956 := $ne.i32($i955, 0);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i25 := 26;
    assume {:branchcond $i956} true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i956 == 1);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $i957 := $zext.i16.i32($i943);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i958 := $ne.i32($i957, 0);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i25 := 26;
    assume {:branchcond $i958} true;
    goto $bb544, $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    assume !($i958 == 1);
    goto $bb541;

  $bb544:
    assume {:verifier.code 0} true;
    assume $i958 == 1;
    goto $bb13;

  $bb542:
    assume {:verifier.code 0} true;
    assume $i956 == 1;
    goto $bb13;

  $bb533:
    assume 1 == 1;
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb536, $bb537;

  $bb537:
    assume !(1 == 1);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i936 := 0;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i935 := $i936;
    goto $bb535;

  $bb536:
    assume 1 == 1;
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $i936 := 26;
    goto $bb538;

  $bb524:
    assume $i930 == 1;
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $i931 := $zext.i16.i32($i928);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $i932 := $ne.i32($i931, 0);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i25 := 25;
    assume {:branchcond $i932} true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i932 == 1);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $i933 := $zext.i16.i32($i919);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i934 := $ne.i32($i933, 0);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $i25 := 25;
    assume {:branchcond $i934} true;
    goto $bb529, $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    assume !($i934 == 1);
    goto $bb526;

  $bb529:
    assume {:verifier.code 0} true;
    assume $i934 == 1;
    goto $bb13;

  $bb527:
    assume {:verifier.code 0} true;
    assume $i932 == 1;
    goto $bb13;

  $bb518:
    assume 1 == 1;
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb521, $bb522;

  $bb522:
    assume !(1 == 1);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $i912 := 0;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $i911 := $i912;
    goto $bb520;

  $bb521:
    assume 1 == 1;
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i912 := 25;
    goto $bb523;

  $bb509:
    assume $i906 == 1;
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $i907 := $zext.i16.i32($i904);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $i908 := $ne.i32($i907, 0);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $i25 := 24;
    assume {:branchcond $i908} true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i908 == 1);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i909 := $zext.i16.i32($i895);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i910 := $ne.i32($i909, 0);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i25 := 24;
    assume {:branchcond $i910} true;
    goto $bb514, $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    assume !($i910 == 1);
    goto $bb511;

  $bb514:
    assume {:verifier.code 0} true;
    assume $i910 == 1;
    goto $bb13;

  $bb512:
    assume {:verifier.code 0} true;
    assume $i908 == 1;
    goto $bb13;

  $bb503:
    assume 1 == 1;
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb506, $bb507;

  $bb507:
    assume !(1 == 1);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $i888 := 0;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $i887 := $i888;
    goto $bb505;

  $bb506:
    assume 1 == 1;
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i888 := 24;
    goto $bb508;

  $bb494:
    assume $i882 == 1;
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i883 := $zext.i16.i32($i880);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i884 := $ne.i32($i883, 0);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $i25 := 23;
    assume {:branchcond $i884} true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i884 == 1);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $i885 := $zext.i16.i32($i871);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $i886 := $ne.i32($i885, 0);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $i25 := 23;
    assume {:branchcond $i886} true;
    goto $bb499, $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    assume !($i886 == 1);
    goto $bb496;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i886 == 1;
    goto $bb13;

  $bb497:
    assume {:verifier.code 0} true;
    assume $i884 == 1;
    goto $bb13;

  $bb488:
    assume 1 == 1;
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb491, $bb492;

  $bb492:
    assume !(1 == 1);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i864 := 0;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $i863 := $i864;
    goto $bb490;

  $bb491:
    assume 1 == 1;
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $i864 := 23;
    goto $bb493;

  $bb479:
    assume $i858 == 1;
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $i859 := $zext.i16.i32($i856);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $i860 := $ne.i32($i859, 0);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $i25 := 22;
    assume {:branchcond $i860} true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i860 == 1);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i861 := $zext.i16.i32($i847);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $i862 := $ne.i32($i861, 0);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $i25 := 22;
    assume {:branchcond $i862} true;
    goto $bb484, $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    assume !($i862 == 1);
    goto $bb481;

  $bb484:
    assume {:verifier.code 0} true;
    assume $i862 == 1;
    goto $bb13;

  $bb482:
    assume {:verifier.code 0} true;
    assume $i860 == 1;
    goto $bb13;

  $bb473:
    assume 1 == 1;
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb476, $bb477;

  $bb477:
    assume !(1 == 1);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $i840 := 0;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i839 := $i840;
    goto $bb475;

  $bb476:
    assume 1 == 1;
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i840 := 22;
    goto $bb478;

  $bb464:
    assume $i834 == 1;
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $i835 := $zext.i16.i32($i832);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $i836 := $ne.i32($i835, 0);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $i25 := 21;
    assume {:branchcond $i836} true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i836 == 1);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i837 := $zext.i16.i32($i823);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $i838 := $ne.i32($i837, 0);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i25 := 21;
    assume {:branchcond $i838} true;
    goto $bb469, $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    assume !($i838 == 1);
    goto $bb466;

  $bb469:
    assume {:verifier.code 0} true;
    assume $i838 == 1;
    goto $bb13;

  $bb467:
    assume {:verifier.code 0} true;
    assume $i836 == 1;
    goto $bb13;

  $bb458:
    assume 1 == 1;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb461, $bb462;

  $bb462:
    assume !(1 == 1);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $i816 := 0;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $i815 := $i816;
    goto $bb460;

  $bb461:
    assume 1 == 1;
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i816 := 21;
    goto $bb463;

  $bb449:
    assume $i810 == 1;
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $i811 := $zext.i16.i32($i808);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i812 := $ne.i32($i811, 0);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i25 := 20;
    assume {:branchcond $i812} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i812 == 1);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i813 := $zext.i16.i32($i799);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i814 := $ne.i32($i813, 0);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $i25 := 20;
    assume {:branchcond $i814} true;
    goto $bb454, $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    assume !($i814 == 1);
    goto $bb451;

  $bb454:
    assume {:verifier.code 0} true;
    assume $i814 == 1;
    goto $bb13;

  $bb452:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb13;

  $bb443:
    assume 1 == 1;
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb446, $bb447;

  $bb447:
    assume !(1 == 1);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i792 := 0;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $i791 := $i792;
    goto $bb445;

  $bb446:
    assume 1 == 1;
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $i792 := 20;
    goto $bb448;

  $bb434:
    assume $i786 == 1;
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i787 := $zext.i16.i32($i784);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i788 := $ne.i32($i787, 0);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i25 := 19;
    assume {:branchcond $i788} true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i788 == 1);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i789 := $zext.i16.i32($i775);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $i790 := $ne.i32($i789, 0);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $i25 := 19;
    assume {:branchcond $i790} true;
    goto $bb439, $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume !($i790 == 1);
    goto $bb436;

  $bb439:
    assume {:verifier.code 0} true;
    assume $i790 == 1;
    goto $bb13;

  $bb437:
    assume {:verifier.code 0} true;
    assume $i788 == 1;
    goto $bb13;

  $bb428:
    assume 1 == 1;
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb431, $bb432;

  $bb432:
    assume !(1 == 1);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i768 := 0;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i767 := $i768;
    goto $bb430;

  $bb431:
    assume 1 == 1;
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i768 := 19;
    goto $bb433;

  $bb419:
    assume $i762 == 1;
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $i763 := $zext.i16.i32($i760);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i764 := $ne.i32($i763, 0);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i25 := 18;
    assume {:branchcond $i764} true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i764 == 1);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i765 := $zext.i16.i32($i751);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i766 := $ne.i32($i765, 0);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i25 := 18;
    assume {:branchcond $i766} true;
    goto $bb424, $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    assume !($i766 == 1);
    goto $bb421;

  $bb424:
    assume {:verifier.code 0} true;
    assume $i766 == 1;
    goto $bb13;

  $bb422:
    assume {:verifier.code 0} true;
    assume $i764 == 1;
    goto $bb13;

  $bb413:
    assume 1 == 1;
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb416, $bb417;

  $bb417:
    assume !(1 == 1);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i744 := 0;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i743 := $i744;
    goto $bb415;

  $bb416:
    assume 1 == 1;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $i744 := 18;
    goto $bb418;

  $bb404:
    assume $i738 == 1;
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i739 := $zext.i16.i32($i736);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i740 := $ne.i32($i739, 0);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i25 := 17;
    assume {:branchcond $i740} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i740 == 1);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $i741 := $zext.i16.i32($i727);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i742 := $ne.i32($i741, 0);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i25 := 17;
    assume {:branchcond $i742} true;
    goto $bb409, $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    assume !($i742 == 1);
    goto $bb406;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i742 == 1;
    goto $bb13;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i740 == 1;
    goto $bb13;

  $bb398:
    assume 1 == 1;
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb401, $bb402;

  $bb402:
    assume !(1 == 1);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $i720 := 0;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $i719 := $i720;
    goto $bb400;

  $bb401:
    assume 1 == 1;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i720 := 17;
    goto $bb403;

  $bb389:
    assume $i714 == 1;
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $i715 := $zext.i16.i32($i712);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $i716 := $ne.i32($i715, 0);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $i25 := 16;
    assume {:branchcond $i716} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i716 == 1);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i717 := $zext.i16.i32($i703);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i718 := $ne.i32($i717, 0);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $i25 := 16;
    assume {:branchcond $i718} true;
    goto $bb394, $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    assume !($i718 == 1);
    goto $bb391;

  $bb394:
    assume {:verifier.code 0} true;
    assume $i718 == 1;
    goto $bb13;

  $bb392:
    assume {:verifier.code 0} true;
    assume $i716 == 1;
    goto $bb13;

  $bb383:
    assume 1 == 1;
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb386, $bb387;

  $bb387:
    assume !(1 == 1);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $i696 := 0;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $i695 := $i696;
    goto $bb385;

  $bb386:
    assume 1 == 1;
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i696 := 16;
    goto $bb388;

  $bb374:
    assume $i690 == 1;
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i691 := $zext.i16.i32($i688);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $i692 := $ne.i32($i691, 0);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $i25 := 15;
    assume {:branchcond $i692} true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i692 == 1);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i693 := $zext.i16.i32($i679);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i694 := $ne.i32($i693, 0);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i25 := 15;
    assume {:branchcond $i694} true;
    goto $bb379, $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume !($i694 == 1);
    goto $bb376;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i694 == 1;
    goto $bb13;

  $bb377:
    assume {:verifier.code 0} true;
    assume $i692 == 1;
    goto $bb13;

  $bb368:
    assume 1 == 1;
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb371, $bb372;

  $bb372:
    assume !(1 == 1);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i672 := 0;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $i671 := $i672;
    goto $bb370;

  $bb371:
    assume 1 == 1;
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i672 := 15;
    goto $bb373;

  $bb359:
    assume $i666 == 1;
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i667 := $zext.i16.i32($i664);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i668 := $ne.i32($i667, 0);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i25 := 14;
    assume {:branchcond $i668} true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i668 == 1);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $i669 := $zext.i16.i32($i655);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $i670 := $ne.i32($i669, 0);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $i25 := 14;
    assume {:branchcond $i670} true;
    goto $bb364, $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume !($i670 == 1);
    goto $bb361;

  $bb364:
    assume {:verifier.code 0} true;
    assume $i670 == 1;
    goto $bb13;

  $bb362:
    assume {:verifier.code 0} true;
    assume $i668 == 1;
    goto $bb13;

  $bb353:
    assume 1 == 1;
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb356, $bb357;

  $bb357:
    assume !(1 == 1);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $i648 := 0;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $i647 := $i648;
    goto $bb355;

  $bb356:
    assume 1 == 1;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i648 := 14;
    goto $bb358;

  $bb344:
    assume $i642 == 1;
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $i643 := $zext.i16.i32($i640);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i644 := $ne.i32($i643, 0);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $i25 := 13;
    assume {:branchcond $i644} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i644 == 1);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $i645 := $zext.i16.i32($i631);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i646 := $ne.i32($i645, 0);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i25 := 13;
    assume {:branchcond $i646} true;
    goto $bb349, $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    assume !($i646 == 1);
    goto $bb346;

  $bb349:
    assume {:verifier.code 0} true;
    assume $i646 == 1;
    goto $bb13;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i644 == 1;
    goto $bb13;

  $bb338:
    assume 1 == 1;
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb341, $bb342;

  $bb342:
    assume !(1 == 1);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i624 := 0;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i623 := $i624;
    goto $bb340;

  $bb341:
    assume 1 == 1;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i624 := 13;
    goto $bb343;

  $bb329:
    assume $i618 == 1;
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i619 := $zext.i16.i32($i616);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i620 := $ne.i32($i619, 0);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i25 := 12;
    assume {:branchcond $i620} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i620 == 1);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i621 := $zext.i16.i32($i607);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i622 := $ne.i32($i621, 0);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i25 := 12;
    assume {:branchcond $i622} true;
    goto $bb334, $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume !($i622 == 1);
    goto $bb331;

  $bb334:
    assume {:verifier.code 0} true;
    assume $i622 == 1;
    goto $bb13;

  $bb332:
    assume {:verifier.code 0} true;
    assume $i620 == 1;
    goto $bb13;

  $bb323:
    assume 1 == 1;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb326, $bb327;

  $bb327:
    assume !(1 == 1);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $i600 := 0;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i599 := $i600;
    goto $bb325;

  $bb326:
    assume 1 == 1;
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $i600 := 12;
    goto $bb328;

  $bb314:
    assume $i594 == 1;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i595 := $zext.i16.i32($i592);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i596 := $ne.i32($i595, 0);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i25 := 11;
    assume {:branchcond $i596} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i596 == 1);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i597 := $zext.i16.i32($i583);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i598 := $ne.i32($i597, 0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i25 := 11;
    assume {:branchcond $i598} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i598 == 1);
    goto $bb316;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i598 == 1;
    goto $bb13;

  $bb317:
    assume {:verifier.code 0} true;
    assume $i596 == 1;
    goto $bb13;

  $bb308:
    assume 1 == 1;
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb311, $bb312;

  $bb312:
    assume !(1 == 1);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i576 := 0;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i575 := $i576;
    goto $bb310;

  $bb311:
    assume 1 == 1;
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i576 := 11;
    goto $bb313;

  $bb299:
    assume $i570 == 1;
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i571 := $zext.i16.i32($i568);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $i572 := $ne.i32($i571, 0);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $i25 := 10;
    assume {:branchcond $i572} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i572 == 1);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i573 := $zext.i16.i32($i559);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i574 := $ne.i32($i573, 0);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i25 := 10;
    assume {:branchcond $i574} true;
    goto $bb304, $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume !($i574 == 1);
    goto $bb301;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb13;

  $bb302:
    assume {:verifier.code 0} true;
    assume $i572 == 1;
    goto $bb13;

  $bb293:
    assume 1 == 1;
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb296, $bb297;

  $bb297:
    assume !(1 == 1);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i552 := 0;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i551 := $i552;
    goto $bb295;

  $bb296:
    assume 1 == 1;
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i552 := 10;
    goto $bb298;

  $bb284:
    assume $i546 == 1;
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i547 := $zext.i16.i32($i544);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i548 := $ne.i32($i547, 0);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i25 := 9;
    assume {:branchcond $i548} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i548 == 1);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i549 := $zext.i16.i32($i535);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i550 := $ne.i32($i549, 0);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i25 := 9;
    assume {:branchcond $i550} true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !($i550 == 1);
    goto $bb286;

  $bb289:
    assume {:verifier.code 0} true;
    assume $i550 == 1;
    goto $bb13;

  $bb287:
    assume {:verifier.code 0} true;
    assume $i548 == 1;
    goto $bb13;

  $bb278:
    assume 1 == 1;
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb281, $bb282;

  $bb282:
    assume !(1 == 1);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $i528 := 0;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i527 := $i528;
    goto $bb280;

  $bb281:
    assume 1 == 1;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i528 := 9;
    goto $bb283;

  $bb269:
    assume $i522 == 1;
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $i523 := $zext.i16.i32($i520);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i524 := $ne.i32($i523, 0);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i25 := 8;
    assume {:branchcond $i524} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i524 == 1);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i525 := $zext.i16.i32($i511);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i526 := $ne.i32($i525, 0);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i25 := 8;
    assume {:branchcond $i526} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i526 == 1);
    goto $bb271;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb13;

  $bb272:
    assume {:verifier.code 0} true;
    assume $i524 == 1;
    goto $bb13;

  $bb263:
    assume 1 == 1;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb266, $bb267;

  $bb267:
    assume !(1 == 1);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i504 := 0;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i503 := $i504;
    goto $bb265;

  $bb266:
    assume 1 == 1;
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $i504 := 8;
    goto $bb268;

  $bb254:
    assume $i498 == 1;
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i499 := $zext.i16.i32($i496);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i500 := $ne.i32($i499, 0);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $i25 := 7;
    assume {:branchcond $i500} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i500 == 1);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $i501 := $zext.i16.i32($i487);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $i502 := $ne.i32($i501, 0);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i25 := 7;
    assume {:branchcond $i502} true;
    goto $bb259, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i502 == 1);
    goto $bb256;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb13;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i500 == 1;
    goto $bb13;

  $bb248:
    assume 1 == 1;
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb251, $bb252;

  $bb252:
    assume !(1 == 1);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i480 := 0;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i479 := $i480;
    goto $bb250;

  $bb251:
    assume 1 == 1;
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i480 := 7;
    goto $bb253;

  $bb239:
    assume $i474 == 1;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $i475 := $zext.i16.i32($i472);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i476 := $ne.i32($i475, 0);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i25 := 6;
    assume {:branchcond $i476} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i476 == 1);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $i477 := $zext.i16.i32($i463);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i478 := $ne.i32($i477, 0);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i25 := 6;
    assume {:branchcond $i478} true;
    goto $bb244, $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume !($i478 == 1);
    goto $bb241;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i478 == 1;
    goto $bb13;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb13;

  $bb233:
    assume 1 == 1;
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb236, $bb237;

  $bb237:
    assume !(1 == 1);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i456 := 0;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $i455 := $i456;
    goto $bb235;

  $bb236:
    assume 1 == 1;
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $i456 := 6;
    goto $bb238;

  $bb224:
    assume $i450 == 1;
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i451 := $zext.i16.i32($i448);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i452 := $ne.i32($i451, 0);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i25 := 5;
    assume {:branchcond $i452} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i452 == 1);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i453 := $zext.i16.i32($i439);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $i454 := $ne.i32($i453, 0);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i25 := 5;
    assume {:branchcond $i454} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb226;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i454 == 1;
    goto $bb13;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb13;

  $bb218:
    assume 1 == 1;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb221, $bb222;

  $bb222:
    assume !(1 == 1);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i432 := 0;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i431 := $i432;
    goto $bb220;

  $bb221:
    assume 1 == 1;
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i432 := 5;
    goto $bb223;

  $bb209:
    assume $i426 == 1;
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i427 := $zext.i16.i32($i424);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i428 := $ne.i32($i427, 0);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i25 := 4;
    assume {:branchcond $i428} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i428 == 1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i429 := $zext.i16.i32($i415);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i430 := $ne.i32($i429, 0);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i25 := 4;
    assume {:branchcond $i430} true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i430 == 1);
    goto $bb211;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i430 == 1;
    goto $bb13;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i428 == 1;
    goto $bb13;

  $bb203:
    assume 1 == 1;
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb206, $bb207;

  $bb207:
    assume !(1 == 1);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i408 := 0;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $i407 := $i408;
    goto $bb205;

  $bb206:
    assume 1 == 1;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i408 := 4;
    goto $bb208;

  $bb194:
    assume $i402 == 1;
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i403 := $zext.i16.i32($i400);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i404 := $ne.i32($i403, 0);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i25 := 3;
    assume {:branchcond $i404} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i404 == 1);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i405 := $zext.i16.i32($i391);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $i406 := $ne.i32($i405, 0);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i25 := 3;
    assume {:branchcond $i406} true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i406 == 1);
    goto $bb196;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb13;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i404 == 1;
    goto $bb13;

  $bb188:
    assume 1 == 1;
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb191, $bb192;

  $bb192:
    assume !(1 == 1);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i384 := 0;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i383 := $i384;
    goto $bb190;

  $bb191:
    assume 1 == 1;
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i384 := 3;
    goto $bb193;

  $bb179:
    assume $i378 == 1;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i379 := $zext.i16.i32($i376);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i25 := 2;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i380 == 1);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $i381 := $zext.i16.i32($i367);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i382 := $ne.i32($i381, 0);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $i25 := 2;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i382 == 1);
    goto $bb181;

  $bb184:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb13;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i380 == 1;
    goto $bb13;

  $bb173:
    assume 1 == 1;
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb176, $bb177;

  $bb177:
    assume !(1 == 1);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i360 := 0;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $i359 := $i360;
    goto $bb175;

  $bb176:
    assume 1 == 1;
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $i360 := 2;
    goto $bb178;

  $bb164:
    assume $i354 == 1;
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i355 := $zext.i16.i32($i352);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i356 := $ne.i32($i355, 0);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i25 := 1;
    assume {:branchcond $i356} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i356 == 1);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $i357 := $zext.i16.i32($i343);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i25 := 1;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i358 == 1);
    goto $bb166;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb13;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i356 == 1;
    goto $bb13;

  $bb158:
    assume 1 == 1;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb161, $bb162;

  $bb162:
    assume !(0 == 1);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $i336 := 0;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $i335 := $i336;
    goto $bb160;

  $bb161:
    assume 0 == 1;
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i336 := 1;
    goto $bb163;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i20);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i11);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume {:branchcond $i27} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb13;

  $bb3:
    assume 0 == 1;
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb5, $bb6;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb8;

  $bb5:
    assume 1 == 1;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const pch_gbe_hal_get_bus_info: ref;

axiom pch_gbe_hal_get_bus_info == $sub.ref(0, 625398);

procedure pch_gbe_hal_get_bus_info($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_hal_get_bus_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_353: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 2334} devirtbounce.18($p15, $p0);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} vslice_dummy_var_353 := netdev_err.ref.ref($p10, .str.19);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_hal_read_mac_addr: ref;

axiom pch_gbe_hal_read_mac_addr == $sub.ref(0, 626430);

procedure pch_gbe_hal_read_mac_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation pch_gbe_hal_read_mac_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i13: i32;
  var vslice_dummy_var_354: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 2336} $i19 := devirtbounce($p18, $p0);
    call {:si_unique_call 2337} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} vslice_dummy_var_354 := netdev_err.ref.ref($p11, .str.19);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 38);
    goto $bb3;
}



const pch_gbe_watchdog: ref;

axiom pch_gbe_watchdog == $sub.ref(0, 627462);

procedure pch_gbe_watchdog($i0: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation pch_gbe_watchdog($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i67: i32;
  var $i68: i16;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i16;
  var $p75: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i16;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i16;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i16;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i16;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i24;
  var $i103: i24;
  var $i104: i24;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i8;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i24;
  var $i135: i24;
  var $i136: i24;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p146: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $p152: ref;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;
  var vslice_dummy_var_357: i32;
  var vslice_dummy_var_358: i32;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 2342} {:cexpr "pch_gbe_watchdog:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i0);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.144);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.21);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.145);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1186);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2344} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} pch_gbe_update_stats($p5);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i28 := mii_link_ok($p27);
    call {:si_unique_call 2348} {:cexpr "tmp___7"} boogie_si_record_i32($i28);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i123 := mii_link_ok($p122);
    call {:si_unique_call 2367} {:cexpr "tmp___5"} boogie_si_record_i32($i123);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.0, jiffies);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $i150 := $add.i64($i149, 1250);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} $i151 := round_jiffies($i150);
    call {:si_unique_call 2369} {:cexpr "tmp___10"} boogie_si_record_i64($i151);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(744, 1));
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} vslice_dummy_var_359 := ldv_mod_timer_73($p152, $i151);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i124 == 1;
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $i125 := netif_carrier_ok($p7);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i8($i125);
    call {:si_unique_call 2372} {:cexpr "tmp___6"} boogie_si_record_i8($i126);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i126);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i127 == 1;
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p128, .str);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p129, .str.144);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p130, .str.21);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p131, .str.150);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $i134 := $load.i24($M.5, $p133);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $i135 := $and.i24($i134, $sub.i24(0, 262144));
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i136 := $or.i24($i135, 1216);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p133, $i136);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p137, 0);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.6, $p138);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i64($i139);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i141 := $and.i64($i140, 1);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $i142 := ldv__builtin_expect($i141, 0);
    call {:si_unique_call 2374} {:cexpr "tmp___4"} boogie_si_record_i64($i142);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p146 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, 10);
    $p148 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, 0);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} netif_carrier_off($p7);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} netif_stop_queue($p7);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i143 == 1;
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} vslice_dummy_var_360 := __dynamic_netdev_dbg.ref.ref.ref($p4, $p7, .str.150);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} $i30 := netif_carrier_ok($p7);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 2350} {:cexpr "tmp___8"} boogie_si_record_i8($i31);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 0);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(19, 1));
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 0);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(30, 1));
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(31, 1));
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(36, 1)), $mul.ref(1, 4));
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(920, 1));
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(944, 1));
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(696, 1));
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} $i59 := mii_ethtool_gset($p58, $p2);
    call {:si_unique_call 2352} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $i67 := ethtool_cmd_speed($p2);
    call {:si_unique_call 2358} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    $p70 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i68);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i16($i72);
    $p75 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $i73);
    $p77 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    $p82 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} pch_gbe_set_rgmii_ctrl($p5, $i80, $i85);
    $p87 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    $p92 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} pch_gbe_set_mode($p5, $i90, $i95);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p96, .str);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p97, .str.144);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p98, .str.21);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p99, .str.147);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $i102 := $load.i24($M.5, $p101);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i103 := $and.i24($i102, $sub.i24(0, 262144));
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $i104 := $or.i24($i103, 1211);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p101, $i104);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p105, 0);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.6, $p106);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i64($i107);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $i109 := $and.i64($i108, 1);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $i110 := ldv__builtin_expect($i109, 0);
    call {:si_unique_call 2362} {:cexpr "tmp___3"} boogie_si_record_i64($i110);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} netif_carrier_on($p7);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} netif_wake_queue($p7);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i111 == 1;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $p120 := (if $i119 == 1 then .str.148 else .str.149);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} vslice_dummy_var_358 := __dynamic_netdev_dbg.ref.ref.ref.i32.ref($p3, $p7, .str.147, $i115, $p120);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} vslice_dummy_var_356 := netdev_err.ref.ref($p7, .str.146);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, jiffies);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 1250);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $i64 := round_jiffies($i63);
    call {:si_unique_call 2355} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(744, 1));
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} vslice_dummy_var_357 := ldv_mod_timer_72($p65, $i64);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb8;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, jiffies);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} vslice_dummy_var_355 := __dynamic_netdev_dbg.ref.ref.ref.i64($p1, $p7, .str.145, $i25);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const reg_timer_2: ref;

axiom reg_timer_2 == $sub.ref(0, 628494);

procedure reg_timer_2($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation reg_timer_2($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} {:cexpr "reg_timer_2:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(pch_gbe_watchdog));
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} activate_suitable_timer_2($p0, $i2);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 629526);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 630558);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 631590);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_reset_task: ref;

axiom pch_gbe_reset_task == $sub.ref(0, 632622);

procedure pch_gbe_reset_task($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation pch_gbe_reset_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 616), 960));
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} rtnl_lock();
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} pch_gbe_reinit_locked($p2);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} rtnl_unlock();
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_check_options: ref;

axiom pch_gbe_check_options == $sub.ref(0, 633654);

procedure pch_gbe_check_options($p0: ref);
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.0, $M.51, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_check_options($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i105: i32;
  var $i106: i8;
  var $p108: ref;
  var vslice_dummy_var_361: i32;
  var vslice_dummy_var_362: i32;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i32;
  var vslice_dummy_var_365: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $p4 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} $p6 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p11, 1);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p12, .str.11);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p13, .str.12);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p14, 256);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p17, 8);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $M.48 := $store.i32($M.48, $p20, 4096);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i23 := $M.49;
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} vslice_dummy_var_361 := pch_gbe_validate_option($p25, $p2, $p0);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 8);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $i31 := $udiv.i32($i30, 8);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 8);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p34, 1);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p35, .str.13);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p36, .str.12);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p37, 256);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p40, 8);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $M.48 := $store.i32($M.48, $p43, 4096);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i46 := $M.50;
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} vslice_dummy_var_362 := pch_gbe_validate_option($p48, $p3, $p0);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 8);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $i54 := $udiv.i32($i53, 8);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i54, 8);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p57, 0);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p58, .str.14);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p59, .str.15);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p60, 1);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p63, 0);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p66, $0.ref);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $i67 := $M.52;
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i67);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} vslice_dummy_var_363 := pch_gbe_validate_option($p1, $p4, $p0);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p1);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p75, 0);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p76, .str.14);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p77, .str.15);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p78, 1);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p81, 0);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p84, $0.ref);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i85 := $M.53;
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i85);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} vslice_dummy_var_364 := pch_gbe_validate_option($p1, $p5, $p0);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p1);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p93, 2);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p94, .str.16);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p95, .str.17);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p96, 3);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p99, 4);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p102, fc_list);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i103 := $M.54;
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i103);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} vslice_dummy_var_365 := pch_gbe_validate_option($p7, $p6, $p0);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p7);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    $p108 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(6, 1));
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, $i106);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} pch_gbe_check_copper_options($p0);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i88 == 1;
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p10, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, $sub.i64(0, 27));
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p10, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i91);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i70 == 1;
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p10, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, $sub.i64(0, 17179869185));
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, $i73);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 634686);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_register_netdev_81: ref;

axiom ldv_register_netdev_81 == $sub.ref(0, 635718);

procedure ldv_register_netdev_81($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.55, $M.0, $CurrAddr;



implementation ldv_register_netdev_81($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $i1 := register_netdev($p0);
    call {:si_unique_call 2401} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2402} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} ldv_net_device_ops_7();
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 636750);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2404} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2405} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_gbe_phy_disable_hibernate: ref;

axiom pch_gbe_phy_disable_hibernate == $sub.ref(0, 637782);

procedure pch_gbe_phy_disable_hibernate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation pch_gbe_phy_disable_hibernate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i28: i32;
  var $i29: i1;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $i30: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i46: i32;
  var vslice_dummy_var_366: i32;
  var vslice_dummy_var_367: i32;
  var vslice_dummy_var_368: i32;
  var vslice_dummy_var_369: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 4980);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(4, 1));
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} vslice_dummy_var_368 := netdev_err.ref.ref.i32($p41, .str.9, $i44);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 22);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.7);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.2);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.8);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 439);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2409} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $i28 := pch_gbe_phy_write_reg_miic($p0, 29, 11);
    call {:si_unique_call 2412} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} vslice_dummy_var_367 := pch_gbe_phy_read_reg_miic($p0, 30, $p1);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p1);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 32767);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i35);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p1);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $i39 := pch_gbe_phy_write_reg_miic($p0, 30, $i38);
    call {:si_unique_call 2415} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $i30 := $i39;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i30, 0);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i46 := $i30;
    goto $bb12;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} vslice_dummy_var_369 := netdev_err.ref.ref($p49, .str.10);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} vslice_dummy_var_366 := __dynamic_netdev_dbg.ref.ref.ref($p2, $p26, .str.8);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const device_set_wakeup_enable: ref;

axiom device_set_wakeup_enable == $sub.ref(0, 638814);

procedure device_set_wakeup_enable($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation device_set_wakeup_enable($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2418} {:cexpr "device_set_wakeup_enable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2419} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_free_netdev_82: ref;

axiom ldv_free_netdev_82 == $sub.ref(0, 639846);

procedure ldv_free_netdev_82($p0: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_free_netdev_82($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} free_netdev($p0);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 2422} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 640878);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2423} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_7: ref;

axiom ldv_net_device_ops_7 == $sub.ref(0, 641910);

procedure ldv_net_device_ops_7();
  free requires assertsPassed;
  modifies $M.55, $M.0, $CurrAddr;



implementation ldv_net_device_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $p0 := ldv_zalloc(3264);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $M.55 := $p0;
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_validate_option: ref;

axiom pch_gbe_validate_option == $sub.ref(0, 642942);

procedure pch_gbe_validate_option($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_validate_option($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i24;
  var $i128: i24;
  var $i129: i24;
  var $p130: ref;
  var $p131: ref;
  var $i132: i8;
  var $i133: i64;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i104: i32;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i24;
  var $i152: i24;
  var $i153: i24;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i64;
  var $i158: i64;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p169: ref;
  var $i170: i32;
  var $i12: i32;
  var vslice_dummy_var_370: i32;
  var vslice_dummy_var_371: i32;
  var vslice_dummy_var_372: i32;
  var vslice_dummy_var_373: i32;
  var vslice_dummy_var_374: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.43, $p13);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    call {:si_unique_call 2446} devirtbounce.2(0, .str.46, 353, 12);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    call pch_gbe_validate_option_loop_$bb58();
    goto $bb58_last;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.47, $p101);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i103 := $sgt.i32($i102, 0);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p145, .str);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p146, .str.45);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p147, .str.46);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p148, .str.51);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $i151 := $load.i24($M.5, $p150);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i152 := $and.i24($i151, $sub.i24(0, 262144));
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i153 := $or.i24($i152, 357);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p150, $i153);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p154, 0);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.6, $p155);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i64($i156);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i158 := $and.i64($i157, 1);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $i159 := ldv__builtin_expect($i158, 0);
    call {:si_unique_call 2438} {:cexpr "tmp___3"} boogie_si_record_i64($i159);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.46, $p169);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i170);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb59:
    assume $i160 == 1;
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.44, $p163);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p0);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.45, $p166);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} vslice_dummy_var_374 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p7, $p162, .str.51, $p164, $i165, $p167);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb40:
    assume $i103 == 1;
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i104 := 0;
    goto $bb43;

  $bb43:
    call $p105, $p106, $p107, $p108, $i109, $p110, $i111, $p112, $i113, $i114, $p115, $i142, $i143, $i144, $i104 := pch_gbe_validate_option_loop_$bb43($p0, $p1, $p101, $p105, $p106, $p107, $p108, $i109, $p110, $i111, $p112, $i113, $i114, $p115, $i142, $i143, $i144, $i104);
    goto $bb43_last;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.51, $p107);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i104);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p108, $mul.ref($i109, 16));
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p0);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p108, $mul.ref($i109, 16)), $mul.ref(0, 1));
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.56, $p112);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i111, $i113);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $p115 := $p110;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i104, 1);
    call {:si_unique_call 2445} {:cexpr "i"} boogie_si_record_i32($i142);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.47, $p101);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i144 := $sgt.i32($i143, $i142);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i144 == 1);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb54:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i104 := $i142;
    goto $bb54_dummy;

  $bb45:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.57, $p116);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.58, $p117);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $i119 := $sext.i8.i32($i118);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb47:
    assume $i120 == 1;
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p121, .str);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p122, .str.45);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p123, .str.46);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p124, .str.50);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i127 := $load.i24($M.5, $p126);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $i128 := $and.i24($i127, $sub.i24(0, 262144));
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i129 := $or.i24($i128, 346);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p126, $i129);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p130, 0);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.6, $p131);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i64($i132);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i134 := $and.i64($i133, 1);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} $i135 := ldv__builtin_expect($i134, 0);
    call {:si_unique_call 2443} {:cexpr "tmp___2"} boogie_si_record_i64($i135);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i136 == 1;
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p115, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.57, $p139);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} vslice_dummy_var_373 := __dynamic_netdev_dbg.ref.ref.ref.ref($p6, $p138, .str.50, $p140);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p0);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.47, $p68);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i70 := $sge.i32($i65, $i69);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i70 == 1;
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p0);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.48, $p74);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i76 := $sle.i32($i71, $i75);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb33;

  $bb34:
    assume $i76 == 1;
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, .str);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p78, .str.45);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.46);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.49);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.5, $p82);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 333);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p82, $i85);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p86, 0);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.6, $p87);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 2440} {:cexpr "tmp___1"} boogie_si_record_i64($i91);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb36:
    assume $i92 == 1;
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.44, $p95);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p0);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} vslice_dummy_var_372 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p5, $p94, .str.49, $p96, $i97);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume $i21 == 1;
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, .str.45);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p25, .str.46);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.47);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.5, $p28);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 323);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p28, $i31);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 0);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.6, $p33);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 2432} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.44, $p41);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} vslice_dummy_var_370 := __dynamic_netdev_dbg.ref.ref.ref.ref($p3, $p40, .str.47, $p42);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, .str);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p45, .str.45);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p46, .str.46);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p47, .str.48);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.5, $p49);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 326);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p49, $i52);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p53, 0);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 2434} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb26:
    assume $i59 == 1;
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.44, $p62);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} vslice_dummy_var_371 := __dynamic_netdev_dbg.ref.ref.ref.ref($p4, $p61, .str.48, $p63);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.46, $p10);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i11);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb58_dummy:
    assume false;
    return;

  $bb58_last:
    assume {:verifier.code 0} true;
    goto $bb58_dummy;

  $bb54_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12607;
}



const pch_gbe_check_copper_options: ref;

axiom pch_gbe_check_copper_options == $sub.ref(0, 643974);

procedure pch_gbe_check_copper_options($p0: ref);
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.45, $M.46, $M.47, $M.51, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_check_copper_options($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i16;
  var $p86: ref;
  var $i87: i32;
  var $i89: i32;
  var $i90: i16;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $p113: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i24;
  var $i150: i24;
  var $i151: i24;
  var $p152: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i24;
  var $i169: i24;
  var $i170: i24;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i64;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i24;
  var $i198: i24;
  var $i199: i24;
  var $p200: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i64;
  var $i204: i64;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i24;
  var $i217: i24;
  var $i218: i24;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i64;
  var $i223: i64;
  var $i224: i64;
  var $i225: i1;
  var $p226: ref;
  var $p227: ref;
  var $p230: ref;
  var $p232: ref;
  var $p234: ref;
  var $p236: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i24;
  var $i246: i24;
  var $i247: i24;
  var $p248: ref;
  var $p249: ref;
  var $i250: i8;
  var $i251: i64;
  var $i252: i64;
  var $i253: i64;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i24;
  var $i265: i24;
  var $i266: i24;
  var $p267: ref;
  var $p268: ref;
  var $i269: i8;
  var $i270: i64;
  var $i271: i64;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p278: ref;
  var $p280: ref;
  var $p282: ref;
  var $p284: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i24;
  var $i294: i24;
  var $i295: i24;
  var $p296: ref;
  var $p297: ref;
  var $i298: i8;
  var $i299: i64;
  var $i300: i64;
  var $i301: i64;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $p307: ref;
  var $p309: ref;
  var $p311: ref;
  var $p313: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i24;
  var $i323: i24;
  var $i324: i24;
  var $p325: ref;
  var $p326: ref;
  var $i327: i8;
  var $i328: i64;
  var $i329: i64;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $p336: ref;
  var $p338: ref;
  var $p340: ref;
  var $p342: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i24;
  var $i352: i24;
  var $i353: i24;
  var $p354: ref;
  var $p355: ref;
  var $i356: i8;
  var $i357: i64;
  var $i358: i64;
  var $i359: i64;
  var $i360: i1;
  var $p361: ref;
  var $p362: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i24;
  var $i371: i24;
  var $i372: i24;
  var $p373: ref;
  var $p374: ref;
  var $i375: i8;
  var $i376: i64;
  var $i377: i64;
  var $i378: i64;
  var $i379: i1;
  var $p380: ref;
  var $p381: ref;
  var $p384: ref;
  var $p386: ref;
  var $p388: ref;
  var $p390: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i24;
  var $i400: i24;
  var $i401: i24;
  var $p402: ref;
  var $p403: ref;
  var $i404: i8;
  var $i405: i64;
  var $i406: i64;
  var $i407: i64;
  var $i408: i1;
  var $p409: ref;
  var $p410: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i24;
  var $i429: i24;
  var $i430: i24;
  var $p431: ref;
  var $p432: ref;
  var $i433: i8;
  var $i434: i64;
  var $i435: i64;
  var $i436: i64;
  var $i437: i1;
  var $p438: ref;
  var $p439: ref;
  var $p442: ref;
  var $p444: ref;
  var $p446: ref;
  var $p448: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $i457: i24;
  var $i458: i24;
  var $i459: i24;
  var $p460: ref;
  var $p461: ref;
  var $i462: i8;
  var $i463: i64;
  var $i464: i64;
  var $i465: i64;
  var $i466: i1;
  var $p467: ref;
  var $p468: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $i476: i24;
  var $i477: i24;
  var $i478: i24;
  var $p479: ref;
  var $p480: ref;
  var $i481: i8;
  var $i482: i64;
  var $i483: i64;
  var $i484: i64;
  var $i485: i1;
  var $p486: ref;
  var $p487: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i24;
  var $i496: i24;
  var $i497: i24;
  var $p498: ref;
  var $p499: ref;
  var $i500: i8;
  var $i501: i64;
  var $i502: i64;
  var $i503: i64;
  var $i504: i1;
  var $p505: ref;
  var $p506: ref;
  var $p509: ref;
  var $p511: ref;
  var $p513: ref;
  var $p515: ref;
  var $p517: ref;
  var vslice_dummy_var_375: i32;
  var vslice_dummy_var_376: i32;
  var vslice_dummy_var_377: i32;
  var vslice_dummy_var_378: i32;
  var vslice_dummy_var_379: i32;
  var vslice_dummy_var_380: i32;
  var vslice_dummy_var_381: i32;
  var vslice_dummy_var_382: i32;
  var vslice_dummy_var_383: i32;
  var vslice_dummy_var_384: i32;
  var vslice_dummy_var_385: i32;
  var vslice_dummy_var_386: i32;
  var vslice_dummy_var_387: i32;
  var vslice_dummy_var_388: i32;
  var vslice_dummy_var_389: i32;
  var vslice_dummy_var_390: i32;
  var vslice_dummy_var_391: i32;
  var vslice_dummy_var_392: i32;
  var vslice_dummy_var_393: i32;
  var vslice_dummy_var_394: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} $p4 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} $p19 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $p20 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} $p21 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} $p22 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} $p23 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p25, 2);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p26, .str.56);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p27, .str.57);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p28, 0);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p31, 4);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p34, speed_list);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i35 := $M.59;
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i35);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} vslice_dummy_var_375 := pch_gbe_validate_option($p1, $p3, $p0);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p37, 2);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p38, .str.58);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p39, .str.57);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p40, 0);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p43, 3);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p46, dplx_list);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $i47 := $M.60;
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i47);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} vslice_dummy_var_376 := pch_gbe_validate_option($p2, $p4, $p0);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $p49, 2);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p50, .str.59);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p51, .str.57);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p52, 47);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p55, 31);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p58, an_list);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p1);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i60 == 1);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p2);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i62 == 1);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $i87 := $M.61;
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i87);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} vslice_dummy_var_377 := pch_gbe_validate_option($p7, $p5, $p0);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p7);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    $p92 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, $i90);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p1);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p2);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i93, $i94);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 100);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i95, 1000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i95, 1001);
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i95, 1002);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i95, 1002);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    call {:si_unique_call 2525} devirtbounce.2(0, .str.46, 519, 12);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    call pch_gbe_check_copper_options_loop_$bb102();
    goto $bb102_last;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p489, .str);
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p490, .str.60);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p491, .str.46);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p492, .str.77);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $p494 := $bitcast.ref.ref($p493);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $i495 := $load.i24($M.5, $p494);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $i496 := $and.i24($i495, $sub.i24(0, 262144));
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    $i497 := $or.i24($i496, 512);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p494, $i497);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p498, 0);
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i500 := $load.i8($M.6, $p499);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $i501 := $zext.i8.i64($i500);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $i502 := $and.i64($i501, 1);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} $i503 := ldv__builtin_expect($i502, 0);
    call {:si_unique_call 2522} {:cexpr "tmp___25"} boogie_si_record_i64($i503);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i504 := $ne.i64($i503, 0);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    $p509 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p509, 1);
    $p511 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p511, 1);
    $p513 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p513, 32);
    $p515 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p515, 1000);
    $p517 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p517, 1);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    return;

  $bb98:
    assume $i504 == 1;
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} vslice_dummy_var_394 := __dynamic_netdev_dbg.ref.ref.ref($p23, $p506, .str.77);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb17:
    assume $i99 == 1;
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p470, .str);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p471, .str.60);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p472, .str.46);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p473, .str.76);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $p475 := $bitcast.ref.ref($p474);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $i476 := $load.i24($M.5, $p475);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i477 := $and.i24($i476, $sub.i24(0, 262144));
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $i478 := $or.i24($i477, 507);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p475, $i478);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p479, 0);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.6, $p480);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $i482 := $zext.i8.i64($i481);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i483 := $and.i64($i482, 1);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $i484 := ldv__builtin_expect($i483, 0);
    call {:si_unique_call 2480} {:cexpr "tmp___24"} boogie_si_record_i64($i484);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i485 := $ne.i64($i484, 0);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb95:
    assume $i485 == 1;
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.0, $p486);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} vslice_dummy_var_393 := __dynamic_netdev_dbg.ref.ref.ref($p22, $p487, .str.76);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb15:
    assume $i98 == 1;
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p451, .str);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p452, .str.60);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p453, .str.46);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p454, .str.75);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $p456 := $bitcast.ref.ref($p455);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i457 := $load.i24($M.5, $p456);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $i458 := $and.i24($i457, $sub.i24(0, 262144));
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $i459 := $or.i24($i458, 503);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p456, $i459);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p460, 0);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i462 := $load.i8($M.6, $p461);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i64($i462);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $i464 := $and.i64($i463, 1);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} $i465 := ldv__builtin_expect($i464, 0);
    call {:si_unique_call 2478} {:cexpr "tmp___23"} boogie_si_record_i64($i465);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i466 := $ne.i64($i465, 0);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i466 == 1;
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $p468 := $load.ref($M.0, $p467);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} vslice_dummy_var_392 := __dynamic_netdev_dbg.ref.ref.ref($p21, $p468, .str.75);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb13:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i95, 101);
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i95, 102);
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i95, 102);
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb22;

  $bb27:
    assume $i103 == 1;
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p422, .str);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p423, .str.60);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p424, .str.46);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p425, .str.74);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $p427 := $bitcast.ref.ref($p426);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i428 := $load.i24($M.5, $p427);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i429 := $and.i24($i428, $sub.i24(0, 262144));
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $i430 := $or.i24($i429, 495);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p427, $i430);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p431, 0);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $i433 := $load.i8($M.6, $p432);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $i434 := $zext.i8.i64($i433);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i435 := $and.i64($i434, 1);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $i436 := ldv__builtin_expect($i435, 0);
    call {:si_unique_call 2486} {:cexpr "tmp___21"} boogie_si_record_i64($i436);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $i437 := $ne.i64($i436, 0);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    $p442 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p442, 0);
    $p444 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p444, 0);
    $p446 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p446, 0);
    $p448 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p448, 100);
    $p450 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p450, 1);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb88:
    assume $i437 == 1;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} vslice_dummy_var_391 := __dynamic_netdev_dbg.ref.ref.ref($p20, $p439, .str.74);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb25:
    assume $i102 == 1;
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p393, .str);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p394, .str.60);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p395, .str.46);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p396, .str.73);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $p398 := $bitcast.ref.ref($p397);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $i399 := $load.i24($M.5, $p398);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i400 := $and.i24($i399, $sub.i24(0, 262144));
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $i401 := $or.i24($i400, 487);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p398, $i401);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p402, 0);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $i404 := $load.i8($M.6, $p403);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $i405 := $zext.i8.i64($i404);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $i406 := $and.i64($i405, 1);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $i407 := ldv__builtin_expect($i406, 0);
    call {:si_unique_call 2484} {:cexpr "tmp___19"} boogie_si_record_i64($i407);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $i408 := $ne.i64($i407, 0);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    $p413 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p413, 0);
    $p415 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p415, 0);
    $p417 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p417, 0);
    $p419 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p419, 100);
    $p421 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p421, 0);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb85:
    assume $i408 == 1;
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} vslice_dummy_var_390 := __dynamic_netdev_dbg.ref.ref.ref($p19, $p410, .str.73);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb23:
    assume $i101 == 1;
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p345, .str);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p346, .str.60);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p347, .str.46);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p348, .str.71);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $i351 := $load.i24($M.5, $p350);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i352 := $and.i24($i351, $sub.i24(0, 262144));
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $i353 := $or.i24($i352, 476);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p350, $i353);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p354, 0);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.6, $p355);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i64($i356);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $i358 := $and.i64($i357, 1);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $i359 := ldv__builtin_expect($i358, 0);
    call {:si_unique_call 2482} {:cexpr "tmp___16"} boogie_si_record_i64($i359);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $i360 := $ne.i64($i359, 0);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p364, .str);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p365, .str.60);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p366, .str.46);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p367, .str.72);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p368);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $i370 := $load.i24($M.5, $p369);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    $i371 := $and.i24($i370, $sub.i24(0, 262144));
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $i372 := $or.i24($i371, 478);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p369, $i372);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p373, 0);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i375 := $load.i8($M.6, $p374);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i376 := $zext.i8.i64($i375);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $i377 := $and.i64($i376, 1);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} $i378 := ldv__builtin_expect($i377, 0);
    call {:si_unique_call 2516} {:cexpr "tmp___17"} boogie_si_record_i64($i378);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    $p384 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p384, 1);
    $p386 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p386, 1);
    $p388 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p388, 12);
    $p390 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p390, 100);
    $p392 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p392, 0);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb82:
    assume $i379 == 1;
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} vslice_dummy_var_389 := __dynamic_netdev_dbg.ref.ref.ref($p18, $p381, .str.72);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume $i360 == 1;
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} vslice_dummy_var_388 := __dynamic_netdev_dbg.ref.ref.ref($p17, $p362, .str.71);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb11:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i95, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i95, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i95, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i95, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb22;

  $bb35:
    assume $i107 == 1;
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p316, .str);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p317, .str.60);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p318, .str.46);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p319, .str.70);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $i322 := $load.i24($M.5, $p321);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $i323 := $and.i24($i322, $sub.i24(0, 262144));
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    $i324 := $or.i24($i323, 468);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p321, $i324);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p325, 0);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.6, $p326);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i64($i327);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $i329 := $and.i64($i328, 1);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i330 := ldv__builtin_expect($i329, 0);
    call {:si_unique_call 2492} {:cexpr "tmp___14"} boogie_si_record_i64($i330);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    $p336 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p336, 0);
    $p338 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p338, 0);
    $p340 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p340, 0);
    $p342 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p342, 10);
    $p344 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p344, 1);
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb76:
    assume $i331 == 1;
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.0, $p332);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} vslice_dummy_var_387 := __dynamic_netdev_dbg.ref.ref.ref($p16, $p333, .str.70);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb33:
    assume $i106 == 1;
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p287, .str);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p288, .str.60);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p289, .str.46);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p290, .str.69);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p291);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $i293 := $load.i24($M.5, $p292);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $i294 := $and.i24($i293, $sub.i24(0, 262144));
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $i295 := $or.i24($i294, 461);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p292, $i295);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p296, 0);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.6, $p297);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i64($i298);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i300 := $and.i64($i299, 1);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $i301 := ldv__builtin_expect($i300, 0);
    call {:si_unique_call 2490} {:cexpr "tmp___12"} boogie_si_record_i64($i301);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    $i302 := $ne.i64($i301, 0);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $p307 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p307, 0);
    $p309 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p309, 0);
    $p311 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p311, 0);
    $p313 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p313, 10);
    $p315 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p315, 0);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb73:
    assume $i302 == 1;
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} vslice_dummy_var_386 := __dynamic_netdev_dbg.ref.ref.ref($p15, $p304, .str.69);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb31:
    assume $i105 == 1;
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p239, .str);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p240, .str.60);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p241, .str.46);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p242, .str.67);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p243);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i245 := $load.i24($M.5, $p244);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $i246 := $and.i24($i245, $sub.i24(0, 262144));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $i247 := $or.i24($i246, 451);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p244, $i247);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p248, 0);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.6, $p249);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i64($i250);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $i252 := $and.i64($i251, 1);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $i253 := ldv__builtin_expect($i252, 0);
    call {:si_unique_call 2488} {:cexpr "tmp___9"} boogie_si_record_i64($i253);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $i254 := $ne.i64($i253, 0);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p258, .str);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p259, .str.60);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p260, .str.46);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p261, .str.68);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $i264 := $load.i24($M.5, $p263);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $i265 := $and.i24($i264, $sub.i24(0, 262144));
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $i266 := $or.i24($i265, 453);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p263, $i266);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p267, 0);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.6, $p268);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i64($i269);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $i271 := $and.i64($i270, 1);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $i272 := ldv__builtin_expect($i271, 0);
    call {:si_unique_call 2510} {:cexpr "tmp___10"} boogie_si_record_i64($i272);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i272, 0);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    $p278 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p278, 1);
    $p280 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p280, 1);
    $p282 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p282, 3);
    $p284 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p284, 10);
    $p286 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p286, 0);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb70:
    assume $i273 == 1;
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} vslice_dummy_var_385 := __dynamic_netdev_dbg.ref.ref.ref($p14, $p275, .str.68);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i254 == 1;
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} vslice_dummy_var_384 := __dynamic_netdev_dbg.ref.ref.ref($p13, $p256, .str.67);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb29:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i95, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i95, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb22;

  $bb41:
    assume $i110 == 1;
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p191, .str);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p192, .str.60);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p193, .str.46);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p194, .str.65);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $i197 := $load.i24($M.5, $p196);
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $i198 := $and.i24($i197, $sub.i24(0, 262144));
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $i199 := $or.i24($i198, 439);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p196, $i199);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p200, 0);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.6, $p201);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i64($i202);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $i204 := $and.i64($i203, 1);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $i205 := ldv__builtin_expect($i204, 0);
    call {:si_unique_call 2496} {:cexpr "tmp___6"} boogie_si_record_i64($i205);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p210, .str);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p211, .str.60);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p212, .str.46);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p213, .str.66);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $i216 := $load.i24($M.5, $p215);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $i217 := $and.i24($i216, $sub.i24(0, 262144));
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $i218 := $or.i24($i217, 441);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p215, $i218);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p219, 0);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.6, $p220);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i64($i221);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $i223 := $and.i64($i222, 1);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $i224 := ldv__builtin_expect($i223, 0);
    call {:si_unique_call 2506} {:cexpr "tmp___7"} boogie_si_record_i64($i224);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $i225 := $ne.i64($i224, 0);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    $p230 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p230, 1);
    $p232 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, 1);
    $p234 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p234, 42);
    $p236 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p236, 10);
    $p238 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p238, 1);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb64:
    assume $i225 == 1;
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} vslice_dummy_var_383 := __dynamic_netdev_dbg.ref.ref.ref($p12, $p227, .str.66);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i206 == 1;
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} vslice_dummy_var_382 := __dynamic_netdev_dbg.ref.ref.ref($p11, $p208, .str.65);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb39:
    assume $i109 == 1;
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p143, .str);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p144, .str.60);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p145, .str.46);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p146, .str.63);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $i149 := $load.i24($M.5, $p148);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i150 := $and.i24($i149, $sub.i24(0, 262144));
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $i151 := $or.i24($i150, 428);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p148, $i151);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p152, 0);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.6, $p153);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i64($i154);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i156 := $and.i64($i155, 1);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $i157 := ldv__builtin_expect($i156, 0);
    call {:si_unique_call 2494} {:cexpr "tmp___3"} boogie_si_record_i64($i157);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p162, .str);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p163, .str.60);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p164, .str.46);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p165, .str.64);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $i168 := $load.i24($M.5, $p167);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $i169 := $and.i24($i168, $sub.i24(0, 262144));
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $i170 := $or.i24($i169, 430);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p167, $i170);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p171, 0);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.6, $p172);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i64($i173);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $i175 := $and.i64($i174, 1);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i176 := ldv__builtin_expect($i175, 0);
    call {:si_unique_call 2502} {:cexpr "tmp___4"} boogie_si_record_i64($i176);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    $p182 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p182, 1);
    $p184 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p184, 1);
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, 5);
    $p188 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p188, 10);
    $p190 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p190, 0);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb58:
    assume $i177 == 1;
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} vslice_dummy_var_381 := __dynamic_netdev_dbg.ref.ref.ref($p10, $p179, .str.64);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i158 == 1;
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} vslice_dummy_var_380 := __dynamic_netdev_dbg.ref.ref.ref($p9, $p160, .str.63);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb37:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i95, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb22;

  $bb43:
    assume $i111 == 1;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(7, 1));
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 1);
    $p115 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(20, 1));
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 1);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p1);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i117 == 1);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p2);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    $p140 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(22, 1));
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, 10);
    $p142 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p142, 0);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p120, .str);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p121, .str.60);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p122, .str.46);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p123, .str.62);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.5, $p125);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 422);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p125, $i128);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p129, 0);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.6, $p130);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 2498} {:cexpr "tmp___2"} boogie_si_record_i64($i134);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i135 == 1;
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} vslice_dummy_var_379 := __dynamic_netdev_dbg.ref.ref.ref($p8, $p137, .str.62);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb46;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, .str);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p64, .str.60);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p65, .str.46);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p66, .str.61);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.5, $p68);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 407);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p68, $i71);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p72, 0);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.6, $p73);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 2474} {:cexpr "tmp"} boogie_si_record_i64($i77);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.46, $p82);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    $p86 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(360, 1)), $mul.ref(124, 1)), $mul.ref(16, 1));
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, $i84);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i78 == 1;
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} vslice_dummy_var_378 := __dynamic_netdev_dbg.ref.ref.ref($p6, $p80, .str.61);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb2;

  $bb102_dummy:
    assume false;
    return;

  $bb102_last:
    assume {:verifier.code 0} true;
    goto $bb102_dummy;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 645006);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 646038);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    return;
}



const mii_link_ok: ref;

axiom mii_link_ok == $sub.ref(0, 647070);

procedure mii_link_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_link_ok($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2526} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const round_jiffies: ref;

axiom round_jiffies == $sub.ref(0, 648102);

procedure round_jiffies($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation round_jiffies($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2528} {:cexpr "round_jiffies:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2529} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2530} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mod_timer_72: ref;

axiom ldv_mod_timer_72 == $sub.ref(0, 649134);

procedure ldv_mod_timer_72($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation ldv_mod_timer_72($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} {:cexpr "ldv_mod_timer_72:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 2533} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 650166);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 651198);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} netif_tx_wake_queue($p1);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_73: ref;

axiom ldv_mod_timer_73 == $sub.ref(0, 652230);

procedure ldv_mod_timer_73($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation ldv_mod_timer_73($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} {:cexpr "ldv_mod_timer_73:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 2539} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} activate_pending_timer_2($p0, $i1, 1);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 653262);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $i2 := test_and_clear_bit(0, $p1);
    call {:si_unique_call 2542} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} __netif_schedule($p5);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 654294);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 2545} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 2546} devirtbounce.9(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.30, $p2);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 655326);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_mdio_read: ref;

axiom pch_gbe_mdio_read == $sub.ref(0, 656358);

procedure pch_gbe_mdio_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mdio_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} {:cexpr "pch_gbe_mdio_read:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 2548} {:cexpr "pch_gbe_mdio_read:arg:reg"} boogie_si_record_i32($i2);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} $p3 := netdev_priv($p0);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} $i6 := pch_gbe_mac_ctrl_miim($p5, $i1, 0, $i2, 0);
    call {:si_unique_call 2551} {:cexpr "tmp___0"} boogie_si_record_i16($i6);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pch_gbe_mdio_write: ref;

axiom pch_gbe_mdio_write == $sub.ref(0, 657390);

procedure pch_gbe_mdio_write($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_mdio_write($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var vslice_dummy_var_395: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} {:cexpr "pch_gbe_mdio_write:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 2553} {:cexpr "pch_gbe_mdio_write:arg:reg"} boogie_si_record_i32($i2);
    call {:si_unique_call 2554} {:cexpr "pch_gbe_mdio_write:arg:data"} boogie_si_record_i32($i3);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} $p4 := netdev_priv($p0);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i3);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} vslice_dummy_var_395 := pch_gbe_mac_ctrl_miim($p6, $i1, 67108864, $i2, $i9);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    return;
}



const mii_check_gmii_support: ref;

axiom mii_check_gmii_support == $sub.ref(0, 658422);

procedure mii_check_gmii_support($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_check_gmii_support($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2557} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_gbe_hal_setup_init_funcs: ref;

axiom pch_gbe_hal_setup_init_funcs == $sub.ref(0, 659454);

procedure pch_gbe_hal_setup_init_funcs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_hal_setup_init_funcs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var vslice_dummy_var_396: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} pch_gbe_plat_init_function_pointers($p0);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 360), 960)), $mul.ref(152, 1));
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} vslice_dummy_var_396 := netdev_err.ref.ref($p8, .str.18);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 38);
    goto $bb3;
}



const pch_gbe_alloc_queues: ref;

axiom pch_gbe_alloc_queues == $sub.ref(0, 660486);

procedure pch_gbe_alloc_queues($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_alloc_queues($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $p4 := devm_kzalloc($p3, 112, 208);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p4);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(896, 1));
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $p15 := devm_kzalloc($p14, 64, 208);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p15);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(904, 1));
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const pch_gbe_init_stats: ref;

axiom pch_gbe_init_stats == $sub.ref(0, 661518);

procedure pch_gbe_init_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_init_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var cmdloc_dummy_var_193: [ref]i8;
  var cmdloc_dummy_var_194: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 960)), $mul.ref(512, 1));
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_193 := $M.0;
    call {:si_unique_call 2563} cmdloc_dummy_var_194 := $memset.i8(cmdloc_dummy_var_193, $p2, 0, 100, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_194;
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 662550);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2565} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 663582);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2568} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $p3 := external_alloc();
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pch_gbe_plat_init_function_pointers: ref;

axiom pch_gbe_plat_init_function_pointers == $sub.ref(0, 664614);

procedure pch_gbe_plat_init_function_pointers($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pch_gbe_plat_init_function_pointers($p0: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(124, 1)), $mul.ref(12, 1));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 10);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, pch_gbe_ops);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_clean_rx: ref;

axiom pch_gbe_clean_rx == $sub.ref(0, 665646);

procedure pch_gbe_clean_rx($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i1);



const pch_gbe_clean_tx: ref;

axiom pch_gbe_clean_tx == $sub.ref(0, 666678);

procedure pch_gbe_clean_tx($p0: ref, $p1: ref) returns ($r: i1);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 667710);

procedure napi_complete($p0: ref);



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 668742);

procedure skb_trim($p0: ref, $i1: i32);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 669774);

procedure spin_lock($p0: ref);



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 670806);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 671838);

procedure spin_unlock($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 672870);

procedure _raw_spin_unlock($p0: ref);



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 673902);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 674934);

procedure _raw_spin_lock($p0: ref);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 675966);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const pch_rx_timestamp: ref;

axiom pch_rx_timestamp == $sub.ref(0, 676998);

procedure pch_rx_timestamp($p0: ref, $p1: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 678030);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const napi_gro_receive: ref;

axiom napi_gro_receive == $sub.ref(0, 679062);

procedure napi_gro_receive($p0: ref, $p1: ref) returns ($r: i32);



const pch_src_uuid_lo_read: ref;

axiom pch_src_uuid_lo_read == $sub.ref(0, 680094);

procedure pch_src_uuid_lo_read($p0: ref) returns ($r: i32);



const pch_src_uuid_hi_read: ref;

axiom pch_src_uuid_hi_read == $sub.ref(0, 681126);

procedure pch_src_uuid_hi_read($p0: ref) returns ($r: i32);



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 682158);

procedure __fswab16($i0: i16) returns ($r: i16);



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 683190);

procedure __fswab32($i0: i32) returns ($r: i32);



const pch_ptp_match: ref;

axiom pch_ptp_match == $sub.ref(0, 684222);

procedure pch_ptp_match($p0: ref, $i1: i16, $i2: i32, $i3: i16) returns ($r: i32);



const pch_rx_snap_read: ref;

axiom pch_rx_snap_read == $sub.ref(0, 685254);

procedure pch_rx_snap_read($p0: ref) returns ($r: i64);



const skb_hwtstamps: ref;

axiom skb_hwtstamps == $sub.ref(0, 686286);

procedure skb_hwtstamps($p0: ref) returns ($r: ref);



const ptp_classify_raw: ref;

axiom ptp_classify_raw == $sub.ref(0, 687318);

procedure ptp_classify_raw($p0: ref) returns ($r: i32);



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 688350);

procedure __arch_swab32($i0: i32) returns ($r: i32);



const pci_get_domain_bus_and_slot: ref;

axiom pci_get_domain_bus_and_slot == $sub.ref(0, 689382);

procedure pci_get_domain_bus_and_slot($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_domain_bus_and_slot($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} {:cexpr "pci_get_domain_bus_and_slot:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2571} {:cexpr "pci_get_domain_bus_and_slot:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2572} {:cexpr "pci_get_domain_bus_and_slot:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} $p3 := external_alloc();
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 690414);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 691446);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 2576} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 692478);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2577} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2578} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2579} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 693510);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2580} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2581} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pch_gbe_minnow_platform_init: ref;

axiom pch_gbe_minnow_platform_init == $sub.ref(0, 694542);

procedure pch_gbe_minnow_platform_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_gbe_minnow_platform_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var vslice_dummy_var_397: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} $i2 := devm_gpio_request_one($p1, 13, 34, .str.158);
    call {:si_unique_call 2584} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} gpio_set_value(13, 0);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} usleep_range(1250, 1500);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} gpio_set_value(13, 1);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} usleep_range(1250, 1500);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} vslice_dummy_var_397 := dev_err.ref.ref.i32($p4, .str.159, 13);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const devm_gpio_request_one: ref;

axiom devm_gpio_request_one == $sub.ref(0, 695574);

procedure devm_gpio_request_one($p0: ref, $i1: i32, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_gpio_request_one($p0: ref, $i1: i32, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2590} {:cexpr "devm_gpio_request_one:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2591} {:cexpr "devm_gpio_request_one:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2592} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gpio_set_value: ref;

axiom gpio_set_value == $sub.ref(0, 696606);

procedure gpio_set_value($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation gpio_set_value($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} {:cexpr "gpio_set_value:arg:gpio"} boogie_si_record_i32($i0);
    call {:si_unique_call 2595} {:cexpr "gpio_set_value:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} __gpio_set_value($i0, $i1);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 697638);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2598} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    return;
}



const __gpio_set_value: ref;

axiom __gpio_set_value == $sub.ref(0, 698670);

procedure __gpio_set_value($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation __gpio_set_value($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} {:cexpr "__gpio_set_value:arg:gpio"} boogie_si_record_i32($i0);
    call {:si_unique_call 2600} {:cexpr "__gpio_set_value:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_io_error_detected: ref;

axiom pch_gbe_io_error_detected == $sub.ref(0, 699702);

procedure pch_gbe_io_error_detected($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17, $M.19, $M.21, $M.41, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_io_error_detected($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} {:cexpr "pch_gbe_io_error_detected:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} $p4 := netdev_priv($p3);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} netif_device_detach($p3);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i6 := netif_running($p3);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2606} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} pci_disable_device($p0);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $r := 3;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} pch_gbe_down($p5);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_gbe_io_slot_reset: ref;

axiom pch_gbe_io_slot_reset == $sub.ref(0, 700734);

procedure pch_gbe_io_slot_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_io_slot_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var vslice_dummy_var_398: i32;
  var vslice_dummy_var_399: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} $p3 := netdev_priv($p2);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $i6 := pci_enable_device($p0);
    call {:si_unique_call 2612} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} pci_set_master($p0);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} vslice_dummy_var_399 := pci_enable_wake($p0, 0, 0);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} pch_gbe_hal_power_up_phy($p5);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} pch_gbe_reset($p4);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} pch_gbe_mac_set_wol_event($p5, 0);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $i9 := 5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} vslice_dummy_var_398 := netdev_err.ref.ref($p2, .str.223);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;
}



const pch_gbe_io_resume: ref;

axiom pch_gbe_io_resume == $sub.ref(0, 701766);

procedure pch_gbe_io_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24, $M.41;



implementation pch_gbe_io_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var vslice_dummy_var_400: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $p4 := netdev_priv($p3);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i6 := netif_running($p3);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2623} {:cexpr "tmp___3"} boogie_si_record_i8($i7);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} netif_device_attach($p3);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} $i9 := pch_gbe_up($p5);
    call {:si_unique_call 2625} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.221);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.21);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.222);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 2576);
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 2627} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} vslice_dummy_var_400 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p3, .str.222);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 702798);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 703830);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2630} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2631} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 704862);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} {:cexpr "pci_enable_wake:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2633} {:cexpr "pci_enable_wake:arg:enable"} boogie_si_record_i1($i2);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $i5 := __pci_enable_wake($p0, $i1, 0, $i4);
    call {:si_unique_call 2635} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 705894);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2636} {:cexpr "__pci_enable_wake:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2637} {:cexpr "__pci_enable_wake:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 2638} {:cexpr "__pci_enable_wake:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2639} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pch_gbe_suspend: ref;

axiom pch_gbe_suspend == $sub.ref(0, 706926);

procedure pch_gbe_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.41, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17, $M.19, $M.21, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation pch_gbe_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $i3 := __pch_gbe_suspend($p2);
    call {:si_unique_call 2642} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_gbe_resume: ref;

axiom pch_gbe_resume == $sub.ref(0, 707958);

procedure pch_gbe_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation pch_gbe_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i11: i32;
  var vslice_dummy_var_401: i32;
  var vslice_dummy_var_402: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $p5 := netdev_priv($p4);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} $i8 := pci_enable_device($p2);
    call {:si_unique_call 2646} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} pci_set_master($p2);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} pch_gbe_hal_power_up_phy($p7);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} pch_gbe_reset($p6);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} pch_gbe_mac_set_wol_event($p7, 0);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $i12 := netif_running($p4);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 2653} {:cexpr "tmp___2"} boogie_si_record_i8($i13);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} netif_device_attach($p4);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} vslice_dummy_var_402 := pch_gbe_up($p6);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} vslice_dummy_var_401 := netdev_err.ref.ref($p4, .str.228);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 708990);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2656} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_ethtool_ops_9: ref;

axiom ldv_initialize_ethtool_ops_9 == $sub.ref(0, 710022);

procedure ldv_initialize_ethtool_ops_9();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.64, $M.65, $M.66, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_9()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} $p0 := ldv_zalloc(20);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} $p2 := ldv_zalloc(44);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    $M.63 := $p2;
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} $p4 := ldv_zalloc(36);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $M.64 := $p4;
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} $p6 := ldv_zalloc(16);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $M.65 := $p6;
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} $p8 := ldv_zalloc(3264);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $M.66 := $p8;
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 711054);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.0, $M.67, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var vslice_dummy_var_403: i32;
  var vslice_dummy_var_404: i32;
  var vslice_dummy_var_405: i32;
  var vslice_dummy_var_406: i32;
  var vslice_dummy_var_407: i32;
  var vslice_dummy_var_408: i32;
  var vslice_dummy_var_409: i32;
  var vslice_dummy_var_410: i32;
  var vslice_dummy_var_411: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $p0 := ldv_zalloc(196);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2663} $i2 := __VERIFIER_nondet_u32();
    call {:si_unique_call 2664} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i2);
    call {:si_unique_call 2665} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $p3 := ldv_zalloc(12);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2667} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2668} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 2669} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} $p6 := ldv_zalloc(8);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} $p8 := ldv_zalloc(8);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} $p10 := ldv_zalloc(1);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} $p11 := ldv_zalloc(1);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2674} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2676} {:cexpr "tmp___7"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} ldv_stop();
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i91 := $M.67;
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb83:
    assume $i92 == 1;
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    $p93 := $M.66;
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} vslice_dummy_var_411 := ethtool_op_get_link($p93);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2708} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $i86 := $M.67;
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb80:
    assume $i87 == 1;
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p88 := $M.66;
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $p89 := $M.64;
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} vslice_dummy_var_410 := pch_gbe_set_ringparam($p88, $p89);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2706} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i12, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $i82 := $M.67;
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb77:
    assume $i83 == 1;
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $p84 := $M.66;
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_409 := pch_gbe_get_regs_len($p84);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2704} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $i78 := $M.67;
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb74:
    assume $i79 == 1;
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $p80 := $M.66;
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $p81 := $M.62;
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} pch_gbe_get_wol($p80, $p81);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2702} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb4:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i12, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i12, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i74 := $M.67;
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb71:
    assume $i75 == 1;
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $p76 := $M.66;
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} vslice_dummy_var_408 := pch_gbe_nway_reset($p76);
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2700} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i71 := $M.67;
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb68:
    assume $i72 == 1;
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $p73 := $M.66;
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} pch_gbe_get_strings($p73, $i2, $p11);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2698} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb15:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i12, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $i66 := $M.67;
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb65:
    assume $i67 == 1;
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    $p68 := $M.66;
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $p69 := $M.63;
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} vslice_dummy_var_407 := pch_gbe_set_settings($p68, $p69);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2696} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $i61 := $M.67;
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb62:
    assume $i62 == 1;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $p63 := $M.66;
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $p64 := $M.62;
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} vslice_dummy_var_406 := pch_gbe_set_wol($p63, $p64);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2694} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i12, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i12, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i24 == 1);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i56 := $M.67;
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb59:
    assume $i57 == 1;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $p58 := $M.66;
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $p59 := $M.63;
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} vslice_dummy_var_405 := pch_gbe_get_settings($p58, $p59);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2692} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $i52 := $M.67;
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb56:
    assume $i53 == 1;
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $p54 := $M.66;
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_404 := pch_gbe_get_sset_count($p54, $i5);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2690} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb23:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i25 == 1);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i48 := $M.67;
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb53:
    assume $i49 == 1;
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $p50 := $M.66;
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $p51 := $M.65;
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} pch_gbe_get_pauseparam($p50, $p51);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2688} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb27:
    assume $i25 == 1;
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $i45 := $M.67;
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $p47 := $M.66;
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} pch_gbe_get_regs($p47, $p4, $p10);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2686} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb21:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i27 == 1);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $i41 := $M.67;
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb47:
    assume $i42 == 1;
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    $p43 := $M.66;
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    $p44 := $M.64;
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} pch_gbe_get_ringparam($p43, $p44);
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2684} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb31:
    assume $i27 == 1;
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $i38 := $M.67;
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44:
    assume $i39 == 1;
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $p40 := $M.66;
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} pch_gbe_get_ethtool_stats($p40, $p9, $p7);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2682} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb29:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i28 == 1);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $i33 := $M.67;
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41:
    assume $i34 == 1;
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $p35 := $M.66;
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $p36 := $M.65;
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} vslice_dummy_var_403 := pch_gbe_set_pauseparam($p35, $p36);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2680} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb35:
    assume $i29 == 1;
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $i30 := $M.67;
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i31 == 1;
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $p32 := $M.66;
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} pch_gbe_get_drvinfo($p32, $p1);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2678} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    goto $bb39;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 712086);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 713118);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_pch_gbe_functions_8: ref;

axiom ldv_initialize_pch_gbe_functions_8 == $sub.ref(0, 714150);

procedure ldv_initialize_pch_gbe_functions_8();
  free requires assertsPassed;
  modifies $M.68, $M.0, $CurrAddr;



implementation ldv_initialize_pch_gbe_functions_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $p0 := ldv_zalloc(152);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 715182);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.0, $M.69, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.70, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i83: i32;
  var vslice_dummy_var_412: i32;
  var vslice_dummy_var_413: i32;
  var vslice_dummy_var_414: i32;
  var vslice_dummy_var_415: i32;
  var vslice_dummy_var_416: i32;
  var vslice_dummy_var_417: i32;
  var vslice_dummy_var_418: i32;
  var vslice_dummy_var_419: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2711} $i0 := __VERIFIER_nondet_u16();
    call {:si_unique_call 2712} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i0);
    call {:si_unique_call 2713} {:cexpr "tmp"} boogie_si_record_i16($i0);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2714} $i1 := __VERIFIER_nondet_u32();
    call {:si_unique_call 2715} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i1);
    call {:si_unique_call 2716} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2717} $i2 := __VERIFIER_nondet_u32();
    call {:si_unique_call 2718} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i2);
    call {:si_unique_call 2719} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} $p3 := ldv_zalloc(2);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2721} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 2723} {:cexpr "tmp___3"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i5, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} ldv_stop();
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    $i79 := $M.69;
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb79:
    assume $i80 == 1;
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} vslice_dummy_var_419 := ldv_probe_8();
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2760} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i82 := $M.70;
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 1);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $M.70 := $i83;
    call {:si_unique_call 2761} {:cexpr "ref_cnt"} boogie_si_record_i32($i83);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $i74 := $M.69;
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 2);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb76:
    assume $i75 == 1;
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} vslice_dummy_var_418 := ldv_release_8();
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2757} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $i77 := $M.70;
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i77, 1);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $M.70 := $i78;
    call {:si_unique_call 2758} {:cexpr "ref_cnt"} boogie_si_record_i32($i78);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i68 := $M.69;
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i71 := $M.69;
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 2);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb73:
    assume $i72 == 1;
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $p73 := $M.68;
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} pch_gbe_phy_power_down($p73);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2755} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i69 == 1;
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $p70 := $M.68;
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} pch_gbe_phy_power_down($p70);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2753} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i5, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $i62 := $M.69;
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i65 := $M.69;
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 2);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb67:
    assume $i66 == 1;
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    $p67 := $M.68;
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} pch_gbe_phy_sw_reset($p67);
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2751} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i63 == 1;
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $p64 := $M.68;
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} pch_gbe_phy_sw_reset($p64);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2749} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $i56 := $M.69;
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i59 := $M.69;
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 2);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb61:
    assume $i60 == 1;
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $p61 := $M.68;
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} pch_gbe_phy_hw_reset($p61);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2747} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i57 == 1;
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p58 := $M.68;
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} pch_gbe_phy_hw_reset($p58);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2745} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $i50 := $M.69;
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i53 := $M.69;
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55:
    assume $i54 == 1;
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $p55 := $M.68;
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} pch_gbe_phy_power_up($p55);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2743} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i51 == 1;
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $p52 := $M.68;
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} pch_gbe_phy_power_up($p52);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2741} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i15 == 1);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $i42 := $M.69;
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i46 := $M.69;
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb49:
    assume $i47 == 1;
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $p48 := $M.68;
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} vslice_dummy_var_417 := pch_gbe_plat_init_hw($p48);
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2739} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i43 == 1;
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $p44 := $M.68;
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} vslice_dummy_var_416 := pch_gbe_plat_init_hw($p44);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2737} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $i36 := $M.69;
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i39 := $M.69;
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb43:
    assume $i40 == 1;
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    $p41 := $M.68;
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} pch_gbe_plat_get_bus_info($p41);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2735} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i37 == 1;
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $p38 := $M.68;
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} pch_gbe_plat_get_bus_info($p38);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2733} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $i28 := $M.69;
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i32 := $M.69;
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume $i33 == 1;
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $p34 := $M.68;
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} vslice_dummy_var_415 := pch_gbe_mac_read_mac_addr($p34);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2731} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i29 == 1;
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $p30 := $M.68;
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} vslice_dummy_var_414 := pch_gbe_mac_read_mac_addr($p30);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2729} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $i22 := $M.69;
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i23 == 1;
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    $p24 := $M.68;
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i0);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} vslice_dummy_var_413 := pch_gbe_phy_write_reg_miic($p24, $i2, $i26);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2727} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb25:
    assume $i17 == 1;
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    $i18 := $M.69;
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i19 == 1;
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $p20 := $M.68;
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} vslice_dummy_var_412 := pch_gbe_phy_read_reg_miic($p20, $i1, $p4);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 2725} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    goto $bb29;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 716214);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_release_8: ref;

axiom ldv_release_8 == $sub.ref(0, 717246);

procedure ldv_release_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2763} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_8: ref;

axiom ldv_probe_8 == $sub.ref(0, 718278);

procedure ldv_probe_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2765} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_pci_error_handlers_4: ref;

axiom ldv_initialize_pci_error_handlers_4 == $sub.ref(0, 719310);

procedure ldv_initialize_pci_error_handlers_4();
  free requires assertsPassed;
  modifies $M.71, $M.0, $CurrAddr;



implementation ldv_initialize_pci_error_handlers_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} $p0 := ldv_zalloc(2976);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 720342);

procedure choose_timer_2();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $M.19, $M.21, $CurrAddr;



implementation choose_timer_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2768} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2769} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2770} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} ldv_stop();
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $i18 := $M.22;
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 2777} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(2);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i20 := $M.22;
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $p21 := $M.21;
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} ldv_timer_2($i20, $p21);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $i14 := $M.20;
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 2775} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(2);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $p17 := $M.19;
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} ldv_timer_2($i16, $p17);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 2773} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(2);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $i12 := $M.18;
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $p13 := $M.17;
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} ldv_timer_2($i12, $p13);
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 2771} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(2);
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $p9 := $M.15;
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} ldv_timer_2($i8, $p9);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_2: ref;

axiom ldv_timer_2 == $sub.ref(0, 721374);

procedure ldv_timer_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation ldv_timer_2($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} {:cexpr "ldv_timer_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} pch_gbe_watchdog($i3);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_5: ref;

axiom ldv_dev_pm_ops_5 == $sub.ref(0, 722406);

procedure ldv_dev_pm_ops_5();
  free requires assertsPassed;
  modifies $M.73, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} $p0 := ldv_zalloc(1416);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_pci_driver_3: ref;

axiom ldv_initialize_pci_driver_3 == $sub.ref(0, 723438);

procedure ldv_initialize_pci_driver_3();
  free requires assertsPassed;
  modifies $M.74, $M.0, $CurrAddr;



implementation ldv_initialize_pci_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} $p0 := ldv_zalloc(2976);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $M.74 := $p0;
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 724470);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 2787} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2788} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2789} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 2790} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} ldv_stop();
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} $i7 := pch_gbe_intr($i1, $p2);
    call {:si_unique_call 2793} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 725502);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $CurrAddr;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2796} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2798} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} ldv_stop();
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $i18 := $M.13;
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $i19 := $M.14;
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $p20 := $M.29;
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $M.7 := $i21;
    call {:si_unique_call 2802} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i14 := $M.11;
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $i15 := $M.12;
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $p16 := $M.28;
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $M.7 := $i17;
    call {:si_unique_call 2800} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $i10 := $M.9;
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p12 := $M.27;
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $M.7 := $i13;
    call {:si_unique_call 2804} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $p8 := $M.26;
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $M.7 := $i9;
    call {:si_unique_call 2806} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 726534);

procedure timer_init_2();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 2808} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 2809} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 2810} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 2811} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 727566);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.75, $M.76, $M.77, $M.78, $M.41, $M.67, $M.16, $M.18, $M.20, $M.22, $M.79, $M.69, $M.80, $M.81, $M.70, $M.82, $M.83, $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.84, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.85, $M.86, $M.7, $M.87, $M.73, $M.62, $M.63, $M.64, $M.65, $M.66, $M.74, $M.71, $M.68, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.13, $M.11, $M.9, $M.15, $M.17, $M.19, $M.21, $M.55, $M.8, $M.10, $M.12, $M.14, $M.26, $M.27, $M.28, $M.29, $M.24, $M.23, $M.25, $M.107, $M.118, $M.61, $M.56, $M.57, $M.60, $M.59, $M.54, $M.53, $M.52, $M.50, $M.49, $M.58, $M.31, $CurrAddr, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.51, $M.32, assertsPassed, $M.33, $M.34;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i64;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i64;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i64;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i32;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i239: i32;
  var $i240: i1;
  var $i242: i32;
  var $i243: i1;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i1;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i1;
  var $i278: i1;
  var $i279: i1;
  var $i280: i1;
  var $i281: i1;
  var $i282: i1;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i1;
  var $i290: i1;
  var $i291: i1;
  var $i292: i1;
  var $i293: i1;
  var $i294: i1;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $i313: i32;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i1;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i32;
  var $i353: i1;
  var $i354: i32;
  var $i355: i1;
  var $i356: i32;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $i369: i32;
  var $i370: i32;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i32;
  var $i375: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $i389: i32;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i32;
  var $i395: i1;
  var $i396: i32;
  var $i397: i1;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i404: i32;
  var $i405: i32;
  var cmdloc_dummy_var_195: [ref]i8;
  var cmdloc_dummy_var_196: [ref]i8;
  var cmdloc_dummy_var_197: [ref]i8;
  var cmdloc_dummy_var_198: [ref]i8;
  var vslice_dummy_var_420: i32;
  var vslice_dummy_var_421: i32;
  var vslice_dummy_var_422: i32;
  var vslice_dummy_var_423: i32;
  var vslice_dummy_var_424: ref;
  var vslice_dummy_var_425: ref;
  var vslice_dummy_var_426: ref;
  var vslice_dummy_var_427: i32;
  var vslice_dummy_var_428: i32;
  var vslice_dummy_var_429: i32;
  var vslice_dummy_var_430: i32;
  var vslice_dummy_var_431: i32;
  var vslice_dummy_var_432: i32;
  var vslice_dummy_var_433: i32;
  var vslice_dummy_var_434: i32;
  var vslice_dummy_var_435: i32;
  var vslice_dummy_var_436: i32;
  var vslice_dummy_var_437: i32;
  var vslice_dummy_var_438: i32;
  var vslice_dummy_var_439: i32;
  var vslice_dummy_var_440: i32;
  var vslice_dummy_var_441: i32;
  var vslice_dummy_var_442: i32;
  var vslice_dummy_var_443: i32;
  var vslice_dummy_var_444: i32;
  var vslice_dummy_var_445: i32;
  var vslice_dummy_var_446: i32;
  var vslice_dummy_var_447: i32;
  var vslice_dummy_var_448: i32;

  $bb0:
    call {:si_unique_call 2812} $initialize();
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} $p2 := ldv_zalloc(2976);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} $p4 := ldv_zalloc(32);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} $p6 := ldv_zalloc(40);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2819} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 2820} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 2821} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} $p9 := ldv_zalloc(232);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} $p11 := ldv_zalloc(1);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2824} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2825} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2826} {:cexpr "tmp___5"} boogie_si_record_i32($i12);
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} ldv_initialize();
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_195 := $M.75;
    call {:si_unique_call 2828} cmdloc_dummy_var_196 := $memset.i8(cmdloc_dummy_var_195, $p13, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.75 := cmdloc_dummy_var_196;
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_197 := $M.76;
    call {:si_unique_call 2829} cmdloc_dummy_var_198 := $memset.i8(cmdloc_dummy_var_197, $p14, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.76 := cmdloc_dummy_var_198;
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2830} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 2831} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 2832} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 2833} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} timer_init_2();
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2835} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 2836} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 2837} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 2838} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 2839} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2840} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 2841} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i83, $i84, $p85, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $p101, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i120, $i121, $p122, $i123, $i124, $p125, $i126, $i127, $p128, $i129, $i130, $p131, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p211, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i224, $i225, $p226, $i227, $i229, $i230, $p231, $i232, $i234, $i235, $p236, $i237, $i239, $i240, $i242, $i243, $i245, $i246, $i247, $i248, $i250, $i251, $i252, $i253, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $p300, $i301, $i302, $i303, $i304, $i305, $p306, $i307, $i308, $i309, $i310, $i311, $p312, $i313, $i314, $i315, $i316, $i317, $p318, $i319, $i320, $i321, $i322, $i323, $p324, $i325, $i326, $i327, $i328, $i329, $p330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i404, $i405, vslice_dummy_var_420, vslice_dummy_var_421, vslice_dummy_var_422, vslice_dummy_var_423, vslice_dummy_var_424, vslice_dummy_var_425, vslice_dummy_var_426, vslice_dummy_var_427, vslice_dummy_var_428, vslice_dummy_var_429, vslice_dummy_var_430, vslice_dummy_var_431, vslice_dummy_var_432, vslice_dummy_var_433, vslice_dummy_var_434, vslice_dummy_var_435, vslice_dummy_var_436, vslice_dummy_var_437, vslice_dummy_var_438, vslice_dummy_var_439, vslice_dummy_var_440, vslice_dummy_var_441, vslice_dummy_var_442, vslice_dummy_var_443, vslice_dummy_var_444, vslice_dummy_var_445, vslice_dummy_var_446, vslice_dummy_var_447, vslice_dummy_var_448 := main_loop_$bb1($p0, $p1, $p3, $p5, $p7, $i8, $p10, $p11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i83, $i84, $p85, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $p101, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i120, $i121, $p122, $i123, $i124, $p125, $i126, $i127, $p128, $i129, $i130, $p131, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $i180, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p211, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i224, $i225, $p226, $i227, $i229, $i230, $p231, $i232, $i234, $i235, $p236, $i237, $i239, $i240, $i242, $i243, $i245, $i246, $i247, $i248, $i250, $i251, $i252, $i253, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $p300, $i301, $i302, $i303, $i304, $i305, $p306, $i307, $i308, $i309, $i310, $i311, $p312, $i313, $i314, $i315, $i316, $i317, $p318, $i319, $i320, $i321, $i322, $i323, $p324, $i325, $i326, $i327, $i328, $i329, $p330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i404, $i405, vslice_dummy_var_420, vslice_dummy_var_421, vslice_dummy_var_422, vslice_dummy_var_423, vslice_dummy_var_424, vslice_dummy_var_425, vslice_dummy_var_426, vslice_dummy_var_427, vslice_dummy_var_428, vslice_dummy_var_429, vslice_dummy_var_430, vslice_dummy_var_431, vslice_dummy_var_432, vslice_dummy_var_433, vslice_dummy_var_434, vslice_dummy_var_435, vslice_dummy_var_436, vslice_dummy_var_437, vslice_dummy_var_438, vslice_dummy_var_439, vslice_dummy_var_440, vslice_dummy_var_441, vslice_dummy_var_442, vslice_dummy_var_443, vslice_dummy_var_444, vslice_dummy_var_445, vslice_dummy_var_446, vslice_dummy_var_447, vslice_dummy_var_448);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i15, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i15, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} ldv_stop();
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    $i274 := $M.83;
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb293:
    assume $i275 == 1;
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2986} $i276 := __VERIFIER_nondet_int();
    call {:si_unique_call 2987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i276);
    call {:si_unique_call 2988} {:cexpr "tmp___12"} boogie_si_record_i32($i276);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i277 := $slt.i32($i276, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    $i278 := $slt.i32($i276, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    $i279 := $slt.i32($i276, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    $i280 := $slt.i32($i276, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i276, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i276, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i282 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} ldv_stop();
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb306:
    assume $i282 == 1;
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $i401 := $M.83;
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 15);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb454, $bb455;

  $bb455:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb454:
    assume $i402 == 1;
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} vslice_dummy_var_448 := ldv_complete_5();
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 3048} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    $i404 := $M.70;
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $i405 := $sub.i32($i404, 1);
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $M.70 := $i405;
    call {:si_unique_call 3049} {:cexpr "ref_cnt"} boogie_si_record_i32($i405);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb304:
    assume $i281 == 1;
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    $i396 := $M.83;
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i396, 3);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb448:
    assume $i397 == 1;
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} $i398 := ldv_suspend_noirq_5();
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $M.106 := $i398;
    call {:si_unique_call 3045} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i398);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    $i399 := $M.106;
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i399, 0);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb450:
    assume $i400 == 1;
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $M.83 := 7;
    call {:si_unique_call 3046} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(7);
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb302:
    assume $i280 == 1;
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    $i391 := $M.83;
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 8);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb442:
    assume $i392 == 1;
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} $i393 := ldv_restore_noirq_5();
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $M.105 := $i393;
    call {:si_unique_call 3042} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i393);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    $i394 := $M.105;
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 0);
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb444:
    assume $i395 == 1;
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $M.83 := 13;
    call {:si_unique_call 3043} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(13);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb300:
    assume $i279 == 1;
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i276, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i283 == 1);
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $i386 := $M.83;
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 4);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb436:
    assume $i387 == 1;
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} $i388 := ldv_poweroff_late_5();
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $M.104 := $i388;
    call {:si_unique_call 3039} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i388);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $i389 := $M.104;
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, 0);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb438:
    assume $i390 == 1;
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    $M.83 := 9;
    call {:si_unique_call 3040} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(9);
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb309:
    assume $i283 == 1;
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $i381 := $M.83;
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 4);
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb430:
    assume $i382 == 1;
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} $i383 := ldv_poweroff_noirq_5();
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    $M.103 := $i383;
    call {:si_unique_call 3036} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i383);
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $i384 := $M.103;
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 0);
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb432:
    assume $i385 == 1;
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $M.83 := 8;
    call {:si_unique_call 3037} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(8);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb298:
    assume $i278 == 1;
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i276, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i276, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i276, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i286 == 1);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    $i376 := $M.83;
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 10);
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb424:
    assume $i377 == 1;
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} $i378 := ldv_thaw_noirq_5();
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $M.102 := $i378;
    call {:si_unique_call 3033} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i378);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $i379 := $M.102;
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 0);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb426:
    assume $i380 == 1;
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $M.83 := 14;
    call {:si_unique_call 3034} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(14);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb315:
    assume $i286 == 1;
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    $i371 := $M.83;
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 5);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb418:
    assume $i372 == 1;
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} $i373 := ldv_freeze_late_5();
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $M.101 := $i373;
    call {:si_unique_call 3030} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i373);
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $i374 := $M.101;
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i374, 0);
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb420:
    assume $i375 == 1;
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $M.83 := 11;
    call {:si_unique_call 3031} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(11);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb313:
    assume $i285 == 1;
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    $i364 := $M.83;
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 1);
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb412:
    assume $i365 == 1;
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} $i366 := ldv_prepare_5();
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $M.100 := $i366;
    call {:si_unique_call 3026} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i366);
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    $i367 := $M.100;
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 0);
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb415:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb414:
    assume $i368 == 1;
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 3027} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $i369 := $M.70;
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $i370 := $add.i32($i369, 1);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $M.70 := $i370;
    call {:si_unique_call 3028} {:cexpr "ref_cnt"} boogie_si_record_i32($i370);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb311:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i287 := $slt.i32($i276, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i287 == 1);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    $i359 := $M.83;
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 5);
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb406:
    assume $i360 == 1;
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} $i361 := ldv_freeze_noirq_5();
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $M.99 := $i361;
    call {:si_unique_call 3023} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i361);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $i362 := $M.99;
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 0);
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb408:
    assume $i363 == 1;
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $M.83 := 10;
    call {:si_unique_call 3024} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(10);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb317:
    assume $i287 == 1;
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    $i354 := $M.83;
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 7);
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb400:
    assume $i355 == 1;
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} $i356 := ldv_resume_noirq_5();
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $M.98 := $i356;
    call {:si_unique_call 3020} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i356);
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $i357 := $M.98;
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 0);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb402:
    assume $i358 == 1;
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $M.83 := 12;
    call {:si_unique_call 3021} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(12);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb296:
    assume $i277 == 1;
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i276, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289 := $slt.i32($i276, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    $i290 := $slt.i32($i276, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    $i291 := $slt.i32($i276, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i291 == 1);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    $i349 := $M.83;
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 11);
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb394:
    assume $i350 == 1;
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} $i351 := ldv_thaw_early_5();
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $M.97 := $i351;
    call {:si_unique_call 3017} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i351);
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $i352 := $M.97;
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 0);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb396:
    assume $i353 == 1;
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $M.83 := 14;
    call {:si_unique_call 3018} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(14);
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb325:
    assume $i291 == 1;
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    $i344 := $M.83;
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 6);
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb388:
    assume $i345 == 1;
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} $i346 := ldv_resume_early_5();
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $M.96 := $i346;
    call {:si_unique_call 3014} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i346);
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    $i347 := $M.96;
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb390:
    assume $i348 == 1;
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $M.83 := 12;
    call {:si_unique_call 3015} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(12);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb323:
    assume $i290 == 1;
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    $i339 := $M.83;
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 9);
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb382:
    assume $i340 == 1;
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} $i341 := ldv_restore_early_5();
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $M.95 := $i341;
    call {:si_unique_call 3011} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i341);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    $i342 := $M.95;
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 0);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb384:
    assume $i343 == 1;
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $M.83 := 13;
    call {:si_unique_call 3012} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(13);
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb321:
    assume $i289 == 1;
    assume {:verifier.code 0} true;
    $i292 := $slt.i32($i276, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i292 == 1);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    $i334 := $M.83;
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 3);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb376:
    assume $i335 == 1;
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} $i336 := ldv_suspend_late_5();
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $M.94 := $i336;
    call {:si_unique_call 3008} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i336);
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $i337 := $M.94;
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 0);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb378:
    assume $i338 == 1;
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    $M.83 := 6;
    call {:si_unique_call 3009} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(6);
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb327:
    assume $i292 == 1;
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    $i328 := $M.83;
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 13);
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb370:
    assume $i329 == 1;
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $p330 := $M.73;
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} $i331 := pch_gbe_resume($p330);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    $M.93 := $i331;
    call {:si_unique_call 3005} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i331);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    $i332 := $M.93;
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 0);
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb372:
    assume $i333 == 1;
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $M.83 := 15;
    call {:si_unique_call 3006} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(15);
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb319:
    assume $i288 == 1;
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i276, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    $i294 := $slt.i32($i276, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    $i295 := $slt.i32($i276, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i295 == 1);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    $i322 := $M.83;
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 12);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb364:
    assume $i323 == 1;
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $p324 := $M.73;
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} $i325 := pch_gbe_resume($p324);
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $M.92 := $i325;
    call {:si_unique_call 3002} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i325);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    $i326 := $M.92;
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 0);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb366:
    assume $i327 == 1;
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    $M.83 := 15;
    call {:si_unique_call 3003} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(15);
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb333:
    assume $i295 == 1;
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    $i316 := $M.83;
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 2);
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb358:
    assume $i317 == 1;
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $p318 := $M.73;
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} $i319 := pch_gbe_suspend($p318);
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $M.91 := $i319;
    call {:si_unique_call 2999} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i319);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $i320 := $M.91;
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 0);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb360:
    assume $i321 == 1;
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    $M.83 := 5;
    call {:si_unique_call 3000} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb331:
    assume $i294 == 1;
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    $i310 := $M.83;
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 2);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb352:
    assume $i311 == 1;
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    $p312 := $M.73;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} $i313 := pch_gbe_suspend($p312);
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $M.90 := $i313;
    call {:si_unique_call 2996} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i313);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $i314 := $M.90;
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 0);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb354:
    assume $i315 == 1;
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $M.83 := 4;
    call {:si_unique_call 2997} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb329:
    assume $i293 == 1;
    assume {:verifier.code 0} true;
    $i296 := $slt.i32($i276, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i296 == 1);
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    $i304 := $M.83;
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 2);
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb346:
    assume $i305 == 1;
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $p306 := $M.73;
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} $i307 := pch_gbe_suspend($p306);
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    $M.89 := $i307;
    call {:si_unique_call 2993} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i307);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $i308 := $M.89;
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb348:
    assume $i309 == 1;
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 2994} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb335:
    assume $i296 == 1;
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i276, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb308;

  $bb337:
    assume $i297 == 1;
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $i298 := $M.83;
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 14);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb339:
    assume $i299 == 1;
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    $p300 := $M.73;
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} $i301 := pch_gbe_resume($p300);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $M.88 := $i301;
    call {:si_unique_call 2990} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i301);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $i302 := $M.88;
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 0);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb341:
    assume $i303 == 1;
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $M.83 := 15;
    call {:si_unique_call 2991} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(15);
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $i257 := $M.82;
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb263:
    assume $i258 == 1;
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2964} $i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 2965} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i259);
    call {:si_unique_call 2966} {:cexpr "tmp___11"} boogie_si_record_i32($i259);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} ldv_stop();
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb268:
    assume $i261 == 1;
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    $i267 := $M.82;
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 1);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb281:
    assume $i268 == 1;
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} $i269 := pch_gbe_init_module();
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $M.87 := $i269;
    call {:si_unique_call 2971} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i269);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    $i270 := $M.87;
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 0);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $i272 := $M.87;
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb286:
    assume $i273 == 1;
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 2984} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb283:
    assume $i271 == 1;
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $M.82 := 3;
    call {:si_unique_call 2972} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2973} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} ldv_dev_pm_ops_5();
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2975} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} ldv_initialize_ethtool_ops_9();
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_initialize_pci_driver_3();
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2979} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} ldv_initialize_pci_error_handlers_4();
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2981} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2982} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} ldv_initialize_pch_gbe_functions_8();
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb266:
    assume $i260 == 1;
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb270;

  $bb271:
    assume $i262 == 1;
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    $i263 := $M.82;
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 3);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb273:
    assume $i264 == 1;
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i265 := $M.70;
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 0);
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb275;

  $bb276:
    assume $i266 == 1;
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} pch_gbe_exit_module();
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 2968} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i199 := $M.81;
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb208:
    assume $i200 == 1;
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2935} $i201 := __VERIFIER_nondet_int();
    call {:si_unique_call 2936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i201);
    call {:si_unique_call 2937} {:cexpr "tmp___10"} boogie_si_record_i32($i201);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i201, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i201, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i201, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i201, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} ldv_stop();
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb217:
    assume $i205 == 1;
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $i252 := $M.81;
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 1);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb257:
    assume $i253 == 1;
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} vslice_dummy_var_447 := ldv_probe_4();
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2961} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $i255 := $M.70;
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i255, 1);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $M.70 := $i256;
    call {:si_unique_call 2962} {:cexpr "ref_cnt"} boogie_si_record_i32($i256);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb215:
    assume $i204 == 1;
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $i242 := $M.81;
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 3);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i247 := $M.81;
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 2);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb254:
    assume $i248 == 1;
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} vslice_dummy_var_446 := ldv_release_4();
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2958} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    $i250 := $M.70;
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    $i251 := $sub.i32($i250, 1);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $M.70 := $i251;
    call {:si_unique_call 2959} {:cexpr "ref_cnt"} boogie_si_record_i32($i251);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i243 == 1;
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} vslice_dummy_var_445 := ldv_release_4();
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2955} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $i245 := $M.70;
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    $i246 := $sub.i32($i245, 1);
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $M.70 := $i246;
    call {:si_unique_call 2956} {:cexpr "ref_cnt"} boogie_si_record_i32($i246);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb213:
    assume $i203 == 1;
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $i239 := $M.81;
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 2);
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb248:
    assume $i240 == 1;
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} vslice_dummy_var_444 := ldv_suspend_4();
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2953} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb211:
    assume $i202 == 1;
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i201, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i201, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i207 == 1);
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $i224 := $M.81;
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 1);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i229 := $M.81;
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 3);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i234 := $M.81;
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 2);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb245:
    assume $i235 == 1;
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $p236 := $M.71;
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.76, $p1);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} vslice_dummy_var_443 := pch_gbe_io_error_detected($p236, $i237);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2951} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i230 == 1;
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    $p231 := $M.71;
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.76, $p1);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} vslice_dummy_var_442 := pch_gbe_io_error_detected($p231, $i232);
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2949} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb239:
    assume $i225 == 1;
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $p226 := $M.71;
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.76, $p1);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} vslice_dummy_var_441 := pch_gbe_io_error_detected($p226, $i227);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2947} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb222:
    assume $i207 == 1;
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $i212 := $M.81;
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i216 := $M.81;
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 3);
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i220 := $M.81;
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 2);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb236:
    assume $i221 == 1;
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $p222 := $M.71;
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} vslice_dummy_var_440 := pch_gbe_io_slot_reset($p222);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2945} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb233:
    assume $i217 == 1;
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    $p218 := $M.71;
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} vslice_dummy_var_439 := pch_gbe_io_slot_reset($p218);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2943} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb230:
    assume $i213 == 1;
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $p214 := $M.71;
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} vslice_dummy_var_438 := pch_gbe_io_slot_reset($p214);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2941} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb220:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i201, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb219;

  $bb224:
    assume $i208 == 1;
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $i209 := $M.81;
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 3);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb226:
    assume $i210 == 1;
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $p211 := $M.71;
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} pch_gbe_io_resume($p211);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2939} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb5:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $i197 := $M.80;
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb205:
    assume $i198 == 1;
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} choose_interrupt_1();
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $i195 := $M.69;
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb202:
    assume $i196 == 1;
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} ldv_main_exported_8();
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $i193 := $M.79;
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb199:
    assume $i194 == 1;
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} choose_timer_2();
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $i191 := $M.67;
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb196:
    assume $i192 == 1;
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} ldv_main_exported_9();
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $i62 := $M.41;
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb70:
    assume $i63 == 1;
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2867} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 2868} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 2869} {:cexpr "tmp___9"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i64, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i64, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i64, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i64, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} ldv_stop();
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb81:
    assume $i69 == 1;
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $i184 := $M.41;
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb187:
    assume $i185 == 1;
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} $i186 := ldv_ndo_init_7();
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $M.86 := $i186;
    call {:si_unique_call 2927} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i186);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    $i187 := $M.86;
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb189:
    assume $i188 == 1;
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2928} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $i189 := $M.70;
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 1);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $M.70 := $i190;
    call {:si_unique_call 2929} {:cexpr "ref_cnt"} boogie_si_record_i32($i190);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb79:
    assume $i68 == 1;
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $i179 := $M.41;
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb184:
    assume $i180 == 1;
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} vslice_dummy_var_437 := ldv_ndo_uninit_7();
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2924} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    $i182 := $M.70;
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $i183 := $sub.i32($i182, 1);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $M.70 := $i183;
    call {:si_unique_call 2925} {:cexpr "ref_cnt"} boogie_si_record_i32($i183);
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb77:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i64, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i70 == 1);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    $i170 := $M.41;
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i173 := $M.41;
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 3);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i176 := $M.41;
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb181:
    assume $i177 == 1;
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $p178 := $M.55;
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} pch_gbe_tx_timeout($p178);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2922} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb178:
    assume $i174 == 1;
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $p175 := $M.55;
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} pch_gbe_tx_timeout($p175);
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2920} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i171 == 1;
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $p172 := $M.55;
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} pch_gbe_tx_timeout($p172);
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2918} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb84:
    assume $i70 == 1;
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $i158 := $M.41;
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i162 := $M.41;
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 3);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i166 := $M.41;
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 2);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb172:
    assume $i167 == 1;
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $p168 := $M.55;
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} vslice_dummy_var_436 := pch_gbe_set_mac($p168, $p11);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2916} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i163 == 1;
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $p164 := $M.55;
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} vslice_dummy_var_435 := pch_gbe_set_mac($p164, $p11);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2914} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume $i159 == 1;
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $p160 := $M.55;
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} vslice_dummy_var_434 := pch_gbe_set_mac($p160, $p11);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2912} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb75:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i64, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i64, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i72 == 1);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $i150 := $M.41;
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 3);
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i154 := $M.41;
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 2);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb163:
    assume $i155 == 1;
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    $p156 := $M.55;
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} vslice_dummy_var_433 := pch_gbe_change_mtu($p156, $i8);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2910} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i151 == 1;
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    $p152 := $M.55;
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} vslice_dummy_var_432 := pch_gbe_change_mtu($p152, $i8);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2908} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb88:
    assume $i72 == 1;
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i135 := $M.41;
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i140 := $M.41;
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 3);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i145 := $M.41;
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb157:
    assume $i146 == 1;
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $p147 := $M.55;
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.75, $p0);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} vslice_dummy_var_431 := pch_gbe_set_features($p147, $i148);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2906} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i141 == 1;
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $p142 := $M.55;
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.75, $p0);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} vslice_dummy_var_430 := pch_gbe_set_features($p142, $i143);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2904} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i136 == 1;
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $p137 := $M.55;
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.75, $p0);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} vslice_dummy_var_429 := pch_gbe_set_features($p137, $i138);
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2902} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb86:
    assume $i71 == 1;
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i126 := $M.41;
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i129 := $M.41;
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 3);
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i132 := $M.41;
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 2);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb148:
    assume $i133 == 1;
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    $p134 := $M.55;
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} pch_gbe_netpoll($p134);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2900} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i130 == 1;
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    $p131 := $M.55;
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} pch_gbe_netpoll($p131);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2898} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i127 == 1;
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    $p128 := $M.55;
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} pch_gbe_netpoll($p128);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2896} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb73:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i64, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i75 == 1);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $i117 := $M.41;
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i120 := $M.41;
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 3);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i123 := $M.41;
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 2);
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb139:
    assume $i124 == 1;
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $p125 := $M.55;
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} pch_gbe_set_multi($p125);
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2894} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i121 == 1;
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $p122 := $M.55;
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} pch_gbe_set_multi($p122);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2892} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i118 == 1;
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $p119 := $M.55;
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} pch_gbe_set_multi($p119);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2890} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb94:
    assume $i75 == 1;
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i113 := $M.41;
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 3);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb130:
    assume $i114 == 1;
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $p115 := $M.55;
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} vslice_dummy_var_428 := pch_gbe_stop($p115);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2888} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb92:
    assume $i74 == 1;
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $i109 := $M.41;
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 3);
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb127:
    assume $i110 == 1;
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $p111 := $M.55;
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} vslice_dummy_var_427 := pch_gbe_xmit_frame($p10, $p111);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2886} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb90:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i77 == 1);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    $i103 := $M.41;
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 2);
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb121:
    assume $i104 == 1;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $p105 := $M.55;
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} $i106 := pch_gbe_open($p105);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $M.85 := $i106;
    call {:si_unique_call 2883} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i106);
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    $i107 := $M.85;
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb123:
    assume $i108 == 1;
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2884} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb98:
    assume $i77 == 1;
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i91 := $M.41;
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i95 := $M.41;
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 3);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i99 := $M.41;
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb118:
    assume $i100 == 1;
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $p101 := $M.55;
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} vslice_dummy_var_426 := pch_gbe_get_stats($p101);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2881} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i96 == 1;
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $p97 := $M.55;
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} vslice_dummy_var_425 := pch_gbe_get_stats($p97);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2879} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i92 == 1;
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    $p93 := $M.55;
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} vslice_dummy_var_424 := pch_gbe_get_stats($p93);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2877} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb96:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb83;

  $bb100:
    assume $i78 == 1;
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $i79 := $M.41;
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i83 := $M.41;
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 3);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i87 := $M.41;
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 2);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i88 == 1;
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    $p89 := $M.55;
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} vslice_dummy_var_423 := pch_gbe_ioctl($p89, $p7, $i12);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2875} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i84 == 1;
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    $p85 := $M.55;
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} vslice_dummy_var_422 := pch_gbe_ioctl($p85, $p7, $i12);
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2873} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i80 == 1;
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    $p81 := $M.55;
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} vslice_dummy_var_421 := pch_gbe_ioctl($p81, $p7, $i12);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2871} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb16:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    $i34 := $M.78;
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i35 == 1;
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2851} $i36 := __VERIFIER_nondet_int();
    call {:si_unique_call 2852} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i36);
    call {:si_unique_call 2853} {:cexpr "tmp___8"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} ldv_stop();
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb46:
    assume $i39 == 1;
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    $i52 := $M.78;
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 3);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i57 := $M.78;
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb64:
    assume $i58 == 1;
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    $p59 := $M.74;
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} pch_gbe_remove($p59);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2864} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $i60 := $M.70;
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, 1);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $M.70 := $i61;
    call {:si_unique_call 2865} {:cexpr "ref_cnt"} boogie_si_record_i32($i61);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i53 == 1;
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $p54 := $M.74;
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} pch_gbe_remove($p54);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2861} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    $i55 := $M.70;
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $M.70 := $i56;
    call {:si_unique_call 2862} {:cexpr "ref_cnt"} boogie_si_record_i32($i56);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb44:
    assume $i38 == 1;
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    $i49 := $M.78;
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 2);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58:
    assume $i50 == 1;
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $p51 := $M.74;
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} pch_gbe_shutdown($p51);
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 2859} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb42:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb48;

  $bb49:
    assume $i40 == 1;
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $i41 := $M.78;
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i42 == 1;
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $p43 := $M.74;
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} $i44 := pch_gbe_probe($p43, $p5);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $M.84 := $i44;
    call {:si_unique_call 2855} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i44);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $i45 := $M.84;
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i46 == 1;
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2856} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    $i47 := $M.70;
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $M.70 := $i48;
    call {:si_unique_call 2857} {:cexpr "ref_cnt"} boogie_si_record_i32($i48);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb22:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb24:
    assume $i26 == 1;
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $i27 := $M.77;
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2845} $i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 2846} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
    call {:si_unique_call 2847} {:cexpr "tmp___7"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_stop();
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i30 == 1;
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $i31 := $M.77;
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i32 == 1;
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} vslice_dummy_var_420 := pch_gbe_minnow_platform_init($p3);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2849} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb38_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2842} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 2843} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 2844} {:cexpr "tmp___6"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 728598);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} ldv_set_init($p0);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ndo_uninit_7: ref;

axiom ldv_ndo_uninit_7 == $sub.ref(0, 729630);

procedure ldv_ndo_uninit_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3053} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3054} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_7: ref;

axiom ldv_ndo_init_7 == $sub.ref(0, 730662);

procedure ldv_ndo_init_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3055} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3056} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_4: ref;

axiom ldv_suspend_4 == $sub.ref(0, 731694);

procedure ldv_suspend_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3057} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 732726);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3059} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3060} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 733758);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3061} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3062} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pch_gbe_exit_module: ref;

axiom pch_gbe_exit_module == $sub.ref(0, 734790);

procedure pch_gbe_exit_module();
  free requires assertsPassed;



implementation pch_gbe_exit_module()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} pci_unregister_driver(pch_gbe_driver);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    return;
}



const pch_gbe_init_module: ref;

axiom pch_gbe_init_module == $sub.ref(0, 735822);

procedure pch_gbe_init_module() returns ($r: i32);
  free requires assertsPassed;



implementation pch_gbe_init_module() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var vslice_dummy_var_449: i32;
  var vslice_dummy_var_450: i32;
  var vslice_dummy_var_451: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} vslice_dummy_var_449 := printk.ref.ref(.str.224, .str.225);
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} $i1 := __pci_register_driver(pch_gbe_driver, __this_module, .str);
    call {:si_unique_call 3066} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    $i2 := $M.107;
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 256);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    $i4 := $M.107;
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $i7 := $M.107;
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} vslice_dummy_var_451 := printk.ref.i32(.str.227, $i7);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} vslice_dummy_var_450 := printk.ref(.str.226);
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_suspend_late_5: ref;

axiom ldv_suspend_late_5 == $sub.ref(0, 736854);

procedure ldv_suspend_late_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3069} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3070} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_5: ref;

axiom ldv_restore_early_5 == $sub.ref(0, 737886);

procedure ldv_restore_early_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3071} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3072} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_5: ref;

axiom ldv_resume_early_5 == $sub.ref(0, 738918);

procedure ldv_resume_early_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3073} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_5: ref;

axiom ldv_thaw_early_5 == $sub.ref(0, 739950);

procedure ldv_thaw_early_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3075} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3076} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_5: ref;

axiom ldv_resume_noirq_5 == $sub.ref(0, 740982);

procedure ldv_resume_noirq_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3077} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_5: ref;

axiom ldv_freeze_noirq_5 == $sub.ref(0, 742014);

procedure ldv_freeze_noirq_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3079} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3080} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_5: ref;

axiom ldv_prepare_5 == $sub.ref(0, 743046);

procedure ldv_prepare_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3081} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3082} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_5: ref;

axiom ldv_freeze_late_5 == $sub.ref(0, 744078);

procedure ldv_freeze_late_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3083} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3084} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_5: ref;

axiom ldv_thaw_noirq_5 == $sub.ref(0, 745110);

procedure ldv_thaw_noirq_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3085} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_5: ref;

axiom ldv_poweroff_noirq_5 == $sub.ref(0, 746142);

procedure ldv_poweroff_noirq_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3087} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3088} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_5: ref;

axiom ldv_poweroff_late_5 == $sub.ref(0, 747174);

procedure ldv_poweroff_late_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3089} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3090} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_5: ref;

axiom ldv_restore_noirq_5 == $sub.ref(0, 748206);

procedure ldv_restore_noirq_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3091} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3092} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_5: ref;

axiom ldv_suspend_noirq_5 == $sub.ref(0, 749238);

procedure ldv_suspend_noirq_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3093} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_5: ref;

axiom ldv_complete_5 == $sub.ref(0, 750270);

procedure ldv_complete_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3095} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3096} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 751302);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 3098} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 752334);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_15037;

  corral_source_split_15037:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 753366);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3100} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 754398);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 755430);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 3102} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 756462);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3103} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 1} true;
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 757494);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 758526);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 759558);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 760590);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 761622);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 762654);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 763686);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 764718);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 765750);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 766782);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 767814);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 768846);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 769878);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 770910);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3104} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3105} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3106} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3107} __VERIFIER_assume($i4);
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 771942);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 772974);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 774006);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 775038);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3108} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3109} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3110} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3111} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3112} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3113} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3114} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3115} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3116} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3117} __VERIFIER_assume($i7);
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3118} __VERIFIER_assume($i11);
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 776070);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 777102);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 778134);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 779166);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 780198);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 781230);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3119} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3120} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3121} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3122} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3123} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3124} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3125} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3126} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3127} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3128} __VERIFIER_assume($i7);
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3129} __VERIFIER_assume($i11);
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 782262);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 783294);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 784326);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 785358);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 786390);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 787422);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 788454);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 789486);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 790518);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3130} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3132} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3133} __VERIFIER_assume($i10);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 791550);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 792582);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3134} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3135} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3136} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 793614);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3137} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3138} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3139} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 794646);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3140} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3141} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 795678);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 796710);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3142} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3143} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 797742);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 798774);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 799806);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_199: [ref]i8;
  var cmdloc_dummy_var_200: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3144} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3145} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3146} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} $p6 := malloc($i5);
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_199 := $M.0;
    call {:si_unique_call 3149} cmdloc_dummy_var_200 := $memset.i8(cmdloc_dummy_var_199, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_200;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 800838);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 801870);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.13, $M.7, $M.11, $M.9, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.0, $M.71, $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21, $M.73, $M.55, $M.8, $M.10, $M.12, $M.14, $M.74, $M.26, $M.27, $M.28, $M.29, $M.77, $M.78, $M.41, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.24, $M.23, $M.25, $M.107, $M.118, $M.61, $M.56, $M.57, $M.60, $M.59, $M.54, $M.53, $M.52, $M.50, $M.49, $M.58, $M.31;



implementation __SMACK_static_init()
{

  $bb0:
    $M.13 := 0;
    call {:si_unique_call 3150} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 3151} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 3152} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3153} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.9 := 0;
    call {:si_unique_call 3154} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := $0.ref;
    $M.66 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 3155} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.68 := $0.ref;
    $M.69 := 0;
    call {:si_unique_call 3156} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 3157} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, pch_driver_version, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(pch_driver_version, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(pch_driver_version, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(pch_driver_version, $mul.ref(0, 5)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(pch_driver_version, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.71 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 3158} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 3159} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.20 := 0;
    call {:si_unique_call 3160} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 3161} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.21 := $0.ref;
    $M.73 := $0.ref;
    $M.55 := $0.ref;
    $M.8 := 0;
    call {:si_unique_call 3162} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 3163} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 3164} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 3165} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.26 := $0.ref;
    $M.27 := $0.ref;
    $M.28 := $0.ref;
    $M.29 := $0.ref;
    $M.77 := 0;
    call {:si_unique_call 3166} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 3167} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 3168} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 3169} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 3170} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 3171} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 3172} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 3173} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 3174} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 3175} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 3176} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 3177} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 3178} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 3179} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 3180} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 3181} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 3182} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 3183} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 3184} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 3185} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 3186} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 3187} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 3188} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 3189} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 3190} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 3191} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 3192} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 3193} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 3194} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 3195} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 3196} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 3197} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.25 := $store.ref($M.25, set_impl, $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.107 := 256;
    call {:si_unique_call 3198} {:cexpr "copybreak"} boogie_si_record_i32(256);
    $M.0 := $store.ref($M.0, pch_gbe_pm_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), pch_gbe_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), pch_gbe_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), pch_gbe_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), pch_gbe_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), pch_gbe_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), pch_gbe_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, pch_gbe_err_handler, pch_gbe_io_error_detected);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_err_handler, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_err_handler, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_err_handler, $mul.ref(0, 48)), $mul.ref(24, 1)), pch_gbe_io_slot_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_err_handler, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_err_handler, $mul.ref(0, 48)), $mul.ref(40, 1)), pch_gbe_io_resume);
    $M.0 := $store.i32($M.0, pch_gbe_pcidev_id, 32902);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 34818);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 7368);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 131072);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(20, 1)), 16776960);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(pch_gbe_minnow_privdata));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 32902);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 34818);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 131072);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(20, 1)), 16776960);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4315);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 32787);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 131072);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(20, 1)), 16776960);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 4315);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 34818);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 131072);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(20, 1)), 16776960);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.118 := $store.ref($M.118, pch_gbe_driver, $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), pch_gbe_pcidev_id);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), pch_gbe_probe);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), pch_gbe_remove);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), pch_gbe_shutdown);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), pch_gbe_err_handler);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), pch_gbe_pm_ops);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.118 := $store.i32($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i64($M.118, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref($add.ref(pch_gbe_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, pch_gbe_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(16, 1)), pch_gbe_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(24, 1)), pch_gbe_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(32, 1)), pch_gbe_xmit_frame);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(56, 1)), pch_gbe_set_multi);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(64, 1)), pch_gbe_set_mac);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(80, 1)), pch_gbe_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(96, 1)), pch_gbe_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(112, 1)), pch_gbe_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(128, 1)), pch_gbe_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(152, 1)), pch_gbe_netpoll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(344, 1)), pch_gbe_set_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_netdev_ops, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, pch_gbe_ops, pch_gbe_plat_get_bus_info);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(8, 1)), pch_gbe_plat_init_hw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(16, 1)), pch_gbe_phy_read_reg_miic);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(24, 1)), pch_gbe_phy_write_reg_miic);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(32, 1)), pch_gbe_phy_hw_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(40, 1)), pch_gbe_phy_sw_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(48, 1)), pch_gbe_phy_power_up);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(56, 1)), pch_gbe_phy_power_down);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ops, $mul.ref(0, 72)), $mul.ref(64, 1)), pch_gbe_mac_read_mac_addr);
    $M.61 := $sub.i32(0, 1);
    call {:si_unique_call 3199} {:cexpr "AutoNeg"} boogie_si_record_i32($sub.i32(0, 1));
    $M.56 := $store.i32($M.56, an_list, 1);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.79);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(1, 16)), $mul.ref(0, 1)), 2);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.80);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(2, 16)), $mul.ref(0, 1)), 3);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.81);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(3, 16)), $mul.ref(0, 1)), 4);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(3, 16)), $mul.ref(8, 1)), .str.82);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(4, 16)), $mul.ref(0, 1)), 5);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(4, 16)), $mul.ref(8, 1)), .str.83);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(5, 16)), $mul.ref(0, 1)), 6);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(5, 16)), $mul.ref(8, 1)), .str.84);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(6, 16)), $mul.ref(0, 1)), 7);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(6, 16)), $mul.ref(8, 1)), .str.85);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(7, 16)), $mul.ref(0, 1)), 8);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(7, 16)), $mul.ref(8, 1)), .str.86);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(8, 16)), $mul.ref(0, 1)), 9);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(8, 16)), $mul.ref(8, 1)), .str.87);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(9, 16)), $mul.ref(0, 1)), 10);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(9, 16)), $mul.ref(8, 1)), .str.88);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(10, 16)), $mul.ref(0, 1)), 11);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(10, 16)), $mul.ref(8, 1)), .str.89);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(11, 16)), $mul.ref(0, 1)), 12);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(11, 16)), $mul.ref(8, 1)), .str.90);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(12, 16)), $mul.ref(0, 1)), 13);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(12, 16)), $mul.ref(8, 1)), .str.91);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(13, 16)), $mul.ref(0, 1)), 14);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(13, 16)), $mul.ref(8, 1)), .str.92);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(14, 16)), $mul.ref(0, 1)), 15);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(14, 16)), $mul.ref(8, 1)), .str.93);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(15, 16)), $mul.ref(0, 1)), 32);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(15, 16)), $mul.ref(8, 1)), .str.94);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(16, 16)), $mul.ref(0, 1)), 33);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(16, 16)), $mul.ref(8, 1)), .str.95);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(17, 16)), $mul.ref(0, 1)), 34);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(17, 16)), $mul.ref(8, 1)), .str.96);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(18, 16)), $mul.ref(0, 1)), 35);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(18, 16)), $mul.ref(8, 1)), .str.97);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(19, 16)), $mul.ref(0, 1)), 36);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(19, 16)), $mul.ref(8, 1)), .str.98);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(20, 16)), $mul.ref(0, 1)), 37);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(20, 16)), $mul.ref(8, 1)), .str.99);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(21, 16)), $mul.ref(0, 1)), 38);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(21, 16)), $mul.ref(8, 1)), .str.100);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(22, 16)), $mul.ref(0, 1)), 39);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(22, 16)), $mul.ref(8, 1)), .str.101);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(23, 16)), $mul.ref(0, 1)), 40);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(23, 16)), $mul.ref(8, 1)), .str.102);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(24, 16)), $mul.ref(0, 1)), 41);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(24, 16)), $mul.ref(8, 1)), .str.103);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(25, 16)), $mul.ref(0, 1)), 42);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(25, 16)), $mul.ref(8, 1)), .str.104);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(26, 16)), $mul.ref(0, 1)), 43);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(26, 16)), $mul.ref(8, 1)), .str.105);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(27, 16)), $mul.ref(0, 1)), 44);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(27, 16)), $mul.ref(8, 1)), .str.106);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(28, 16)), $mul.ref(0, 1)), 45);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(28, 16)), $mul.ref(8, 1)), .str.107);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(29, 16)), $mul.ref(0, 1)), 46);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(29, 16)), $mul.ref(8, 1)), .str.108);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(30, 16)), $mul.ref(0, 1)), 47);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(an_list, $mul.ref(0, 496)), $mul.ref(30, 16)), $mul.ref(8, 1)), .str.109);
    $M.60 := $sub.i32(0, 1);
    call {:si_unique_call 3200} {:cexpr "Duplex"} boogie_si_record_i32($sub.i32(0, 1));
    $M.56 := $store.i32($M.56, dplx_list, 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(dplx_list, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.78);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(dplx_list, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1)), 1);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(dplx_list, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.78);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(dplx_list, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1)), 2);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(dplx_list, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.78);
    $M.59 := $sub.i32(0, 1);
    call {:si_unique_call 3201} {:cexpr "Speed"} boogie_si_record_i32($sub.i32(0, 1));
    $M.56 := $store.i32($M.56, speed_list, 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.78);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(0, 1)), 10);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.78);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(0, 1)), 100);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.78);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(0, 1)), 1000);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(speed_list, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(8, 1)), .str.78);
    $M.54 := $sub.i32(0, 1);
    call {:si_unique_call 3202} {:cexpr "FlowControl"} boogie_si_record_i32($sub.i32(0, 1));
    $M.56 := $store.i32($M.56, fc_list, 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.52);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(0, 1)), 1);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.53);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(0, 1)), 2);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.54);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(0, 1)), 3);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(fc_list, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(8, 1)), .str.55);
    $M.53 := $sub.i32(0, 1);
    call {:si_unique_call 3203} {:cexpr "XsumTX"} boogie_si_record_i32($sub.i32(0, 1));
    $M.52 := $sub.i32(0, 1);
    call {:si_unique_call 3204} {:cexpr "XsumRX"} boogie_si_record_i32($sub.i32(0, 1));
    $M.50 := $sub.i32(0, 1);
    call {:si_unique_call 3205} {:cexpr "RxDescriptors"} boogie_si_record_i32($sub.i32(0, 1));
    $M.49 := $sub.i32(0, 1);
    call {:si_unique_call 3206} {:cexpr "TxDescriptors"} boogie_si_record_i32($sub.i32(0, 1));
    $M.0 := $store.i8($M.0, pch_gbe_gstrings_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(0, 48)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(1, 48)), $mul.ref(40, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(2, 48)), $mul.ref(40, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(3, 48)), $mul.ref(40, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(4, 48)), $mul.ref(40, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(5, 48)), $mul.ref(40, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(6, 48)), $mul.ref(40, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(7, 48)), $mul.ref(40, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(8, 48)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(9, 48)), $mul.ref(40, 1)), 36);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(10, 48)), $mul.ref(40, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(11, 48)), $mul.ref(40, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(12, 48)), $mul.ref(40, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(13, 48)), $mul.ref(40, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(14, 48)), $mul.ref(40, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(15, 48)), $mul.ref(40, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(16, 48)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(17, 48)), $mul.ref(40, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(18, 48)), $mul.ref(40, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(19, 48)), $mul.ref(40, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(20, 48)), $mul.ref(40, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(21, 48)), $mul.ref(40, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(22, 48)), $mul.ref(40, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(23, 48)), $mul.ref(40, 1)), 92);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(pch_gbe_gstrings_stats, $mul.ref(0, 1200)), $mul.ref(24, 48)), $mul.ref(40, 1)), 96);
    $M.0 := $store.ref($M.0, pch_gbe_ethtool_ops, pch_gbe_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), pch_gbe_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), pch_gbe_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), pch_gbe_get_regs_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), pch_gbe_get_regs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), pch_gbe_get_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), pch_gbe_set_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), pch_gbe_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), pch_gbe_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), pch_gbe_set_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), pch_gbe_get_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), pch_gbe_set_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), pch_gbe_get_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), pch_gbe_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), pch_gbe_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(pch_gbe_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.58 := $store.i8($M.58, .str.52, 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(1, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(2, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(3, 1)), 119);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(4, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(5, 1)), 67);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(6, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(7, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(9, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(10, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(11, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(12, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(13, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(18, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.58 := $store.i8($M.58, .str.53, 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(1, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(2, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(3, 1)), 119);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(4, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(5, 1)), 67);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(6, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(7, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(9, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(10, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(11, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(12, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(13, 1)), 82);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(15, 1)), 99);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(16, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(17, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(18, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(20, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(21, 1)), 79);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(22, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(23, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(24, 1)), 121);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.53, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.58 := $store.i8($M.58, .str.54, 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(1, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(2, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(3, 1)), 119);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(4, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(5, 1)), 67);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(6, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(7, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(9, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(10, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(11, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(13, 1)), 84);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(14, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(15, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(16, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(17, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(18, 1)), 109);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(19, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(20, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(22, 1)), 79);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(23, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(24, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(25, 1)), 121);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.54, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.58 := $store.i8($M.58, .str.55, 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(1, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(3, 1)), 119);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(4, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(5, 1)), 67);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(7, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(13, 1)), 69);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(15, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(16, 1)), 98);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(17, 1)), 108);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.55, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.58 := $store.i8($M.58, .str.78, 0);
    $M.58 := $store.i8($M.58, .str.79, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(22, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(23, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(24, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.79, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.58 := $store.i8($M.58, .str.80, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(22, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(23, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(24, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.80, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.58 := $store.i8($M.58, .str.81, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(22, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(23, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(24, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(25, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(26, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(27, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(28, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(29, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(30, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(31, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.81, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.58 := $store.i8($M.58, .str.82, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(24, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.58 := $store.i8($M.58, .str.83, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(24, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(30, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(31, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(32, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.83, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.58 := $store.i8($M.58, .str.84, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(24, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(30, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(31, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(32, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.58 := $store.i8($M.58, .str.85, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(24, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(30, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(31, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(32, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(33, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(34, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(35, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(36, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(37, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(38, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(39, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.85, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.58 := $store.i8($M.58, .str.86, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.58 := $store.i8($M.58, .str.87, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(30, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(31, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(32, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.87, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.58 := $store.i8($M.58, .str.88, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(30, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(31, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(32, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.88, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.58 := $store.i8($M.58, .str.89, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(30, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(31, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(32, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(33, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(34, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(35, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(36, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(37, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(38, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(39, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.89, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.58 := $store.i8($M.58, .str.90, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(32, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.90, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.58 := $store.i8($M.58, .str.91, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(32, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(34, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(35, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(36, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(37, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(38, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(39, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(40, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.91, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.58 := $store.i8($M.58, .str.92, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(32, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(34, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(35, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(36, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(37, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(38, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(39, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(40, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.92, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.58 := $store.i8($M.58, .str.93, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(23, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(24, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(25, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(26, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(27, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(28, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(29, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(32, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(34, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(35, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(36, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(37, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(38, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(39, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(40, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(41, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(42, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(43, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(44, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(45, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(46, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(47, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.93, $mul.ref(0, 49)), $mul.ref(48, 1)), 0);
    $M.58 := $store.i8($M.58, .str.94, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.94, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.58 := $store.i8($M.58, .str.95, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(32, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.95, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.58 := $store.i8($M.58, .str.96, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(32, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.96, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.58 := $store.i8($M.58, .str.97, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(31, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(32, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(33, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(34, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(35, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(36, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(37, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(38, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(39, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(40, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.97, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.58 := $store.i8($M.58, .str.98, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(33, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.98, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.58 := $store.i8($M.58, .str.99, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(33, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(39, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(40, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(41, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.99, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.58 := $store.i8($M.58, .str.100, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(33, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(39, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(40, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(41, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.100, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.58 := $store.i8($M.58, .str.101, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(33, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(39, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(40, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(41, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(42, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(43, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(44, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(45, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(46, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(47, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(48, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.101, $mul.ref(0, 50)), $mul.ref(49, 1)), 0);
    $M.58 := $store.i8($M.58, .str.102, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.102, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.58 := $store.i8($M.58, .str.103, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(39, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(40, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(41, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.103, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.58 := $store.i8($M.58, .str.104, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(39, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(40, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(41, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.104, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.58 := $store.i8($M.58, .str.105, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(39, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(40, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(41, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(42, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(43, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(44, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(45, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(46, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(47, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(48, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.105, $mul.ref(0, 50)), $mul.ref(49, 1)), 0);
    $M.58 := $store.i8($M.58, .str.106, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(39, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(40, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(41, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(42, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.106, $mul.ref(0, 44)), $mul.ref(43, 1)), 0);
    $M.58 := $store.i8($M.58, .str.107, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(39, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(40, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(41, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(42, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(43, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(44, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(45, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(46, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(47, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(48, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(49, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.107, $mul.ref(0, 51)), $mul.ref(50, 1)), 0);
    $M.58 := $store.i8($M.58, .str.108, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(39, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(40, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(41, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(42, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(43, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(44, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(45, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(46, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(47, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(48, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(49, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.108, $mul.ref(0, 51)), $mul.ref(50, 1)), 0);
    $M.58 := $store.i8($M.58, .str.109, 65);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(1, 1)), 117);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(2, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(3, 1)), 111);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(4, 1)), 78);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(5, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(6, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(7, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(8, 1)), 97);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(9, 1)), 100);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(10, 1)), 118);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(11, 1)), 101);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(12, 1)), 114);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(13, 1)), 116);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(14, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(15, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(16, 1)), 105);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(17, 1)), 110);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(18, 1)), 103);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(19, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(20, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(21, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(22, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(23, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(24, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(25, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(26, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(27, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(28, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(29, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(30, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(31, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(32, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(33, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(34, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(35, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(36, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(37, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(38, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(39, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(40, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(41, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(42, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(43, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(44, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(45, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(46, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(47, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(48, 1)), 70);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(49, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(50, 1)), 44);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(51, 1)), 32);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(52, 1)), 49);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(53, 1)), 48);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(54, 1)), 47);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(55, 1)), 72);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(56, 1)), 68);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.109, $mul.ref(0, 58)), $mul.ref(57, 1)), 0);
    $M.31 := $store.i8($M.31, .str.205, 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(1, 1)), 49);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(2, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(3, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(4, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(5, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(6, 1)), 53);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(8, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(9, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(10, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(11, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(12, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(13, 1)), 49);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(14, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(15, 1)), 56);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(16, 1)), 49);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.205, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.31 := $store.i8($M.31, .str.206, 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(1, 1)), 49);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(2, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(3, 1)), 49);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(4, 1)), 98);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(5, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(6, 1)), 49);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(7, 1)), 57);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(8, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(9, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(10, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(11, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(12, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(13, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(14, 1)), 58);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(15, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(16, 1)), 48);
    $M.31 := $store.i8($M.31, $add.ref($add.ref(.str.206, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 3207} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 802902);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(pch_gbe_resume, $p0);
    assume {:branchcond $i33} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i33 == 1);
    $i32 := $eq.ref(pch_gbe_suspend, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i32 == 1);
    $i31 := $eq.ref(pch_gbe_io_slot_reset, $p0);
    assume {:branchcond $i31} true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i31 == 1);
    $i30 := $eq.ref(pch_gbe_minnow_platform_init, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i30 == 1);
    $i29 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i29 == 1);
    $i28 := $eq.ref(pch_gbe_stop, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i28 == 1);
    $i27 := $eq.ref(pch_gbe_open, $p0);
    assume {:branchcond $i27} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(pch_gbe_plat_init_hw, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(pch_gbe_mac_read_mac_addr, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(pch_gbe_nway_reset, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(pch_gbe_get_regs_len, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3208} $i2 := pch_gbe_get_regs_len($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3209} $i4 := pch_gbe_nway_reset($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3210} $i6 := ethtool_op_get_link($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i25 == 1;
    call {:si_unique_call 3211} $i7 := pch_gbe_mac_read_mac_addr(arg);
    $r := $i7;
    return;

  $bb6:
    assume $i26 == 1;
    call {:si_unique_call 3212} $i8 := pch_gbe_plat_init_hw(arg);
    $r := $i8;
    return;

  $bb7:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3213} $i10 := pch_gbe_open($p9);
    $r := $i10;
    return;

  $bb8:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3214} $i12 := pch_gbe_stop($p11);
    $r := $i12;
    return;

  $bb9:
    assume $i29 == 1;
    call {:si_unique_call 3215} $i13 := __builtinx_object_size();
    $r := $i13;
    return;

  $bb10:
    assume $i30 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3216} $i15 := pch_gbe_minnow_platform_init($p14);
    $r := $i15;
    return;

  $bb11:
    assume $i31 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3217} $i17 := pch_gbe_io_slot_reset($p16);
    $r := $i17;
    return;

  $bb12:
    assume $i32 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3218} $i19 := pch_gbe_suspend($p18);
    $r := $i19;
    return;

  $bb13:
    assume $i33 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3219} $i21 := pch_gbe_resume($p20);
    $r := $i21;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 803934);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 804966);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 805998);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 807030);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(pch_gbe_get_ethtool_stats, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    $i7 := $eq.ref(pch_gbe_get_regs, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3220} pch_gbe_get_regs($p1, $p2, $p3);
    return;

  $bb3:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    $p6 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3221} pch_gbe_get_ethtool_stats($p4, $p5, $p6);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 808062);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 809094);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(pch_gbe_set_features, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3222} $i2 := pch_gbe_set_features($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 3223} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 810126);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 811158);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(pch_gbe_get_pauseparam, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(pch_gbe_get_ringparam, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(pch_gbe_get_wol, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(pch_gbe_get_drvinfo, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3224} pch_gbe_get_drvinfo($p1, $p2);
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3225} pch_gbe_get_wol($p3, $p4);
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3226} pch_gbe_get_ringparam($p5, $p6);
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3227} pch_gbe_get_pauseparam($p7, $p8);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 812190);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 813222);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 814254);

procedure devirtbounce.11(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 815286);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 816318);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(pch_gbe_phy_read_reg_miic, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 3228} $i1 := pch_gbe_phy_read_reg_miic(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 3229} $i2 := __builtinx_object_size();
    $r := $i2;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 817350);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: i16) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(pch_gbe_mdio_read, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(pch_gbe_phy_write_reg_miic, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 3230} $i1 := pch_gbe_phy_write_reg_miic(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 3231} $i2 := __builtinx_object_size();
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $i4 := $zext.i16.i32(arg2);
    call {:si_unique_call 3232} $i5 := pch_gbe_mdio_read($p3, arg1, $i4);
    $r := $i5;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 818382);

procedure devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 819414);

procedure devirtbounce.16(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3233} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 820446);

procedure devirtbounce.17(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3234} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 821478);

procedure devirtbounce.18(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.41, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24;



implementation devirtbounce.18(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(pch_gbe_io_resume, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i19 == 1);
    $i18 := $eq.ref(pch_gbe_reset_task, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i18 == 1);
    $i17 := $eq.ref(pch_gbe_shutdown, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_gbe_remove, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_gbe_netpoll, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_gbe_tx_timeout, $p0);
    assume {:branchcond $i14} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_gbe_phy_power_down, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i13 == 1);
    $i12 := $eq.ref(pch_gbe_phy_power_up, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i12 == 1);
    $i11 := $eq.ref(pch_gbe_phy_sw_reset, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i11 == 1);
    $i10 := $eq.ref(pch_gbe_phy_hw_reset, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i10 == 1);
    $i9 := $eq.ref(pch_gbe_plat_get_bus_info, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i9 == 1);
    $i8 := $eq.ref(pch_gbe_set_multi, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3235} pch_gbe_set_multi($p1);
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 3236} pch_gbe_plat_get_bus_info(arg);
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 3237} pch_gbe_phy_hw_reset(arg);
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 3238} pch_gbe_phy_sw_reset(arg);
    return;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 3239} pch_gbe_phy_power_up(arg);
    return;

  $bb7:
    assume $i13 == 1;
    call {:si_unique_call 3240} pch_gbe_phy_power_down(arg);
    return;

  $bb8:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3241} pch_gbe_tx_timeout($p2);
    return;

  $bb9:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3242} pch_gbe_netpoll($p3);
    return;

  $bb10:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3243} pch_gbe_remove($p4);
    return;

  $bb11:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3244} pch_gbe_shutdown($p5);
    return;

  $bb12:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3245} pch_gbe_reset_task($p6);
    return;

  $bb13:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3246} pch_gbe_io_resume($p7);
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 822510);

procedure devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24;



implementation devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(pch_gbe_resume, $p0);
    assume {:branchcond $i33} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i33 == 1);
    $i32 := $eq.ref(pch_gbe_suspend, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i32 == 1);
    $i31 := $eq.ref(pch_gbe_io_slot_reset, $p0);
    assume {:branchcond $i31} true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i31 == 1);
    $i30 := $eq.ref(pch_gbe_minnow_platform_init, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i30 == 1);
    $i29 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i29 == 1);
    $i28 := $eq.ref(pch_gbe_stop, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i28 == 1);
    $i27 := $eq.ref(pch_gbe_open, $p0);
    assume {:branchcond $i27} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(pch_gbe_plat_init_hw, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(pch_gbe_mac_read_mac_addr, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(pch_gbe_nway_reset, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(pch_gbe_get_regs_len, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3247} $i2 := pch_gbe_get_regs_len($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3248} $i4 := pch_gbe_nway_reset($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3249} $i6 := ethtool_op_get_link($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i25 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3250} $i8 := pch_gbe_mac_read_mac_addr($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3251} $i10 := pch_gbe_plat_init_hw($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i27 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3252} $i12 := pch_gbe_open($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i28 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3253} $i14 := pch_gbe_stop($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i29 == 1;
    call {:si_unique_call 3254} $i15 := __builtinx_object_size();
    $r := $i15;
    return;

  $bb10:
    assume $i30 == 1;
    call {:si_unique_call 3255} $i16 := pch_gbe_minnow_platform_init(arg);
    $r := $i16;
    return;

  $bb11:
    assume $i31 == 1;
    call {:si_unique_call 3256} $i17 := pch_gbe_io_slot_reset(arg);
    $r := $i17;
    return;

  $bb12:
    assume $i32 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3257} $i19 := pch_gbe_suspend($p18);
    $r := $i19;
    return;

  $bb13:
    assume $i33 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3258} $i21 := pch_gbe_resume($p20);
    $r := $i21;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 823542);

procedure devirtbounce.20(funcPtr: ref, arg: i32) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.13, $M.7, $M.11, $M.9, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.0, $M.71, $M.16, $M.15, $M.18, $M.17, $M.20, $M.19, $M.22, $M.21, $M.73, $M.55, $M.8, $M.10, $M.12, $M.14, $M.74, $M.26, $M.27, $M.28, $M.29, $M.77, $M.78, $M.41, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.24, $M.23, $M.25, $M.107, $M.118, $M.61, $M.56, $M.57, $M.60, $M.59, $M.54, $M.53, $M.52, $M.50, $M.49, $M.58, $M.31, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3259} __SMACK_static_init();
    call {:si_unique_call 3260} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.75, $M.76, $M.77, $M.78, $M.41, $M.67, $M.16, $M.18, $M.20, $M.22, $M.79, $M.69, $M.80, $M.81, $M.70, $M.82, $M.83, $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.84, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.85, $M.86, $M.7, $M.87, $M.73, $M.62, $M.63, $M.64, $M.65, $M.66, $M.74, $M.71, $M.68, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.13, $M.11, $M.9, $M.15, $M.17, $M.19, $M.21, $M.55, $M.8, $M.10, $M.12, $M.14, $M.26, $M.27, $M.28, $M.29, $M.24, $M.23, $M.25, $M.107, $M.118, $M.61, $M.56, $M.57, $M.60, $M.59, $M.54, $M.53, $M.52, $M.50, $M.49, $M.58, $M.31, $CurrAddr, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.51, $M.32, $M.33, $M.34;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 32} pch_gbe_get_regs_loop_$bb5(in_$p3: ref, in_$p5: ref, in_$p29: ref, in_$i30: i32, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i26: i16, in_$p27: ref, in_vslice_dummy_var_206: i32) returns (out_$p29: ref, out_$i30: i32, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i26: i16, out_$p27: ref, out_vslice_dummy_var_206: i32)
{

  entry:
    out_$p29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i26, out_$p27, out_vslice_dummy_var_206 := in_$p29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i26, in_$p27, in_vslice_dummy_var_206;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  $bb7:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i26, out_$p27 := out_$i37, out_$p32;
    goto $bb7_dummy;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i39 := $ule.i32(out_$i38, 31);
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    call {:si_unique_call 39} {:cexpr "i"} boogie_si_record_i16(out_$i37);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, 1);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i26);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, out_$i34);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, in_$p3);
    goto corral_source_split_157;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p27, $mul.ref(1, 4));
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_vslice_dummy_var_206 := pch_gbe_hal_read_phy_reg(out_$p29, out_$i30, in_$p3);
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i26);
    goto corral_source_split_154;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p5, $mul.ref(0, 960)), $mul.ref(360, 1));
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i26, out_$p27, out_vslice_dummy_var_206 := pch_gbe_get_regs_loop_$bb5(in_$p3, in_$p5, out_$p29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i26, out_$p27, out_vslice_dummy_var_206);
    return;

  exit:
    return;
}



procedure pch_gbe_get_regs_loop_$bb5(in_$p3: ref, in_$p5: ref, in_$p29: ref, in_$i30: i32, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i26: i16, in_$p27: ref, in_vslice_dummy_var_206: i32) returns (out_$p29: ref, out_$i30: i32, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i26: i16, out_$p27: ref, out_vslice_dummy_var_206: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_set_multi_loop_$bb23(in_$i32: i32, in_$p59: ref, in_$i71: i64, in_$i76: i1, in_$i77: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i86: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i74: i32, in_$p75: ref, in_$i100: i32, in_cmdloc_dummy_var_150: [ref]i8, in_cmdloc_dummy_var_151: [ref]i8, in_cmdloc_dummy_var_152: [ref]i8, in_cmdloc_dummy_var_153: [ref]i8, in_cmdloc_dummy_var_154: [ref]i8, in_cmdloc_dummy_var_155: [ref]i8) returns (out_$i76: i1, out_$i77: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i86: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i74: i32, out_$p75: ref, out_$i100: i32, out_cmdloc_dummy_var_150: [ref]i8, out_cmdloc_dummy_var_151: [ref]i8, out_cmdloc_dummy_var_152: [ref]i8, out_cmdloc_dummy_var_153: [ref]i8, out_cmdloc_dummy_var_154: [ref]i8, out_cmdloc_dummy_var_155: [ref]i8)
{

  entry:
    out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i86, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i74, out_$p75, out_$i100, out_cmdloc_dummy_var_150, out_cmdloc_dummy_var_151, out_cmdloc_dummy_var_152, out_cmdloc_dummy_var_153, out_cmdloc_dummy_var_154, out_cmdloc_dummy_var_155 := in_$i76, in_$i77, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$i86, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i74, in_$p75, in_$i100, in_cmdloc_dummy_var_150, in_cmdloc_dummy_var_151, in_cmdloc_dummy_var_152, in_cmdloc_dummy_var_153, in_cmdloc_dummy_var_154, in_cmdloc_dummy_var_155;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  $bb32:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i74, out_$p75 := out_$i86, out_$p95;
    goto $bb32_dummy;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i86;
    assume true;
    goto $bb32;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, in_$i71);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p96, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2564;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_2562;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_153 := $M.0;
    out_cmdloc_dummy_var_154 := $M.0;
    call {:si_unique_call 366} out_cmdloc_dummy_var_155 := $memcpy.i8(out_cmdloc_dummy_var_153, out_cmdloc_dummy_var_154, out_$p90, out_$p92, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_155;
    assume {:verifier.code 0} true;
    out_$i86 := out_$i87;
    goto $bb31;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i80;
    goto $bb31;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_150 := $M.0;
    out_cmdloc_dummy_var_151 := $M.0;
    call {:si_unique_call 364} out_cmdloc_dummy_var_152 := $memcpy.i8(out_cmdloc_dummy_var_150, out_cmdloc_dummy_var_151, out_$p83, out_$p85, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_152;
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p84);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p75, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(in_$p59, $mul.ref(out_$i82, 1));
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i81 := $mul.i32(out_$i74, 6);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i74, 1);
    call {:si_unique_call 363} {:cexpr "i"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_2544;

  $bb29:
    assume out_$i79 == 1;
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i79 := $ugt.i64(6, 63);
    goto corral_source_split_2541;

  $bb26:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i74;
    assume true;
    goto $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i74, in_$i32);
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p75, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(in_$p59, $mul.ref(out_$i89, 1));
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i88);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i88 := $mul.i32(out_$i74, 6);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i74, 1);
    call {:si_unique_call 365} {:cexpr "i"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_2553;

  $bb30:
    assume !(out_$i79 == 1);
    goto corral_source_split_2552;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i86, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i74, out_$p75, out_$i100, out_cmdloc_dummy_var_150, out_cmdloc_dummy_var_151, out_cmdloc_dummy_var_152, out_cmdloc_dummy_var_153, out_cmdloc_dummy_var_154, out_cmdloc_dummy_var_155 := pch_gbe_set_multi_loop_$bb23(in_$i32, in_$p59, in_$i71, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i86, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i74, out_$p75, out_$i100, out_cmdloc_dummy_var_150, out_cmdloc_dummy_var_151, out_cmdloc_dummy_var_152, out_cmdloc_dummy_var_153, out_cmdloc_dummy_var_154, out_cmdloc_dummy_var_155);
    return;

  exit:
    return;
}



procedure pch_gbe_set_multi_loop_$bb23(in_$i32: i32, in_$p59: ref, in_$i71: i64, in_$i76: i1, in_$i77: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i86: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$i74: i32, in_$p75: ref, in_$i100: i32, in_cmdloc_dummy_var_150: [ref]i8, in_cmdloc_dummy_var_151: [ref]i8, in_cmdloc_dummy_var_152: [ref]i8, in_cmdloc_dummy_var_153: [ref]i8, in_cmdloc_dummy_var_154: [ref]i8, in_cmdloc_dummy_var_155: [ref]i8) returns (out_$i76: i1, out_$i77: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i86: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$i74: i32, out_$p75: ref, out_$i100: i32, out_cmdloc_dummy_var_150: [ref]i8, out_cmdloc_dummy_var_151: [ref]i8, out_cmdloc_dummy_var_152: [ref]i8, out_cmdloc_dummy_var_153: [ref]i8, out_cmdloc_dummy_var_154: [ref]i8, out_cmdloc_dummy_var_155: [ref]i8);
  modifies $M.0;



implementation pch_gbe_mac_init_rx_addrs_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p9, out_$p10, out_$p13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i7 := in_$i8, in_$p9, in_$p10, in_$p13, in_$p14, in_$i15, in_$p16, in_$p17, in_$p20, in_$p21, in_$i22, in_$i23, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i22;
    goto $bb6_dummy;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i23 := $ugt.i32(in_$i5, out_$i22);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i7, 1);
    call {:si_unique_call 374} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} iowrite32(0, out_$p21);
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(out_$i15, 8)), $mul.ref(4, 1));
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i7);
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} iowrite32(0, out_$p14);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(out_$i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2589;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i7);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$p9, out_$p10, out_$p13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i7 := pch_gbe_mac_init_rx_addrs_loop_$bb4(in_$p0, in_$i5, out_$i8, out_$p9, out_$p10, out_$p13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure pch_gbe_mac_init_rx_addrs_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i7: i32);



implementation pch_gbe_wait_clr_bit_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i6: i32, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i10: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i6: i32, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i10: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i6, out_$i11, out_$i12, out_$i13, out_$i10 := in_$i7, in_$i8, in_$i9, in_$i6, in_$i11, in_$i12, in_$i13, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i11;
    assume true;
    goto $bb6;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, in_$i1);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$i7 := ioread32(in_$p0);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2751;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} cpu_relax();
    goto corral_source_split_2750;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_2757;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i11;
    assume true;
    goto $bb8;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2747;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i6, out_$i11, out_$i12, out_$i13, out_$i10 := pch_gbe_wait_clr_bit_loop_$bb4(in_$p0, in_$i1, out_$i7, out_$i8, out_$i9, out_$i6, out_$i11, out_$i12, out_$i13, out_$i10);
    return;

  exit:
    return;
}



procedure pch_gbe_wait_clr_bit_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i6: i32, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i10: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i6: i32, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i10: i32);



implementation pch_gbe_mac_mc_addr_list_update_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$i9: i1, in_$i10: i32, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$i12: i32, in_$p13: ref, in_$i43: i32, in_$i44: i1, in_$i6: i32, in_$p7: ref, in_$i8: i32) returns (out_$i9: i1, out_$i10: i32, out_$p11: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p41: ref, out_$p42: ref, out_$i12: i32, out_$p13: ref, out_$i43: i32, out_$i44: i1, out_$i6: i32, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$i9, out_$i10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p41, out_$p42, out_$i12, out_$p13, out_$i43, out_$i44, out_$i6, out_$p7, out_$i8 := in_$i9, in_$i10, in_$p11, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p41, in_$p42, in_$i12, in_$p13, in_$i43, in_$i44, in_$i6, in_$p7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  $bb9:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$p7, out_$i8 := out_$i43, out_$p13, out_$i12;
    goto $bb9_dummy;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i43, in_$i4);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i6, 1);
    call {:si_unique_call 426} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2829;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} iowrite32(0, out_$p42);
    assume {:verifier.code 0} true;
    out_$i12, out_$p13 := out_$i8, out_$p7;
    goto $bb8;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i12, out_$p13 := out_$i10, out_$p11;
    goto $bb8;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p7, $mul.ref(6, 1));
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 419} {:cexpr "mc_addr_count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} pch_gbe_mac_mar_set(in_$p0, out_$p7, out_$i6);
    goto corral_source_split_2794;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(out_$i36, 8)), $mul.ref(4, 1));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i6);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} iowrite32(0, out_$p35);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 364)), $mul.ref(96, 1)), $mul.ref(out_$i29, 8)), $mul.ref(0, 1));
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i6);
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} pch_gbe_wait_clr_bit(out_$p28, $sub.i32(0, 2147483648));
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} iowrite32(out_$i20, out_$p24);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i20 := $or.i32(out_$i19, out_$i18);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i19 := $shl.i32(1, out_$i6);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} out_$i18 := ioread32(out_$p17);
    call {:si_unique_call 421} {:cexpr "adrmask"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 364)), $mul.ref(224, 1));
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_2799;

  $bb7:
    assume !(out_$i9 == 1);
    goto corral_source_split_2798;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p41, out_$p42, out_$i12, out_$p13, out_$i43, out_$i44, out_$i6, out_$p7, out_$i8 := pch_gbe_mac_mc_addr_list_update_loop_$bb4(in_$p0, in_$i4, out_$i9, out_$i10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p41, out_$p42, out_$i12, out_$p13, out_$i43, out_$i44, out_$i6, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure pch_gbe_mac_mc_addr_list_update_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$i9: i1, in_$i10: i32, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$i12: i32, in_$p13: ref, in_$i43: i32, in_$i44: i1, in_$i6: i32, in_$p7: ref, in_$i8: i32) returns (out_$i9: i1, out_$i10: i32, out_$p11: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p41: ref, out_$p42: ref, out_$i12: i32, out_$p13: ref, out_$i43: i32, out_$i44: i1, out_$i6: i32, out_$p7: ref, out_$i8: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation pch_gbe_alloc_rx_buffers_pool_loop_$bb8(in_$p1: ref, in_$i7: i32, in_$p23: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$i37: i16, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$i37: i16, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i26: i32)
{

  entry:
    out_$p27, out_$p28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i26 := in_$p27, in_$p28, in_$i29, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i26;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3288;

  $bb10:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i39;
    goto $bb10_dummy;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i41 := $ugt.i32(out_$i40, out_$i39);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, in_$p23);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i26, 1);
    call {:si_unique_call 512} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p38, out_$i37);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 40)), $mul.ref(32, 1));
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(in_$i7);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p36, out_$p35);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 40)), $mul.ref(16, 1));
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p32, $mul.ref(out_$i34, 1));
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i33);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i33 := $mul.i32(in_$i7, out_$i26);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i26);
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3291;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i26 := pch_gbe_alloc_rx_buffers_pool_loop_$bb8(in_$p1, in_$i7, in_$p23, out_$p27, out_$p28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i26);
    return;

  exit:
    return;
}



procedure pch_gbe_alloc_rx_buffers_pool_loop_$bb8(in_$p1: ref, in_$i7: i32, in_$p23: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$i37: i16, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$i37: i16, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i26: i32);
  modifies $M.0;



implementation pch_gbe_alloc_tx_buffers_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i23;
    goto $bb6_dummy;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i32(out_$i24, out_$i23);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p6);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i9, 1);
    call {:si_unique_call 516} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p22, $sub.i16(0, 16384));
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 16)), $mul.ref(14, 1));
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i9);
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, out_$p16);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 40)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} skb_reserve(out_$p16, 0);
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$p16 := ldv_netdev_alloc_skb_74(out_$p15, in_$i5);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 960)), $mul.ref(152, 1));
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i9);
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_3322;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i9 := pch_gbe_alloc_tx_buffers_loop_$bb4(in_$p0, in_$p1, in_$i5, in_$p6, out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i9);
    return;

  exit:
    return;
}



procedure pch_gbe_alloc_tx_buffers_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i9: i32);
  modifies $M.0, $M.25, $M.24, $CurrAddr;



implementation pch_gbe_alloc_rx_buffers_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i11: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i16, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i24, in_$i83: i24, in_$i84: i24, in_$p85: ref, in_$p86: ref, in_$i87: i8, in_$i88: i64, in_$i89: i64, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$i95: i16, in_$i96: i32, in_$i98: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i64, in_$i104: i64, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i17: i32, in_$i18: i32, in_$i109: i32, in_vslice_dummy_var_232: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i16, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i24, out_$i83: i24, out_$i84: i24, out_$p85: ref, out_$p86: ref, out_$i87: i8, out_$i88: i64, out_$i89: i64, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$i95: i16, out_$i96: i32, out_$i98: i32, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i64, out_$i104: i64, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i17: i32, out_$i18: i32, out_$i109: i32, out_vslice_dummy_var_232: i32)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p66, out_$p67, out_$p68, out_$i69, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i17, out_$i18, out_$i109, out_vslice_dummy_var_232 := in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p66, in_$p67, in_$p68, in_$i69, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i17, in_$i18, in_$i109, in_vslice_dummy_var_232;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3359;

  $bb19:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i107, out_$i106;
    goto $bb19_dummy;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i106;
    assume true;
    goto $bb19;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i17, 0);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 539} {:cexpr "cleaned_count"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_3478;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  $bb17:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := out_$i98;
    goto $bb18;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i106 := 0;
    goto $bb18;

  $bb16:
    assume out_$i105 == 1;
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, 0);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} out_$i104 := ldv__builtin_expect(out_$i103, 0);
    call {:si_unique_call 538} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i102);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i1.i32(out_$i101);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i98, out_$i100);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3467;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i18, 1);
    call {:si_unique_call 536} {:cexpr "i"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_3466;

  $bb14:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_vslice_dummy_var_232 := __dynamic_netdev_dbg.ref.ref.ref.i32.i64.i32(in_$p3, in_$p5, .str.133, out_$i18, out_$i93, out_$i96);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i32(out_$i95);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i16($M.0, out_$p94);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(32, 1));
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3459;

  $bb13:
    assume out_$i91 == 1;
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i90, 0);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} out_$i90 := ldv__builtin_expect(out_$i89, 0);
    call {:si_unique_call 534} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i64(out_$i88, 1);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i64(out_$i87);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.6, out_$p86);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p85, 0);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p81, out_$i84);
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i84 := $or.i24(out_$i83, 1539);
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i24(out_$i82, $sub.i24(0, 262144));
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i24($M.5, out_$p81);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p79, .str.133);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p78, .str.21);
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p77, .str.132);
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p76, .str);
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p75, $sub.i16(0, 16384));
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 16)), $mul.ref(10, 1));
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, out_$i73);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 16)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i64.i32(out_$i72);
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.0, out_$p71);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(out_$i18);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p66, 1);
    goto corral_source_split_3423;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(34, 1));
    goto corral_source_split_3422;

  $bb11:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i54, out_$p55, out_$p56 := out_$i18, out_$p22, out_$p23;
    assume true;
    goto $bb11;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} out_$i52 := dma_mapping_error(out_$p49, out_$i51);
    call {:si_unique_call 531} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 960)), $mul.ref(160, 1));
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p46, out_$i45);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} out_$i45 := dma_map_single_attrs(out_$p39, out_$p41, out_$i44, 2, $0.ref);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i64(out_$i43);
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p42);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(32, 1));
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3394;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(16, 1));
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p38, out_$p23);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 40)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} skb_reserve(out_$p23, 0);
    goto corral_source_split_3389;

  $bb7:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i18;
    assume true;
    goto $bb7;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} out_$i28 := ldv__builtin_expect(out_$i27, 0);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_$p23 := ldv_netdev_alloc_skb_74(in_$p5, in_$i11);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p20, $mul.ref(out_$i21, 40));
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i18);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3362;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p66, out_$p67, out_$p68, out_$i69, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i17, out_$i18, out_$i109, out_vslice_dummy_var_232 := pch_gbe_alloc_rx_buffers_loop_$bb4(in_$p0, in_$p1, in_$p3, in_$p5, in_$p7, in_$i11, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p66, out_$p67, out_$p68, out_$i69, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i17, out_$i18, out_$i109, out_vslice_dummy_var_232);
    return;

  exit:
    return;
}



procedure pch_gbe_alloc_rx_buffers_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i11: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i16, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i24, in_$i83: i24, in_$i84: i24, in_$p85: ref, in_$p86: ref, in_$i87: i8, in_$i88: i64, in_$i89: i64, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$i93: i64, in_$p94: ref, in_$i95: i16, in_$i96: i32, in_$i98: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i64, in_$i104: i64, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i17: i32, in_$i18: i32, in_$i109: i32, in_vslice_dummy_var_232: i32) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i16, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i24, out_$i83: i24, out_$i84: i24, out_$p85: ref, out_$p86: ref, out_$i87: i8, out_$i88: i64, out_$i89: i64, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$i93: i64, out_$p94: ref, out_$i95: i16, out_$i96: i32, out_$i98: i32, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i64, out_$i104: i64, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i17: i32, out_$i18: i32, out_$i109: i32, out_vslice_dummy_var_232: i32);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.0, $M.16, $M.18, $M.20, $M.22, $M.15, $M.17, $M.19, $M.21, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.26, $M.10, $M.27, $M.12, $M.28, $M.14, $M.29, $M.25, $M.24, $M.41;



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3965;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i28 := $M.24;
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 641} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p26, out_$p23);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.25, out_$p22);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_3968;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.25;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i14 := $M.24;
    goto corral_source_split_3955;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 639} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3954;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.25, out_$p7);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_3941;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$i12 := $M.24;
    goto corral_source_split_4080;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 664} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_4079;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.25, out_$p6);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_4066;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_4728;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} msleep(1);
    goto corral_source_split_4727;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr;



implementation pch_gbe_clean_tx_ring_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i8: i32, in_$i16: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i8: i32, out_$i16: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i8, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i15 := $ugt.i32(out_$i14, out_$i13);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i8, 1);
    call {:si_unique_call 841} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} pch_gbe_unmap_and_free_tx_resource(in_$p0, out_$p12);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 40));
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_4810;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16 := pch_gbe_clean_tx_ring_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16);
    return;

  exit:
    return;
}



procedure pch_gbe_clean_tx_ring_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i8: i32, in_$i16: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i8: i32, out_$i16: i32);
  modifies $M.0;



implementation pch_gbe_clean_rx_ring_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i8: i32, in_$i16: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i8: i32, out_$i16: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i8, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4890;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i15 := $ugt.i32(out_$i14, out_$i13);
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i8, 1);
    call {:si_unique_call 852} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_4897;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} pch_gbe_unmap_and_free_rx_resource(in_$p0, out_$p12);
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 40));
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_4893;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16 := pch_gbe_clean_rx_ring_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16);
    return;

  exit:
    return;
}



procedure pch_gbe_clean_rx_ring_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i8: i32, in_$i16: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i8: i32, out_$i16: i32);
  modifies $M.0;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation pch_gbe_setup_rx_resources_loop_$bb11(in_$p1: ref, in_$p38: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i41: i32) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i41: i32)
{

  entry:
    out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41 := in_$p42, in_$p43, in_$i44, in_$p46, in_$i47, in_$i48, in_$i49, in_$i41;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5261;

  $bb13:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i47;
    goto $bb13_dummy;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i32(out_$i47, out_$i48);
    goto corral_source_split_5271;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p38);
    goto corral_source_split_5270;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i41, 1);
    call {:si_unique_call 936} {:cexpr "desNo"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_5269;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p46, $sub.i16(0, 16384));
    goto corral_source_split_5268;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 16)), $mul.ref(10, 1));
    goto corral_source_split_5267;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    goto corral_source_split_5266;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i41);
    goto corral_source_split_5265;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_5264;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41 := pch_gbe_setup_rx_resources_loop_$bb11(in_$p1, in_$p38, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41);
    return;

  exit:
    return;
}



procedure pch_gbe_setup_rx_resources_loop_$bb11(in_$p1: ref, in_$p38: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i41: i32) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i41: i32);
  modifies $M.0;



implementation pch_gbe_setup_tx_resources_loop_$bb11(in_$p1: ref, in_$p44: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i47: i32) returns (out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i47: i32)
{

  entry:
    out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$i55, out_$i47 := in_$p48, in_$p49, in_$i50, in_$p52, in_$i53, in_$i54, in_$i55, in_$i47;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5371;

  $bb13:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i53;
    goto $bb13_dummy;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i53, out_$i54);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, in_$p44);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i47, 1);
    call {:si_unique_call 948} {:cexpr "desNo"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_5379;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p52, $sub.i16(0, 16384));
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 16)), $mul.ref(14, 1));
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i47);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_5374;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p1, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$i55, out_$i47 := pch_gbe_setup_tx_resources_loop_$bb11(in_$p1, in_$p44, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$i55, out_$i47);
    return;

  exit:
    return;
}



procedure pch_gbe_setup_tx_resources_loop_$bb11(in_$p1: ref, in_$p44: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i47: i32) returns (out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i47: i32);
  modifies $M.0;



implementation arch_local_irq_restore_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_restore_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_restore_loop_$bb3();



implementation arch_local_irq_disable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_disable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_disable_loop_$bb3();



implementation pch_gbe_validate_option_loop_$bb58()
{

  entry:
    goto $bb58, exit;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb58_dummy;

  $bb58_dummy:
    call {:si_unique_call 1} pch_gbe_validate_option_loop_$bb58();
    return;

  exit:
    return;
}



procedure pch_gbe_validate_option_loop_$bb58();



implementation pch_gbe_validate_option_loop_$bb43(in_$p0: ref, in_$p1: ref, in_$p101: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i104: i32) returns (out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i104: i32)
{

  entry:
    out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i142, out_$i143, out_$i144, out_$i104 := in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$p110, in_$i111, in_$p112, in_$i113, in_$i114, in_$p115, in_$i142, in_$i143, in_$i144, in_$i104;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_12607;

  $bb54:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := out_$i142;
    goto $bb54_dummy;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    out_$i144 := $sgt.i32(out_$i143, out_$i142);
    goto corral_source_split_12660;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.47, in_$p101);
    goto corral_source_split_12659;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i104, 1);
    call {:si_unique_call 2445} {:cexpr "i"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_12658;

  $bb46:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    out_$p115 := out_$p110;
    assume true;
    goto $bb46;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i111, out_$i113);
    goto corral_source_split_12618;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.56, out_$p112);
    goto corral_source_split_12617;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p108, $mul.ref(out_$i109, 16)), $mul.ref(0, 1));
    goto corral_source_split_12616;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, in_$p0);
    goto corral_source_split_12615;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref(out_$p108, $mul.ref(out_$i109, 16));
    goto corral_source_split_12614;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i104);
    goto corral_source_split_12613;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.51, out_$p107);
    goto corral_source_split_12612;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12611;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_12610;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_12609;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i142, out_$i143, out_$i144, out_$i104 := pch_gbe_validate_option_loop_$bb43(in_$p0, in_$p1, in_$p101, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i142, out_$i143, out_$i144, out_$i104);
    return;

  exit:
    return;
}



procedure pch_gbe_validate_option_loop_$bb43(in_$p0: ref, in_$p1: ref, in_$p101: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i104: i32) returns (out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i104: i32);



implementation pch_gbe_check_copper_options_loop_$bb102()
{

  entry:
    goto $bb102, exit;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb102_dummy;

  $bb102_dummy:
    call {:si_unique_call 1} pch_gbe_check_copper_options_loop_$bb102();
    return;

  exit:
    return;
}



procedure pch_gbe_check_copper_options_loop_$bb102();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i64, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i64, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i64, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$i182: i32, in_$i183: i32, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i239: i32, in_$i240: i1, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i1, in_$i250: i32, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_$i274: i32, in_$i275: i1, in_$i276: i32, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i32, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i307: i32, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$i313: i32, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i319: i32, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i1, in_$i341: i32, in_$i342: i32, in_$i343: i1, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i32, in_$i353: i1, in_$i354: i32, in_$i355: i1, in_$i356: i32, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i32, in_$i368: i1, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i372: i1, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i32, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$i383: i32, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$i388: i32, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$i397: i1, in_$i398: i32, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i404: i32, in_$i405: i32, in_vslice_dummy_var_420: i32, in_vslice_dummy_var_421: i32, in_vslice_dummy_var_422: i32, in_vslice_dummy_var_423: i32, in_vslice_dummy_var_424: ref, in_vslice_dummy_var_425: ref, in_vslice_dummy_var_426: ref, in_vslice_dummy_var_427: i32, in_vslice_dummy_var_428: i32, in_vslice_dummy_var_429: i32, in_vslice_dummy_var_430: i32, in_vslice_dummy_var_431: i32, in_vslice_dummy_var_432: i32, in_vslice_dummy_var_433: i32, in_vslice_dummy_var_434: i32, in_vslice_dummy_var_435: i32, in_vslice_dummy_var_436: i32, in_vslice_dummy_var_437: i32, in_vslice_dummy_var_438: i32, in_vslice_dummy_var_439: i32, in_vslice_dummy_var_440: i32, in_vslice_dummy_var_441: i32, in_vslice_dummy_var_442: i32, in_vslice_dummy_var_443: i32, in_vslice_dummy_var_444: i32, in_vslice_dummy_var_445: i32, in_vslice_dummy_var_446: i32, in_vslice_dummy_var_447: i32, in_vslice_dummy_var_448: i32) returns (out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i64, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i64, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i64, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$i182: i32, out_$i183: i32, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i239: i32, out_$i240: i1, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i1, out_$i250: i32, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_$i274: i32, out_$i275: i1, out_$i276: i32, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i32, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i307: i32, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$i313: i32, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i319: i32, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i1, out_$i341: i32, out_$i342: i32, out_$i343: i1, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i32, out_$i353: i1, out_$i354: i32, out_$i355: i1, out_$i356: i32, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i32, out_$i368: i1, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i372: i1, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i32, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$i383: i32, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$i388: i32, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$i397: i1, out_$i398: i32, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i404: i32, out_$i405: i32, out_vslice_dummy_var_420: i32, out_vslice_dummy_var_421: i32, out_vslice_dummy_var_422: i32, out_vslice_dummy_var_423: i32, out_vslice_dummy_var_424: ref, out_vslice_dummy_var_425: ref, out_vslice_dummy_var_426: ref, out_vslice_dummy_var_427: i32, out_vslice_dummy_var_428: i32, out_vslice_dummy_var_429: i32, out_vslice_dummy_var_430: i32, out_vslice_dummy_var_431: i32, out_vslice_dummy_var_432: i32, out_vslice_dummy_var_433: i32, out_vslice_dummy_var_434: i32, out_vslice_dummy_var_435: i32, out_vslice_dummy_var_436: i32, out_vslice_dummy_var_437: i32, out_vslice_dummy_var_438: i32, out_vslice_dummy_var_439: i32, out_vslice_dummy_var_440: i32, out_vslice_dummy_var_441: i32, out_vslice_dummy_var_442: i32, out_vslice_dummy_var_443: i32, out_vslice_dummy_var_444: i32, out_vslice_dummy_var_445: i32, out_vslice_dummy_var_446: i32, out_vslice_dummy_var_447: i32, out_vslice_dummy_var_448: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i239, out_$i240, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i248, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$p312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i404, out_$i405, out_vslice_dummy_var_420, out_vslice_dummy_var_421, out_vslice_dummy_var_422, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_426, out_vslice_dummy_var_427, out_vslice_dummy_var_428, out_vslice_dummy_var_429, out_vslice_dummy_var_430, out_vslice_dummy_var_431, out_vslice_dummy_var_432, out_vslice_dummy_var_433, out_vslice_dummy_var_434, out_vslice_dummy_var_435, out_vslice_dummy_var_436, out_vslice_dummy_var_437, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442, out_vslice_dummy_var_443, out_vslice_dummy_var_444, out_vslice_dummy_var_445, out_vslice_dummy_var_446, out_vslice_dummy_var_447, out_vslice_dummy_var_448 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i83, in_$i84, in_$p85, in_$i87, in_$i88, in_$p89, in_$i91, in_$i92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i99, in_$i100, in_$p101, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i140, in_$i141, in_$p142, in_$i143, in_$i145, in_$i146, in_$p147, in_$i148, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i158, in_$i159, in_$p160, in_$i162, in_$i163, in_$p164, in_$i166, in_$i167, in_$p168, in_$i170, in_$i171, in_$p172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$p214, in_$i216, in_$i217, in_$p218, in_$i220, in_$i221, in_$p222, in_$i224, in_$i225, in_$p226, in_$i227, in_$i229, in_$i230, in_$p231, in_$i232, in_$i234, in_$i235, in_$p236, in_$i237, in_$i239, in_$i240, in_$i242, in_$i243, in_$i245, in_$i246, in_$i247, in_$i248, in_$i250, in_$i251, in_$i252, in_$i253, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$p300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$p306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$p312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$p318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$p324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$p330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i404, in_$i405, in_vslice_dummy_var_420, in_vslice_dummy_var_421, in_vslice_dummy_var_422, in_vslice_dummy_var_423, in_vslice_dummy_var_424, in_vslice_dummy_var_425, in_vslice_dummy_var_426, in_vslice_dummy_var_427, in_vslice_dummy_var_428, in_vslice_dummy_var_429, in_vslice_dummy_var_430, in_vslice_dummy_var_431, in_vslice_dummy_var_432, in_vslice_dummy_var_433, in_vslice_dummy_var_434, in_vslice_dummy_var_435, in_vslice_dummy_var_436, in_vslice_dummy_var_437, in_vslice_dummy_var_438, in_vslice_dummy_var_439, in_vslice_dummy_var_440, in_vslice_dummy_var_441, in_vslice_dummy_var_442, in_vslice_dummy_var_443, in_vslice_dummy_var_444, in_vslice_dummy_var_445, in_vslice_dummy_var_446, in_vslice_dummy_var_447, in_vslice_dummy_var_448;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2842} out_$i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 2843} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i15);
    call {:si_unique_call 2844} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i15);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb27:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2849} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14192;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} out_vslice_dummy_var_420 := pch_gbe_minnow_platform_init(in_$p3);
    goto corral_source_split_14191;

  $bb31:
    assume out_$i32 == 1;
    goto corral_source_split_14190;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_14188;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    out_$i31 := $M.77;
    goto corral_source_split_14187;

  $bb29:
    assume out_$i30 == 1;
    goto corral_source_split_14186;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2845} out_$i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 2846} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i29);
    call {:si_unique_call 2847} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i29);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i28 == 1;
    goto corral_source_split_14184;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_14182;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    out_$i27 := $M.77;
    goto corral_source_split_14181;

  $bb24:
    assume out_$i26 == 1;
    goto corral_source_split_14180;

  $bb22:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb16:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb3:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_stop();
    goto corral_source_split_14194;

  $bb30:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $M.70 := out_$i48;
    call {:si_unique_call 2857} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_14221;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i47, 1);
    goto corral_source_split_14220;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    out_$i47 := $M.70;
    goto corral_source_split_14219;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2856} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_14218;

  $bb53:
    assume out_$i46 == 1;
    goto corral_source_split_14217;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_14215;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    out_$i45 := $M.84;
    goto corral_source_split_14214;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $M.84 := out_$i44;
    call {:si_unique_call 2855} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_14213;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} out_$i44 := pch_gbe_probe(out_$p43, in_$p5);
    goto corral_source_split_14212;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    out_$p43 := $M.74;
    goto corral_source_split_14211;

  $bb51:
    assume out_$i42 == 1;
    goto corral_source_split_14210;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 1);
    goto corral_source_split_14208;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    out_$i41 := $M.78;
    goto corral_source_split_14207;

  $bb49:
    assume out_$i40 == 1;
    goto corral_source_split_14206;

  $bb42:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_14196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2851} out_$i36 := __VERIFIER_nondet_int();
    call {:si_unique_call 2852} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i36);
    call {:si_unique_call 2853} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i36);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i35 == 1;
    goto corral_source_split_14196;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_14178;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    out_$i34 := $M.78;
    goto corral_source_split_14177;

  $bb23:
    assume !(out_$i25 == 1);
    goto corral_source_split_14176;

  $bb59:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 2859} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_14226;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} pch_gbe_shutdown(out_$p51);
    goto corral_source_split_14225;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    out_$p51 := $M.74;
    goto corral_source_split_14224;

  $bb58:
    assume out_$i50 == 1;
    goto corral_source_split_14223;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 2);
    goto corral_source_split_14200;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    out_$i49 := $M.78;
    goto corral_source_split_14199;

  $bb44:
    assume out_$i38 == 1;
    goto corral_source_split_14198;

  $bb43:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb65:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $M.70 := out_$i61;
    call {:si_unique_call 2865} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_14245;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i60, 1);
    goto corral_source_split_14244;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    out_$i60 := $M.70;
    goto corral_source_split_14243;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2864} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14242;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} pch_gbe_remove(out_$p59);
    goto corral_source_split_14241;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    out_$p59 := $M.74;
    goto corral_source_split_14240;

  $bb64:
    assume out_$i58 == 1;
    goto corral_source_split_14239;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 2);
    goto corral_source_split_14237;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i57 := $M.78;
    goto corral_source_split_14236;

  $bb62:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $M.70 := out_$i56;
    call {:si_unique_call 2862} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_14234;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    out_$i56 := $sub.i32(out_$i55, 1);
    goto corral_source_split_14233;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    out_$i55 := $M.70;
    goto corral_source_split_14232;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2861} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14231;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} pch_gbe_remove(out_$p54);
    goto corral_source_split_14230;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    out_$p54 := $M.74;
    goto corral_source_split_14229;

  $bb61:
    assume out_$i53 == 1;
    goto corral_source_split_14228;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 3);
    goto corral_source_split_14204;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    out_$i52 := $M.78;
    goto corral_source_split_14203;

  $bb46:
    assume out_$i39 == 1;
    goto corral_source_split_14202;

  $bb45:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} ldv_stop();
    goto corral_source_split_14247;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb48;

  $bb71:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2875} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14322;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} out_vslice_dummy_var_423 := pch_gbe_ioctl(out_$p89, in_$p7, in_$i12);
    goto corral_source_split_14321;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    out_$p89 := $M.55;
    goto corral_source_split_14320;

  $bb108:
    assume out_$i88 == 1;
    goto corral_source_split_14319;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 2);
    goto corral_source_split_14317;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i87 := $M.41;
    goto corral_source_split_14316;

  $bb106:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2873} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14314;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} out_vslice_dummy_var_422 := pch_gbe_ioctl(out_$p85, in_$p7, in_$i12);
    goto corral_source_split_14313;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    out_$p85 := $M.55;
    goto corral_source_split_14312;

  $bb105:
    assume out_$i84 == 1;
    goto corral_source_split_14311;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 3);
    goto corral_source_split_14309;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i83 := $M.41;
    goto corral_source_split_14308;

  $bb103:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2871} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14306;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} out_vslice_dummy_var_421 := pch_gbe_ioctl(out_$p81, in_$p7, in_$i12);
    goto corral_source_split_14305;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    out_$p81 := $M.55;
    goto corral_source_split_14304;

  $bb102:
    assume out_$i80 == 1;
    goto corral_source_split_14303;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 1);
    goto corral_source_split_14301;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    out_$i79 := $M.41;
    goto corral_source_split_14300;

  $bb100:
    assume out_$i78 == 1;
    goto corral_source_split_14299;

  $bb96:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb90:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb73:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i64, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_14249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2867} out_$i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 2868} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i64);
    call {:si_unique_call 2869} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i64);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i63 == 1;
    goto corral_source_split_14249;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_14166;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    out_$i62 := $M.41;
    goto corral_source_split_14165;

  $bb18:
    assume out_$i23 == 1;
    goto corral_source_split_14164;

  $bb17:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb119:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2881} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14343;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} out_vslice_dummy_var_426 := pch_gbe_get_stats(out_$p101);
    goto corral_source_split_14342;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    out_$p101 := $M.55;
    goto corral_source_split_14341;

  $bb118:
    assume out_$i100 == 1;
    goto corral_source_split_14340;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 2);
    goto corral_source_split_14338;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i99 := $M.41;
    goto corral_source_split_14337;

  $bb116:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2879} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14335;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} out_vslice_dummy_var_425 := pch_gbe_get_stats(out_$p97);
    goto corral_source_split_14334;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    out_$p97 := $M.55;
    goto corral_source_split_14333;

  $bb115:
    assume out_$i96 == 1;
    goto corral_source_split_14332;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 3);
    goto corral_source_split_14330;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i95 := $M.41;
    goto corral_source_split_14329;

  $bb113:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2877} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14327;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} out_vslice_dummy_var_424 := pch_gbe_get_stats(out_$p93);
    goto corral_source_split_14326;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    out_$p93 := $M.55;
    goto corral_source_split_14325;

  $bb112:
    assume out_$i92 == 1;
    goto corral_source_split_14324;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_14293;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    out_$i91 := $M.41;
    goto corral_source_split_14292;

  $bb98:
    assume out_$i77 == 1;
    goto corral_source_split_14291;

  $bb97:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb122:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2884} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14353;

  $bb123:
    assume out_$i108 == 1;
    goto corral_source_split_14352;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 0);
    goto corral_source_split_14350;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    out_$i107 := $M.85;
    goto corral_source_split_14349;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $M.85 := out_$i106;
    call {:si_unique_call 2883} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_14348;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} out_$i106 := pch_gbe_open(out_$p105);
    goto corral_source_split_14347;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    out_$p105 := $M.55;
    goto corral_source_split_14346;

  $bb121:
    assume out_$i104 == 1;
    goto corral_source_split_14345;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 2);
    goto corral_source_split_14297;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    out_$i103 := $M.41;
    goto corral_source_split_14296;

  $bb99:
    assume !(out_$i77 == 1);
    goto corral_source_split_14295;

  $bb128:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2886} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14358;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} out_vslice_dummy_var_427 := pch_gbe_xmit_frame(in_$p10, out_$p111);
    goto corral_source_split_14357;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    out_$p111 := $M.55;
    goto corral_source_split_14356;

  $bb127:
    assume out_$i110 == 1;
    goto corral_source_split_14355;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 3);
    goto corral_source_split_14281;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    out_$i109 := $M.41;
    goto corral_source_split_14280;

  $bb92:
    assume out_$i74 == 1;
    goto corral_source_split_14279;

  $bb91:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb131:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2888} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14363;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} out_vslice_dummy_var_428 := pch_gbe_stop(out_$p115);
    goto corral_source_split_14362;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    out_$p115 := $M.55;
    goto corral_source_split_14361;

  $bb130:
    assume out_$i114 == 1;
    goto corral_source_split_14360;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 3);
    goto corral_source_split_14285;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    out_$i113 := $M.41;
    goto corral_source_split_14284;

  $bb94:
    assume out_$i75 == 1;
    goto corral_source_split_14283;

  $bb93:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i64, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb140:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2894} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14384;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} pch_gbe_set_multi(out_$p125);
    goto corral_source_split_14383;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    out_$p125 := $M.55;
    goto corral_source_split_14382;

  $bb139:
    assume out_$i124 == 1;
    goto corral_source_split_14381;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 2);
    goto corral_source_split_14379;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i123 := $M.41;
    goto corral_source_split_14378;

  $bb137:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2892} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14376;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} pch_gbe_set_multi(out_$p122);
    goto corral_source_split_14375;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    out_$p122 := $M.55;
    goto corral_source_split_14374;

  $bb136:
    assume out_$i121 == 1;
    goto corral_source_split_14373;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 3);
    goto corral_source_split_14371;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i120 := $M.41;
    goto corral_source_split_14370;

  $bb134:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2890} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14368;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} pch_gbe_set_multi(out_$p119);
    goto corral_source_split_14367;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    out_$p119 := $M.55;
    goto corral_source_split_14366;

  $bb133:
    assume out_$i118 == 1;
    goto corral_source_split_14365;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_14289;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    out_$i117 := $M.41;
    goto corral_source_split_14288;

  $bb95:
    assume !(out_$i75 == 1);
    goto corral_source_split_14287;

  $bb149:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2900} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14405;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} pch_gbe_netpoll(out_$p134);
    goto corral_source_split_14404;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    out_$p134 := $M.55;
    goto corral_source_split_14403;

  $bb148:
    assume out_$i133 == 1;
    goto corral_source_split_14402;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 2);
    goto corral_source_split_14400;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i132 := $M.41;
    goto corral_source_split_14399;

  $bb146:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2898} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14397;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} pch_gbe_netpoll(out_$p131);
    goto corral_source_split_14396;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    out_$p131 := $M.55;
    goto corral_source_split_14395;

  $bb145:
    assume out_$i130 == 1;
    goto corral_source_split_14394;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 3);
    goto corral_source_split_14392;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i129 := $M.41;
    goto corral_source_split_14391;

  $bb143:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2896} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14389;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} pch_gbe_netpoll(out_$p128);
    goto corral_source_split_14388;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    out_$p128 := $M.55;
    goto corral_source_split_14387;

  $bb142:
    assume out_$i127 == 1;
    goto corral_source_split_14386;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 1);
    goto corral_source_split_14269;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    out_$i126 := $M.41;
    goto corral_source_split_14268;

  $bb86:
    assume out_$i71 == 1;
    goto corral_source_split_14267;

  $bb75:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i64, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb74:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i64, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb158:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2906} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14429;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} out_vslice_dummy_var_431 := pch_gbe_set_features(out_$p147, out_$i148);
    goto corral_source_split_14428;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i64($M.75, in_$p0);
    goto corral_source_split_14427;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    out_$p147 := $M.55;
    goto corral_source_split_14426;

  $bb157:
    assume out_$i146 == 1;
    goto corral_source_split_14425;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 2);
    goto corral_source_split_14423;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i145 := $M.41;
    goto corral_source_split_14422;

  $bb155:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2904} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14420;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} out_vslice_dummy_var_430 := pch_gbe_set_features(out_$p142, out_$i143);
    goto corral_source_split_14419;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.75, in_$p0);
    goto corral_source_split_14418;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    out_$p142 := $M.55;
    goto corral_source_split_14417;

  $bb154:
    assume out_$i141 == 1;
    goto corral_source_split_14416;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 3);
    goto corral_source_split_14414;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i140 := $M.41;
    goto corral_source_split_14413;

  $bb152:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2902} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14411;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} out_vslice_dummy_var_429 := pch_gbe_set_features(out_$p137, out_$i138);
    goto corral_source_split_14410;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.75, in_$p0);
    goto corral_source_split_14409;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    out_$p137 := $M.55;
    goto corral_source_split_14408;

  $bb151:
    assume out_$i136 == 1;
    goto corral_source_split_14407;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_14273;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    out_$i135 := $M.41;
    goto corral_source_split_14272;

  $bb88:
    assume out_$i72 == 1;
    goto corral_source_split_14271;

  $bb87:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i64, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb164:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2910} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14442;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} out_vslice_dummy_var_433 := pch_gbe_change_mtu(out_$p156, in_$i8);
    goto corral_source_split_14441;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    out_$p156 := $M.55;
    goto corral_source_split_14440;

  $bb163:
    assume out_$i155 == 1;
    goto corral_source_split_14439;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 2);
    goto corral_source_split_14437;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i154 := $M.41;
    goto corral_source_split_14436;

  $bb161:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2908} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14434;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} out_vslice_dummy_var_432 := pch_gbe_change_mtu(out_$p152, in_$i8);
    goto corral_source_split_14433;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    out_$p152 := $M.55;
    goto corral_source_split_14432;

  $bb160:
    assume out_$i151 == 1;
    goto corral_source_split_14431;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 3);
    goto corral_source_split_14277;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    out_$i150 := $M.41;
    goto corral_source_split_14276;

  $bb89:
    assume !(out_$i72 == 1);
    goto corral_source_split_14275;

  $bb173:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2916} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14463;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} out_vslice_dummy_var_436 := pch_gbe_set_mac(out_$p168, in_$p11);
    goto corral_source_split_14462;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    out_$p168 := $M.55;
    goto corral_source_split_14461;

  $bb172:
    assume out_$i167 == 1;
    goto corral_source_split_14460;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 2);
    goto corral_source_split_14458;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i166 := $M.41;
    goto corral_source_split_14457;

  $bb170:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2914} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14455;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} out_vslice_dummy_var_435 := pch_gbe_set_mac(out_$p164, in_$p11);
    goto corral_source_split_14454;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    out_$p164 := $M.55;
    goto corral_source_split_14453;

  $bb169:
    assume out_$i163 == 1;
    goto corral_source_split_14452;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 3);
    goto corral_source_split_14450;

  $bb168:
    assume {:verifier.code 0} true;
    out_$i162 := $M.41;
    goto corral_source_split_14449;

  $bb167:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2912} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14447;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} out_vslice_dummy_var_434 := pch_gbe_set_mac(out_$p160, in_$p11);
    goto corral_source_split_14446;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    out_$p160 := $M.55;
    goto corral_source_split_14445;

  $bb166:
    assume out_$i159 == 1;
    goto corral_source_split_14444;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 1);
    goto corral_source_split_14261;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    out_$i158 := $M.41;
    goto corral_source_split_14260;

  $bb84:
    assume out_$i70 == 1;
    goto corral_source_split_14259;

  $bb77:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i64, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb76:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i64, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb182:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2922} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14484;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} pch_gbe_tx_timeout(out_$p178);
    goto corral_source_split_14483;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    out_$p178 := $M.55;
    goto corral_source_split_14482;

  $bb181:
    assume out_$i177 == 1;
    goto corral_source_split_14481;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 2);
    goto corral_source_split_14479;

  $bb180:
    assume {:verifier.code 0} true;
    out_$i176 := $M.41;
    goto corral_source_split_14478;

  $bb179:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2920} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_14476;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} pch_gbe_tx_timeout(out_$p175);
    goto corral_source_split_14475;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    out_$p175 := $M.55;
    goto corral_source_split_14474;

  $bb178:
    assume out_$i174 == 1;
    goto corral_source_split_14473;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 3);
    goto corral_source_split_14471;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i173 := $M.41;
    goto corral_source_split_14470;

  $bb176:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2918} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14468;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} pch_gbe_tx_timeout(out_$p172);
    goto corral_source_split_14467;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    out_$p172 := $M.55;
    goto corral_source_split_14466;

  $bb175:
    assume out_$i171 == 1;
    goto corral_source_split_14465;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_14265;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    out_$i170 := $M.41;
    goto corral_source_split_14264;

  $bb85:
    assume !(out_$i70 == 1);
    goto corral_source_split_14263;

  $bb185:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $M.70 := out_$i183;
    call {:si_unique_call 2925} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i183);
    goto corral_source_split_14491;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    out_$i183 := $sub.i32(out_$i182, 1);
    goto corral_source_split_14490;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    out_$i182 := $M.70;
    goto corral_source_split_14489;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2924} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14488;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} out_vslice_dummy_var_437 := ldv_ndo_uninit_7();
    goto corral_source_split_14487;

  $bb184:
    assume out_$i180 == 1;
    goto corral_source_split_14486;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_14253;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    out_$i179 := $M.41;
    goto corral_source_split_14252;

  $bb79:
    assume out_$i68 == 1;
    goto corral_source_split_14251;

  $bb78:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i64, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb188:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $M.70 := out_$i190;
    call {:si_unique_call 2929} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_14503;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    out_$i190 := $add.i32(out_$i189, 1);
    goto corral_source_split_14502;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    out_$i189 := $M.70;
    goto corral_source_split_14501;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2928} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14500;

  $bb189:
    assume out_$i188 == 1;
    goto corral_source_split_14499;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_14497;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    out_$i187 := $M.86;
    goto corral_source_split_14496;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $M.86 := out_$i186;
    call {:si_unique_call 2927} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_14495;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} out_$i186 := ldv_ndo_init_7();
    goto corral_source_split_14494;

  $bb187:
    assume out_$i185 == 1;
    goto corral_source_split_14493;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 1);
    goto corral_source_split_14257;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    out_$i184 := $M.41;
    goto corral_source_split_14256;

  $bb81:
    assume out_$i69 == 1;
    goto corral_source_split_14255;

  $bb80:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i64, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} ldv_stop();
    goto corral_source_split_14505;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb83;

  $bb101:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb83;

  $bb197:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} ldv_main_exported_9();
    goto corral_source_split_14508;

  $bb196:
    assume out_$i192 == 1;
    goto corral_source_split_14507;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    out_$i192 := $ne.i32(out_$i191, 0);
    goto corral_source_split_14170;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    out_$i191 := $M.67;
    goto corral_source_split_14169;

  $bb20:
    assume out_$i24 == 1;
    goto corral_source_split_14168;

  $bb19:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb200:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} choose_timer_2();
    goto corral_source_split_14511;

  $bb199:
    assume out_$i194 == 1;
    goto corral_source_split_14510;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_14174;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    out_$i193 := $M.79;
    goto corral_source_split_14173;

  $bb21:
    assume !(out_$i24 == 1);
    goto corral_source_split_14172;

  $bb203:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} ldv_main_exported_8();
    goto corral_source_split_14514;

  $bb202:
    assume out_$i196 == 1;
    goto corral_source_split_14513;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    out_$i196 := $ne.i32(out_$i195, 0);
    goto corral_source_split_14158;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    out_$i195 := $M.69;
    goto corral_source_split_14157;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_14156;

  $bb5:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i15, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb206:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} choose_interrupt_1();
    goto corral_source_split_14517;

  $bb205:
    assume out_$i198 == 1;
    goto corral_source_split_14516;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    out_$i198 := $ne.i32(out_$i197, 0);
    goto corral_source_split_14162;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    out_$i197 := $M.80;
    goto corral_source_split_14161;

  $bb15:
    assume !(out_$i21 == 1);
    goto corral_source_split_14160;

  $bb209:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb227:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2939} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14548;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} pch_gbe_io_resume(out_$p211);
    goto corral_source_split_14547;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    out_$p211 := $M.71;
    goto corral_source_split_14546;

  $bb226:
    assume out_$i210 == 1;
    goto corral_source_split_14545;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 3);
    goto corral_source_split_14543;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    out_$i209 := $M.81;
    goto corral_source_split_14542;

  $bb224:
    assume out_$i208 == 1;
    goto corral_source_split_14541;

  $bb220:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i201, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb211:
    assume out_$i202 == 1;
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i201, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb210:
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i201, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_14519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2935} out_$i201 := __VERIFIER_nondet_int();
    call {:si_unique_call 2936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i201);
    call {:si_unique_call 2937} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i201);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb208:
    assume out_$i200 == 1;
    goto corral_source_split_14519;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i32(out_$i199, 0);
    goto corral_source_split_14146;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    out_$i199 := $M.81;
    goto corral_source_split_14145;

  $bb7:
    assume out_$i18 == 1;
    goto corral_source_split_14144;

  $bb6:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb237:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2945} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14569;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} out_vslice_dummy_var_440 := pch_gbe_io_slot_reset(out_$p222);
    goto corral_source_split_14568;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    out_$p222 := $M.71;
    goto corral_source_split_14567;

  $bb236:
    assume out_$i221 == 1;
    goto corral_source_split_14566;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 2);
    goto corral_source_split_14564;

  $bb235:
    assume {:verifier.code 0} true;
    out_$i220 := $M.81;
    goto corral_source_split_14563;

  $bb234:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2943} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_14561;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} out_vslice_dummy_var_439 := pch_gbe_io_slot_reset(out_$p218);
    goto corral_source_split_14560;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    out_$p218 := $M.71;
    goto corral_source_split_14559;

  $bb233:
    assume out_$i217 == 1;
    goto corral_source_split_14558;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 3);
    goto corral_source_split_14556;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i216 := $M.81;
    goto corral_source_split_14555;

  $bb231:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2941} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14553;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} out_vslice_dummy_var_438 := pch_gbe_io_slot_reset(out_$p214);
    goto corral_source_split_14552;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    out_$p214 := $M.71;
    goto corral_source_split_14551;

  $bb230:
    assume out_$i213 == 1;
    goto corral_source_split_14550;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_14535;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    out_$i212 := $M.81;
    goto corral_source_split_14534;

  $bb222:
    assume out_$i207 == 1;
    goto corral_source_split_14533;

  $bb221:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    out_$i207 := $slt.i32(out_$i201, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb246:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2951} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14593;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} out_vslice_dummy_var_443 := pch_gbe_io_error_detected(out_$p236, out_$i237);
    goto corral_source_split_14592;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    out_$i237 := $load.i32($M.76, in_$p1);
    goto corral_source_split_14591;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    out_$p236 := $M.71;
    goto corral_source_split_14590;

  $bb245:
    assume out_$i235 == 1;
    goto corral_source_split_14589;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 2);
    goto corral_source_split_14587;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i234 := $M.81;
    goto corral_source_split_14586;

  $bb243:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2949} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_14584;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} out_vslice_dummy_var_442 := pch_gbe_io_error_detected(out_$p231, out_$i232);
    goto corral_source_split_14583;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.76, in_$p1);
    goto corral_source_split_14582;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    out_$p231 := $M.71;
    goto corral_source_split_14581;

  $bb242:
    assume out_$i230 == 1;
    goto corral_source_split_14580;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 3);
    goto corral_source_split_14578;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i229 := $M.81;
    goto corral_source_split_14577;

  $bb240:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2947} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14575;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} out_vslice_dummy_var_441 := pch_gbe_io_error_detected(out_$p226, out_$i227);
    goto corral_source_split_14574;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.76, in_$p1);
    goto corral_source_split_14573;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    out_$p226 := $M.71;
    goto corral_source_split_14572;

  $bb239:
    assume out_$i225 == 1;
    goto corral_source_split_14571;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 1);
    goto corral_source_split_14539;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    out_$i224 := $M.81;
    goto corral_source_split_14538;

  $bb223:
    assume !(out_$i207 == 1);
    goto corral_source_split_14537;

  $bb249:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2953} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_14597;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} out_vslice_dummy_var_444 := ldv_suspend_4();
    goto corral_source_split_14596;

  $bb248:
    assume out_$i240 == 1;
    goto corral_source_split_14595;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 2);
    goto corral_source_split_14523;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    out_$i239 := $M.81;
    goto corral_source_split_14522;

  $bb213:
    assume out_$i203 == 1;
    goto corral_source_split_14521;

  $bb212:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i201, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb255:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $M.70 := out_$i251;
    call {:si_unique_call 2959} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_14614;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    out_$i251 := $sub.i32(out_$i250, 1);
    goto corral_source_split_14613;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    out_$i250 := $M.70;
    goto corral_source_split_14612;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2958} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14611;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} out_vslice_dummy_var_446 := ldv_release_4();
    goto corral_source_split_14610;

  $bb254:
    assume out_$i248 == 1;
    goto corral_source_split_14609;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 2);
    goto corral_source_split_14607;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i247 := $M.81;
    goto corral_source_split_14606;

  $bb252:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $M.70 := out_$i246;
    call {:si_unique_call 2956} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i246);
    goto corral_source_split_14604;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    out_$i246 := $sub.i32(out_$i245, 1);
    goto corral_source_split_14603;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    out_$i245 := $M.70;
    goto corral_source_split_14602;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2955} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14601;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} out_vslice_dummy_var_445 := ldv_release_4();
    goto corral_source_split_14600;

  $bb251:
    assume out_$i243 == 1;
    goto corral_source_split_14599;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 3);
    goto corral_source_split_14527;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    out_$i242 := $M.81;
    goto corral_source_split_14526;

  $bb215:
    assume out_$i204 == 1;
    goto corral_source_split_14525;

  $bb214:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    out_$i204 := $slt.i32(out_$i201, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb258:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $M.70 := out_$i256;
    call {:si_unique_call 2962} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_14621;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    out_$i256 := $add.i32(out_$i255, 1);
    goto corral_source_split_14620;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    out_$i255 := $M.70;
    goto corral_source_split_14619;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2961} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_14618;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} out_vslice_dummy_var_447 := ldv_probe_4();
    goto corral_source_split_14617;

  $bb257:
    assume out_$i253 == 1;
    goto corral_source_split_14616;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 1);
    goto corral_source_split_14531;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    out_$i252 := $M.81;
    goto corral_source_split_14530;

  $bb217:
    assume out_$i205 == 1;
    goto corral_source_split_14529;

  $bb216:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i201, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} ldv_stop();
    goto corral_source_split_14623;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb218:
    assume {:verifier.code 0} true;
    assume !(out_$i205 == 1);
    goto $bb219;

  $bb225:
    assume {:verifier.code 0} true;
    assume !(out_$i208 == 1);
    goto $bb219;

  $bb264:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb274:
    assume {:verifier.code 0} true;
    assume !(out_$i264 == 1);
    goto $bb275;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(out_$i266 == 1);
    goto $bb275;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 0);
    goto corral_source_split_14637;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    out_$i265 := $M.70;
    goto corral_source_split_14636;

  $bb273:
    assume out_$i264 == 1;
    goto corral_source_split_14635;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 3);
    goto corral_source_split_14633;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    out_$i263 := $M.82;
    goto corral_source_split_14632;

  $bb271:
    assume out_$i262 == 1;
    goto corral_source_split_14631;

  $bb266:
    assume out_$i260 == 1;
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb265:
    assume {:verifier.code 0} true;
    out_$i260 := $slt.i32(out_$i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_14625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2964} out_$i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 2965} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i259);
    call {:si_unique_call 2966} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i259);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb263:
    assume out_$i258 == 1;
    goto corral_source_split_14625;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_14150;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    out_$i257 := $M.82;
    goto corral_source_split_14149;

  $bb9:
    assume out_$i19 == 1;
    goto corral_source_split_14148;

  $bb8:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i15, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb282:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb287:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    out_$i273 := $ne.i32(out_$i272, 0);
    goto corral_source_split_14666;

  $bb285:
    assume {:verifier.code 0} true;
    out_$i272 := $M.87;
    goto corral_source_split_14665;

  $bb284:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} ldv_initialize_pch_gbe_functions_8();
    goto corral_source_split_14663;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2982} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14662;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2981} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14661;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} ldv_initialize_pci_error_handlers_4();
    goto corral_source_split_14660;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2979} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14659;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_initialize_pci_driver_3();
    goto corral_source_split_14658;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14657;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} ldv_initialize_ethtool_ops_9();
    goto corral_source_split_14656;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2975} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_14655;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} ldv_dev_pm_ops_5();
    goto corral_source_split_14654;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2973} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14653;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $M.82 := 3;
    call {:si_unique_call 2972} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_14652;

  $bb283:
    assume out_$i271 == 1;
    goto corral_source_split_14651;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 0);
    goto corral_source_split_14649;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    out_$i270 := $M.87;
    goto corral_source_split_14648;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $M.87 := out_$i269;
    call {:si_unique_call 2971} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_14647;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} out_$i269 := pch_gbe_init_module();
    goto corral_source_split_14646;

  $bb281:
    assume out_$i268 == 1;
    goto corral_source_split_14645;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 1);
    goto corral_source_split_14629;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    out_$i267 := $M.82;
    goto corral_source_split_14628;

  $bb268:
    assume out_$i261 == 1;
    goto corral_source_split_14627;

  $bb267:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} ldv_stop();
    goto corral_source_split_14671;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb269:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb270;

  $bb272:
    assume {:verifier.code 0} true;
    assume !(out_$i262 == 1);
    goto $bb270;

  $bb294:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb340:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb342:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $M.83 := 15;
    call {:si_unique_call 2991} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(15);
    goto corral_source_split_14763;

  $bb341:
    assume out_$i303 == 1;
    goto corral_source_split_14762;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 0);
    goto corral_source_split_14760;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    out_$i302 := $M.88;
    goto corral_source_split_14759;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $M.88 := out_$i301;
    call {:si_unique_call 2990} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_14758;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} out_$i301 := pch_gbe_resume(out_$p300);
    goto corral_source_split_14757;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    out_$p300 := $M.73;
    goto corral_source_split_14756;

  $bb339:
    assume out_$i299 == 1;
    goto corral_source_split_14755;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 14);
    goto corral_source_split_14753;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    out_$i298 := $M.83;
    goto corral_source_split_14752;

  $bb337:
    assume out_$i297 == 1;
    goto corral_source_split_14751;

  $bb335:
    assume out_$i296 == 1;
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i276, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb329:
    assume out_$i293 == 1;
    assume {:verifier.code 0} true;
    out_$i296 := $slt.i32(out_$i276, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb319:
    assume out_$i288 == 1;
    assume {:verifier.code 0} true;
    out_$i293 := $slt.i32(out_$i276, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb296:
    assume out_$i277 == 1;
    assume {:verifier.code 0} true;
    out_$i288 := $slt.i32(out_$i276, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i277 := $slt.i32(out_$i276, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_14673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2986} out_$i276 := __VERIFIER_nondet_int();
    call {:si_unique_call 2987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i276);
    call {:si_unique_call 2988} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i276);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb293:
    assume out_$i275 == 1;
    goto corral_source_split_14673;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    out_$i275 := $ne.i32(out_$i274, 0);
    goto corral_source_split_14154;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    out_$i274 := $M.83;
    goto corral_source_split_14153;

  $bb11:
    assume out_$i20 == 1;
    goto corral_source_split_14152;

  $bb10:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i15, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb347:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb349:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 2994} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_14773;

  $bb348:
    assume out_$i309 == 1;
    goto corral_source_split_14772;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 0);
    goto corral_source_split_14770;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    out_$i308 := $M.89;
    goto corral_source_split_14769;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    $M.89 := out_$i307;
    call {:si_unique_call 2993} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i307);
    goto corral_source_split_14768;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} out_$i307 := pch_gbe_suspend(out_$p306);
    goto corral_source_split_14767;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    out_$p306 := $M.73;
    goto corral_source_split_14766;

  $bb346:
    assume out_$i305 == 1;
    goto corral_source_split_14765;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 2);
    goto corral_source_split_14749;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    out_$i304 := $M.83;
    goto corral_source_split_14748;

  $bb336:
    assume !(out_$i296 == 1);
    goto corral_source_split_14747;

  $bb353:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb355:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $M.83 := 4;
    call {:si_unique_call 2997} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_14783;

  $bb354:
    assume out_$i315 == 1;
    goto corral_source_split_14782;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 0);
    goto corral_source_split_14780;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    out_$i314 := $M.90;
    goto corral_source_split_14779;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $M.90 := out_$i313;
    call {:si_unique_call 2996} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i313);
    goto corral_source_split_14778;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} out_$i313 := pch_gbe_suspend(out_$p312);
    goto corral_source_split_14777;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    out_$p312 := $M.73;
    goto corral_source_split_14776;

  $bb352:
    assume out_$i311 == 1;
    goto corral_source_split_14775;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 2);
    goto corral_source_split_14737;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    out_$i310 := $M.83;
    goto corral_source_split_14736;

  $bb331:
    assume out_$i294 == 1;
    goto corral_source_split_14735;

  $bb330:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    out_$i294 := $slt.i32(out_$i276, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb359:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb361:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    $M.83 := 5;
    call {:si_unique_call 3000} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_14793;

  $bb360:
    assume out_$i321 == 1;
    goto corral_source_split_14792;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    out_$i321 := $eq.i32(out_$i320, 0);
    goto corral_source_split_14790;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    out_$i320 := $M.91;
    goto corral_source_split_14789;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $M.91 := out_$i319;
    call {:si_unique_call 2999} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i319);
    goto corral_source_split_14788;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} out_$i319 := pch_gbe_suspend(out_$p318);
    goto corral_source_split_14787;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    out_$p318 := $M.73;
    goto corral_source_split_14786;

  $bb358:
    assume out_$i317 == 1;
    goto corral_source_split_14785;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 2);
    goto corral_source_split_14741;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    out_$i316 := $M.83;
    goto corral_source_split_14740;

  $bb333:
    assume out_$i295 == 1;
    goto corral_source_split_14739;

  $bb332:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    out_$i295 := $slt.i32(out_$i276, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb365:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb367:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    $M.83 := 15;
    call {:si_unique_call 3003} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(15);
    goto corral_source_split_14803;

  $bb366:
    assume out_$i327 == 1;
    goto corral_source_split_14802;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 0);
    goto corral_source_split_14800;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    out_$i326 := $M.92;
    goto corral_source_split_14799;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $M.92 := out_$i325;
    call {:si_unique_call 3002} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i325);
    goto corral_source_split_14798;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} out_$i325 := pch_gbe_resume(out_$p324);
    goto corral_source_split_14797;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    out_$p324 := $M.73;
    goto corral_source_split_14796;

  $bb364:
    assume out_$i323 == 1;
    goto corral_source_split_14795;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 12);
    goto corral_source_split_14745;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    out_$i322 := $M.83;
    goto corral_source_split_14744;

  $bb334:
    assume !(out_$i295 == 1);
    goto corral_source_split_14743;

  $bb371:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb373:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $M.83 := 15;
    call {:si_unique_call 3006} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(15);
    goto corral_source_split_14813;

  $bb372:
    assume out_$i333 == 1;
    goto corral_source_split_14812;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 0);
    goto corral_source_split_14810;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    out_$i332 := $M.93;
    goto corral_source_split_14809;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    $M.93 := out_$i331;
    call {:si_unique_call 3005} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i331);
    goto corral_source_split_14808;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} out_$i331 := pch_gbe_resume(out_$p330);
    goto corral_source_split_14807;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    out_$p330 := $M.73;
    goto corral_source_split_14806;

  $bb370:
    assume out_$i329 == 1;
    goto corral_source_split_14805;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 13);
    goto corral_source_split_14729;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    out_$i328 := $M.83;
    goto corral_source_split_14728;

  $bb327:
    assume out_$i292 == 1;
    goto corral_source_split_14727;

  $bb321:
    assume out_$i289 == 1;
    assume {:verifier.code 0} true;
    out_$i292 := $slt.i32(out_$i276, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb320:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i289 := $slt.i32(out_$i276, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb377:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb379:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    $M.83 := 6;
    call {:si_unique_call 3009} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(6);
    goto corral_source_split_14822;

  $bb378:
    assume out_$i338 == 1;
    goto corral_source_split_14821;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 0);
    goto corral_source_split_14819;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    out_$i337 := $M.94;
    goto corral_source_split_14818;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $M.94 := out_$i336;
    call {:si_unique_call 3008} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i336);
    goto corral_source_split_14817;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} out_$i336 := ldv_suspend_late_5();
    goto corral_source_split_14816;

  $bb376:
    assume out_$i335 == 1;
    goto corral_source_split_14815;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 3);
    goto corral_source_split_14733;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    out_$i334 := $M.83;
    goto corral_source_split_14732;

  $bb328:
    assume !(out_$i292 == 1);
    goto corral_source_split_14731;

  $bb383:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb385:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $M.83 := 13;
    call {:si_unique_call 3012} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(13);
    goto corral_source_split_14831;

  $bb384:
    assume out_$i343 == 1;
    goto corral_source_split_14830;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 0);
    goto corral_source_split_14828;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    out_$i342 := $M.95;
    goto corral_source_split_14827;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $M.95 := out_$i341;
    call {:si_unique_call 3011} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i341);
    goto corral_source_split_14826;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} out_$i341 := ldv_restore_early_5();
    goto corral_source_split_14825;

  $bb382:
    assume out_$i340 == 1;
    goto corral_source_split_14824;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 9);
    goto corral_source_split_14717;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    out_$i339 := $M.83;
    goto corral_source_split_14716;

  $bb323:
    assume out_$i290 == 1;
    goto corral_source_split_14715;

  $bb322:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    out_$i290 := $slt.i32(out_$i276, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb389:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb391:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $M.83 := 12;
    call {:si_unique_call 3015} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(12);
    goto corral_source_split_14840;

  $bb390:
    assume out_$i348 == 1;
    goto corral_source_split_14839;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 0);
    goto corral_source_split_14837;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    out_$i347 := $M.96;
    goto corral_source_split_14836;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $M.96 := out_$i346;
    call {:si_unique_call 3014} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i346);
    goto corral_source_split_14835;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} out_$i346 := ldv_resume_early_5();
    goto corral_source_split_14834;

  $bb388:
    assume out_$i345 == 1;
    goto corral_source_split_14833;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 6);
    goto corral_source_split_14721;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    out_$i344 := $M.83;
    goto corral_source_split_14720;

  $bb325:
    assume out_$i291 == 1;
    goto corral_source_split_14719;

  $bb324:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    out_$i291 := $slt.i32(out_$i276, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb395:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb397:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $M.83 := 14;
    call {:si_unique_call 3018} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(14);
    goto corral_source_split_14849;

  $bb396:
    assume out_$i353 == 1;
    goto corral_source_split_14848;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 0);
    goto corral_source_split_14846;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    out_$i352 := $M.97;
    goto corral_source_split_14845;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $M.97 := out_$i351;
    call {:si_unique_call 3017} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i351);
    goto corral_source_split_14844;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} out_$i351 := ldv_thaw_early_5();
    goto corral_source_split_14843;

  $bb394:
    assume out_$i350 == 1;
    goto corral_source_split_14842;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 11);
    goto corral_source_split_14725;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    out_$i349 := $M.83;
    goto corral_source_split_14724;

  $bb326:
    assume !(out_$i291 == 1);
    goto corral_source_split_14723;

  $bb401:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb403:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $M.83 := 12;
    call {:si_unique_call 3021} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(12);
    goto corral_source_split_14858;

  $bb402:
    assume out_$i358 == 1;
    goto corral_source_split_14857;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 0);
    goto corral_source_split_14855;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    out_$i357 := $M.98;
    goto corral_source_split_14854;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $M.98 := out_$i356;
    call {:si_unique_call 3020} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i356);
    goto corral_source_split_14853;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} out_$i356 := ldv_resume_noirq_5();
    goto corral_source_split_14852;

  $bb400:
    assume out_$i355 == 1;
    goto corral_source_split_14851;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 7);
    goto corral_source_split_14709;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    out_$i354 := $M.83;
    goto corral_source_split_14708;

  $bb317:
    assume out_$i287 == 1;
    goto corral_source_split_14707;

  $bb311:
    assume out_$i284 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $slt.i32(out_$i276, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb298:
    assume out_$i278 == 1;
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i276, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb297:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    out_$i278 := $slt.i32(out_$i276, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb407:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb409:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $M.83 := 10;
    call {:si_unique_call 3024} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(10);
    goto corral_source_split_14867;

  $bb408:
    assume out_$i363 == 1;
    goto corral_source_split_14866;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 0);
    goto corral_source_split_14864;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    out_$i362 := $M.99;
    goto corral_source_split_14863;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $M.99 := out_$i361;
    call {:si_unique_call 3023} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i361);
    goto corral_source_split_14862;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} out_$i361 := ldv_freeze_noirq_5();
    goto corral_source_split_14861;

  $bb406:
    assume out_$i360 == 1;
    goto corral_source_split_14860;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 5);
    goto corral_source_split_14713;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    out_$i359 := $M.83;
    goto corral_source_split_14712;

  $bb318:
    assume !(out_$i287 == 1);
    goto corral_source_split_14711;

  $bb413:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb415:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $M.70 := out_$i370;
    call {:si_unique_call 3028} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i370);
    goto corral_source_split_14879;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    out_$i370 := $add.i32(out_$i369, 1);
    goto corral_source_split_14878;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    out_$i369 := $M.70;
    goto corral_source_split_14877;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 3027} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_14876;

  $bb414:
    assume out_$i368 == 1;
    goto corral_source_split_14875;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 0);
    goto corral_source_split_14873;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    out_$i367 := $M.100;
    goto corral_source_split_14872;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $M.100 := out_$i366;
    call {:si_unique_call 3026} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i366);
    goto corral_source_split_14871;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} out_$i366 := ldv_prepare_5();
    goto corral_source_split_14870;

  $bb412:
    assume out_$i365 == 1;
    goto corral_source_split_14869;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 1);
    goto corral_source_split_14697;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    out_$i364 := $M.83;
    goto corral_source_split_14696;

  $bb313:
    assume out_$i285 == 1;
    goto corral_source_split_14695;

  $bb312:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i276, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb419:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb421:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $M.83 := 11;
    call {:si_unique_call 3031} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(11);
    goto corral_source_split_14888;

  $bb420:
    assume out_$i375 == 1;
    goto corral_source_split_14887;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i374, 0);
    goto corral_source_split_14885;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    out_$i374 := $M.101;
    goto corral_source_split_14884;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $M.101 := out_$i373;
    call {:si_unique_call 3030} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i373);
    goto corral_source_split_14883;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} out_$i373 := ldv_freeze_late_5();
    goto corral_source_split_14882;

  $bb418:
    assume out_$i372 == 1;
    goto corral_source_split_14881;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 5);
    goto corral_source_split_14701;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    out_$i371 := $M.83;
    goto corral_source_split_14700;

  $bb315:
    assume out_$i286 == 1;
    goto corral_source_split_14699;

  $bb314:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i276, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb425:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb427:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $M.83 := 14;
    call {:si_unique_call 3034} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(14);
    goto corral_source_split_14897;

  $bb426:
    assume out_$i380 == 1;
    goto corral_source_split_14896;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 0);
    goto corral_source_split_14894;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    out_$i379 := $M.102;
    goto corral_source_split_14893;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $M.102 := out_$i378;
    call {:si_unique_call 3033} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i378);
    goto corral_source_split_14892;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} out_$i378 := ldv_thaw_noirq_5();
    goto corral_source_split_14891;

  $bb424:
    assume out_$i377 == 1;
    goto corral_source_split_14890;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 10);
    goto corral_source_split_14705;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    out_$i376 := $M.83;
    goto corral_source_split_14704;

  $bb316:
    assume !(out_$i286 == 1);
    goto corral_source_split_14703;

  $bb431:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb433:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $M.83 := 8;
    call {:si_unique_call 3037} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(8);
    goto corral_source_split_14906;

  $bb432:
    assume out_$i385 == 1;
    goto corral_source_split_14905;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 0);
    goto corral_source_split_14903;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    out_$i384 := $M.103;
    goto corral_source_split_14902;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    $M.103 := out_$i383;
    call {:si_unique_call 3036} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i383);
    goto corral_source_split_14901;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} out_$i383 := ldv_poweroff_noirq_5();
    goto corral_source_split_14900;

  $bb430:
    assume out_$i382 == 1;
    goto corral_source_split_14899;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 4);
    goto corral_source_split_14689;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    out_$i381 := $M.83;
    goto corral_source_split_14688;

  $bb309:
    assume out_$i283 == 1;
    goto corral_source_split_14687;

  $bb300:
    assume out_$i279 == 1;
    assume {:verifier.code 0} true;
    out_$i283 := $slt.i32(out_$i276, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb299:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    out_$i279 := $slt.i32(out_$i276, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb437:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb439:
    assume !(out_$i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    $M.83 := 9;
    call {:si_unique_call 3040} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(9);
    goto corral_source_split_14915;

  $bb438:
    assume out_$i390 == 1;
    goto corral_source_split_14914;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    out_$i390 := $eq.i32(out_$i389, 0);
    goto corral_source_split_14912;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    out_$i389 := $M.104;
    goto corral_source_split_14911;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $M.104 := out_$i388;
    call {:si_unique_call 3039} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i388);
    goto corral_source_split_14910;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} out_$i388 := ldv_poweroff_late_5();
    goto corral_source_split_14909;

  $bb436:
    assume out_$i387 == 1;
    goto corral_source_split_14908;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 4);
    goto corral_source_split_14693;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    out_$i386 := $M.83;
    goto corral_source_split_14692;

  $bb310:
    assume !(out_$i283 == 1);
    goto corral_source_split_14691;

  $bb443:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb445:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $M.83 := 13;
    call {:si_unique_call 3043} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(13);
    goto corral_source_split_14924;

  $bb444:
    assume out_$i395 == 1;
    goto corral_source_split_14923;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 0);
    goto corral_source_split_14921;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    out_$i394 := $M.105;
    goto corral_source_split_14920;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $M.105 := out_$i393;
    call {:si_unique_call 3042} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i393);
    goto corral_source_split_14919;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} out_$i393 := ldv_restore_noirq_5();
    goto corral_source_split_14918;

  $bb442:
    assume out_$i392 == 1;
    goto corral_source_split_14917;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 8);
    goto corral_source_split_14677;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    out_$i391 := $M.83;
    goto corral_source_split_14676;

  $bb302:
    assume out_$i280 == 1;
    goto corral_source_split_14675;

  $bb301:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    out_$i280 := $slt.i32(out_$i276, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb449:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb451:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $M.83 := 7;
    call {:si_unique_call 3046} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(7);
    goto corral_source_split_14933;

  $bb450:
    assume out_$i400 == 1;
    goto corral_source_split_14932;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i399, 0);
    goto corral_source_split_14930;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    out_$i399 := $M.106;
    goto corral_source_split_14929;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $M.106 := out_$i398;
    call {:si_unique_call 3045} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i398);
    goto corral_source_split_14928;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} out_$i398 := ldv_suspend_noirq_5();
    goto corral_source_split_14927;

  $bb448:
    assume out_$i397 == 1;
    goto corral_source_split_14926;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i32(out_$i396, 3);
    goto corral_source_split_14681;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    out_$i396 := $M.83;
    goto corral_source_split_14680;

  $bb304:
    assume out_$i281 == 1;
    goto corral_source_split_14679;

  $bb303:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    out_$i281 := $slt.i32(out_$i276, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb455:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb456;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    goto $bb456;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $M.70 := out_$i405;
    call {:si_unique_call 3049} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i405);
    goto corral_source_split_14940;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    out_$i405 := $sub.i32(out_$i404, 1);
    goto corral_source_split_14939;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    out_$i404 := $M.70;
    goto corral_source_split_14938;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 3048} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14937;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} out_vslice_dummy_var_448 := ldv_complete_5();
    goto corral_source_split_14936;

  $bb454:
    assume out_$i402 == 1;
    goto corral_source_split_14935;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb454, $bb455;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 15);
    goto corral_source_split_14685;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    out_$i401 := $M.83;
    goto corral_source_split_14684;

  $bb306:
    assume out_$i282 == 1;
    goto corral_source_split_14683;

  $bb305:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i276, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} ldv_stop();
    goto corral_source_split_14942;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb307:
    assume {:verifier.code 0} true;
    assume !(out_$i282 == 1);
    goto $bb308;

  $bb338:
    assume {:verifier.code 0} true;
    assume !(out_$i297 == 1);
    goto $bb308;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} ldv_stop();
    goto corral_source_split_14944;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb13;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb13;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i239, out_$i240, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i248, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$p312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i404, out_$i405, out_vslice_dummy_var_420, out_vslice_dummy_var_421, out_vslice_dummy_var_422, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_426, out_vslice_dummy_var_427, out_vslice_dummy_var_428, out_vslice_dummy_var_429, out_vslice_dummy_var_430, out_vslice_dummy_var_431, out_vslice_dummy_var_432, out_vslice_dummy_var_433, out_vslice_dummy_var_434, out_vslice_dummy_var_435, out_vslice_dummy_var_436, out_vslice_dummy_var_437, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442, out_vslice_dummy_var_443, out_vslice_dummy_var_444, out_vslice_dummy_var_445, out_vslice_dummy_var_446, out_vslice_dummy_var_447, out_vslice_dummy_var_448 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$p5, in_$p7, in_$i8, in_$p10, in_$p11, in_$i12, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i227, out_$i229, out_$i230, out_$p231, out_$i232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i239, out_$i240, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i248, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$p300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$p312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i404, out_$i405, out_vslice_dummy_var_420, out_vslice_dummy_var_421, out_vslice_dummy_var_422, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_426, out_vslice_dummy_var_427, out_vslice_dummy_var_428, out_vslice_dummy_var_429, out_vslice_dummy_var_430, out_vslice_dummy_var_431, out_vslice_dummy_var_432, out_vslice_dummy_var_433, out_vslice_dummy_var_434, out_vslice_dummy_var_435, out_vslice_dummy_var_436, out_vslice_dummy_var_437, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442, out_vslice_dummy_var_443, out_vslice_dummy_var_444, out_vslice_dummy_var_445, out_vslice_dummy_var_446, out_vslice_dummy_var_447, out_vslice_dummy_var_448);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i64, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i64, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i64, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$i182: i32, in_$i183: i32, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i239: i32, in_$i240: i1, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i1, in_$i250: i32, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_$i274: i32, in_$i275: i1, in_$i276: i32, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i32, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i307: i32, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$i313: i32, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i319: i32, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i1, in_$i341: i32, in_$i342: i32, in_$i343: i1, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i32, in_$i353: i1, in_$i354: i32, in_$i355: i1, in_$i356: i32, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i32, in_$i368: i1, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i372: i1, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i32, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$i383: i32, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$i388: i32, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$i397: i1, in_$i398: i32, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i404: i32, in_$i405: i32, in_vslice_dummy_var_420: i32, in_vslice_dummy_var_421: i32, in_vslice_dummy_var_422: i32, in_vslice_dummy_var_423: i32, in_vslice_dummy_var_424: ref, in_vslice_dummy_var_425: ref, in_vslice_dummy_var_426: ref, in_vslice_dummy_var_427: i32, in_vslice_dummy_var_428: i32, in_vslice_dummy_var_429: i32, in_vslice_dummy_var_430: i32, in_vslice_dummy_var_431: i32, in_vslice_dummy_var_432: i32, in_vslice_dummy_var_433: i32, in_vslice_dummy_var_434: i32, in_vslice_dummy_var_435: i32, in_vslice_dummy_var_436: i32, in_vslice_dummy_var_437: i32, in_vslice_dummy_var_438: i32, in_vslice_dummy_var_439: i32, in_vslice_dummy_var_440: i32, in_vslice_dummy_var_441: i32, in_vslice_dummy_var_442: i32, in_vslice_dummy_var_443: i32, in_vslice_dummy_var_444: i32, in_vslice_dummy_var_445: i32, in_vslice_dummy_var_446: i32, in_vslice_dummy_var_447: i32, in_vslice_dummy_var_448: i32) returns (out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i64, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i64, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i64, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$i182: i32, out_$i183: i32, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i239: i32, out_$i240: i1, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i1, out_$i250: i32, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_$i274: i32, out_$i275: i1, out_$i276: i32, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i32, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i307: i32, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$i313: i32, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i319: i32, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i1, out_$i341: i32, out_$i342: i32, out_$i343: i1, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i32, out_$i353: i1, out_$i354: i32, out_$i355: i1, out_$i356: i32, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i32, out_$i368: i1, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i372: i1, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i32, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$i383: i32, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$i388: i32, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$i397: i1, out_$i398: i32, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i404: i32, out_$i405: i32, out_vslice_dummy_var_420: i32, out_vslice_dummy_var_421: i32, out_vslice_dummy_var_422: i32, out_vslice_dummy_var_423: i32, out_vslice_dummy_var_424: ref, out_vslice_dummy_var_425: ref, out_vslice_dummy_var_426: ref, out_vslice_dummy_var_427: i32, out_vslice_dummy_var_428: i32, out_vslice_dummy_var_429: i32, out_vslice_dummy_var_430: i32, out_vslice_dummy_var_431: i32, out_vslice_dummy_var_432: i32, out_vslice_dummy_var_433: i32, out_vslice_dummy_var_434: i32, out_vslice_dummy_var_435: i32, out_vslice_dummy_var_436: i32, out_vslice_dummy_var_437: i32, out_vslice_dummy_var_438: i32, out_vslice_dummy_var_439: i32, out_vslice_dummy_var_440: i32, out_vslice_dummy_var_441: i32, out_vslice_dummy_var_442: i32, out_vslice_dummy_var_443: i32, out_vslice_dummy_var_444: i32, out_vslice_dummy_var_445: i32, out_vslice_dummy_var_446: i32, out_vslice_dummy_var_447: i32, out_vslice_dummy_var_448: i32);
  modifies $M.77, $M.70, $M.78, $M.84, $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.41, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.51, $CurrAddr, $M.55, $M.8, $M.26, $M.7, $M.10, $M.27, $M.9, $M.12, $M.28, $M.11, $M.14, $M.29, $M.13, $M.25, $M.24, $M.85, $M.32, $M.33, $M.34, $M.86, $M.67, $M.69, $M.81, $M.68, $M.71, $M.74, $M.62, $M.63, $M.64, $M.65, $M.66, $M.73, $M.83, $M.82, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106;


