var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]ref;

var $M.3: i32;

var $M.4: i32;

var $M.5: ref;

var $M.6: [ref]i16;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: ref;

var $M.12: [ref]i8;

var $M.13: [ref]i8;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: ref;

var $M.17: i32;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: ref;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.42: [ref]i32;

var $M.43: [ref]i32;

var $M.44: [ref]ref;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 418610);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const st5481_usb_driver_group1: ref;

axiom st5481_usb_driver_group1 == $sub.ref(0, 2060);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 3088);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4116);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 5144);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 6172);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 7200);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 8228);

const st5481_debug: ref;

axiom st5481_debug == $sub.ref(0, 9256);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 10284);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 11312);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 12344);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 13376);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 14408);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 15436);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 16464);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 17492);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 18524);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 19556);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 20612);

const {:count 14} DoutFnList: ref;

axiom DoutFnList == $sub.ref(0, 21860);

const {:count 10} strDoutState: ref;

axiom strDoutState == $sub.ref(0, 22964);

const {:count 7} strDoutEvent: ref;

axiom strDoutEvent == $sub.ref(0, 24044);

const {:count 27} L1FnList: ref;

axiom L1FnList == $sub.ref(0, 25500);

const {:count 5} strL1State: ref;

axiom strL1State == $sub.ref(0, 26564);

const {:count 19} strL1Event: ref;

axiom strL1Event == $sub.ref(0, 27740);

const debug: ref;

axiom debug == $sub.ref(0, 28768);

const {:count 17} st5481_ids: ref;

axiom st5481_ids == $sub.ref(0, 30336);

const st5481_usb_driver: ref;

axiom st5481_usb_driver == $sub.ref(0, 31664);

const protocol: ref;

axiom protocol == $sub.ref(0, 32692);

const number_of_leds: ref;

axiom number_of_leds == $sub.ref(0, 33720);

const dout_fsm: ref;

axiom dout_fsm == $sub.ref(0, 34776);

const l1fsm: ref;

axiom l1fsm == $sub.ref(0, 35832);

const {:count 11} .str.29: ref;

axiom .str.29 == $sub.ref(0, 36867);

const {:count 7} .str.4: ref;

axiom .str.4 == $sub.ref(0, 37898);

const {:count 18} .str.30: ref;

axiom .str.30 == $sub.ref(0, 38940);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 39983);

const {:count 17} .str.21: ref;

axiom .str.21 == $sub.ref(0, 41024);

const {:count 21} .str.74: ref;

axiom .str.74 == $sub.ref(0, 42069);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 43111);

const {:count 17} .str.23: ref;

axiom .str.23 == $sub.ref(0, 44152);

const {:count 21} .str.130: ref;

axiom .str.130 == $sub.ref(0, 45197);

const {:count 12} .str.13: ref;

axiom .str.13 == $sub.ref(0, 46233);

const {:count 31} .str.33: ref;

axiom .str.33 == $sub.ref(0, 47288);

const {:count 224} .str.7: ref;

axiom .str.7 == $sub.ref(0, 48536);

const {:count 13} .str.34: ref;

axiom .str.34 == $sub.ref(0, 49573);

const {:count 43} .str.35: ref;

axiom .str.35 == $sub.ref(0, 50640);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 51682);

const {:count 41} .str.12: ref;

axiom .str.12 == $sub.ref(0, 52747);

const {:count 62} .str.28: ref;

axiom .str.28 == $sub.ref(0, 53833);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 13} .str.11: ref;

axiom .str.11 == $sub.ref(0, 54870);

const {:count 17} .str.2: ref;

axiom .str.2 == $sub.ref(0, 55911);

const {:count 18} .str.3: ref;

axiom .str.3 == $sub.ref(0, 56953);

const {:count 3} .str.37: ref;

axiom .str.37 == $sub.ref(0, 57980);

const {:count 4} .str.38: ref;

axiom .str.38 == $sub.ref(0, 59008);

const {:count 4} .str.39: ref;

axiom .str.39 == $sub.ref(0, 60036);

const {:count 4} .str.40: ref;

axiom .str.40 == $sub.ref(0, 61064);

const {:count 4} .str.41: ref;

axiom .str.41 == $sub.ref(0, 62092);

const {:count 4} .str.42: ref;

axiom .str.42 == $sub.ref(0, 63120);

const {:count 5} .str.43: ref;

axiom .str.43 == $sub.ref(0, 64149);

const {:count 4} .str.44: ref;

axiom .str.44 == $sub.ref(0, 65177);

const {:count 4} .str.45: ref;

axiom .str.45 == $sub.ref(0, 66205);

const {:count 5} .str.46: ref;

axiom .str.46 == $sub.ref(0, 67234);

const {:count 15} .str.22: ref;

axiom .str.22 == $sub.ref(0, 68273);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 69313);

const {:count 27} .str.47: ref;

axiom .str.47 == $sub.ref(0, 70364);

const {:count 16} .str.59: ref;

axiom .str.59 == $sub.ref(0, 71404);

const {:count 23} .str.49: ref;

axiom .str.49 == $sub.ref(0, 72451);

const {:count 15} .str.60: ref;

axiom .str.60 == $sub.ref(0, 73490);

const {:count 32} .str.61: ref;

axiom .str.61 == $sub.ref(0, 74546);

const {:count 19} .str.62: ref;

axiom .str.62 == $sub.ref(0, 75589);

const {:count 23} .str.63: ref;

axiom .str.63 == $sub.ref(0, 76636);

const {:count 22} .str.64: ref;

axiom .str.64 == $sub.ref(0, 77682);

const {:count 21} .str.55: ref;

axiom .str.55 == $sub.ref(0, 78727);

const {:count 5} .str.56: ref;

axiom .str.56 == $sub.ref(0, 79756);

const {:count 3} .str.57: ref;

axiom .str.57 == $sub.ref(0, 80783);

const {:count 2} .str.58: ref;

axiom .str.58 == $sub.ref(0, 81809);

const {:count 27} .str.65: ref;

axiom .str.65 == $sub.ref(0, 82860);

const {:count 20} .str.66: ref;

axiom .str.66 == $sub.ref(0, 83904);

const {:count 19} .str.123: ref;

axiom .str.123 == $sub.ref(0, 84947);

const {:count 43} .str.69: ref;

axiom .str.69 == $sub.ref(0, 86014);

const {:count 19} .str.124: ref;

axiom .str.124 == $sub.ref(0, 87057);

const {:count 222} .str.25: ref;

axiom .str.25 == $sub.ref(0, 88303);

const {:count 24} .str.125: ref;

axiom .str.125 == $sub.ref(0, 89351);

const {:count 10} .str.126: ref;

axiom .str.126 == $sub.ref(0, 90385);

const {:count 35} .str.127: ref;

axiom .str.127 == $sub.ref(0, 91444);

const {:count 38} .str.128: ref;

axiom .str.128 == $sub.ref(0, 92506);

const {:count 17} .str.129: ref;

axiom .str.129 == $sub.ref(0, 93547);

const byte_rev_table: ref;

axiom byte_rev_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const .str: ref;

axiom .str == $sub.ref(0, 94587);

const {:count 22} .str.1: ref;

axiom .str.1 == $sub.ref(0, 95633);

const {:count 15} .str.20: ref;

axiom .str.20 == $sub.ref(0, 96672);

const {:count 9} .str.71: ref;

axiom .str.71 == $sub.ref(0, 97705);

const {:count 11} .str.73: ref;

axiom .str.73 == $sub.ref(0, 98740);

const {:count 10} .str.72: ref;

axiom .str.72 == $sub.ref(0, 99774);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 100817);

const {:count 19} .str.70: ref;

axiom .str.70 == $sub.ref(0, 101860);

const {:count 222} .str.18: ref;

axiom .str.18 == $sub.ref(0, 103106);

const {:count 17} .str.5: ref;

axiom .str.5 == $sub.ref(0, 104147);

const {:count 46} .str.6: ref;

axiom .str.6 == $sub.ref(0, 105217);

const {:count 39} .str.8: ref;

axiom .str.8 == $sub.ref(0, 106280);

const {:count 44} .str.9: ref;

axiom .str.9 == $sub.ref(0, 107348);

const {:count 40} .str.51: ref;

axiom .str.51 == $sub.ref(0, 108412);

const {:count 17} .str.52: ref;

axiom .str.52 == $sub.ref(0, 109453);

const {:count 41} .str.53: ref;

axiom .str.53 == $sub.ref(0, 110518);

const {:count 46} .str.54: ref;

axiom .str.54 == $sub.ref(0, 111588);

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 112634);

const {:count 18} .str.48: ref;

axiom .str.48 == $sub.ref(0, 113676);

const {:count 14} .str.24: ref;

axiom .str.24 == $sub.ref(0, 114714);

const {:count 34} .str.26: ref;

axiom .str.26 == $sub.ref(0, 115772);

const {:count 32} .str.27: ref;

axiom .str.27 == $sub.ref(0, 116828);

const {:count 17} .str.19: ref;

axiom .str.19 == $sub.ref(0, 117869);

const {:count 18} .str.131: ref;

axiom .str.131 == $sub.ref(0, 118911);

const {:count 13} .str.132: ref;

axiom .str.132 == $sub.ref(0, 119948);

const {:count 10} .str.133: ref;

axiom .str.133 == $sub.ref(0, 120982);

const {:count 19} .str.134: ref;

axiom .str.134 == $sub.ref(0, 122025);

const {:count 17} .str.67: ref;

axiom .str.67 == $sub.ref(0, 123066);

const {:count 29} .str.16: ref;

axiom .str.16 == $sub.ref(0, 124119);

const {:count 14} .str.17: ref;

axiom .str.17 == $sub.ref(0, 125157);

const {:count 10} .str.75: ref;

axiom .str.75 == $sub.ref(0, 126191);

const {:count 9} .str.76: ref;

axiom .str.76 == $sub.ref(0, 127224);

const {:count 9} .str.77: ref;

axiom .str.77 == $sub.ref(0, 128257);

const {:count 9} .str.78: ref;

axiom .str.78 == $sub.ref(0, 129290);

const {:count 11} .str.79: ref;

axiom .str.79 == $sub.ref(0, 130325);

const {:count 9} .str.80: ref;

axiom .str.80 == $sub.ref(0, 131358);

const {:count 9} .str.81: ref;

axiom .str.81 == $sub.ref(0, 132391);

const {:count 9} .str.82: ref;

axiom .str.82 == $sub.ref(0, 133424);

const {:count 10} .str.83: ref;

axiom .str.83 == $sub.ref(0, 134458);

const {:count 9} .str.84: ref;

axiom .str.84 == $sub.ref(0, 135491);

const {:count 10} .str.85: ref;

axiom .str.85 == $sub.ref(0, 136525);

const {:count 10} .str.86: ref;

axiom .str.86 == $sub.ref(0, 137559);

const {:count 11} .str.87: ref;

axiom .str.87 == $sub.ref(0, 138594);

const {:count 12} .str.88: ref;

axiom .str.88 == $sub.ref(0, 139630);

const {:count 11} .str.89: ref;

axiom .str.89 == $sub.ref(0, 140665);

const {:count 10} .str.90: ref;

axiom .str.90 == $sub.ref(0, 141699);

const {:count 19} .str.91: ref;

axiom .str.91 == $sub.ref(0, 142742);

const {:count 21} .str.92: ref;

axiom .str.92 == $sub.ref(0, 143787);

const {:count 10} .str.93: ref;

axiom .str.93 == $sub.ref(0, 144821);

const {:count 9} .str.94: ref;

axiom .str.94 == $sub.ref(0, 145854);

const {:count 9} .str.95: ref;

axiom .str.95 == $sub.ref(0, 146887);

const {:count 9} .str.96: ref;

axiom .str.96 == $sub.ref(0, 147920);

const {:count 9} .str.97: ref;

axiom .str.97 == $sub.ref(0, 148953);

const {:count 9} .str.98: ref;

axiom .str.98 == $sub.ref(0, 149986);

const {:count 14} .str.99: ref;

axiom .str.99 == $sub.ref(0, 151024);

const {:count 11} .str.100: ref;

axiom .str.100 == $sub.ref(0, 152059);

const {:count 19} .str.101: ref;

axiom .str.101 == $sub.ref(0, 153102);

const {:count 17} .str.102: ref;

axiom .str.102 == $sub.ref(0, 154143);

const {:count 12} .str.103: ref;

axiom .str.103 == $sub.ref(0, 155179);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 156219);

const {:count 16} .str.105: ref;

axiom .str.105 == $sub.ref(0, 157259);

const {:count 13} .str.106: ref;

axiom .str.106 == $sub.ref(0, 158296);

const {:count 17} .str.107: ref;

axiom .str.107 == $sub.ref(0, 159337);

const {:count 13} .str.108: ref;

axiom .str.108 == $sub.ref(0, 160374);

const {:count 19} .str.109: ref;

axiom .str.109 == $sub.ref(0, 161417);

const {:count 23} .str.110: ref;

axiom .str.110 == $sub.ref(0, 162464);

const {:count 18} .str.111: ref;

axiom .str.111 == $sub.ref(0, 163506);

const {:count 22} .str.112: ref;

axiom .str.112 == $sub.ref(0, 164552);

const {:count 15} .str.113: ref;

axiom .str.113 == $sub.ref(0, 165591);

const {:count 26} .str.114: ref;

axiom .str.114 == $sub.ref(0, 166641);

const {:count 26} .str.115: ref;

axiom .str.115 == $sub.ref(0, 167691);

const {:count 22} .str.116: ref;

axiom .str.116 == $sub.ref(0, 168737);

const {:count 23} .str.117: ref;

axiom .str.117 == $sub.ref(0, 169784);

const {:count 29} .str.121: ref;

axiom .str.121 == $sub.ref(0, 170837);

const {:count 10} .str.122: ref;

axiom .str.122 == $sub.ref(0, 171871);

const {:count 13} .str.118: ref;

axiom .str.118 == $sub.ref(0, 172908);

const {:count 16} .str.119: ref;

axiom .str.119 == $sub.ref(0, 173948);

const {:count 32} .str.120: ref;

axiom .str.120 == $sub.ref(0, 175004);

const {:count 60} .str.31: ref;

axiom .str.31 == $sub.ref(0, 176088);

const {:count 13} .str.32: ref;

axiom .str.32 == $sub.ref(0, 177125);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 178157);

const {:count 3} .str.1.278: ref;

axiom .str.1.278 == $sub.ref(0, 179184);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 180222);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 181250);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 182282);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 183314);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 184346);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 185378);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const probe_st5481: ref;

axiom probe_st5481 == $sub.ref(0, 186410);

procedure probe_st5481($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.12, $CurrAddr, $M.5, $M.7, $M.9, $M.6, $M.11, $M.8, $M.15;



implementation probe_st5481($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p43: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i18: i32;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p95: ref;
  var $p100: ref;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := interface_to_usbdev($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i12 := $M.1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_10 := printk.ref.i32.i32.i32(.str.28, $i7, $i11, $i12);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p14 := kzalloc(1504, 208);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p3);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, __this_module);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p14);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, st5481_d_l2l1);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p14);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p37);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, st5481_b_l2l1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(32, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p14);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(208, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(1, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p90);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, st5481_b_l2l1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i49 := st5481_setup_usb($p15);
    call {:si_unique_call 15} {:cexpr "retval"} boogie_si_record_i32($i49);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i51 := st5481_setup_d($p15);
    call {:si_unique_call 18} {:cexpr "retval"} boogie_si_record_i32($i51);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i55 := st5481_setup_b($p54);
    call {:si_unique_call 21} {:cexpr "retval"} boogie_si_record_i32($i55);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(1, 216));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i60 := st5481_setup_b($p59);
    call {:si_unique_call 24} {:cexpr "retval"} boogie_si_record_i32($i60);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p65, $p64);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(0, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p81, $p80);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(16, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p2);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i68 := $M.3;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i69 := hisax_register($p66, $p67, .str.29, $i68);
    call {:si_unique_call 27} {:cexpr "tmp___1"} boogie_si_record_i32($i69);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} st5481_start($p15);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p15);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} ldv_usb_set_intfdata_2($p0, $p71);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(1, 216));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} st5481_release_b($p74);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} st5481_release_b($p76);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} st5481_release_d($p15);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} st5481_release_usb($p15);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p15);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} kfree($p77);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb21:
    assume $i61 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i50 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;
}



const disconnect_st5481: ref;

axiom disconnect_st5481 == $sub.ref(0, 187442);

procedure disconnect_st5481($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.6, $M.5, $CurrAddr, $M.7, $M.9, $M.15;



implementation disconnect_st5481($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p1 := ldv_usb_get_intfdata_3($p0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} ldv_usb_set_intfdata_2($p0, $0.ref);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p2);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} st5481_stop($p2);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1, 216));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} st5481_release_b($p11);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1504)), $mul.ref(1072, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} st5481_release_b($p13);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} st5481_release_d($p2);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(1 == 1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} __const_udelay(4295000);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} st5481_release_usb($p2);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1504)), $mul.ref(16, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} hisax_unregister($p14);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} kfree($p15);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume 1 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __const_udelay(8590000);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_11 := printk.ref.ref(.str.4, .str.30);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_get_intfdata_3: ref;

axiom ldv_usb_get_intfdata_3 == $sub.ref(0, 188474);

procedure ldv_usb_get_intfdata_3($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_3($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 189506);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 45} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 46} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 47} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 48} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i64($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 53} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 54} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 64} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 70} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_set_intfdata_2: ref;

axiom ldv_usb_set_intfdata_2 == $sub.ref(0, 190538);

procedure ldv_usb_set_intfdata_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11;



implementation ldv_usb_set_intfdata_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ldv_usb_set_intfdata($p1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    return;
}



const st5481_stop: ref;

axiom st5481_stop == $sub.ref(0, 191570);

procedure st5481_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481_stop($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 8);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} st5481_usb_device_ctrl_msg($p0, 6, 0, $0.ref, $0.ref);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_12 := printk.ref.ref(.str.4, .str.13);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_release_b: ref;

axiom st5481_release_b == $sub.ref(0, 192602);

procedure st5481_release_b($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_b($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} st5481_release_in($p5);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} st5481_release_b_out($p0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_13 := printk.ref.ref(.str.4, .str.23);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_release_d: ref;

axiom st5481_release_d == $sub.ref(0, 193634);

procedure st5481_release_d($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_d($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} st5481_release_in($p5);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} st5481_release_d_out($p0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_14 := printk.ref.ref(.str.4, .str.21);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 194666);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    return;
}



const st5481_release_usb: ref;

axiom st5481_release_usb == $sub.ref(0, 195698);

procedure st5481_release_usb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_usb($p0: ref)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} usb_kill_urb($p8);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} kfree($p12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_usb_free_urb_17($p14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} usb_kill_urb($p17);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} kfree($p21);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} ldv_usb_free_urb_18($p23);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_15 := printk.ref.ref(.str.4, .str.10);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hisax_unregister: ref;

axiom hisax_unregister == $sub.ref(0, 196730);

procedure hisax_unregister($p0: ref);
  free requires assertsPassed;



implementation hisax_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 197762);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} free_($p0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 198794);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 89} $free($p0);
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 199826);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_17: ref;

axiom ldv_usb_free_urb_17 == $sub.ref(0, 200858);

procedure ldv_usb_free_urb_17($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_free_urb_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} ldv_free_urb($p0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_18: ref;

axiom ldv_usb_free_urb_18 == $sub.ref(0, 201890);

procedure ldv_usb_free_urb_18($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_free_urb_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} ldv_free_urb($p0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 202922);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p1 := $M.5;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p5 := $M.5;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.5 := $0.ref;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const st5481_release_in: ref;

axiom st5481_release_in == $sub.ref(0, 203954);

procedure st5481_release_in($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_in($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} st5481_release_isocpipes($p6);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_16 := printk.ref.ref(.str.4, .str.15);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_release_d_out: ref;

axiom st5481_release_d_out == $sub.ref(0, 204986);

procedure st5481_release_d_out($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_d_out($p0: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(32, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} st5481_release_isocpipes($p7);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_17 := printk.ref.ref(.str.4, .str.74);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_release_isocpipes: ref;

axiom st5481_release_isocpipes == $sub.ref(0, 206018);

procedure st5481_release_isocpipes($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_isocpipes($p0: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $i2, $p3, $p4, $i5, $p6, $p7, $p8, $p9, $i10, $p11, $p12, $i13, $p14, $i15, $i16, $i1 := st5481_release_isocpipes_loop_$bb1($p0, $i2, $p3, $p4, $i5, $p6, $p7, $p8, $p9, $i10, $p11, $p12, $i13, $p14, $i15, $i16, $i1);
    goto $bb1_last;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 8));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} usb_kill_urb($p4);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref($i5, 8));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} kfree($p9);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref($i10, 8));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_usb_free_urb_22($p12);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p0, $mul.ref($i13, 8));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i1, 1);
    call {:si_unique_call 99} {:cexpr "j"} boogie_si_record_i32($i15);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i15;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;
}



const ldv_usb_free_urb_22: ref;

axiom ldv_usb_free_urb_22 == $sub.ref(0, 207050);

procedure ldv_usb_free_urb_22($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_free_urb_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ldv_free_urb($p0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    return;
}



const st5481_release_b_out: ref;

axiom st5481_release_b_out == $sub.ref(0, 208082);

procedure st5481_release_b_out($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation st5481_release_b_out($p0: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} st5481_release_isocpipes($p7);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_18 := printk.ref.ref(.str.4, .str.130);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_usb_device_ctrl_msg: ref;

axiom st5481_usb_device_ctrl_msg == $sub.ref(0, 209114);

procedure st5481_usb_device_ctrl_msg($p0: ref, $i1: i8, $i2: i16, $p3: ref, $p4: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481_usb_device_ctrl_msg($p0: ref, $i1: i8, $i2: i16, $p3: ref, $p4: ref)
{
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "st5481_usb_device_ctrl_msg:arg:request"} boogie_si_record_i8($i1);
    call {:si_unique_call 104} {:cexpr "st5481_usb_device_ctrl_msg:arg:value"} boogie_si_record_i16($i2);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} usb_ctrl_msg($p0, $i6, 64, $i8, 0, $p3, $p4);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    return;
}



const usb_ctrl_msg: ref;

axiom usb_ctrl_msg == $sub.ref(0, 210146);

procedure usb_ctrl_msg($p0: ref, $i1: i8, $i2: i8, $i3: i16, $i4: i16, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation usb_ctrl_msg($p0: ref, $i1: i8, $i2: i8, $i3: i16, $i4: i16, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $p26: ref;
  var $i27: i16;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p8 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 108} {:cexpr "usb_ctrl_msg:arg:request"} boogie_si_record_i8($i1);
    call {:si_unique_call 109} {:cexpr "usb_ctrl_msg:arg:requesttype"} boogie_si_record_i8($i2);
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p7, $i3);
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p8, $i4);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i12 := fifo_add($p11);
    call {:si_unique_call 111} {:cexpr "w_index"} boogie_si_record_i32($i12);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i12);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i2);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i24 := __cpu_to_le16p($p7);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i24);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i27 := __cpu_to_le16p($p8);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i27);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(8, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p5);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p17, $mul.ref($i18, 24)), $mul.ref(16, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p6);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} usb_next_ctrl_msg($p35, $p0);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_19 := printk.ref.ref.ref(.str.33, .str.7, .str.34);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fifo_add: ref;

axiom fifo_add == $sub.ref(0, 211178);

procedure fifo_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fifo_add($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i14: i32;
  var $p35: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p5 := spinlock_check($p4);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 118} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(3, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, $i12);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(1, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(1, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(1, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i16);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(3, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i23, $i27);
    call {:si_unique_call 120} {:cexpr "index"} boogie_si_record_i32($i28);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    assume {:verifier.code 0} true;
    $i14 := $i28;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} spin_unlock_irqrestore($p35, $i6);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i3 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 1);
    goto $bb3;
}



const __cpu_to_le16p: ref;

axiom __cpu_to_le16p == $sub.ref(0, 212210);

procedure __cpu_to_le16p($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __cpu_to_le16p($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.6, $p0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_next_ctrl_msg: ref;

axiom usb_next_ctrl_msg == $sub.ref(0, 213242);

procedure usb_next_ctrl_msg($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation usb_next_ctrl_msg($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(464, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i4 := test_and_set_bit(0, $p3);
    call {:si_unique_call 123} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p7 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i8 := fifo_remove($p7);
    call {:si_unique_call 125} {:cexpr "r_index"} boogie_si_record_i32($i8);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p13 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i8);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i18 := $M.4;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p44);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i46 := ldv_usb_submit_urb_10($p0, 32);
    call {:si_unique_call 129} {:cexpr "status"} boogie_si_record_i32($i46);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_22 := printk.ref.ref.ref.i32(.str.12, .str.7, .str.36, $i46);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_21 := printk.ref.ref.i32.i32.i32(.str.35, .str.36, $i27, $i34, $i41);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(464, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_20 := test_and_clear_bit(0, $p10);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 214274);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 132} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 133} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fifo_remove: ref;

axiom fifo_remove == $sub.ref(0, 215306);

procedure fifo_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fifo_remove($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i11: i32;
  var $p32: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p5 := spinlock_check($p4);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 136} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 137} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i13);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(3, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i20, $i24);
    call {:si_unique_call 138} {:cexpr "index"} boogie_si_record_i32($i25);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    assume {:verifier.code 0} true;
    $i11 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} spin_unlock_irqrestore($p32, $i6);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i3 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 1);
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 216338);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 141} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 142} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_10: ref;

axiom ldv_usb_submit_urb_10 == $sub.ref(0, 217370);

procedure ldv_usb_submit_urb_10($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_10($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "ldv_usb_submit_urb_10:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 218402);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i1 := ldv_undef_int();
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p4 := $M.5;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i8 := $M.7;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.9;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p14 := $M.10;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p15 := $M.5;
    call {:si_unique_call 151} devirtbounce.2($p14, $p15);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 152} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p10 := $M.8;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p11 := $M.5;
    call {:si_unique_call 149} devirtbounce.1($p10, $p11);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 150} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 219434);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___0: ref;

axiom ldv_stop___0 == $sub.ref(0, 220466);

procedure ldv_stop___0();
  free requires assertsPassed;



implementation ldv_stop___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___0_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 221498);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 222530);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 157} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 223562);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 224594);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 225626);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.11;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 226658);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p0 := $M.11;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 227690);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 228722);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 163} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const st5481_d_l2l1: ref;

axiom st5481_d_l2l1 == $sub.ref(0, 229754);

procedure st5481_d_l2l1($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation st5481_d_l2l1($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p34: ref;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "st5481_d_l2l1:arg:pr"} boogie_si_record_i32($i1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 272);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 288);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 288);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_27 := printk.ref.ref.ref.i32(.str.19, .str.18, .str.17, $i1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i16 := $M.4;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 2);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p2);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_26 := FsmEvent($p34, 0, $0.ref);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume $i30 == 1;
    call {:si_unique_call 171} devirtbounce.3(0, .str.18, 638, 12);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call st5481_d_l2l1_loop_$bb19();
    goto $bb19_last;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_25 := printk.ref.ref.i32(.str.16, .str.17, $i20);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 272);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(880, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_23 := FsmEvent($p14, 17, $0.ref);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(880, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_24 := FsmEvent($p12, 16, $0.ref);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;
}



const st5481_b_l2l1: ref;

axiom st5481_b_l2l1 == $sub.ref(0, 230786);

procedure st5481_b_l2l1($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481_b_l2l1($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "st5481_b_l2l1:arg:pr"} boogie_si_record_i32($i1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i7 := $M.4;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 272);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 288);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 288);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_31 := printk.ref.ref.ref.i32(.str.19, .str.25, .str.24, $i1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 177} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p2);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i24 == 1;
    call {:si_unique_call 179} devirtbounce.3(0, .str.25, 400, 12);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call st5481_b_l2l1_loop_$bb18();
    goto $bb18_last;

  $bb7:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 272);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i36 := $M.4;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 4);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} st5481B_mode($p5, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} B_L1L2($p5, 274, $0.ref);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_30 := printk.ref.ref.i32(.str.27, .str.24, $i41);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb5:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 256);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb14:
    assume $i15 == 1;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    call {:si_unique_call 178} {:cexpr "mode"} boogie_si_record_i64($i27);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i28 := $M.4;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 4);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i27);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} st5481B_mode($p5, $i35);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} B_L1L2($p5, 258, $0.ref);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 1);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} vslice_dummy_var_29 := printk.ref.ref.i32.i64(.str.26, .str.24, $i33, $i27);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_28 := printk.ref.ref(.str.4, .str.24);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;
}



const st5481_setup_usb: ref;

axiom st5481_setup_usb == $sub.ref(0, 231818);

procedure st5481_setup_usb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.8, $M.7, $CurrAddr;



implementation st5481_setup_usb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i12: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i5 := $M.4;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i9 := usb_reset_configuration($p2);
    call {:si_unique_call 189} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p13 := usb_ifnum_to_if($p2, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 7);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p31, $mul.ref(3, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 32);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p36, $mul.ref(4, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 32);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i40 := usb_set_interface($p2, 0, 3);
    call {:si_unique_call 195} {:cexpr "status"} boogie_si_record_i32($i40);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p43 := ldv_usb_alloc_urb_12(0, 208);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p43);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i47 := __create_pipe($p2, 0);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i47);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $sub.i32(0, 2147483648));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} usb_fill_control_urb($p43, $p2, $i48, $0.ref, $0.ref, 0, usb_ctrl_complete, $p49);
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} fifo_init($p51, 16);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p52 := ldv_usb_alloc_urb_13(0, 208);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p52);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p56 := kmalloc(6, 208);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i65 := __create_pipe($p2, $i64);
    call {:si_unique_call 207} {:cexpr "tmp___1"} boogie_si_record_i32($i65);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 1073741952);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} ldv_usb_fill_int_urb_14($p52, $p2, $i66, $p56, 6, usb_int_complete, $p67, $i71);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ldv_usb_free_urb_15($p73);
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $0.ref);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ldv_usb_free_urb_16($p76);
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(472, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $0.ref);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_35 := printk.ref.ref.ref.i32(.str.9, .str.7, .str.5, $i40);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i12 := $i40;
    goto $bb6;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_34 := printk.ref.ref.ref.i32(.str.8, .str.7, .str.5, $i28);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 6);
    goto $bb6;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p16 := usb_altnum_to_altsetting($p13, 3);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb10;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_33 := printk.ref.ref.ref.i32(.str.6, .str.7, .str.5, $i9);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_32 := printk.ref.ref(.str.4, .str.5);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_setup_d: ref;

axiom st5481_setup_d == $sub.ref(0, 232850);

procedure st5481_setup_d($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation st5481_setup_d($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p52: ref;
  var $p56: ref;
  var $p59: ref;
  var $i7: i32;
  var $i60: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i5 := st5481_setup_d_out($p0);
    call {:si_unique_call 211} {:cexpr "retval"} boogie_si_record_i32($i5);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(52, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 300);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(56, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 20);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(60, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 16);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(64, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $sub.i8(0, 121));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(65, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 54);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(80, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1)), $mul.ref(88, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p21);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i25 := st5481_setup_in($p24);
    call {:si_unique_call 213} {:cexpr "retval"} boogie_si_record_i32($i25);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(880, 1)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, l1fsm);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(880, 1)), $mul.ref(8, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i31 := $M.4;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 256);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(880, 1)), $mul.ref(12, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(880, 1)), $mul.ref(16, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(880, 1)), $mul.ref(32, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, l1m_debug);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(880, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(920, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} FsmInitTimer($p40, $p41);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, dout_fsm);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i48 := $M.4;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 256);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1)), $mul.ref(12, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i49);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, dout_debug);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} st5481_release_d_out($p0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i7 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i60 := $i7;
    goto $bb12;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} vslice_dummy_var_36 := printk.ref.ref(.str.4, .str.20);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_setup_b: ref;

axiom st5481_setup_b == $sub.ref(0, 233882);

procedure st5481_setup_b($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation st5481_setup_b($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i7: i32;
  var $i39: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i5 := st5481_setup_b_out($p0);
    call {:si_unique_call 218} {:cexpr "retval"} boogie_si_record_i32($i5);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(52, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 4096);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(56, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 20);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(60, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 32);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i17 := (if $i16 == 1 then 133 else 131);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(64, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i18);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 58 else 56);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(65, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i25);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(80, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p29);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1)), $mul.ref(88, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i37 := st5481_setup_in($p36);
    call {:si_unique_call 220} {:cexpr "retval"} boogie_si_record_i32($i37);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} st5481_release_b_out($p0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i39 := $i7;
    goto $bb12;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} vslice_dummy_var_37 := printk.ref.ref(.str.4, .str.22);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hisax_register: ref;

axiom hisax_register == $sub.ref(0, 234914);

procedure hisax_register($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hisax_register($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} {:cexpr "hisax_register:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 223} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const st5481_start: ref;

axiom st5481_start == $sub.ref(0, 235946);

procedure st5481_start($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.0, $M.7, $M.9, $M.6, $CurrAddr, $M.15, $M.11, $M.5;



implementation st5481_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i42: i8;
  var $i43: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p1 := $alloc($mul.ref(25, $zext.i32.i64(1)));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(0, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p2, 6);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(1, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p3, 0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(2, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p4, 30);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(3, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p5, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(4, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p6, 32);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(5, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p7, 13);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(6, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p8, 33);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(7, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p9, 41);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(8, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p10, 34);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(9, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p11, 20);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(10, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p12, 82);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(11, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p13, 1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(12, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p14, 83);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(13, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p15, $sub.i8(0, 128));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(14, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p16, 66);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(15, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p17, 6);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(16, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p18, 67);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(17, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p19, 20);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(18, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p20, 70);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(19, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p21, 6);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(20, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p22, 71);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(21, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p23, 20);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(22, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p24, 74);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(23, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p25, 112);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(24, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p26, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i28 := $M.4;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 8);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $sub.i8(0, 128));
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(656, 1)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i35 := ldv_usb_submit_urb_19($p34, 208);
    call {:si_unique_call 228} {:cexpr "status"} boogie_si_record_i32($i35);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref(0, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.12, $p38);
    call {:si_unique_call 230} {:cexpr "request"} boogie_si_record_i8($i39);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} st5481_ph_command($p0, 7);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i39, 1;
    goto $bb10;

  $bb10:
    call $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i42, $i43 := st5481_start_loop_$bb10($p0, $p1, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i42, $i43);
    goto $bb10_last;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    call {:si_unique_call 231} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i43);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref($i45, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.12, $p46);
    call {:si_unique_call 232} {:cexpr "value"} boogie_si_record_i8($i47);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i42);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i47);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} st5481_usb_device_ctrl_msg($p0, $i49, $i51, $0.ref, $0.ref);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i44, 1);
    call {:si_unique_call 234} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i44);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 25)), $mul.ref($i53, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.12, $p54);
    call {:si_unique_call 235} {:cexpr "request"} boogie_si_record_i8($i55);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i57 == 1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i42, $i43 := $i55, $i52;
    goto $bb12_dummy;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_39 := printk.ref.ref.ref.i32(.str.12, .str.7, .str.11, $i35);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_38 := printk.ref.ref(.str.4, .str.11);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;
}



const ldv_usb_submit_urb_19: ref;

axiom ldv_usb_submit_urb_19 == $sub.ref(0, 236978);

procedure ldv_usb_submit_urb_19($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_19($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "ldv_usb_submit_urb_19:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const st5481_ph_command: ref;

axiom st5481_ph_command == $sub.ref(0, 238010);

procedure st5481_ph_command($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481_ph_command($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "st5481_ph_command:arg:command"} boogie_si_record_i32($i1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 8);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} st5481_usb_device_ctrl_msg($p0, 86, $i9, $0.ref, $0.ref);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p5 := ST5481_CMD_string($i1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} vslice_dummy_var_40 := printk.ref.ref.ref(.str.2, .str.3, $p5);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ST5481_CMD_string: ref;

axiom ST5481_CMD_string == $sub.ref(0, 239042);

procedure ST5481_CMD_string($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ST5481_CMD_string($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $p14: ref;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 245} {:cexpr "ST5481_CMD_string:arg:evt"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_41 := sprintf.ref.ref.i32($p15, .str.46, $i0);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p14 := $p1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p14 := .str.45;
    goto $bb27;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb12;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p14 := .str.44;
    goto $bb27;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p14 := .str.43;
    goto $bb27;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p14 := .str.42;
    goto $bb27;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p14 := .str.41;
    goto $bb27;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p14 := .str.40;
    goto $bb27;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p14 := .str.39;
    goto $bb27;

  $bb17:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p14 := .str.38;
    goto $bb27;

  $bb23:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb25:
    assume $i13 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p14 := .str.37;
    goto $bb27;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 240074);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const st5481_setup_b_out: ref;

axiom st5481_setup_b_out == $sub.ref(0, 241106);

procedure st5481_setup_b_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation st5481_setup_b_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i17: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p10 := usb_ifnum_to_if($p4, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i21, 2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i26 := $M.4;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p19, $mul.ref($i24, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i42 := __create_pipe($p4, $i41);
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i32($i42);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i46 := st5481_setup_isocpipes($p44, $p4, $i42, 20, 8, 162, usb_b_out_complete, $p45);
    call {:si_unique_call 254} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i17 := $i46;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p19, $mul.ref($i24, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p19, $mul.ref($i24, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_43 := printk.ref.ref.i32.i32(.str.69, .str.123, $i32, $i36);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 6);
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p13 := usb_altnum_to_altsetting($p10, 3);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_42 := printk.ref.ref(.str.4, .str.123);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_setup_in: ref;

axiom st5481_setup_in == $sub.ref(0, 242138);

procedure st5481_setup_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation st5481_setup_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i18: i32;
  var $i38: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i5 := $M.4;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p12 := kmalloc($i11, 208);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i22 := __create_pipe($p4, $i21);
    call {:si_unique_call 258} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i22, 128);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(60, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(60, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i31, $i33);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i36 := st5481_setup_isocpipes($p24, $p4, $i25, $i27, $i29, $i34, usb_in_complete, $p35);
    call {:si_unique_call 260} {:cexpr "retval"} boogie_si_record_i32($i36);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} kfree($p40);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i18 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i38 := $i18;
    goto $bb12;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_44 := printk.ref.ref(.str.4, .str.14);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 243170);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 263} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 244202);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_in_complete: ref;

axiom usb_in_complete == $sub.ref(0, 245234);

procedure usb_in_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.6, $CurrAddr, $M.15, $M.11, $M.5;



implementation usb_in_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i1;
  var $i84: i1;
  var $i86: i1;
  var $i88: i1;
  var $i35: i32;
  var $p36: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 268} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i28 := $M.4;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 128);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i31 := st5481_isoc_flatten($p0);
    call {:si_unique_call 273} {:cexpr "len"} boogie_si_record_i32($i31);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i31, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p92);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i95 := ldv_usb_submit_urb_23($p0, 32);
    call {:si_unique_call 284} {:cexpr "status___0"} boogie_si_record_i32($i95);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb60:
    assume $i96 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_52 := printk.ref.ref.ref.i32(.str.12, .str.7, .str.59, $i95);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb27:
    assume $i34 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i35, $p36 := $i31, $p33;
    goto $bb30;

  $bb30:
    call $p37, $i38, $i39, $i40, $p41, $p42, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $p43, $i44, $i45, $i57, $i58, $i59, $i60, $i62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $i82, $i84, $i86, $i88, $i35, $p36, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, vslice_dummy_var_47, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51 := usb_in_complete_loop_$bb30($p1, $p4, $p37, $i38, $i39, $i40, $p41, $p42, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $p43, $i44, $i45, $i57, $i58, $i59, $i60, $i62, $i63, $i64, $p65, $p66, $p67, $i68, $i69, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $i82, $i84, $i86, $i88, $i35, $p36, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, vslice_dummy_var_47, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51);
    goto $bb30_last;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i39 == 1);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i51 := isdnhdlc_decode($p46, $p36, $i35, $p1, $p48, $i50);
    call {:si_unique_call 277} {:cexpr "status"} boogie_si_record_i32($i51);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.14, $p1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p36, $mul.ref($i53, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.14, $p1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i35, $i55);
    call {:si_unique_call 278} {:cexpr "len"} boogie_si_record_i32($i56);
    assume {:verifier.code 0} true;
    $p43, $i44, $i45 := $p54, $i56, $i51;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i45, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i57 == 1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i45, $sub.i32(0, 2));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i82 == 1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i45, $sub.i32(0, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i84 == 1);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i45, $sub.i32(0, 3));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i44, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i88 == 1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb57:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i35, $p36 := $i44, $p43;
    goto $bb57_dummy;

  $bb54:
    assume $i86 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_51 := printk.ref.ref.ref(.str.64, .str.7, .str.59);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i84 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_50 := printk.ref.ref.ref(.str.63, .str.7, .str.59);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i82 == 1;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_49 := printk.ref.ref.ref(.str.62, .str.7, .str.59);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb35:
    assume $i57 == 1;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i58 := $M.4;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 4);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i62 := $M.4;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 1024);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p67 := dev_alloc_skb($i45);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i45);
    call {:si_unique_call 285} {:cexpr "__len___0"} boogie_si_record_i64($i71);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p72 := skb_put($p67, $i45);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 287} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p72, $p74, $i71, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p67);
    call {:si_unique_call 288} devirtbounce.4($p78, $p80, 290, $p81);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb43:
    assume $i69 == 1;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_48 := printk.ref.ref.ref(.str.61, .str.7, .str.59);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} dump_packet(.str.59, $p66, $i45);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i60 == 1;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_47 := printk.ref.ref.i32(.str.60, .str.59, $i45);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i35);
    call {:si_unique_call 274} {:cexpr "__len"} boogie_si_record_i64($i40);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 275} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p42, $p36, $i40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p43, $i44, $i45 := $p36, 0, $i35;
    goto $bb34;

  $bb24:
    assume $i30 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} dump_iso_packet(.str.59, $p0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_46 := printk.ref.ref.ref.i32(.str.49, .str.7, .str.59, $i26);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $M.4;
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_45 := printk.ref.ref.i32(.str.47, .str.59, $i23);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb12;

  $bb4:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb15;

  $bb57_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1275;
}



const st5481_setup_isocpipes: ref;

axiom st5481_setup_isocpipes == $sub.ref(0, 246266);

procedure st5481_setup_isocpipes($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation st5481_setup_isocpipes($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i8: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i27: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "st5481_setup_isocpipes:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 294} {:cexpr "st5481_setup_isocpipes:arg:num_packets"} boogie_si_record_i32($i3);
    call {:si_unique_call 295} {:cexpr "st5481_setup_isocpipes:arg:packet_size"} boogie_si_record_i32($i4);
    call {:si_unique_call 296} {:cexpr "st5481_setup_isocpipes:arg:buf_size"} boogie_si_record_i32($i5);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb1;

  $bb1:
    call $p9, $i10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $i25, $i8 := st5481_setup_isocpipes_loop_$bb1($p0, $p1, $i2, $i3, $i4, $i5, $p6, $p7, $p9, $i10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $i25, $i8);
    goto $bb1_last;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p9 := ldv_usb_alloc_urb_20($i3, 208);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref($i10, 8));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref($i12, 8));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i5);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p18 := kmalloc($i17, 208);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i8);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p0, $mul.ref($i21, 8));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} fill_isoc_urb($p23, $p1, $i2, $p18, $i3, $i4, $p6, $p7);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i8, 1);
    call {:si_unique_call 300} {:cexpr "j"} boogie_si_record_i32($i24);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i24, 1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb10_dummy;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb14;

  $bb14:
    call $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $p46, $i47, $i48, $i27 := st5481_setup_isocpipes_loop_$bb14($p0, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $p46, $i47, $i48, $i27);
    goto $bb14_last;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p0, $mul.ref($i28, 8));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i27, 1);
    call {:si_unique_call 303} {:cexpr "j"} boogie_si_record_i32($i47);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i48 := $sle.i32($i47, 1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb13;

  $bb19:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i47;
    goto $bb19_dummy;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i27);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p0, $mul.ref($i33, 8));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} kfree($p37);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i27);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p0, $mul.ref($i38, 8));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $0.ref);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i27);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p0, $mul.ref($i42, 8));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_usb_free_urb_21($p44);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i27);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p0, $mul.ref($i45, 8));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $0.ref);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1407;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;
}



const ldv_usb_alloc_urb_20: ref;

axiom ldv_usb_alloc_urb_20 == $sub.ref(0, 247298);

procedure ldv_usb_alloc_urb_20($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_alloc_urb_20($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "ldv_usb_alloc_urb_20:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 305} {:cexpr "ldv_usb_alloc_urb_20:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p2 := ldv_alloc_urb();
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fill_isoc_urb: ref;

axiom fill_isoc_urb == $sub.ref(0, 248330);

procedure fill_isoc_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fill_isoc_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i21: i32;
  var $i22: i64;
  var $p25: ref;
  var $i26: i64;
  var $p29: ref;
  var $i30: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "fill_isoc_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 308} {:cexpr "fill_isoc_urb:arg:num_packets"} boogie_si_record_i32($i4);
    call {:si_unique_call 309} {:cexpr "fill_isoc_urb:arg:packet_size"} boogie_si_record_i32($i5);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p3);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i4);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i4, $i5);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p6);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p7);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 2);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32(0, $i4);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb4;

  $bb4:
    call $i21, $i22, $p25, $i26, $p29, $i30, $p33, $i34, $i35, $i20 := fill_isoc_urb_loop_$bb4($p0, $i4, $i5, $i21, $i22, $p25, $i26, $p29, $i30, $p33, $i34, $i35, $i20);
    goto $bb4_last;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i5, $i20);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i20);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i21);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i20);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i26, 16)), $mul.ref(4, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i5);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i20);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i30, 16)), $mul.ref(8, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i20, 1);
    call {:si_unique_call 310} {:cexpr "k"} boogie_si_record_i32($i34);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, $i4);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i34;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;
}



const ldv_usb_free_urb_21: ref;

axiom ldv_usb_free_urb_21 == $sub.ref(0, 249362);

procedure ldv_usb_free_urb_21($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_free_urb_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_free_urb($p0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    return;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 250394);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p0 := ldv_undef_ptr();
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i2 := ldv_undef_int();
    call {:si_unique_call 314} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.5;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $M.5 := $p0;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 251426);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 252458);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 318} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const dump_iso_packet: ref;

axiom dump_iso_packet == $sub.ref(0, 253490);

procedure dump_iso_packet($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_iso_packet($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p18: ref;
  var $i19: i32;
  var $i21: i64;
  var $p24: ref;
  var $i25: i32;
  var $i20: i32;
  var $i26: i64;
  var $p29: ref;
  var $i30: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i37: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i45: i32;
  var $i46: i1;
  var $i38: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i10: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_53 := printk.ref.ref.i32.i32(.str.65, $p0, $i3, $i5);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i15, $p18, $i19, $i21, $p24, $i25, $i20, $i26, $p29, $i30, $i32, $p33, $p34, $i35, $i37, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, $i48, $i49, $i50, $i10, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56 := dump_iso_packet_loop_$bb4($p1, $p7, $p11, $i12, $i13, $i14, $i15, $p18, $i19, $i21, $p24, $i25, $i20, $i26, $p29, $i30, $i32, $p33, $p34, $i35, $i37, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, $i48, $i49, $i50, $i10, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56);
    goto $bb4_last;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 128);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i10);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i21, 16)), $mul.ref(4, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 321} {:cexpr "len"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i10);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 322} {:cexpr "ofs"} boogie_si_record_i32($i30);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_54 := printk.ref.i32.i32(.str.66, $i20, $i30);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i20, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_56 := printk.ref(.str.58);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i10, 1);
    call {:si_unique_call 327} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p7);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, $i48);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i48;
    goto $bb20_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i30);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i20);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb14;

  $bb14:
    call $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, vslice_dummy_var_55 := dump_iso_packet_loop_$bb14($i20, $p34, $i35, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, vslice_dummy_var_55);
    goto $bb14_last;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    $i40 := $add.i64($i35, $i39);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p34, $mul.ref($i40, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_55 := printk.ref.i32(.str.56, $i43);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i38, 1);
    call {:si_unique_call 325} {:cexpr "j"} boogie_si_record_i32($i45);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, $i20);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb16_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i10);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 320} {:cexpr "len"} boogie_si_record_i32($i19);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;
}



const st5481_isoc_flatten: ref;

axiom st5481_isoc_flatten == $sub.ref(0, 254522);

procedure st5481_isoc_flatten($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation st5481_isoc_flatten($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p52: ref;
  var $p43: ref;
  var $i54: i64;
  var $p55: ref;
  var $p53: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p21: ref;
  var $p22: ref;
  var $p59: ref;
  var $p20: ref;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p10, $mul.ref($i13, 16));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p8);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p14);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i19 := $ult.i64($i17, $i18);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p20 := $p16;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p20);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i61, $i65);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i6 := $i66;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p7, $p16;
    goto $bb8;

  $bb8:
    call $p23, $i24, $i25, $p26, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $p47, $p48, $i49, $i50, $i51, $i44, $p45, $p46, $p52, $p43, $i54, $p55, $p53, $p56, $i57, $i58, $p21, $p22, $p59 := st5481_isoc_flatten_loop_$bb8($p0, $i18, $p23, $i24, $i25, $p26, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $p47, $p48, $i49, $i50, $i51, $i44, $p45, $p46, $p52, $p43, $i54, $p55, $p53, $p56, $i57, $i58, $p21, $p22, $p59);
    goto $bb8_last;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p26 := $p21;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 328} {:cexpr "len"} boogie_si_record_i32($i30);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p33, $mul.ref($i36, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p22);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i38, $i39);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i30);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p22, $mul.ref($i54, 1));
    assume {:verifier.code 0} true;
    $p53 := $p55;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p21, $mul.ref(1, 16));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i58 := $ult.i64($i57, $i18);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p59 := $p53;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p20 := $p59;
    goto $bb7;

  $bb24:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p21, $p22 := $p56, $p53;
    goto $bb24_dummy;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i30, 1);
    call {:si_unique_call 329} {:cexpr "len"} boogie_si_record_i32($i41);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i30, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p43 := $p22;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $p43;
    goto $bb23;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i44, $p45, $p46 := $i41, $p22, $p37;
    goto $bb18;

  $bb18:
    call $p47, $p48, $i49, $i50, $i51, $i44, $p45, $p46, $p52 := st5481_isoc_flatten_loop_$bb18($p47, $p48, $i49, $i50, $i51, $i44, $p45, $p46, $p52);
    goto $bb18_last;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref(1, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref(1, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p46);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i49);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i44, 1);
    call {:si_unique_call 330} {:cexpr "len"} boogie_si_record_i32($i50);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i44, 0);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p52 := $p47;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p43 := $p52;
    goto $bb17;

  $bb20:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i44, $p45, $p46 := $i50, $p47, $p48;
    goto $bb20_dummy;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i6 := $i28;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1630;

  $bb24_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 255554);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const isdnhdlc_decode: ref;

axiom isdnhdlc_decode == $sub.ref(0, 256586);

procedure isdnhdlc_decode($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation isdnhdlc_decode($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} {:cexpr "isdnhdlc_decode:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 332} {:cexpr "isdnhdlc_decode:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dump_packet: ref;

axiom dump_packet == $sub.ref(0, 257618);

procedure dump_packet($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation dump_packet($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i5: i1;
  var $i8: i1;
  var $i9: i32;
  var $i6: i32;
  var $i7: i32;
  var $i10: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $i11: i32;
  var $i19: i1;
  var $i21: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i28: i32;
  var $i29: i1;
  var $i22: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "dump_packet:arg:pkt_len"} boogie_si_record_i32($i2);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_57 := printk.ref.ref.i32(.str.55, $p0, $i2);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i2, 28);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(20, $i2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i9 := $i2;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i9, 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i6);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i7, 0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_61 := printk.ref(.str.58);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_59 := printk.ref(.str.57);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, $sub.i32(0, 8));
    call {:si_unique_call 340} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb19;

  $bb19:
    call $i23, $p24, $i25, $i26, $i28, $i29, $i22, vslice_dummy_var_60 := dump_packet_loop_$bb19($p1, $i2, $i23, $p24, $i25, $i26, $i28, $i29, $i22, vslice_dummy_var_60);
    goto $bb19_last;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref($i23, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_60 := printk.ref.i32(.str.56, $i26);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i22, 1);
    call {:si_unique_call 342} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, $i2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb21_dummy;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb12:
    call $i12, $p13, $i14, $i15, $i17, $i18, $i11, vslice_dummy_var_58 := dump_packet_loop_$bb12($p1, $i6, $i12, $p13, $i14, $i15, $i17, $i18, $i11, vslice_dummy_var_58);
    goto $bb12_last;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref($i12, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_58 := printk.ref.i32(.str.56, $i15);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, $i6);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb14_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i9 := 20;
    goto $bb8;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i6, $i7 := 20, 8;
    goto $bb5;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 258650);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 259682);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p2 := external_alloc();
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_submit_urb_23: ref;

axiom ldv_usb_submit_urb_23 == $sub.ref(0, 260714);

procedure ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "ldv_usb_submit_urb_23:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 261746);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 351} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 352} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 262778);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p2 := __netdev_alloc_skb($p0, $i1, 32);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 263810);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 356} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p3 := external_alloc();
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 264842);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p2 := external_alloc();
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_altnum_to_altsetting: ref;

axiom usb_altnum_to_altsetting == $sub.ref(0, 265874);

procedure usb_altnum_to_altsetting($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_altnum_to_altsetting($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "usb_altnum_to_altsetting:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p2 := external_alloc();
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_b_out_complete: ref;

axiom usb_b_out_complete == $sub.ref(0, 266906);

procedure usb_b_out_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.15, $M.7, $M.9, $CurrAddr, $M.11, $M.5;



implementation usb_b_out_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i9 := get_buf_nr($p8, $p0);
    call {:si_unique_call 363} {:cexpr "buf_nr"} boogie_si_record_i32($i9);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(56, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_62 := test_and_clear_bit($i10, $p11);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 366} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} usb_b_out($p3, $i9);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} led_blink($p6);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_64 := printk.ref.ref.ref.i32(.str.49, .str.25, .str.124, $i34);
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(56, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i44 := $mul.i32($i43, 2);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} st5481_usb_pipe_reset($p6, $i45, $0.ref, $0.ref);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $M.4;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 4);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_63 := printk.ref.ref.i32(.str.47, .str.124, $i31);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb12;

  $bb4:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb15;
}



const get_buf_nr: ref;

axiom get_buf_nr == $sub.ref(0, 267938);

procedure get_buf_nr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_buf_nr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i3, $i4);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const st5481_usb_pipe_reset: ref;

axiom st5481_usb_pipe_reset == $sub.ref(0, 268970);

procedure st5481_usb_pipe_reset($p0: ref, $i1: i8, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481_usb_pipe_reset($p0: ref, $i1: i8, $p2: ref, $p3: ref)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i10: i16;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "st5481_usb_pipe_reset:arg:pipe"} boogie_si_record_i8($i1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} usb_ctrl_msg($p0, 1, 2, 0, $i10, $p2, $p3);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_65 := printk.ref.ref.i32(.str, .str.1, $i7);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_b_out: ref;

axiom usb_b_out == $sub.ref(0, 270002);

procedure usb_b_out($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.7, $M.9, $CurrAddr, $M.6, $M.11, $M.5;



implementation usb_b_out($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i48: i32;
  var $i49: i32;
  var $i34: i32;
  var $i35: i32;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i8;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i104: i32;
  var $i105: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i16;
  var $i113: i32;
  var $i114: i16;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i106: i32;
  var $i122: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $i140: i32;
  var $i141: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i142: i32;
  var $i132: i32;
  var $i151: i1;
  var $i51: i32;
  var $i152: i32;
  var $i153: i1;
  var $i158: i64;
  var $p161: ref;
  var $i162: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i169: i32;
  var $i154: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 376} {:cexpr "usb_b_out:arg:buf_nr"} boogie_si_record_i32($i1);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(56, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i8 := test_and_set_bit($i6, $p7);
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(32, 1)), $mul.ref($i18, 8));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 68);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 8);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i48, $i49 := 8, 160;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34, $i35 := $i48, $i49;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb20;

  $bb20:
    call $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $p74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $p82, $i83, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i92, $p93, $p94, $i104, $i105, $p107, $p108, $p109, $p110, $i111, $i112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $i121, $i106, $i122, $p124, $i125, $i126, $p127, $p128, $i129, $i130, $p131, $p133, $i134, $i135, $p136, $p137, $i138, $p139, $i140, $i141, $p143, $p144, $p145, $i146, $p147, $i148, $i149, $i150, $i142, $i132, $i151, $i51, $i152, cmdloc_dummy_var_6, cmdloc_dummy_var_7, vslice_dummy_var_69, vslice_dummy_var_70 := usb_b_out_loop_$bb20($p0, $p2, $p21, $i35, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $p74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $p82, $i83, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i92, $p93, $p94, $i104, $i105, $p107, $p108, $p109, $p110, $i111, $i112, $i113, $i114, $p115, $p116, $i117, $p118, $i119, $i120, $i121, $i106, $i122, $p124, $i125, $i126, $p127, $p128, $i129, $i130, $p131, $p133, $i134, $i135, $p136, $p137, $i138, $p139, $i140, $i141, $p143, $p144, $p145, $i146, $p147, $i148, $i149, $i150, $i142, $i132, $i151, $i51, $i152, cmdloc_dummy_var_6, cmdloc_dummy_var_7, vslice_dummy_var_69, vslice_dummy_var_70);
    goto $bb20_last;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i135 == 1);
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i51);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p145, $mul.ref($i146, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i148 := $sub.i32($i35, $i51);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i149 := isdnhdlc_encode($p143, $0.ref, 0, $p2, $p147, $i148);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32($i149);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i149, $i51);
    call {:si_unique_call 396} {:cexpr "len"} boogie_si_record_i32($i150);
    assume {:verifier.code 0} true;
    $i142 := $i150;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i132 := $i142;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i132, $i35);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i152 := $i132;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i153 := $ugt.i32($i152, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i154 := 0;
    assume {:branchcond $i153} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i152);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i154);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p174, $p173);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i175 := $M.4;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 512);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i178 := ldv_usb_submit_urb_31($p21, 16);
    call {:si_unique_call 401} {:cexpr "status"} boogie_si_record_i32($i178);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i178, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb68:
    assume $i179 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} vslice_dummy_var_71 := printk.ref.ref.ref.i32(.str.12, .str.25, .str.126, $i178);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i177 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} dump_iso_packet___1(.str.126, $p21);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb57:
    assume $i153 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 0, $i34, 0;
    goto $bb60;

  $bb60:
    call $i158, $p161, $i162, $p165, $i166, $i167, $i168, $i155, $i156, $i157, $i169 := usb_b_out_loop_$bb60($p21, $i152, $i158, $p161, $i162, $p165, $i166, $i167, $i168, $i155, $i156, $i157, $i169);
    goto $bb60_last;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i155);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i158, 16)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i157);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i155);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i162, 16)), $mul.ref(4, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i156);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i157, $i156);
    call {:si_unique_call 397} {:cexpr "offset"} boogie_si_record_i32($i166);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i155, 1);
    call {:si_unique_call 398} {:cexpr "i"} boogie_si_record_i32($i167);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i168 := $ugt.i32($i152, $i166);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i169 := $i167;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i154 := $i169;
    goto $bb59;

  $bb62:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := $i167, 8, $i166;
    goto $bb62_dummy;

  $bb54:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i51 := $i132;
    goto $bb54_dummy;

  $bb51:
    assume $i135 == 1;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i51);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p137, $mul.ref($i138, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i140 := $sub.i32($i35, $i51);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 393} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p139, $sub.i8(0, 1), $i141, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i142 := $i35;
    goto $bb53;

  $bb22:
    assume $i55 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i56 := $M.4;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 256);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i65 := $M.4;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 4);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i76 == 1);
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i51);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p116, $mul.ref($i117, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i35, $i51);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i120 := isdnhdlc_encode($p107, $p109, $i114, $p2, $p118, $i119);
    call {:si_unique_call 385} {:cexpr "tmp___2"} boogie_si_record_i32($i120);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i120, $i51);
    call {:si_unique_call 386} {:cexpr "len"} boogie_si_record_i32($i121);
    assume {:verifier.code 0} true;
    $i106 := $i121;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.15, $p2);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_70 := skb_pull($p53, $i122);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i132 := $i106;
    goto $bb50;

  $bb47:
    assume $i126 == 1;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $0.ref);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i129);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p131 := $i2p.i64.ref($i130);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} B_L1L2($p0, 289, $p131);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} dev_kfree_skb_any($p53);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb33:
    assume $i76 == 1;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i35, $i51);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p2, $i77);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.15, $p2);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i81 := $ult.i32($i79, $i80);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i51);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p87, $mul.ref($i88, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.15, $p2);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i91 := $ugt.i32($i90, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.15, $p2);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i51, $i104);
    call {:si_unique_call 389} {:cexpr "len"} boogie_si_record_i32($i105);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i106 := $i105;
    goto $bb46;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i92, $p93, $p94 := 0, $p89, $p85;
    goto $bb41;

  $bb41:
    call $p95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i92, $p93, $p94 := usb_b_out_loop_$bb41($p2, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i92, $p93, $p94);
    goto $bb41_last;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p93, $mul.ref(1, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p94, $mul.ref(1, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p94);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i100 := bitrev8($i99);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, $i100);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i92, 1);
    call {:si_unique_call 388} {:cexpr "count"} boogie_si_record_i32($i101);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.15, $p2);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i103 := $ugt.i32($i102, $i101);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i103 == 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb43:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i92, $p93, $p94 := $i101, $p95, $p96;
    goto $bb43_dummy;

  $bb35:
    assume $i81 == 1;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p2, $i83);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb30:
    assume $i67 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_69 := printk.ref.ref.i32.i32(.str.129, .str.126, $i70, $i72);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p53);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb26;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} dump_packet___1(.str.126, $p62, $i64);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i41 := $M.4;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 4);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48, $i49 := 6, 158;
    goto $bb19;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_68 := printk.ref.ref.i32.i32(.str.128, .str.126, $i46, 2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i27 := $M.4;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 4);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34, $i35 := 10, 162;
    goto $bb13;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_67 := printk.ref.ref.i32.i32(.str.127, .str.126, $i32, 2);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i10 := $M.4;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_66 := printk.ref.ref.i32.i32(.str.125, .str.126, $i16, $i1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb62_dummy:
    assume false;
    return;

  $bb60_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2013;

  $bb43_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  $bb54_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;
}



const led_blink: ref;

axiom led_blink == $sub.ref(0, 271034);

procedure led_blink($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation led_blink($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i18: i8;
  var $i22: i32;
  var $i23: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    call {:si_unique_call 403} {:cexpr "leds"} boogie_si_record_i8($i2);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(868, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(868, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(868, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i9 := $urem.i32($i8, 50);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(868, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i13 := $urem.i32($i12, 100);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 191);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    call {:si_unique_call 405} {:cexpr "leds"} boogie_si_record_i8($i21);
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i18);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} st5481_usb_device_ctrl_msg($p0, 83, $i23, $0.ref, $0.ref);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i2);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 64);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 404} {:cexpr "leds"} boogie_si_record_i8($i17);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dump_packet___1: ref;

axiom dump_packet___1 == $sub.ref(0, 272066);

procedure dump_packet___1($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation dump_packet___1($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i5: i1;
  var $i8: i1;
  var $i9: i32;
  var $i6: i32;
  var $i7: i32;
  var $i10: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $i11: i32;
  var $i19: i1;
  var $i21: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i28: i32;
  var $i29: i1;
  var $i22: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "dump_packet___1:arg:pkt_len"} boogie_si_record_i32($i2);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_72 := printk.ref.ref.i32(.str.55, $p0, $i2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i2, 28);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(20, $i2);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i9 := $i2;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i9, 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i6);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i7, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_76 := printk.ref(.str.58);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_74 := printk.ref(.str.57);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, $sub.i32(0, 8));
    call {:si_unique_call 412} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb19;

  $bb19:
    call $i23, $p24, $i25, $i26, $i28, $i29, $i22, vslice_dummy_var_75 := dump_packet___1_loop_$bb19($p1, $i2, $i23, $p24, $i25, $i26, $i28, $i29, $i22, vslice_dummy_var_75);
    goto $bb19_last;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref($i23, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_75 := printk.ref.i32(.str.56, $i26);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i22, 1);
    call {:si_unique_call 414} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, $i2);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb21_dummy;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb12:
    call $i12, $p13, $i14, $i15, $i17, $i18, $i11, vslice_dummy_var_73 := dump_packet___1_loop_$bb12($p1, $i6, $i12, $p13, $i14, $i15, $i17, $i18, $i11, vslice_dummy_var_73);
    goto $bb12_last;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref($i12, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_73 := printk.ref.i32(.str.56, $i15);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 410} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, $i6);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb14_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i9 := 20;
    goto $bb8;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i6, $i7 := 20, 8;
    goto $bb5;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2121;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;
}



const bitrev8: ref;

axiom bitrev8 == $sub.ref(0, 273098);

procedure bitrev8($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation bitrev8($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "bitrev8:arg:byte"} boogie_si_record_i8($i0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(byte_rev_table, $mul.ref(0, 256)), $mul.ref($i2, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const isdnhdlc_encode: ref;

axiom isdnhdlc_encode == $sub.ref(0, 274130);

procedure isdnhdlc_encode($p0: ref, $p1: ref, $i2: i16, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation isdnhdlc_encode($p0: ref, $p1: ref, $i2: i16, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 417} {:cexpr "isdnhdlc_encode:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 418} {:cexpr "isdnhdlc_encode:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 419} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 275162);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p2 := external_alloc();
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const B_L1L2: ref;

axiom B_L1L2 == $sub.ref(0, 276194);

procedure B_L1L2($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation B_L1L2($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} {:cexpr "B_L1L2:arg:pr"} boogie_si_record_i32($i1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 424} devirtbounce.4($p6, $p4, $i1, $p2);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 277226);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 278258);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const dump_iso_packet___1: ref;

axiom dump_iso_packet___1 == $sub.ref(0, 279290);

procedure dump_iso_packet___1($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_iso_packet___1($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p18: ref;
  var $i19: i32;
  var $i21: i64;
  var $p24: ref;
  var $i25: i32;
  var $i20: i32;
  var $i26: i64;
  var $p29: ref;
  var $i30: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i37: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i45: i32;
  var $i46: i1;
  var $i38: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i10: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_77 := printk.ref.ref.i32.i32(.str.65, $p0, $i3, $i5);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i15, $p18, $i19, $i21, $p24, $i25, $i20, $i26, $p29, $i30, $i32, $p33, $p34, $i35, $i37, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, $i48, $i49, $i50, $i10, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80 := dump_iso_packet___1_loop_$bb4($p1, $p7, $p11, $i12, $i13, $i14, $i15, $p18, $i19, $i21, $p24, $i25, $i20, $i26, $p29, $i30, $i32, $p33, $p34, $i35, $i37, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, $i48, $i49, $i50, $i10, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80);
    goto $bb4_last;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 128);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i10);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 427} {:cexpr "len"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i10);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 428} {:cexpr "ofs"} boogie_si_record_i32($i30);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_78 := printk.ref.i32.i32(.str.66, $i20, $i30);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i20, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_80 := printk.ref(.str.58);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i10, 1);
    call {:si_unique_call 433} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p7);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, $i48);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i48;
    goto $bb20_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i30);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i20);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb14;

  $bb14:
    call $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, vslice_dummy_var_79 := dump_iso_packet___1_loop_$bb14($i20, $p34, $i35, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, vslice_dummy_var_79);
    goto $bb14_last;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    $i40 := $add.i64($i35, $i39);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p34, $mul.ref($i40, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_79 := printk.ref.i32(.str.56, $i43);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i38, 1);
    call {:si_unique_call 431} {:cexpr "j"} boogie_si_record_i32($i45);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, $i20);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb16_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i10);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 426} {:cexpr "len"} boogie_si_record_i32($i19);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;
}



const ldv_usb_submit_urb_31: ref;

axiom ldv_usb_submit_urb_31 == $sub.ref(0, 280322);

procedure ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "ldv_usb_submit_urb_31:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 436} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const st5481_setup_d_out: ref;

axiom st5481_setup_d_out == $sub.ref(0, 281354);

procedure st5481_setup_d_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation st5481_setup_d_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i15: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p8 := usb_ifnum_to_if($p2, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i19 := $M.4;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p17, $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i35 := __create_pipe($p2, $i34);
    call {:si_unique_call 442} {:cexpr "tmp"} boogie_si_record_i32($i35);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(32, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i39 := st5481_setup_isocpipes($p37, $p2, $i35, 20, 2, 40, usb_d_out_complete, $p38);
    call {:si_unique_call 444} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i15 := $i39;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p17, $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p17, $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_82 := printk.ref.ref.i32.i32(.str.69, .str.68, $i25, $i29);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 6);
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p11 := usb_altnum_to_altsetting($p8, 3);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_81 := printk.ref.ref(.str.4, .str.68);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const l1m_debug: ref;

axiom l1m_debug == $sub.ref(0, 282386);

procedure l1m_debug($p0: ref, $p1: ref);



const FsmInitTimer: ref;

axiom FsmInitTimer == $sub.ref(0, 283418);

procedure FsmInitTimer($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation FsmInitTimer($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    return;
}



const dout_debug: ref;

axiom dout_debug == $sub.ref(0, 284450);

procedure dout_debug($p0: ref, $p1: ref);



const ldv__builtin_va_start: ref;

axiom ldv__builtin_va_start == $sub.ref(0, 285482);

procedure ldv__builtin_va_start($p0: ref);



const vsnprintf: ref;

axiom vsnprintf == $sub.ref(0, 286514);

procedure vsnprintf($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);



const ldv__builtin_va_end: ref;

axiom ldv__builtin_va_end == $sub.ref(0, 287546);

procedure ldv__builtin_va_end($p0: ref);



const usb_d_out_complete: ref;

axiom usb_d_out_complete == $sub.ref(0, 288578);

procedure usb_d_out_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation usb_d_out_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i5 := $M.4;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(32, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i11 := get_buf_nr($p10, $p0);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 448} {:cexpr "buf_nr"} boogie_si_record_i64($i12);
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_84 := test_and_clear_bit($i12, $p13);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 451} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i12);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_87 := FsmEvent($p43, 1, $p44);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_86 := printk.ref.ref.ref.i32(.str.49, .str.18, .str.70, $i36);
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} st5481_usb_pipe_reset($p3, 6, fifo_reseted, $p41);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $M.4;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_85 := printk.ref.ref.i32(.str.47, .str.70, $i33);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb15;

  $bb7:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i23, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb18;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_83 := printk.ref.ref(.str.4, .str.70);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fifo_reseted: ref;

axiom fifo_reseted == $sub.ref(0, 289610);

procedure fifo_reseted($p0: ref);
  free requires assertsPassed;



implementation fifo_reseted($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_88 := FsmEvent($p3, 3, $0.ref);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    return;
}



const FsmEvent: ref;

axiom FsmEvent == $sub.ref(0, 290642);

procedure FsmEvent($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation FsmEvent($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} {:cexpr "FsmEvent:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_reset_configuration: ref;

axiom usb_reset_configuration == $sub.ref(0, 291674);

procedure usb_reset_configuration($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_configuration($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 460} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 461} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 292706);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 463} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_alloc_urb_12: ref;

axiom ldv_usb_alloc_urb_12 == $sub.ref(0, 293738);

procedure ldv_usb_alloc_urb_12($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_alloc_urb_12($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} {:cexpr "ldv_usb_alloc_urb_12:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 467} {:cexpr "ldv_usb_alloc_urb_12:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p2 := ldv_alloc_urb();
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_ctrl_complete: ref;

axiom usb_ctrl_complete == $sub.ref(0, 294770);

procedure usb_ctrl_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.15, $M.7, $M.9, $M.11, $CurrAddr, $M.5;



implementation usb_ctrl_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 470} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(176, 1)), $mul.ref(464, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} clear_bit(0, $p50);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} usb_next_ctrl_msg($p0, $p3);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    call {:si_unique_call 474} devirtbounce.5($p47, $p49);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} usb_reset_endpoint($p37, $i41);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_90 := printk.ref.ref.ref.i32(.str.49, .str.7, .str.48, $i26);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $M.4;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_89 := printk.ref.ref.i32(.str.47, .str.48, $i23);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb12;

  $bb4:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb15;
}



const usb_fill_control_urb: ref;

axiom usb_fill_control_urb == $sub.ref(0, 295802);

procedure usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 478} {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i5);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    return;
}



const fifo_init: ref;

axiom fifo_init == $sub.ref(0, 296834);

procedure fifo_init($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fifo_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_91: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 480} {:cexpr "fifo_init:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(1, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(3, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_91 := spinlock_check($p8);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __raw_spin_lock_init($p12, .str.50, $p2);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_13: ref;

axiom ldv_usb_alloc_urb_13 == $sub.ref(0, 297866);

procedure ldv_usb_alloc_urb_13($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_alloc_urb_13($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "ldv_usb_alloc_urb_13:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 484} {:cexpr "ldv_usb_alloc_urb_13:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p2 := ldv_alloc_urb();
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_int_complete: ref;

axiom usb_int_complete == $sub.ref(0, 298898);

procedure usb_int_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation usb_int_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $p94: ref;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_93 := printk.ref.ref.ref.i32(.str.53, .str.7, .str.52, $i22);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i77 := ldv_usb_submit_urb_11($p0, 32);
    call {:si_unique_call 489} {:cexpr "status"} boogie_si_record_i32($i77);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb48:
    assume $i78 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_98 := printk.ref.ref.ref.i32(.str.54, .str.7, .str.52, $i77);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $M.4;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p2);
    call {:si_unique_call 491} {:cexpr "irqbyte"} boogie_si_record_i8($i30);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 32);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i30);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 16);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    call {:si_unique_call 494} {:cexpr "irqbyte"} boogie_si_record_i8($i44);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 64);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p2);
    call {:si_unique_call 496} {:cexpr "irqbyte"} boogie_si_record_i8($i51);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 64);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i66, $i69);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i71);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i85, $i88);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(1072, 1)), $mul.ref(1, 216)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, $i90);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb41:
    assume $i54 == 1;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(880, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 15);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_97 := FsmEvent($p55, $i59, $0.ref);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i47 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_96 := FsmEvent($p49, 6, $0.ref);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i39 == 1;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_95 := FsmEvent($p41, 5, $0.ref);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i33 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_94 := FsmEvent($p35, 2, $0.ref);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i29 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i26 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} dump_packet(.str.52, $p2, 6);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i15 := $M.4;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_92 := printk.ref.ref.i32(.str.51, .str.52, $i19);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i7, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb17;
}



const ldv_usb_fill_int_urb_14: ref;

axiom ldv_usb_fill_int_urb_14 == $sub.ref(0, 299930);

procedure ldv_usb_fill_int_urb_14($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_usb_fill_int_urb_14($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} {:cexpr "ldv_usb_fill_int_urb_14:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 500} {:cexpr "ldv_usb_fill_int_urb_14:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 501} {:cexpr "ldv_usb_fill_int_urb_14:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ldv_fill_int_urb($p0, $p5);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_15: ref;

axiom ldv_usb_free_urb_15 == $sub.ref(0, 300962);

procedure ldv_usb_free_urb_15($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_free_urb_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} ldv_free_urb($p0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_16: ref;

axiom ldv_usb_free_urb_16 == $sub.ref(0, 301994);

procedure ldv_usb_free_urb_16($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_usb_free_urb_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} ldv_free_urb($p0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    return;
}



const ldv_fill_int_urb: ref;

axiom ldv_fill_int_urb == $sub.ref(0, 303026);

procedure ldv_fill_int_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7;



implementation ldv_fill_int_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p2 := $M.5;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.8 := $p1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.7 := $i7;
    call {:si_unique_call 505} {:cexpr "completeFnIntCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_11: ref;

axiom ldv_usb_submit_urb_11 == $sub.ref(0, 304058);

procedure ldv_usb_submit_urb_11($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_11($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "ldv_usb_submit_urb_11:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 508} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 305090);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    return;
}



const usb_reset_endpoint: ref;

axiom usb_reset_endpoint == $sub.ref(0, 306122);

procedure usb_reset_endpoint($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation usb_reset_endpoint($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "usb_reset_endpoint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 307154);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 511} devirtbounce.6(0, $p1, $i0, $p1);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    return;
}



const st5481B_mode: ref;

axiom st5481B_mode == $sub.ref(0, 308186);

procedure st5481B_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481B_mode($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $i86: i32;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i16;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} {:cexpr "st5481B_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i5 := $M.4;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i1);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_100 := usb_unlink_urb($p18);
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_101 := usb_unlink_urb($p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(56, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(40, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} st5481_in_mode($p25, $i1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 39);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i83 := $mul.i32($i82, 2);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} st5481_usb_device_ctrl_msg($p4, $i84, 0, $0.ref, $0.ref);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i89 := $mul.i32($i88, 2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 57);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} st5481_usb_device_ctrl_msg($p4, $i91, 0, $0.ref, $0.ref);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 4);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i94 == 1);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} st5481_usb_device_ctrl_msg($p4, 83, $i113, $0.ref, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i117 == 1;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} dev_kfree_skb_any($p119);
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $0.ref);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i94 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i97 == 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 223);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, $i108);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i97 == 1;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 239);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i102);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32($i42, 2);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} st5481_usb_pipe_reset($p4, $i44, $0.ref, $0.ref);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 39);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i49, 2);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} st5481_usb_device_ctrl_msg($p4, $i51, 76, $0.ref, $0.ref);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i55, 2);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 57);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} st5481_usb_device_ctrl_msg($p4, $i58, 32, st5481B_start_xfer, $p59);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 4);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, 32);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i76);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i65 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 16);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 4);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := 4;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} isdnhdlc_out_init($p37, $i36);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i35 := $or.i32(4, 1);
    call {:si_unique_call 519} {:cexpr "features"} boogie_si_record_i32($i35);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb14;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_99 := printk.ref.ref.i32.i32(.str.131, .str.132, $i10, $i1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_unlink_urb: ref;

axiom usb_unlink_urb == $sub.ref(0, 309218);

procedure usb_unlink_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_unlink_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 526} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const st5481_in_mode: ref;

axiom st5481_in_mode == $sub.ref(0, 310250);

procedure st5481_in_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation st5481_in_mode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "st5481_in_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_102 := usb_unlink_urb($p8);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_103 := usb_unlink_urb($p12);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(65, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} st5481_usb_device_ctrl_msg($p45, $i49, 0, $0.ref, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} st5481_usb_pipe_reset($p27, $i31, $0.ref, $0.ref);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(65, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(60, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} st5481_usb_device_ctrl_msg($p33, $i37, $i42, $0.ref, $0.ref);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} st5481_start_rcv($p43);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 4);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := 4;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} isdnhdlc_rcv_init($p25, $i24);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i23 := $or.i32(4, 1);
    call {:si_unique_call 532} {:cexpr "features"} boogie_si_record_i32($i23);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isdnhdlc_out_init: ref;

axiom isdnhdlc_out_init == $sub.ref(0, 311282);

procedure isdnhdlc_out_init($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation isdnhdlc_out_init($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} {:cexpr "isdnhdlc_out_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    return;
}



const st5481B_start_xfer: ref;

axiom st5481B_start_xfer == $sub.ref(0, 312314);

procedure st5481B_start_xfer($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.7, $M.9, $CurrAddr, $M.6, $M.11, $M.5;



implementation st5481B_start_xfer($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} usb_b_out($p1, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} usb_b_out($p1, 1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_104 := printk.ref.ref.i32(.str.133, .str.134, $i7);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isdnhdlc_rcv_init: ref;

axiom isdnhdlc_rcv_init == $sub.ref(0, 313346);

procedure isdnhdlc_rcv_init($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation isdnhdlc_rcv_init($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} {:cexpr "isdnhdlc_rcv_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    return;
}



const st5481_start_rcv: ref;

axiom st5481_start_rcv == $sub.ref(0, 314378);

procedure st5481_start_rcv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation st5481_start_rcv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p9);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i17 := ldv_usb_submit_urb_24($p16, 208);
    call {:si_unique_call 544} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p21);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i29 := ldv_usb_submit_urb_25($p28, 208);
    call {:si_unique_call 547} {:cexpr "status___0"} boogie_si_record_i32($i29);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_107 := printk.ref.ref.ref.i32(.str.12, .str.7, .str.67, $i29);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_106 := printk.ref.ref.ref.i32(.str.12, .str.7, .str.67, $i17);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_105 := printk.ref.ref(.str.4, .str.67);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_24: ref;

axiom ldv_usb_submit_urb_24 == $sub.ref(0, 315410);

procedure ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "ldv_usb_submit_urb_24:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 551} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_25: ref;

axiom ldv_usb_submit_urb_25 == $sub.ref(0, 316442);

procedure ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "ldv_usb_submit_urb_25:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 317474);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p0 := ldv_undef_ptr();
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const l1_ignore: ref;

axiom l1_ignore == $sub.ref(0, 318506);

procedure l1_ignore($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation l1_ignore($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} {:cexpr "l1_ignore:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    return;
}



const l1_go_f6: ref;

axiom l1_go_f6 == $sub.ref(0, 319538);

procedure l1_go_f6($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation l1_go_f6($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} {:cexpr "l1_go_f6:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 3);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} FsmChangeState($p0, 2);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} ph_disconnect($p5);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const l1_go_f7: ref;

axiom l1_go_f7 == $sub.ref(0, 320570);

procedure l1_go_f7($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation l1_go_f7($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} {:cexpr "l1_go_f7:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(920, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} FsmDelTimer($p6, 0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ph_connect($p5);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} FsmChangeState($p0, 3);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} D_L1L2($p5, 258, $0.ref);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    return;
}



const l1_activate: ref;

axiom l1_activate == $sub.ref(0, 321602);

procedure l1_activate($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation l1_activate($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "l1_activate:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} st5481_ph_command($p5, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} st5481_ph_command($p5, 7);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(920, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} FsmRestartTimer($p6, 7000, 18, $0.ref, 2);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} st5481_ph_command($p5, 8);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} FsmChangeState($p0, 1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    return;
}



const l1_timer3: ref;

axiom l1_timer3 == $sub.ref(0, 322634);

procedure l1_timer3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation l1_timer3($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "l1_timer3:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} st5481_ph_command($p5, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} FsmChangeState($p0, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} D_L1L2($p5, 274, $0.ref);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    return;
}



const l1_go_f3: ref;

axiom l1_go_f3 == $sub.ref(0, 323666);

procedure l1_go_f3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation l1_go_f3($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} {:cexpr "l1_go_f3:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 3);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} FsmChangeState($p0, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} D_L1L2($p5, 274, $0.ref);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} ph_disconnect($p5);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const l1_go_f8: ref;

axiom l1_go_f8 == $sub.ref(0, 324698);

procedure l1_go_f8($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation l1_go_f8($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "l1_go_f8:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 3);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} FsmChangeState($p0, 4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} ph_disconnect($p5);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ph_disconnect: ref;

axiom ph_disconnect == $sub.ref(0, 325730);

procedure ph_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation ph_disconnect($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i16;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 8);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} st5481_in_mode($p5, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 191);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} st5481_usb_device_ctrl_msg($p0, 83, $i15, $0.ref, $0.ref);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_108 := printk.ref.ref(.str.4, .str.99);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const FsmChangeState: ref;

axiom FsmChangeState == $sub.ref(0, 326762);

procedure FsmChangeState($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation FsmChangeState($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} {:cexpr "FsmChangeState:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    return;
}



const D_L1L2: ref;

axiom D_L1L2 == $sub.ref(0, 327794);

procedure D_L1L2($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation D_L1L2($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "D_L1L2:arg:pr"} boogie_si_record_i32($i1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(16, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 588} devirtbounce.4($p6, $p4, $i1, $p2);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    return;
}



const FsmRestartTimer: ref;

axiom FsmRestartTimer == $sub.ref(0, 328826);

procedure FsmRestartTimer($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;



implementation FsmRestartTimer($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "FsmRestartTimer:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 590} {:cexpr "FsmRestartTimer:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 591} {:cexpr "FsmRestartTimer:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    return;
}



const FsmDelTimer: ref;

axiom FsmDelTimer == $sub.ref(0, 329858);

procedure FsmDelTimer($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation FsmDelTimer($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "FsmDelTimer:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    return;
}



const ph_connect: ref;

axiom ph_connect == $sub.ref(0, 330890);

procedure ph_connect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation ph_connect($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(664, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 8);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} FsmChangeState($p7, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} st5481_usb_device_ctrl_msg($p0, 76, 252, $0.ref, $0.ref);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} st5481_in_mode($p2, 2);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} st5481_usb_pipe_reset($p0, 6, $0.ref, $0.ref);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 64);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(864, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} st5481_usb_device_ctrl_msg($p0, 83, $i17, $0.ref, $0.ref);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_109 := printk.ref.ref(.str.4, .str.100);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dout_start_xmit: ref;

axiom dout_start_xmit == $sub.ref(0, 331922);

procedure dout_start_xmit($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation dout_start_xmit($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: ref;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 600} {:cexpr "dout_start_xmit:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i10 := $M.4;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p16 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} isdnhdlc_out_init($p16, 6);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64(0);
    $p18 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i19 := test_and_set_bit($i17, $p18);
    call {:si_unique_call 604} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64(0);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(32, 1)), $mul.ref($i24, 8));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i28 := $M.4;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p37 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i47 := isdnhdlc_encode($p37, $p39, $i44, $p3, $p46, 16);
    call {:si_unique_call 608} {:cexpr "len"} boogie_si_record_i32($i47);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.15, $p3);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_112 := skb_pull($p9, $i48);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i50 := $sle.i32($i47, 15);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} FsmChangeState($p52, 3);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i47);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i47);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p66);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p27, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 2);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i69 := $M.4;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 32);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i72 := ldv_usb_submit_urb_29($p27, 208);
    call {:si_unique_call 616} {:cexpr "status"} boogie_si_record_i32($i72);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_113 := printk.ref.ref.ref.i32(.str.12, .str.18, .str.119, $i72);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} dump_iso_packet___0(.str.119, $p27);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i55 == 1;
    $p56 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} D_L1L2($p6, 289, $0.ref);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} dev_kfree_skb_any($p9);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} FsmChangeState($p51, 1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p9);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} dump_packet___0(.str.119, $p34, $i36);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i20 == 1;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_111 := printk.ref.ref.ref.i32.i32.i64(.str.120, .str.18, .str.119, 6, 0, $i22);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_110 := printk.ref.ref.i32(.str.118, .str.119, $i14);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dout_short_fifo: ref;

axiom dout_short_fifo == $sub.ref(0, 332954);

procedure dout_short_fifo($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation dout_short_fifo($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} {:cexpr "dout_short_fifo:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} FsmChangeState($p7, 2);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} st5481_usb_device_ctrl_msg($p5, 55, 16, $0.ref, $0.ref);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    return;
}



const dout_end_short_frame: ref;

axiom dout_end_short_frame == $sub.ref(0, 333986);

procedure dout_end_short_frame($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation dout_end_short_frame($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "dout_end_short_frame:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} FsmChangeState($p7, 6);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    return;
}



const dout_underrun: ref;

axiom dout_underrun == $sub.ref(0, 335018);

procedure dout_underrun($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation dout_underrun($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} {:cexpr "dout_underrun:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i8 := constant_test_bit(0, $p7);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i12 := constant_test_bit(1, $p11);
    call {:si_unique_call 628} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} dout_stop($p0, $i1, $p2);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} FsmChangeState($p14, 7);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} FsmChangeState($p10, 7);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dout_long_enable_fifo: ref;

axiom dout_long_enable_fifo == $sub.ref(0, 336050);

procedure dout_long_enable_fifo($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation dout_long_enable_fifo($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} {:cexpr "dout_long_enable_fifo:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} st5481_usb_device_ctrl_msg($p5, 55, 16, $0.ref, $0.ref);
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} FsmChangeState($p7, 4);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    return;
}



const dout_long_den: ref;

axiom dout_long_den == $sub.ref(0, 337082);

procedure dout_long_den($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation dout_long_den($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} {:cexpr "dout_long_den:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} FsmChangeState($p7, 5);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} usb_d_out($p5, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} usb_d_out($p5, 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    return;
}



const dout_complete: ref;

axiom dout_complete == $sub.ref(0, 338114);

procedure dout_complete($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation dout_complete($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "dout_complete:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    call {:si_unique_call 639} {:cexpr "buf_nr"} boogie_si_record_i64($i6);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} usb_d_out($p5, $i7);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    return;
}



const dout_ignore: ref;

axiom dout_ignore == $sub.ref(0, 339146);

procedure dout_ignore($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation dout_ignore($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} {:cexpr "dout_ignore:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    return;
}



const dout_check_busy: ref;

axiom dout_check_busy == $sub.ref(0, 340178);

procedure dout_check_busy($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation dout_check_busy($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "dout_check_busy:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i8 := constant_test_bit(0, $p7);
    call {:si_unique_call 644} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i11 := constant_test_bit(1, $p10);
    call {:si_unique_call 646} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} dout_stop($p0, $i1, $p2);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const dout_reset: ref;

axiom dout_reset == $sub.ref(0, 341210);

procedure dout_reset($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation dout_reset($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} {:cexpr "dout_reset:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} FsmChangeState($p7, 9);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} st5481_usb_pipe_reset($p5, 6, fifo_reseted, $p8);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    return;
}



const dout_reseted: ref;

axiom dout_reseted == $sub.ref(0, 342242);

procedure dout_reseted($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation dout_reseted($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} {:cexpr "dout_reseted:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} FsmChangeState($p7, 0);
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_114 := FsmEvent($p12, 0, $0.ref);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 343274);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dout_stop: ref;

axiom dout_stop == $sub.ref(0, 344306);

procedure dout_stop($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation dout_stop($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} {:cexpr "dout_stop:arg:event"} boogie_si_record_i32($i1);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} FsmChangeState($p7, 8);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} st5481_usb_device_ctrl_msg($p5, 55, 0, dout_stop_event, $p8);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    return;
}



const dout_stop_event: ref;

axiom dout_stop_event == $sub.ref(0, 345338);

procedure dout_stop_event($p0: ref);
  free requires assertsPassed;



implementation dout_stop_event($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_115 := FsmEvent($p3, 4, $0.ref);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    return;
}



const usb_d_out: ref;

axiom usb_d_out == $sub.ref(0, 346370);

procedure usb_d_out($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation usb_d_out($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i39: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i55: i32;
  var $i56: i32;
  var $i74: i32;
  var $i54: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 660} {:cexpr "usb_d_out:arg:buf_nr"} boogie_si_record_i32($i1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 5);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i10 := test_and_set_bit($i8, $p9);
    call {:si_unique_call 662} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(32, 1)), $mul.ref($i18, 8));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i43 := isdnhdlc_encode($p40, $0.ref, 0, $p2, $p42, 40);
    call {:si_unique_call 668} {:cexpr "len"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, 40);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p23);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i39);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i53 := $ugt.i32($i39, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i54 := 0;
    assume {:branchcond $i53} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i54);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p77);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(8, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i82 := usb_get_current_frame_number($p81);
    call {:si_unique_call 675} {:cexpr "tmp___0"} boogie_si_record_i32($i82);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i85 := $M.4;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 32);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i88 := ldv_usb_submit_urb_27($p21, 208);
    call {:si_unique_call 678} {:cexpr "tmp___1"} boogie_si_record_i32($i88);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i89 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 2);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i91 := ldv_usb_submit_urb_28($p21, 208);
    call {:si_unique_call 680} {:cexpr "status"} boogie_si_record_i32($i91);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i92 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_118 := printk.ref.ref.ref.i32(.str.12, .str.18, .str.122, $i91);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} dump_iso_packet___0(.str.122, $p21);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i55, $i56 := 0, 0;
    goto $bb26;

  $bb26:
    call $p57, $p58, $i59, $p61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $p70, $i71, $i72, $i73, $i55, $i56, $i74 := usb_d_out_loop_$bb26($p21, $i39, $p57, $p58, $i59, $p61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $p70, $i71, $i72, $i73, $i55, $i56, $i74);
    goto $bb26_last;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i56);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p58, $mul.ref($i59, 16)), $mul.ref(0, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i55);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p58, $mul.ref($i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 2);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i39, $i55);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p58, $mul.ref($i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i66 := $ult.i32($i63, $i65);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i56, 1);
    call {:si_unique_call 672} {:cexpr "num_packets"} boogie_si_record_i32($i69);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p58, $mul.ref($i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, $i55);
    call {:si_unique_call 673} {:cexpr "packet_offset"} boogie_si_record_i32($i72);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i32($i39, $i72);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i74 := $i69;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i54 := $i74;
    goto $bb25;

  $bb31:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i55, $i56 := $i72, $i69;
    goto $bb31_dummy;

  $bb28:
    assume $i66 == 1;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i39, $i55);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p58, $mul.ref($i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb19;

  $bb20:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(56, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $0.ref);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} D_L1L2($p0, 289, $0.ref);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} dev_kfree_skb_any($p23);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i44 == 1;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(64, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} FsmChangeState($p45, 6);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i36 := isdnhdlc_encode($p26, $p28, $i33, $p2, $p35, 40);
    call {:si_unique_call 665} {:cexpr "len"} boogie_si_record_i32($i36);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.15, $p2);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_117 := skb_pull($p23, $i37);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    goto $bb13;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i12 := $M.4;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(760, 1)), $mul.ref(48, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_116 := printk.ref.ref.i32.i32.i64(.str.121, .str.122, 6, $i1, $i16);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;
}



const usb_get_current_frame_number: ref;

axiom usb_get_current_frame_number == $sub.ref(0, 347402);

procedure usb_get_current_frame_number($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_get_current_frame_number($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dump_iso_packet___0: ref;

axiom dump_iso_packet___0 == $sub.ref(0, 348434);

procedure dump_iso_packet___0($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dump_iso_packet___0($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p18: ref;
  var $i19: i32;
  var $i21: i64;
  var $p24: ref;
  var $i25: i32;
  var $i20: i32;
  var $i26: i64;
  var $p29: ref;
  var $i30: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i37: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i45: i32;
  var $i46: i1;
  var $i38: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i10: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_119 := printk.ref.ref.i32.i32(.str.65, $p0, $i3, $i5);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i15, $p18, $i19, $i21, $p24, $i25, $i20, $i26, $p29, $i30, $i32, $p33, $p34, $i35, $i37, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, $i48, $i49, $i50, $i10, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122 := dump_iso_packet___0_loop_$bb4($p1, $p7, $p11, $i12, $i13, $i14, $i15, $p18, $i19, $i21, $p24, $i25, $i20, $i26, $p29, $i30, $i32, $p33, $p34, $i35, $i37, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, $i48, $i49, $i50, $i10, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122);
    goto $bb4_last;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 128);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i10);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 686} {:cexpr "len"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i10);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 687} {:cexpr "ofs"} boogie_si_record_i32($i30);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_120 := printk.ref.i32.i32(.str.66, $i20, $i30);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i20, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_122 := printk.ref(.str.58);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i10, 1);
    call {:si_unique_call 692} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p7);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, $i48);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i48;
    goto $bb20_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i30);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i20);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb14;

  $bb14:
    call $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, vslice_dummy_var_121 := dump_iso_packet___0_loop_$bb14($i20, $p34, $i35, $i39, $i40, $p41, $i42, $i43, $i45, $i46, $i38, vslice_dummy_var_121);
    goto $bb14_last;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    $i40 := $add.i64($i35, $i39);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p34, $mul.ref($i40, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_121 := printk.ref.i32(.str.56, $i43);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i38, 1);
    call {:si_unique_call 690} {:cexpr "j"} boogie_si_record_i32($i45);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, $i20);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb16_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i10);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 685} {:cexpr "len"} boogie_si_record_i32($i19);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;
}



const ldv_usb_submit_urb_27: ref;

axiom ldv_usb_submit_urb_27 == $sub.ref(0, 349466);

procedure ldv_usb_submit_urb_27($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_27($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} {:cexpr "ldv_usb_submit_urb_27:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 695} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_28: ref;

axiom ldv_usb_submit_urb_28 == $sub.ref(0, 350498);

procedure ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} {:cexpr "ldv_usb_submit_urb_28:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 698} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dump_packet___0: ref;

axiom dump_packet___0 == $sub.ref(0, 351530);

procedure dump_packet___0($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation dump_packet___0($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i5: i1;
  var $i8: i1;
  var $i9: i32;
  var $i6: i32;
  var $i7: i32;
  var $i10: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $i11: i32;
  var $i19: i1;
  var $i21: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i28: i32;
  var $i29: i1;
  var $i22: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} {:cexpr "dump_packet___0:arg:pkt_len"} boogie_si_record_i32($i2);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_123 := printk.ref.ref.i32(.str.55, $p0, $i2);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i2, 28);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(20, $i2);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i9 := $i2;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i9, 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i6);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i7, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_127 := printk.ref(.str.58);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_125 := printk.ref(.str.57);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, $sub.i32(0, 8));
    call {:si_unique_call 704} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb19;

  $bb19:
    call $i23, $p24, $i25, $i26, $i28, $i29, $i22, vslice_dummy_var_126 := dump_packet___0_loop_$bb19($p1, $i2, $i23, $p24, $i25, $i26, $i28, $i29, $i22, vslice_dummy_var_126);
    goto $bb19_last;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref($i23, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_126 := printk.ref.i32(.str.56, $i26);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i22, 1);
    call {:si_unique_call 706} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, $i2);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb21_dummy;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb12:
    call $i12, $p13, $i14, $i15, $i17, $i18, $i11, vslice_dummy_var_124 := dump_packet___0_loop_$bb12($p1, $i6, $i12, $p13, $i14, $i15, $i17, $i18, $i11, vslice_dummy_var_124);
    goto $bb12_last;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref($i12, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_124 := printk.ref.i32(.str.56, $i15);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 702} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, $i6);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb14_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i9 := 20;
    goto $bb8;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i6, $i7 := 20, 8;
    goto $bb5;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;
}



const ldv_usb_submit_urb_29: ref;

axiom ldv_usb_submit_urb_29 == $sub.ref(0, 352562);

procedure ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.0, $M.6, $M.15, $M.11, $CurrAddr, $M.5;



implementation ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} {:cexpr "ldv_usb_submit_urb_29:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 710} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 353594);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 711} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 714} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p4 := calloc(1, $i0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 716} __VERIFIER_assume($i7);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 354626);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 717} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 355658);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.16, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p0 := ldv_zalloc(1520);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 356690);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.18, $M.19, $M.0, $M.2, $M.20, $M.22, $M.16, $M.21, $M.4, $M.26, $M.27, $M.11, $M.5, $M.24, $M.25, $M.7, $M.9, $M.8, $M.10, $M.42, $M.43, $M.44, $M.23, $M.45, $M.46, $M.3, $M.1, $M.13, $M.47, $M.48, $M.49, $CurrAddr, $M.12, $M.6, assertsPassed, $M.15;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;

  $bb0:
    call {:si_unique_call 719} $initialize();
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p0 := ldv_zalloc(32);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} ldv_initialize();
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 723} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 724} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 725} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43 := main_loop_$bb1($p1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} ldv_stop();
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i27 := $M.19;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i28 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 740} $i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 741} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
    call {:si_unique_call 742} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ldv_stop();
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb42:
    assume $i31 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i37 := $M.19;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55:
    assume $i38 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i39 := st5481_usb_init();
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.22 := $i39;
    call {:si_unique_call 747} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i39);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i40 := $M.22;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i42 := $M.22;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i43 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i41 == 1;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb40:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb44;

  $bb45:
    assume $i32 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i33 := $M.19;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb47:
    assume $i34 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i35 := $M.18;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb49;

  $bb50:
    assume $i36 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} st5481_usb_exit();
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb7;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i6 := $M.17;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 731} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} ldv_stop();
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i20 := $M.17;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i21 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i22 := $M.21;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb29;

  $bb30:
    assume $i23 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p24 := $M.16;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} disconnect_st5481($p24);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i25 := $M.18;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.18 := $i26;
    call {:si_unique_call 738} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb13:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb17;

  $bb18:
    assume $i11 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i12 := $M.17;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i13 == 1;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p14 := $M.16;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i15 := probe_st5481($p14, $p1);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.20 := $i15;
    call {:si_unique_call 733} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i15);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i18 := $M.18;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.18 := $i19;
    call {:si_unique_call 735} {:cexpr "ref_cnt"} boogie_si_record_i32($i19);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb36_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 726} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 727} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 728} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 357722);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 358754);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const st5481_usb_exit: ref;

axiom st5481_usb_exit == $sub.ref(0, 359786);

procedure st5481_usb_exit();
  free requires assertsPassed;
  modifies $M.17;



implementation st5481_usb_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ldv_usb_deregister_6(st5481_usb_driver);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} st5481_d_exit();
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    return;
}



const st5481_usb_init: ref;

axiom st5481_usb_init == $sub.ref(0, 360818);

procedure st5481_usb_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.17, $M.21, $M.16, $CurrAddr;



implementation st5481_usb_init() returns ($r: i32)
{
  var $i0: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i4: i32;
  var $i7: i32;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.4 := $i0;
    call {:si_unique_call 754} {:cexpr "st5481_debug"} boogie_si_record_i32($i0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_128 := printk.ref(.str.31);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i2 := st5481_d_init();
    call {:si_unique_call 757} {:cexpr "retval"} boogie_si_record_i32($i2);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i5 := ldv_usb_register_driver_5(st5481_usb_driver, __this_module, .str.32);
    call {:si_unique_call 759} {:cexpr "retval"} boogie_si_record_i32($i5);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} st5481_d_exit();
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 361850);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p0 := $M.5;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.24;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.25;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.26;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.27;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const st5481_d_init: ref;

axiom st5481_d_init == $sub.ref(0, 362882);

procedure st5481_d_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation st5481_d_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(8, 1)), 5);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(12, 1)), 19);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(16, 1)), strL1Event);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(24, 1)), strL1State);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i0 := FsmNew(l1fsm, L1FnList, 27);
    call {:si_unique_call 767} {:cexpr "retval"} boogie_si_record_i32($i0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(8, 1)), 10);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(12, 1)), 7);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(16, 1)), strDoutEvent);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(24, 1)), strDoutState);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i3 := FsmNew(dout_fsm, DoutFnList, 14);
    call {:si_unique_call 769} {:cexpr "retval"} boogie_si_record_i32($i3);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} FsmFree(l1fsm);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb9;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_usb_register_driver_5: ref;

axiom ldv_usb_register_driver_5 == $sub.ref(0, 363914);

procedure ldv_usb_register_driver_5($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.21, $M.16, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_5($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 772} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 774} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_usb_driver_1();
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const st5481_d_exit: ref;

axiom st5481_d_exit == $sub.ref(0, 364946);

procedure st5481_d_exit();
  free requires assertsPassed;



implementation st5481_d_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} FsmFree(l1fsm);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} FsmFree(dout_fsm);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    return;
}



const FsmFree: ref;

axiom FsmFree == $sub.ref(0, 365978);

procedure FsmFree($p0: ref);
  free requires assertsPassed;



implementation FsmFree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 367010);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 778} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 779} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const FsmNew: ref;

axiom FsmNew == $sub.ref(0, 368042);

procedure FsmNew($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation FsmNew($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 780} {:cexpr "FsmNew:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 781} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_6: ref;

axiom ldv_usb_deregister_6 == $sub.ref(0, 369074);

procedure ldv_usb_deregister_6($p0: ref);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_usb_deregister_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} usb_deregister($p0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 370106);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 371138);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 785} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 1} true;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 372170);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 373202);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 374234);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 375266);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 376298);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 377330);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 378362);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 379394);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 380426);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 381458);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 382490);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 383522);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 384554);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 786} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 787} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 788} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 789} __VERIFIER_assume($i4);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 385586);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 386618);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 387650);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 388682);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 389714);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 390746);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 391778);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 392810);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 393842);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 790} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 791} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 792} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 793} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 794} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 795} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 797} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 798} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} __VERIFIER_assume($i7);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 800} __VERIFIER_assume($i11);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 394874);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 395906);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 396938);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 397970);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 399002);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 400034);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 401066);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 402098);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 403130);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 801} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 802} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 803} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 404162);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 804} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 805} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 405194);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 406226);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 806} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 807} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 407258);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 408290);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 409322);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 809} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p6 := malloc($i5);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 813} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 410354);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 411386);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.4, $M.26, $M.27, $M.11, $M.5, $M.24, $M.25, $M.7, $M.9, $M.8, $M.10, $M.42, $M.43, $M.44, $M.0, $M.23, $M.45, $M.46, $M.3, $M.1, $M.13, $M.47, $M.48, $M.49;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 814} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.16 := $0.ref;
    $M.17 := 0;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 816} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 818} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 819} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 820} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 821} {:cexpr "st5481_debug"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 822} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 823} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.5 := $0.ref;
    $M.24 := $0.ref;
    $M.25 := 0;
    call {:si_unique_call 824} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 825} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 826} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.10 := $0.ref;
    $M.42 := $store.i32($M.42, DoutFnList, 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(0, 16)), $mul.ref(4, 1)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(0, 16)), $mul.ref(8, 1)), dout_start_xmit);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(0, 1)), 1);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(4, 1)), 1);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(8, 1)), dout_short_fifo);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(4, 1)), 2);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(8, 1)), dout_end_short_frame);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(4, 1)), 6);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(8, 1)), dout_underrun);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(4, 1)), 1);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(8, 1)), dout_long_enable_fifo);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(4, 1)), 2);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(8, 1)), dout_long_den);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(4, 1)), 6);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(8, 1)), dout_underrun);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(0, 1)), 5);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(4, 1)), 6);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(8, 1)), dout_underrun);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(0, 1)), 5);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(4, 1)), 1);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(8, 1)), dout_complete);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(0, 1)), 6);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(4, 1)), 6);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(8, 1)), dout_underrun);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(0, 1)), 6);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(4, 1)), 1);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(8, 1)), dout_ignore);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(0, 1)), 7);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(4, 1)), 1);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(8, 1)), dout_check_busy);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(0, 1)), 8);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(4, 1)), 4);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(8, 1)), dout_reset);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(0, 1)), 9);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(4, 1)), 3);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(DoutFnList, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(8, 1)), dout_reseted);
    $M.0 := $store.ref($M.0, strDoutState, .str.108);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(1, 8)), .str.109);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(2, 8)), .str.110);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(3, 8)), .str.111);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(4, 8)), .str.112);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(5, 8)), .str.113);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(6, 8)), .str.114);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(7, 8)), .str.115);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(8, 8)), .str.116);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutState, $mul.ref(0, 80)), $mul.ref(9, 8)), .str.117);
    $M.0 := $store.ref($M.0, strDoutEvent, .str.101);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutEvent, $mul.ref(0, 56)), $mul.ref(1, 8)), .str.102);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutEvent, $mul.ref(0, 56)), $mul.ref(2, 8)), .str.103);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutEvent, $mul.ref(0, 56)), $mul.ref(3, 8)), .str.104);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutEvent, $mul.ref(0, 56)), $mul.ref(4, 8)), .str.105);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutEvent, $mul.ref(0, 56)), $mul.ref(5, 8)), .str.106);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strDoutEvent, $mul.ref(0, 56)), $mul.ref(6, 8)), .str.107);
    $M.42 := $store.i32($M.42, L1FnList, 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(0, 16)), $mul.ref(4, 1)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(0, 16)), $mul.ref(8, 1)), l1_ignore);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(1, 16)), $mul.ref(0, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(1, 16)), $mul.ref(4, 1)), 8);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(1, 16)), $mul.ref(8, 1)), l1_go_f6);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(2, 16)), $mul.ref(0, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(2, 16)), $mul.ref(4, 1)), 12);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(2, 16)), $mul.ref(8, 1)), l1_go_f7);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(3, 16)), $mul.ref(0, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(3, 16)), $mul.ref(4, 1)), 13);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(3, 16)), $mul.ref(8, 1)), l1_go_f7);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(4, 16)), $mul.ref(0, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(4, 16)), $mul.ref(4, 1)), 16);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(4, 16)), $mul.ref(8, 1)), l1_activate);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(5, 16)), $mul.ref(0, 1)), 1);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(5, 16)), $mul.ref(4, 1)), 18);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(5, 16)), $mul.ref(8, 1)), l1_timer3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(6, 16)), $mul.ref(0, 1)), 1);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(6, 16)), $mul.ref(4, 1)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(6, 16)), $mul.ref(8, 1)), l1_go_f3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(7, 16)), $mul.ref(0, 1)), 1);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(7, 16)), $mul.ref(4, 1)), 8);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(7, 16)), $mul.ref(8, 1)), l1_go_f6);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(8, 16)), $mul.ref(0, 1)), 1);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(8, 16)), $mul.ref(4, 1)), 12);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(8, 16)), $mul.ref(8, 1)), l1_go_f7);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(9, 16)), $mul.ref(0, 1)), 1);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(9, 16)), $mul.ref(4, 1)), 13);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(9, 16)), $mul.ref(8, 1)), l1_go_f7);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(10, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(10, 16)), $mul.ref(4, 1)), 18);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(10, 16)), $mul.ref(8, 1)), l1_timer3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(11, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(11, 16)), $mul.ref(4, 1)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(11, 16)), $mul.ref(8, 1)), l1_go_f3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(12, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(12, 16)), $mul.ref(4, 1)), 8);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(12, 16)), $mul.ref(8, 1)), l1_ignore);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(13, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(13, 16)), $mul.ref(4, 1)), 12);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(13, 16)), $mul.ref(8, 1)), l1_go_f7);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(14, 16)), $mul.ref(0, 1)), 2);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(14, 16)), $mul.ref(4, 1)), 13);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(14, 16)), $mul.ref(8, 1)), l1_go_f7);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(15, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(15, 16)), $mul.ref(4, 1)), 4);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(15, 16)), $mul.ref(8, 1)), l1_go_f8);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(16, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(16, 16)), $mul.ref(4, 1)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(16, 16)), $mul.ref(8, 1)), l1_go_f3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(17, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(17, 16)), $mul.ref(4, 1)), 8);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(17, 16)), $mul.ref(8, 1)), l1_go_f6);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(18, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(18, 16)), $mul.ref(4, 1)), 12);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(18, 16)), $mul.ref(8, 1)), l1_ignore);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(19, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(19, 16)), $mul.ref(4, 1)), 13);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(19, 16)), $mul.ref(8, 1)), l1_ignore);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(20, 16)), $mul.ref(0, 1)), 3);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(20, 16)), $mul.ref(4, 1)), 4);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(20, 16)), $mul.ref(8, 1)), l1_go_f8);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(21, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(21, 16)), $mul.ref(4, 1)), 18);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(21, 16)), $mul.ref(8, 1)), l1_timer3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(22, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(22, 16)), $mul.ref(4, 1)), 0);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(22, 16)), $mul.ref(8, 1)), l1_go_f3);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(23, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(23, 16)), $mul.ref(4, 1)), 8);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(23, 16)), $mul.ref(8, 1)), l1_go_f6);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(24, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(24, 16)), $mul.ref(4, 1)), 12);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(24, 16)), $mul.ref(8, 1)), l1_go_f8);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(25, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(25, 16)), $mul.ref(4, 1)), 13);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(25, 16)), $mul.ref(8, 1)), l1_go_f8);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(26, 16)), $mul.ref(0, 1)), 4);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(26, 16)), $mul.ref(4, 1)), 4);
    $M.44 := $store.ref($M.44, $add.ref($add.ref($add.ref(L1FnList, $mul.ref(0, 432)), $mul.ref(26, 16)), $mul.ref(8, 1)), l1_ignore);
    $M.0 := $store.ref($M.0, strL1State, .str.94);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1State, $mul.ref(0, 40)), $mul.ref(1, 8)), .str.95);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1State, $mul.ref(0, 40)), $mul.ref(2, 8)), .str.96);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1State, $mul.ref(0, 40)), $mul.ref(3, 8)), .str.97);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1State, $mul.ref(0, 40)), $mul.ref(4, 8)), .str.98);
    $M.0 := $store.ref($M.0, strL1Event, .str.75);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(1, 8)), .str.76);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(2, 8)), .str.77);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(3, 8)), .str.78);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(4, 8)), .str.79);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(5, 8)), .str.80);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(6, 8)), .str.81);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(7, 8)), .str.82);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(8, 8)), .str.83);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(9, 8)), .str.84);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(10, 8)), .str.85);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(11, 8)), .str.86);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(12, 8)), .str.87);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(13, 8)), .str.88);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(14, 8)), .str.89);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(15, 8)), .str.90);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(16, 8)), .str.91);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(17, 8)), .str.92);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(strL1Event, $mul.ref(0, 152)), $mul.ref(18, 8)), .str.93);
    $M.23 := 0;
    call {:si_unique_call 827} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.45 := $store.i16($M.45, st5481_ids, 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(4, 1)), 18448);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(4, 1)), 18449);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(4, 1)), 18450);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(4, 1)), 18451);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(4, 1)), 18452);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(4, 1)), 18453);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(4, 1)), 18454);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(4, 1)), 18455);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(4, 1)), 18456);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(4, 1)), 18457);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(4, 1)), 18458);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(4, 1)), 18459);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(4, 1)), 18460);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(4, 1)), 18461);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(4, 1)), 18462);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(2, 1)), 1155);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(4, 1)), 18463);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.45 := $store.i16($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.45 := $store.i8($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i64($M.45, $add.ref($add.ref($add.ref(st5481_ids, $mul.ref(0, 544)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.46 := $store.ref($M.46, st5481_usb_driver, .str.29);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), probe_st5481);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), disconnect_st5481);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), st5481_ids);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.46 := $store.i8($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(st5481_usb_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.3 := 2;
    call {:si_unique_call 828} {:cexpr "protocol"} boogie_si_record_i32(2);
    $M.1 := 2;
    call {:si_unique_call 829} {:cexpr "number_of_leds"} boogie_si_record_i32(2);
    $M.0 := $store.ref($M.0, dout_fsm, $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dout_fsm, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, l1fsm, $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(l1fsm, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.13 := $store.i8($M.13, .str.3, 115);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(2, 1)), 53);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(3, 1)), 52);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(4, 1)), 56);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(5, 1)), 49);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(7, 1)), 112);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(8, 1)), 104);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(10, 1)), 99);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(11, 1)), 111);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(12, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(13, 1)), 109);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.13 := $store.i8($M.13, .str.37, 68);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.37, $mul.ref(0, 3)), $mul.ref(1, 1)), 82);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.37, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.13 := $store.i8($M.13, .str.38, 82);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(1, 1)), 69);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(2, 1)), 83);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.13 := $store.i8($M.13, .str.39, 84);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(1, 1)), 77);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(2, 1)), 49);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.39, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.13 := $store.i8($M.13, .str.40, 84);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.40, $mul.ref(0, 4)), $mul.ref(1, 1)), 77);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.40, $mul.ref(0, 4)), $mul.ref(2, 1)), 50);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.40, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.13 := $store.i8($M.13, .str.41, 80);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(1, 1)), 85);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(2, 1)), 80);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.13 := $store.i8($M.13, .str.42, 65);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.42, $mul.ref(0, 4)), $mul.ref(1, 1)), 82);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.42, $mul.ref(0, 4)), $mul.ref(2, 1)), 56);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.42, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.13 := $store.i8($M.13, .str.43, 65);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.43, $mul.ref(0, 5)), $mul.ref(1, 1)), 82);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.43, $mul.ref(0, 5)), $mul.ref(2, 1)), 49);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.43, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.43, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.13 := $store.i8($M.13, .str.44, 65);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(1, 1)), 82);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(2, 1)), 76);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.13 := $store.i8($M.13, .str.45, 80);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.45, $mul.ref(0, 4)), $mul.ref(1, 1)), 68);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.45, $mul.ref(0, 4)), $mul.ref(2, 1)), 78);
    $M.13 := $store.i8($M.13, $add.ref($add.ref(.str.45, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.47 := $store.i8($M.47, .str.46, 48);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(1, 1)), 120);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(3, 1)), 120);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(.str.46, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.48 := $store.i8($M.48, .str.73, 100);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(1, 1)), 111);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(2, 1)), 117);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(3, 1)), 116);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(5, 1)), 100);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(6, 1)), 101);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(7, 1)), 98);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(8, 1)), 117);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(9, 1)), 103);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(.str.73, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.49 := $store.i8($M.49, .str.72, 108);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(1, 1)), 49);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(5, 1)), 101);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(6, 1)), 98);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(7, 1)), 117);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(8, 1)), 103);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(7, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(7, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(9, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(7, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(7, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(7, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(8, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(8, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(9, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(8, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(10, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(8, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(9, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(7, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(8, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(4, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(7, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(9, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(10, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(11, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(12, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(13, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(15, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(16, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(17, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(4, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(6, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(8, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(9, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(10, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(12, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(13, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(14, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(15, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(17, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(18, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(19, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(6, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(8, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(6, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(6, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(7, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(6, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(6, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(7, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(6, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(7, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(10, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(11, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(12, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(14, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(15, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(16, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(17, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(8, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(10, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(11, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(12, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(13, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(14, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(15, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(10, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(10, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(11, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(12, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(13, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(14, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(10, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(11, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(12, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(13, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(14, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.106, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(8, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(11, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(9, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(10, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(11, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(12, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(13, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(14, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(15, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(8, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(10, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(11, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(9, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(10, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(11, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(12, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(14, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(15, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(16, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(17, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.110, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(9, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(10, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(11, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(12, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(14, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(15, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(16, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(17, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(19, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(20, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(21, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(8, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(10, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(11, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(13, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(14, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(15, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(16, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.112, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(8, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(10, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(11, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(13, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(15, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(16, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(18, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(19, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(20, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(8, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(10, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(12, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(13, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(8, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(10, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(11, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(14, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(15, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(17, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(18, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(19, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(20, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(21, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(22, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(23, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(24, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(8, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(10, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(11, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(14, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(15, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(17, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(18, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(19, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(20, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(21, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(22, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(23, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(24, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(8, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(10, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(11, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(14, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(15, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(17, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(18, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(19, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(20, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.117, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(3, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(8, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(10, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(11, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(14, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(15, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(17, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(18, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(19, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(20, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(21, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    call {:si_unique_call 830} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 412418);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 413450);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.15, $M.7, $M.9, $M.11, $CurrAddr, $M.5;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(dout_stop_event, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i13 == 1);
    $i12 := $eq.ref(st5481B_start_xfer, $p0);
    assume {:branchcond $i12} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i12 == 1);
    $i11 := $eq.ref(usb_int_complete, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i11 == 1);
    $i10 := $eq.ref(usb_ctrl_complete, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i10 == 1);
    $i9 := $eq.ref(fifo_reseted, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i9 == 1);
    $i8 := $eq.ref(usb_d_out_complete, $p0);
    assume {:branchcond $i8} true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i8 == 1);
    $i7 := $eq.ref(usb_b_out_complete, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(usb_in_complete, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i6 == 1);
    $i5 := $eq.ref(disconnect_st5481, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 831} disconnect_st5481($p1);
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 832} usb_in_complete(arg);
    return;

  $bb4:
    assume $i7 == 1;
    call {:si_unique_call 833} usb_b_out_complete(arg);
    return;

  $bb5:
    assume $i8 == 1;
    call {:si_unique_call 834} usb_d_out_complete(arg);
    return;

  $bb6:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 835} fifo_reseted($p2);
    return;

  $bb7:
    assume $i10 == 1;
    call {:si_unique_call 836} usb_ctrl_complete(arg);
    return;

  $bb8:
    assume $i11 == 1;
    call {:si_unique_call 837} usb_int_complete(arg);
    return;

  $bb9:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 838} st5481B_start_xfer($p3);
    return;

  $bb10:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 839} dout_stop_event($p4);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 414482);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.6, $M.7, $M.9, $CurrAddr, $M.11, $M.5;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(disconnect_st5481, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i9 == 1);
    $i8 := $eq.ref(usb_in_complete, $p0);
    assume {:branchcond $i8} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i8 == 1);
    $i7 := $eq.ref(usb_d_out_complete, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(usb_ctrl_complete, $p0);
    assume {:branchcond $i6} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i6 == 1);
    $i5 := $eq.ref(usb_b_out_complete, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i5 == 1);
    $i4 := $eq.ref(usb_int_complete, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i4 == 1);
    $i3 := $eq.ref(st5481B_start_xfer, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 840} st5481B_start_xfer($p1);
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 841} usb_int_complete(arg);
    return;

  $bb4:
    assume $i5 == 1;
    call {:si_unique_call 842} usb_b_out_complete(arg);
    return;

  $bb5:
    assume $i6 == 1;
    call {:si_unique_call 843} usb_ctrl_complete(arg);
    return;

  $bb6:
    assume $i7 == 1;
    call {:si_unique_call 844} usb_d_out_complete(arg);
    return;

  $bb7:
    assume $i8 == 1;
    call {:si_unique_call 845} usb_in_complete(arg);
    return;

  $bb8:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 846} disconnect_st5481($p2);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 415514);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 416546);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(dout_reseted, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i38 == 1);
    $i37 := $eq.ref(dout_reset, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i37 == 1);
    $i36 := $eq.ref(dout_check_busy, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(dout_ignore, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(dout_complete, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(dout_long_den, $p0);
    assume {:branchcond $i33} true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(dout_long_enable_fifo, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(dout_underrun, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(dout_end_short_frame, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(dout_short_fifo, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(dout_start_xmit, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(l1_go_f8, $p0);
    assume {:branchcond $i27} true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(l1_go_f3, $p0);
    assume {:branchcond $i26} true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(l1_timer3, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(l1_activate, $p0);
    assume {:branchcond $i24} true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(l1_go_f7, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(l1_go_f6, $p0);
    assume {:branchcond $i22} true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(l1_ignore, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(st5481_b_l2l1, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(st5481_d_l2l1, $p0);
    assume {:branchcond $i19} true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    call {:si_unique_call 847} st5481_d_l2l1(arg, arg1, arg2);
    return;

  $bb3:
    assume $i20 == 1;
    call {:si_unique_call 848} st5481_b_l2l1(arg, arg1, arg2);
    return;

  $bb4:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 849} l1_ignore($p1, arg1, arg2);
    return;

  $bb5:
    assume $i22 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 850} l1_go_f6($p2, arg1, arg2);
    return;

  $bb6:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 851} l1_go_f7($p3, arg1, arg2);
    return;

  $bb7:
    assume $i24 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 852} l1_activate($p4, arg1, arg2);
    return;

  $bb8:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 853} l1_timer3($p5, arg1, arg2);
    return;

  $bb9:
    assume $i26 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 854} l1_go_f3($p6, arg1, arg2);
    return;

  $bb10:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 855} l1_go_f8($p7, arg1, arg2);
    return;

  $bb11:
    assume $i28 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 856} dout_start_xmit($p8, arg1, arg2);
    return;

  $bb12:
    assume $i29 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 857} dout_short_fifo($p9, arg1, arg2);
    return;

  $bb13:
    assume $i30 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 858} dout_end_short_frame($p10, arg1, arg2);
    return;

  $bb14:
    assume $i31 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 859} dout_underrun($p11, arg1, arg2);
    return;

  $bb15:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 860} dout_long_enable_fifo($p12, arg1, arg2);
    return;

  $bb16:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 861} dout_long_den($p13, arg1, arg2);
    return;

  $bb17:
    assume $i34 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 862} dout_complete($p14, arg1, arg2);
    return;

  $bb18:
    assume $i35 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 863} dout_ignore($p15, arg1, arg2);
    return;

  $bb19:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 864} dout_check_busy($p16, arg1, arg2);
    return;

  $bb20:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 865} dout_reset($p17, arg1, arg2);
    return;

  $bb21:
    assume $i38 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 866} dout_reseted($p18, arg1, arg2);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 417578);

procedure devirtbounce.5(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.15, $M.7, $M.9, $M.11, $CurrAddr, $M.5;



implementation devirtbounce.5(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(dout_stop_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(st5481B_start_xfer, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(usb_int_complete, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i13 == 1);
    $i12 := $eq.ref(usb_ctrl_complete, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i12 == 1);
    $i11 := $eq.ref(fifo_reseted, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(usb_d_out_complete, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(usb_b_out_complete, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i9 == 1);
    $i8 := $eq.ref(usb_in_complete, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i8 == 1);
    $i7 := $eq.ref(disconnect_st5481, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 867} disconnect_st5481($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 868} usb_in_complete($p2);
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 869} usb_b_out_complete($p3);
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 870} usb_d_out_complete($p4);
    return;

  $bb6:
    assume $i11 == 1;
    call {:si_unique_call 871} fifo_reseted(arg);
    return;

  $bb7:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 872} usb_ctrl_complete($p5);
    return;

  $bb8:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 873} usb_int_complete($p6);
    return;

  $bb9:
    assume $i14 == 1;
    call {:si_unique_call 874} st5481B_start_xfer(arg);
    return;

  $bb10:
    assume $i15 == 1;
    call {:si_unique_call 875} dout_stop_event(arg);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 418610);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.4, $M.26, $M.27, $M.11, $M.5, $M.24, $M.25, $M.7, $M.9, $M.8, $M.10, $M.42, $M.43, $M.44, $M.0, $M.23, $M.45, $M.46, $M.3, $M.1, $M.13, $M.47, $M.48, $M.49, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 876} __SMACK_static_init();
    call {:si_unique_call 877} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.17, $M.18, $M.19, $M.0, $M.2, $M.20, $M.22, $M.16, $M.21, $M.4, $M.26, $M.27, $M.11, $M.5, $M.24, $M.25, $M.7, $M.9, $M.8, $M.10, $M.42, $M.43, $M.44, $M.23, $M.45, $M.46, $M.3, $M.1, $M.13, $M.47, $M.48, $M.49, $CurrAddr, $M.12, $M.6, $M.15;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 2} st5481_release_isocpipes_loop_$bb1(in_$p0: ref, in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i1: i32) returns (out_$i2: i64, out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i1: i32)
{

  entry:
    out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i1 := in_$i2, in_$p3, in_$p4, in_$i5, in_$p6, in_$p7, in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  $bb3:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i15;
    goto $bb3_dummy;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 1);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i1, 1);
    call {:si_unique_call 99} {:cexpr "j"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, $0.ref);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(in_$p0, $mul.ref(out_$i13, 8));
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i1);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_usb_free_urb_22(out_$p12);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(in_$p0, $mul.ref(out_$i10, 8));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i1);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} kfree(out_$p9);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(in_$p0, $mul.ref(out_$i5, 8));
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i1);
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} usb_kill_urb(out_$p4);
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$p4 := $load.ref($M.0, out_$p3);
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref(in_$p0, $mul.ref(out_$i2, 8));
    goto corral_source_split_340;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i32.i64(out_$i1);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i1 := st5481_release_isocpipes_loop_$bb1(in_$p0, out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i1);
    return;

  exit:
    return;
}



procedure st5481_release_isocpipes_loop_$bb1(in_$p0: ref, in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i1: i32) returns (out_$i2: i64, out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i1: i32);
  modifies $M.0, $M.5;



implementation ldv_stop___0_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___0_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___0_loop_$bb1();



implementation st5481_d_l2l1_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} st5481_d_l2l1_loop_$bb19();
    return;

  exit:
    return;
}



procedure st5481_d_l2l1_loop_$bb19();



implementation st5481_b_l2l1_loop_$bb18()
{

  entry:
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb18_dummy:
    call {:si_unique_call 1} st5481_b_l2l1_loop_$bb18();
    return;

  exit:
    return;
}



procedure st5481_b_l2l1_loop_$bb18();



implementation st5481_start_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i8, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i42: i8, in_$i43: i32) returns (out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i8, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i42: i8, out_$i43: i32)
{

  entry:
    out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i42, out_$i43 := in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i42, in_$i43;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  $bb12:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i55, out_$i52;
    goto $bb12_dummy;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.12, out_$p54);
    call {:si_unique_call 235} {:cexpr "request"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 25)), $mul.ref(out_$i53, 1));
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i44, 1);
    call {:si_unique_call 234} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1057;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} st5481_usb_device_ctrl_msg(in_$p0, out_$i49, out_$i51, $0.ref, $0.ref);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i47);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i32.i8(out_$i48);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i42);
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.12, out_$p46);
    call {:si_unique_call 232} {:cexpr "value"} boogie_si_record_i8(out_$i47);
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 25)), $mul.ref(out_$i45, 1));
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i43);
    goto corral_source_split_1049;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    call {:si_unique_call 231} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i42, out_$i43 := st5481_start_loop_$bb10(in_$p0, in_$p1, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure st5481_start_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i8, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i42: i8, in_$i43: i32) returns (out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i8, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i42: i8, out_$i43: i32);
  modifies $M.6, $M.0, $CurrAddr, $M.7, $M.9, $M.15, $M.11, $M.5;



implementation usb_in_complete_loop_$bb30(in_$p1: ref, in_$p4: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$i71: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i1, in_$i84: i1, in_$i86: i1, in_$i88: i1, in_$i35: i32, in_$p36: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32) returns (out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$i71: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i1, out_$i84: i1, out_$i86: i1, out_$i88: i1, out_$i35: i32, out_$p36: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p43, out_$i44, out_$i45, out_$i57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i84, out_$i86, out_$i88, out_$i35, out_$p36, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_vslice_dummy_var_47, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51 := in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p43, in_$i44, in_$i45, in_$i57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i84, in_$i86, in_$i88, in_$i35, in_$p36, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_vslice_dummy_var_47, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1275;

  $bb57:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36 := out_$i44, out_$p43;
    goto $bb57_dummy;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i88 := $sgt.i32(out_$i44, 0);
    goto corral_source_split_1353;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p67);
    call {:si_unique_call 288} devirtbounce.4(out_$p78, out_$p80, 290, out_$p81);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 287} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p72, out_$p74, out_$i71, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$p72 := skb_put(out_$p67, out_$i45);
    goto corral_source_split_1341;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i45);
    call {:si_unique_call 285} {:cexpr "__len___0"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_1340;

  $bb44:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i64(out_$i68, 0);
    goto corral_source_split_1324;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_1323;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} out_$p67 := dev_alloc_skb(out_$i45);
    goto corral_source_split_1322;

  $bb41:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} dump_packet(.str.59, out_$p66, out_$i45);
    goto corral_source_split_1320;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1318;

  $bb40:
    assume out_$i64 == 1;
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i62, 1024);
    goto corral_source_split_1314;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i62 := $M.4;
    goto corral_source_split_1313;

  $bb38:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} out_vslice_dummy_var_47 := printk.ref.ref.i32(.str.60, .str.59, out_$i45);
    goto corral_source_split_1311;

  $bb37:
    assume out_$i60 == 1;
    goto corral_source_split_1310;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 4);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$i58 := $M.4;
    goto corral_source_split_1303;

  $bb35:
    assume out_$i57 == 1;
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i45, 0);
    goto corral_source_split_1300;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$i56 := $sub.i32(out_$i35, out_$i55);
    call {:si_unique_call 278} {:cexpr "len"} boogie_si_record_i32(out_$i56);
    assume {:verifier.code 0} true;
    out_$p43, out_$i44, out_$i45 := out_$p54, out_$i56, out_$i51;
    goto $bb34;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$p43, out_$i44, out_$i45 := out_$p36, 0, out_$i35;
    goto $bb34;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 275} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p42, out_$p36, out_$i40, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i35);
    call {:si_unique_call 274} {:cexpr "__len"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_1282;

  $bb32:
    assume out_$i39 == 1;
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 1);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_1278;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.14, in_$p1);
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p36, $mul.ref(out_$i53, 1));
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i52);
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.14, in_$p1);
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_$i51 := isdnhdlc_decode(out_$p46, out_$p36, out_$i35, in_$p1, out_$p48, out_$i50);
    call {:si_unique_call 277} {:cexpr "status"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p4, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1288;

  $bb33:
    assume !(out_$i39 == 1);
    goto corral_source_split_1287;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_vslice_dummy_var_49 := printk.ref.ref.ref(.str.62, .str.7, .str.59);
    goto corral_source_split_1356;

  $bb48:
    assume out_$i82 == 1;
    goto corral_source_split_1355;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i45, $sub.i32(0, 2));
    goto corral_source_split_1308;

  $bb36:
    assume !(out_$i57 == 1);
    goto corral_source_split_1307;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_vslice_dummy_var_50 := printk.ref.ref.ref(.str.63, .str.7, .str.59);
    goto corral_source_split_1362;

  $bb51:
    assume out_$i84 == 1;
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i45, $sub.i32(0, 1));
    goto corral_source_split_1359;

  $bb49:
    assume !(out_$i82 == 1);
    goto corral_source_split_1358;

  $bb55:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_vslice_dummy_var_51 := printk.ref.ref.ref(.str.64, .str.7, .str.59);
    goto corral_source_split_1368;

  $bb54:
    assume out_$i86 == 1;
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i45, $sub.i32(0, 3));
    goto corral_source_split_1365;

  $bb52:
    assume !(out_$i84 == 1);
    goto corral_source_split_1364;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p43, out_$i44, out_$i45, out_$i57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i84, out_$i86, out_$i88, out_$i35, out_$p36, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_vslice_dummy_var_47, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51 := usb_in_complete_loop_$bb30(in_$p1, in_$p4, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p43, out_$i44, out_$i45, out_$i57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i84, out_$i86, out_$i88, out_$i35, out_$p36, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_vslice_dummy_var_47, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51);
    return;

  exit:
    return;
}



procedure usb_in_complete_loop_$bb30(in_$p1: ref, in_$p4: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$i71: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i1, in_$i84: i1, in_$i86: i1, in_$i88: i1, in_$i35: i32, in_$p36: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_vslice_dummy_var_47: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32) returns (out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$i71: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i1, out_$i84: i1, out_$i86: i1, out_$i88: i1, out_$i35: i32, out_$p36: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_vslice_dummy_var_47: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32);
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation {:SIextraRecBound 2} st5481_setup_isocpipes_loop_$bb14(in_$p0: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i27: i32) returns (out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i27: i32)
{

  entry:
    out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i27 := in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i27;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1407;

  $bb19:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i47;
    goto $bb19_dummy;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i48 := $sle.i32(out_$i47, 1);
    goto corral_source_split_1436;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i27, 1);
    call {:si_unique_call 303} {:cexpr "j"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_1435;

  $bb17:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p46, $0.ref);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(in_$p0, $mul.ref(out_$i45, 8));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i27);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_usb_free_urb_21(out_$p44);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(in_$p0, $mul.ref(out_$i42, 8));
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i27);
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p41, $0.ref);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p0, $mul.ref(out_$i38, 8));
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i27);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} kfree(out_$p37);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p0, $mul.ref(out_$i33, 8));
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i27);
    goto corral_source_split_1416;

  $bb16:
    assume out_$i32 == 1;
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(in_$p0, $mul.ref(out_$i28, 8));
    goto corral_source_split_1410;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i27 := st5481_setup_isocpipes_loop_$bb14(in_$p0, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i27);
    return;

  exit:
    return;
}



procedure st5481_setup_isocpipes_loop_$bb14(in_$p0: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i27: i32) returns (out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i27: i32);
  modifies $M.0, $M.5;



implementation st5481_setup_isocpipes_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i8: i32) returns (out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i8 := in_$p9, in_$i10, in_$p11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i24;
    goto $bb10_dummy;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i25 := $sle.i32(out_$i24, 1);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i8, 1);
    call {:si_unique_call 300} {:cexpr "j"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} fill_isoc_urb(out_$p23, in_$p1, in_$i2, out_$p18, in_$i3, in_$i4, in_$p6, in_$p7);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(in_$p0, $mul.ref(out_$i21, 8));
    goto corral_source_split_1399;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1398;

  $bb8:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} out_$p18 := kmalloc(out_$i17, 208);
    goto corral_source_split_1392;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(in_$i5);
    goto corral_source_split_1391;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(in_$p0, $mul.ref(out_$i12, 8));
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1383;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p11, out_$p9);
    goto corral_source_split_1382;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(in_$p0, $mul.ref(out_$i10, 8));
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1380;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} out_$p9 := ldv_usb_alloc_urb_20(in_$i3, 208);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i8 := st5481_setup_isocpipes_loop_$bb1(in_$p0, in_$p1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p6, in_$p7, out_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i8);
    return;

  exit:
    return;
}



procedure st5481_setup_isocpipes_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i8: i32) returns (out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i8: i32);
  modifies $M.0, $CurrAddr, $M.5;



implementation fill_isoc_urb_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$i5: i32, in_$i21: i32, in_$i22: i64, in_$p25: ref, in_$i26: i64, in_$p29: ref, in_$i30: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i20: i32) returns (out_$i21: i32, out_$i22: i64, out_$p25: ref, out_$i26: i64, out_$p29: ref, out_$i30: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i20: i32)
{

  entry:
    out_$i21, out_$i22, out_$p25, out_$i26, out_$p29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i20 := in_$i21, in_$i22, in_$p25, in_$i26, in_$p29, in_$i30, in_$p33, in_$i34, in_$i35, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  $bb6:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i34;
    goto $bb6_dummy;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i34, in_$i4);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i20, 1);
    call {:si_unique_call 310} {:cexpr "k"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 0);
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i30, 16)), $mul.ref(8, 1));
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1476;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, in_$i5);
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i26, 16)), $mul.ref(4, 1));
    goto corral_source_split_1474;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p25, out_$i21);
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1470;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i21 := $mul.i32(in_$i5, out_$i20);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$p25, out_$i26, out_$p29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i20 := fill_isoc_urb_loop_$bb4(in_$p0, in_$i4, in_$i5, out_$i21, out_$i22, out_$p25, out_$i26, out_$p29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i20);
    return;

  exit:
    return;
}



procedure fill_isoc_urb_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$i5: i32, in_$i21: i32, in_$i22: i64, in_$p25: ref, in_$i26: i64, in_$p29: ref, in_$i30: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i20: i32) returns (out_$i21: i32, out_$i22: i64, out_$p25: ref, out_$i26: i64, out_$p29: ref, out_$i30: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i20: i32);
  modifies $M.0;



implementation dump_iso_packet_loop_$bb14(in_$i20: i32, in_$p34: ref, in_$i35: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_vslice_dummy_var_55: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_vslice_dummy_var_55: i32)
{

  entry:
    out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_55 := in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i38, in_vslice_dummy_var_55;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  $bb16:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    goto $bb16_dummy;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, in_$i20);
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 325} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out_vslice_dummy_var_55 := printk.ref.i32(.str.56, out_$i43);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(in_$p34, $mul.ref(out_$i40, 1));
    goto corral_source_split_1554;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(in_$i35, out_$i39);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_55 := dump_iso_packet_loop_$bb14(in_$i20, in_$p34, in_$i35, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_55);
    return;

  exit:
    return;
}



procedure dump_iso_packet_loop_$bb14(in_$i20: i32, in_$p34: ref, in_$i35: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_vslice_dummy_var_55: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_vslice_dummy_var_55: i32);



implementation dump_iso_packet_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i21: i64, in_$p24: ref, in_$i25: i32, in_$i20: i32, in_$i26: i64, in_$p29: ref, in_$i30: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i37: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i10: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i21: i64, out_$p24: ref, out_$i25: i32, out_$i20: i32, out_$i26: i64, out_$p29: ref, out_$i30: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i37: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i10: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p18, in_$i19, in_$i21, in_$p24, in_$i25, in_$i20, in_$i26, in_$p29, in_$i30, in_$i32, in_$p33, in_$p34, in_$i35, in_$i37, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i38, in_$i48, in_$i49, in_$i50, in_$i10, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  $bb20:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i48;
    goto $bb20_dummy;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$i50 := $sgt.i32(out_$i49, out_$i48);
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, in_$p7);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i10, 1);
    call {:si_unique_call 327} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1564;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_vslice_dummy_var_56 := printk.ref(.str.58);
    goto corral_source_split_1563;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume !(out_$i46 == 1);
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, out_$i20);
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 325} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out_vslice_dummy_var_55 := printk.ref.i32(.str.56, out_$i43);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p34, $mul.ref(out_$i40, 1));
    goto corral_source_split_1554;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(out_$i35, out_$i39);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_55 := dump_iso_packet_loop_$bb14(out_$i20, out_$p34, out_$i35, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_55);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i38 := 0;
    goto $bb14;

  $bb16:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    assume false;
    return;

  $bb11:
    assume out_$i37 == 1;
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(0, out_$i20);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i30);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1543;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i20, 0);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out_vslice_dummy_var_54 := printk.ref.i32.i32(.str.66, out_$i20, out_$i30);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 322} {:cexpr "ofs"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1536;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    call {:si_unique_call 321} {:cexpr "len"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    out_$i20 := out_$i25;
    goto $bb8;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i19;
    goto $bb8;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 320} {:cexpr "len"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1527;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i12, 128);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_1522;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i21, 16)), $mul.ref(4, 1));
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1532;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_1531;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56 := dump_iso_packet_loop_$bb4(in_$p1, in_$p7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56);
    return;

  exit:
    return;
}



procedure dump_iso_packet_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i21: i64, in_$p24: ref, in_$i25: i32, in_$i20: i32, in_$i26: i64, in_$p29: ref, in_$i30: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i37: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i10: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i21: i64, out_$p24: ref, out_$i25: i32, out_$i20: i32, out_$i26: i64, out_$p29: ref, out_$i30: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i37: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i10: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32);



implementation st5481_isoc_flatten_loop_$bb18(in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p52: ref) returns (out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p52: ref)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52 := in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i44, in_$p45, in_$p46, in_$p52;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1630;

  $bb20:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45, out_$p46 := out_$i50, out_$p47, out_$p48;
    goto $bb20_dummy;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p47;
    assume true;
    goto $bb20;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i44, 0);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i32(out_$i44, 1);
    call {:si_unique_call 330} {:cexpr "len"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p45, out_$i49);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p46);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(1, 1));
    goto corral_source_split_1633;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(1, 1));
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52 := st5481_isoc_flatten_loop_$bb18(out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52);
    return;

  exit:
    return;
}



procedure st5481_isoc_flatten_loop_$bb18(in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p52: ref) returns (out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p52: ref);
  modifies $M.0;



implementation st5481_isoc_flatten_loop_$bb8(in_$p0: ref, in_$i18: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p52: ref, in_$p43: ref, in_$i54: i64, in_$p55: ref, in_$p53: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p21: ref, in_$p22: ref, in_$p59: ref) returns (out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p52: ref, out_$p43: ref, out_$i54: i64, out_$p55: ref, out_$p53: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p21: ref, out_$p22: ref, out_$p59: ref)
{

  entry:
    out_$p23, out_$i24, out_$i25, out_$p26, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52, out_$p43, out_$i54, out_$p55, out_$p53, out_$p56, out_$i57, out_$i58, out_$p21, out_$p22, out_$p59 := in_$p23, in_$i24, in_$i25, in_$p26, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i44, in_$p45, in_$p46, in_$p52, in_$p43, in_$i54, in_$p55, in_$p53, in_$p56, in_$i57, in_$i58, in_$p21, in_$p22, in_$p59;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  $bb24:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p56, out_$p53;
    goto $bb24_dummy;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p59 := out_$p53;
    assume true;
    goto $bb24;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i64(out_$i57, in_$i18);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p21, $mul.ref(1, 16));
    goto corral_source_split_1642;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1641;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p22, $mul.ref(out_$i54, 1));
    assume {:verifier.code 0} true;
    out_$p53 := out_$p55;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p43;
    goto $bb23;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb17;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p52;
    goto $bb17;

  $bb21:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p47;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i44, 0);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i32(out_$i44, 1);
    call {:si_unique_call 330} {:cexpr "len"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p45, out_$i49);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p46);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(1, 1));
    goto corral_source_split_1633;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p45, $mul.ref(1, 1));
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    call out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52 := st5481_isoc_flatten_loop_$bb18(out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$i44, out_$p45, out_$p46 := out_$i41, out_$p22, out_$p37;
    goto $bb18;

  $bb20:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45, out_$p46 := out_$i50, out_$p47, out_$p48;
    assume false;
    return;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_1628;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p22;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i30, 1);
    call {:si_unique_call 329} {:cexpr "len"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1622;

  $bb13:
    assume out_$i40 == 1;
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i38, out_$i39);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p33, $mul.ref(out_$i36, 1));
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i35);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p31, 0);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 328} {:cexpr "len"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1608;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1607;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p21;
    assume true;
    goto $bb11;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 0);
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_1600;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i32.i64(out_$i30);
    goto corral_source_split_1626;

  $bb14:
    assume !(out_$i40 == 1);
    goto corral_source_split_1625;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$i25, out_$p26, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52, out_$p43, out_$i54, out_$p55, out_$p53, out_$p56, out_$i57, out_$i58, out_$p21, out_$p22, out_$p59 := st5481_isoc_flatten_loop_$bb8(in_$p0, in_$i18, out_$p23, out_$i24, out_$i25, out_$p26, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i44, out_$p45, out_$p46, out_$p52, out_$p43, out_$i54, out_$p55, out_$p53, out_$p56, out_$i57, out_$i58, out_$p21, out_$p22, out_$p59);
    return;

  exit:
    return;
}



procedure st5481_isoc_flatten_loop_$bb8(in_$p0: ref, in_$i18: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p52: ref, in_$p43: ref, in_$i54: i64, in_$p55: ref, in_$p53: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p21: ref, in_$p22: ref, in_$p59: ref) returns (out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p52: ref, out_$p43: ref, out_$i54: i64, out_$p55: ref, out_$p53: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p21: ref, out_$p22: ref, out_$p59: ref);
  modifies $M.0;



implementation {:SIextraRecBound 8} dump_packet_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i22: i32, in_vslice_dummy_var_60: i32) returns (out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i22: i32, out_vslice_dummy_var_60: i32)
{

  entry:
    out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_60 := in_$i23, in_$p24, in_$i25, in_$i26, in_$i28, in_$i29, in_$i22, in_vslice_dummy_var_60;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i28;
    goto $bb21_dummy;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, in_$i2);
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i22, 1);
    call {:si_unique_call 342} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_vslice_dummy_var_60 := printk.ref.i32(.str.56, out_$i26);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p24);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p1, $mul.ref(out_$i23, 1));
    goto corral_source_split_1701;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_60 := dump_packet_loop_$bb19(in_$p1, in_$i2, out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_60);
    return;

  exit:
    return;
}



procedure dump_packet_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i22: i32, in_vslice_dummy_var_60: i32) returns (out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i22: i32, out_vslice_dummy_var_60: i32);



implementation dump_packet_loop_$bb12(in_$p1: ref, in_$i6: i32, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32, in_vslice_dummy_var_58: i32) returns (out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32, out_vslice_dummy_var_58: i32)
{

  entry:
    out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_58 := in_$i12, in_$p13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i11, in_vslice_dummy_var_58;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i17;
    goto $bb14_dummy;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, in_$i6);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i11, 1);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_vslice_dummy_var_58 := printk.ref.i32(.str.56, out_$i15);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(in_$p1, $mul.ref(out_$i12, 1));
    goto corral_source_split_1683;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_58 := dump_packet_loop_$bb12(in_$p1, in_$i6, out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_58);
    return;

  exit:
    return;
}



procedure dump_packet_loop_$bb12(in_$p1: ref, in_$i6: i32, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32, in_vslice_dummy_var_58: i32) returns (out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32, out_vslice_dummy_var_58: i32);



implementation {:SIextraRecBound 20} usb_b_out_loop_$bb60(in_$p21: ref, in_$i152: i32, in_$i158: i64, in_$p161: ref, in_$i162: i64, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$i169: i32) returns (out_$i158: i64, out_$p161: ref, out_$i162: i64, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$i169: i32)
{

  entry:
    out_$i158, out_$p161, out_$i162, out_$p165, out_$i166, out_$i167, out_$i168, out_$i155, out_$i156, out_$i157, out_$i169 := in_$i158, in_$p161, in_$i162, in_$p165, in_$i166, in_$i167, in_$i168, in_$i155, in_$i156, in_$i157, in_$i169;
    goto $bb60, exit;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2013;

  $bb62:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i155, out_$i156, out_$i157 := out_$i167, 8, out_$i166;
    goto $bb62_dummy;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i167;
    assume true;
    goto $bb62;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i168 := $ugt.i32(in_$i152, out_$i166);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i155, 1);
    call {:si_unique_call 398} {:cexpr "i"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i157, out_$i156);
    call {:si_unique_call 397} {:cexpr "offset"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p165, out_$i156);
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i162, 16)), $mul.ref(4, 1));
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$i162 := $sext.i32.i64(out_$i155);
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p161, out_$i157);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i158, 16)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i158 := $sext.i32.i64(out_$i155);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb62_dummy:
    call {:si_unique_call 1} out_$i158, out_$p161, out_$i162, out_$p165, out_$i166, out_$i167, out_$i168, out_$i155, out_$i156, out_$i157, out_$i169 := usb_b_out_loop_$bb60(in_$p21, in_$i152, out_$i158, out_$p161, out_$i162, out_$p165, out_$i166, out_$i167, out_$i168, out_$i155, out_$i156, out_$i157, out_$i169);
    return;

  exit:
    return;
}



procedure usb_b_out_loop_$bb60(in_$p21: ref, in_$i152: i32, in_$i158: i64, in_$p161: ref, in_$i162: i64, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$i169: i32) returns (out_$i158: i64, out_$p161: ref, out_$i162: i64, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$i169: i32);
  modifies $M.0;



implementation usb_b_out_loop_$bb41(in_$p2: ref, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i8, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i92: i32, in_$p93: ref, in_$p94: ref) returns (out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i8, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i92: i32, out_$p93: ref, out_$p94: ref)
{

  entry:
    out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94 := in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i92, in_$p93, in_$p94;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  $bb43:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i92, out_$p93, out_$p94 := out_$i101, out_$p95, out_$p96;
    goto $bb43_dummy;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i103 := $ugt.i32(out_$i102, out_$i101);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.15, in_$p2);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i92, 1);
    call {:si_unique_call 388} {:cexpr "count"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p93, out_$i100);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i100 := bitrev8(out_$i99);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i97);
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p94);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p94, $mul.ref(1, 1));
    goto corral_source_split_1958;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(1, 1));
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94 := usb_b_out_loop_$bb41(in_$p2, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94);
    return;

  exit:
    return;
}



procedure usb_b_out_loop_$bb41(in_$p2: ref, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i8, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i92: i32, in_$p93: ref, in_$p94: ref) returns (out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i8, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i92: i32, out_$p93: ref, out_$p94: ref);
  modifies $M.0;



implementation usb_b_out_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$p21: ref, in_$i35: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i32, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i8, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$i104: i32, in_$i105: i32, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i16, in_$i113: i32, in_$i114: i16, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i106: i32, in_$i122: i32, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i64, in_$p131: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$p139: ref, in_$i140: i32, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i142: i32, in_$i132: i32, in_$i151: i1, in_$i51: i32, in_$i152: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i32, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i8, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$i104: i32, out_$i105: i32, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i16, out_$i113: i32, out_$i114: i16, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i106: i32, out_$i122: i32, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i64, out_$p131: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$p139: ref, out_$i140: i32, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i142: i32, out_$i132: i32, out_$i151: i1, out_$i51: i32, out_$i152: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: ref)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94, out_$i104, out_$i105, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i106, out_$i122, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p143, out_$p144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i142, out_$i132, out_$i151, out_$i51, out_$i152, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_vslice_dummy_var_69, out_vslice_dummy_var_70 := in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i92, in_$p93, in_$p94, in_$i104, in_$i105, in_$p107, in_$p108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i106, in_$i122, in_$p124, in_$i125, in_$i126, in_$p127, in_$p128, in_$i129, in_$i130, in_$p131, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$i138, in_$p139, in_$i140, in_$i141, in_$p143, in_$p144, in_$p145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i142, in_$i132, in_$i151, in_$i51, in_$i152, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_vslice_dummy_var_69, in_vslice_dummy_var_70;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;

  $bb54:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := out_$i132;
    goto $bb54_dummy;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i132;
    assume true;
    goto $bb54;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i132, in_$i35);
    goto corral_source_split_1990;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i132 := out_$i142;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i106;
    goto $bb50;

  $bb48:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} dev_kfree_skb_any(out_$p53);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} B_L1L2(in_$p0, 289, out_$p131);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p131 := $i2p.i64.ref(out_$i130);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i32.i64(out_$i129);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.0, out_$p128);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p127, $0.ref);
    goto corral_source_split_1981;

  $bb47:
    assume out_$i126 == 1;
    out_$p127 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_vslice_dummy_var_70 := skb_pull(out_$p53, out_$i122);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.15, in_$p2);
    goto corral_source_split_1974;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i120, out_$i51);
    call {:si_unique_call 386} {:cexpr "len"} boogie_si_record_i32(out_$i121);
    assume {:verifier.code 0} true;
    out_$i106 := out_$i121;
    goto $bb46;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i105;
    goto $bb46;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i51, out_$i104);
    call {:si_unique_call 389} {:cexpr "len"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_1971;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.15, in_$p2);
    goto corral_source_split_1970;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb40;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44:
    assume !(out_$i103 == 1);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i103 := $ugt.i32(out_$i102, out_$i101);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.15, in_$p2);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i92, 1);
    call {:si_unique_call 388} {:cexpr "count"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p93, out_$i100);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i100 := bitrev8(out_$i99);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i8(out_$i98);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i97);
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i8($M.0, out_$p94);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p94, $mul.ref(1, 1));
    goto corral_source_split_1958;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(1, 1));
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    call out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94 := usb_b_out_loop_$bb41(in_$p2, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94);
    goto $bb41_last;

  $bb41_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i92, out_$p93, out_$p94 := 0, out_$p89, out_$p85;
    goto $bb41;

  $bb43:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i92, out_$p93, out_$p94 := out_$i101, out_$p95, out_$p96;
    assume false;
    return;

  $bb38:
    assume out_$i91 == 1;
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i91 := $ugt.i32(out_$i90, 0);
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.15, in_$p2);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(out_$p87, $mul.ref(out_$i88, 1));
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i51);
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_1945;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1944;

  $bb36:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, in_$p2, out_$i83);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1940;

  $bb35:
    assume out_$i81 == 1;
    goto corral_source_split_1939;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i81 := $ult.i32(out_$i79, out_$i80);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.15, in_$p2);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, in_$p2, out_$i77);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i77 := $sub.i32(in_$i35, out_$i51);
    goto corral_source_split_1917;

  $bb33:
    assume out_$i76 == 1;
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 1);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p74);
    goto corral_source_split_1913;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_1912;

  $bb31:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_vslice_dummy_var_69 := printk.ref.ref.i32.i32(.str.129, .str.126, out_$i70, out_$i72);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i69, 1);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(208, 1));
    goto corral_source_split_1905;

  $bb30:
    assume out_$i67 == 1;
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 4);
    goto corral_source_split_1901;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i65 := $M.4;
    goto corral_source_split_1900;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} dump_packet___1(.str.126, out_$p62, out_$i64);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1894;

  $bb27:
    assume out_$i60 == 1;
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1890;

  $bb24:
    assume out_$i58 == 1;
    goto corral_source_split_1889;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i56, 256);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i56 := $M.4;
    goto corral_source_split_1880;

  $bb22:
    assume out_$i55 == 1;
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1875;

  $bb21:
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(64, 1));
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb26;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_$i120 := isdnhdlc_encode(out_$p107, out_$p109, out_$i114, in_$p2, out_$p118, out_$i119);
    call {:si_unique_call 385} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i32(in_$i35, out_$i51);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p116, $mul.ref(out_$i117, 1));
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i51);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i16(out_$i113);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i32(out_$i112);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i112 := $trunc.i32.i16(out_$i111);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p53, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1925;

  $bb34:
    assume !(out_$i76 == 1);
    out_$p107 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1924;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i149, out_$i51);
    call {:si_unique_call 396} {:cexpr "len"} boogie_si_record_i32(out_$i150);
    assume {:verifier.code 0} true;
    out_$i142 := out_$i150;
    goto $bb53;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i142 := in_$i35;
    goto $bb53;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 393} out_cmdloc_dummy_var_7 := $memset.i8(out_cmdloc_dummy_var_6, out_$p139, $sub.i8(0, 1), out_$i141, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_7;
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i140);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i140 := $sub.i32(in_$i35, out_$i51);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref(out_$p137, $mul.ref(out_$i138, 1));
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i138 := $sext.i32.i64(out_$i51);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1993;

  $bb51:
    assume out_$i135 == 1;
    goto corral_source_split_1992;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, out_$p133);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(212, 1));
    goto corral_source_split_1885;

  $bb23:
    assume !(out_$i55 == 1);
    goto corral_source_split_1884;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} out_$i149 := isdnhdlc_encode(out_$p143, $0.ref, 0, in_$p2, out_$p147, out_$i148);
    call {:si_unique_call 395} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i149);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i148 := $sub.i32(in_$i35, out_$i51);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref(out_$p145, $mul.ref(out_$i146, 1));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i146 := $sext.i32.i64(out_$i51);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.0, out_$p144);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2002;

  $bb52:
    assume !(out_$i135 == 1);
    out_$p143 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_2001;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94, out_$i104, out_$i105, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i106, out_$i122, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p143, out_$p144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i142, out_$i132, out_$i151, out_$i51, out_$i152, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_vslice_dummy_var_69, out_vslice_dummy_var_70 := usb_b_out_loop_$bb20(in_$p0, in_$p2, in_$p21, in_$i35, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i92, out_$p93, out_$p94, out_$i104, out_$i105, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i106, out_$i122, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p143, out_$p144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i142, out_$i132, out_$i151, out_$i51, out_$i152, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_vslice_dummy_var_69, out_vslice_dummy_var_70);
    return;

  exit:
    return;
}



procedure usb_b_out_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$p21: ref, in_$i35: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i32, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$p95: ref, in_$p96: ref, in_$i97: i8, in_$i98: i32, in_$i99: i8, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$i104: i32, in_$i105: i32, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i16, in_$i113: i32, in_$i114: i16, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i106: i32, in_$i122: i32, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i64, in_$p131: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$p139: ref, in_$i140: i32, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i142: i32, in_$i132: i32, in_$i151: i1, in_$i51: i32, in_$i152: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i32, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$p95: ref, out_$p96: ref, out_$i97: i8, out_$i98: i32, out_$i99: i8, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$i104: i32, out_$i105: i32, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i16, out_$i113: i32, out_$i114: i16, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i106: i32, out_$i122: i32, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i64, out_$p131: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$p139: ref, out_$i140: i32, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i142: i32, out_$i132: i32, out_$i151: i1, out_$i51: i32, out_$i152: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: ref);
  modifies $M.0, $M.6, $M.7, $M.9, $CurrAddr, $M.15, $M.11, $M.5;



implementation {:SIextraRecBound 8} dump_packet___1_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i22: i32, in_vslice_dummy_var_75: i32) returns (out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i22: i32, out_vslice_dummy_var_75: i32)
{

  entry:
    out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_75 := in_$i23, in_$p24, in_$i25, in_$i26, in_$i28, in_$i29, in_$i22, in_vslice_dummy_var_75;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2121;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i28;
    goto $bb21_dummy;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, in_$i2);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i22, 1);
    call {:si_unique_call 414} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_vslice_dummy_var_75 := printk.ref.i32(.str.56, out_$i26);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p24);
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p1, $mul.ref(out_$i23, 1));
    goto corral_source_split_2124;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_75 := dump_packet___1_loop_$bb19(in_$p1, in_$i2, out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_75);
    return;

  exit:
    return;
}



procedure dump_packet___1_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i22: i32, in_vslice_dummy_var_75: i32) returns (out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i22: i32, out_vslice_dummy_var_75: i32);



implementation dump_packet___1_loop_$bb12(in_$p1: ref, in_$i6: i32, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32, in_vslice_dummy_var_73: i32) returns (out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32, out_vslice_dummy_var_73: i32)
{

  entry:
    out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_73 := in_$i12, in_$p13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i11, in_vslice_dummy_var_73;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i17;
    goto $bb14_dummy;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, in_$i6);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i11, 1);
    call {:si_unique_call 410} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out_vslice_dummy_var_73 := printk.ref.i32(.str.56, out_$i15);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(in_$p1, $mul.ref(out_$i12, 1));
    goto corral_source_split_2106;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_73 := dump_packet___1_loop_$bb12(in_$p1, in_$i6, out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure dump_packet___1_loop_$bb12(in_$p1: ref, in_$i6: i32, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32, in_vslice_dummy_var_73: i32) returns (out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32, out_vslice_dummy_var_73: i32);



implementation dump_iso_packet___1_loop_$bb14(in_$i20: i32, in_$p34: ref, in_$i35: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_vslice_dummy_var_79: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_vslice_dummy_var_79: i32)
{

  entry:
    out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_79 := in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i38, in_vslice_dummy_var_79;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  $bb16:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    goto $bb16_dummy;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, in_$i20);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 431} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_vslice_dummy_var_79 := printk.ref.i32(.str.56, out_$i43);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_2202;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(in_$p34, $mul.ref(out_$i40, 1));
    goto corral_source_split_2200;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(in_$i35, out_$i39);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_79 := dump_iso_packet___1_loop_$bb14(in_$i20, in_$p34, in_$i35, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure dump_iso_packet___1_loop_$bb14(in_$i20: i32, in_$p34: ref, in_$i35: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_vslice_dummy_var_79: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_vslice_dummy_var_79: i32);



implementation dump_iso_packet___1_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i21: i64, in_$p24: ref, in_$i25: i32, in_$i20: i32, in_$i26: i64, in_$p29: ref, in_$i30: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i37: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i10: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i21: i64, out_$p24: ref, out_$i25: i32, out_$i20: i32, out_$i26: i64, out_$p29: ref, out_$i30: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i37: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i10: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p18, in_$i19, in_$i21, in_$p24, in_$i25, in_$i20, in_$i26, in_$p29, in_$i30, in_$i32, in_$p33, in_$p34, in_$i35, in_$i37, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i38, in_$i48, in_$i49, in_$i50, in_$i10, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;

  $bb20:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i48;
    goto $bb20_dummy;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i50 := $sgt.i32(out_$i49, out_$i48);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, in_$p7);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i10, 1);
    call {:si_unique_call 433} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_2210;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} out_vslice_dummy_var_80 := printk.ref(.str.58);
    goto corral_source_split_2209;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume !(out_$i46 == 1);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, out_$i20);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 431} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_vslice_dummy_var_79 := printk.ref.i32(.str.56, out_$i43);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_2202;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p34, $mul.ref(out_$i40, 1));
    goto corral_source_split_2200;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(out_$i35, out_$i39);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_79 := dump_iso_packet___1_loop_$bb14(out_$i20, out_$p34, out_$i35, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_79);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    out_$i38 := 0;
    goto $bb14;

  $bb16:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    assume false;
    return;

  $bb11:
    assume out_$i37 == 1;
    goto corral_source_split_2195;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(0, out_$i20);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i30);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2189;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i20, 0);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_vslice_dummy_var_78 := printk.ref.i32.i32(.str.66, out_$i20, out_$i30);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 428} {:cexpr "ofs"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i10);
    goto corral_source_split_2182;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    call {:si_unique_call 427} {:cexpr "len"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    out_$i20 := out_$i25;
    goto $bb8;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i19;
    goto $bb8;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 426} {:cexpr "len"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i10);
    goto corral_source_split_2173;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i12, 128);
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_2168;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i21, 16)), $mul.ref(4, 1));
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i10);
    goto corral_source_split_2178;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_2177;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80 := dump_iso_packet___1_loop_$bb4(in_$p1, in_$p7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure dump_iso_packet___1_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i21: i64, in_$p24: ref, in_$i25: i32, in_$i20: i32, in_$i26: i64, in_$p29: ref, in_$i30: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i37: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i10: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i21: i64, out_$p24: ref, out_$i25: i32, out_$i20: i32, out_$i26: i64, out_$p29: ref, out_$i30: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i37: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i10: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32);



implementation usb_d_out_loop_$bb26(in_$p21: ref, in_$i39: i32, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i55: i32, in_$i56: i32, in_$i74: i32) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i55: i32, out_$i56: i32, out_$i74: i32)
{

  entry:
    out_$p57, out_$p58, out_$i59, out_$p61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i55, out_$i56, out_$i74 := in_$p57, in_$p58, in_$i59, in_$p61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i55, in_$i56, in_$i74;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  $bb31:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i55, out_$i56 := out_$i72, out_$i69;
    goto $bb31_dummy;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i69;
    assume true;
    goto $bb31;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i73 := $ugt.i32(in_$i39, out_$i72);
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, out_$i55);
    call {:si_unique_call 673} {:cexpr "packet_offset"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p58, $mul.ref(out_$i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3325;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i56, 1);
    call {:si_unique_call 672} {:cexpr "num_packets"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3324;

  $bb29:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i67);
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p58, $mul.ref(out_$i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    out_$i67 := $sub.i32(in_$i39, out_$i55);
    goto corral_source_split_3320;

  $bb28:
    assume out_$i66 == 1;
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i66 := $ult.i32(out_$i63, out_$i65);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p58, $mul.ref(out_$i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i63 := $sub.i32(in_$i39, out_$i55);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, 2);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p58, $mul.ref(out_$i59, 16)), $mul.ref(4, 1));
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, out_$i55);
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p58, $mul.ref(out_$i59, 16)), $mul.ref(0, 1));
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i56);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_3307;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p21, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$i59, out_$p61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i55, out_$i56, out_$i74 := usb_d_out_loop_$bb26(in_$p21, in_$i39, out_$p57, out_$p58, out_$i59, out_$p61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i55, out_$i56, out_$i74);
    return;

  exit:
    return;
}



procedure usb_d_out_loop_$bb26(in_$p21: ref, in_$i39: i32, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i55: i32, in_$i56: i32, in_$i74: i32) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i55: i32, out_$i56: i32, out_$i74: i32);
  modifies $M.0;



implementation dump_iso_packet___0_loop_$bb14(in_$i20: i32, in_$p34: ref, in_$i35: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_vslice_dummy_var_121: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_vslice_dummy_var_121: i32)
{

  entry:
    out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_121 := in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i38, in_vslice_dummy_var_121;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  $bb16:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    goto $bb16_dummy;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, in_$i20);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 690} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_vslice_dummy_var_121 := printk.ref.i32(.str.56, out_$i43);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(in_$p34, $mul.ref(out_$i40, 1));
    goto corral_source_split_3415;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(in_$i35, out_$i39);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_121 := dump_iso_packet___0_loop_$bb14(in_$i20, in_$p34, in_$i35, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_121);
    return;

  exit:
    return;
}



procedure dump_iso_packet___0_loop_$bb14(in_$i20: i32, in_$p34: ref, in_$i35: i64, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_vslice_dummy_var_121: i32) returns (out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_vslice_dummy_var_121: i32);



implementation dump_iso_packet___0_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i21: i64, in_$p24: ref, in_$i25: i32, in_$i20: i32, in_$i26: i64, in_$p29: ref, in_$i30: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i37: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i10: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i21: i64, out_$p24: ref, out_$i25: i32, out_$i20: i32, out_$i26: i64, out_$p29: ref, out_$i30: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i37: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i10: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p18, in_$i19, in_$i21, in_$p24, in_$i25, in_$i20, in_$i26, in_$p29, in_$i30, in_$i32, in_$p33, in_$p34, in_$i35, in_$i37, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i45, in_$i46, in_$i38, in_$i48, in_$i49, in_$i50, in_$i10, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  $bb20:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i48;
    goto $bb20_dummy;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$i50 := $sgt.i32(out_$i49, out_$i48);
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, in_$p7);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i10, 1);
    call {:si_unique_call 692} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3425;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} out_vslice_dummy_var_122 := printk.ref(.str.58);
    goto corral_source_split_3424;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume !(out_$i46 == 1);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i45, out_$i20);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 690} {:cexpr "j"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_vslice_dummy_var_121 := printk.ref.i32(.str.56, out_$i43);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p34, $mul.ref(out_$i40, 1));
    goto corral_source_split_3415;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(out_$i35, out_$i39);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_121 := dump_iso_packet___0_loop_$bb14(out_$i20, out_$p34, out_$i35, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_vslice_dummy_var_121);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i38 := 0;
    goto $bb14;

  $bb16:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    assume false;
    return;

  $bb11:
    assume out_$i37 == 1;
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(0, out_$i20);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3404;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i20, 0);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_vslice_dummy_var_120 := printk.ref.i32.i32(.str.66, out_$i20, out_$i30);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 687} {:cexpr "ofs"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3397;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    call {:si_unique_call 686} {:cexpr "len"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    out_$i20 := out_$i25;
    goto $bb8;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i19;
    goto $bb8;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 685} {:cexpr "len"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3388;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i12, 128);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_3383;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i21, 16)), $mul.ref(4, 1));
    goto corral_source_split_3394;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3393;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_3392;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122 := dump_iso_packet___0_loop_$bb4(in_$p1, in_$p7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i21, out_$p24, out_$i25, out_$i20, out_$i26, out_$p29, out_$i30, out_$i32, out_$p33, out_$p34, out_$i35, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i45, out_$i46, out_$i38, out_$i48, out_$i49, out_$i50, out_$i10, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122);
    return;

  exit:
    return;
}



procedure dump_iso_packet___0_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i21: i64, in_$p24: ref, in_$i25: i32, in_$i20: i32, in_$i26: i64, in_$p29: ref, in_$i30: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i37: i1, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i45: i32, in_$i46: i1, in_$i38: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i10: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i21: i64, out_$p24: ref, out_$i25: i32, out_$i20: i32, out_$i26: i64, out_$p29: ref, out_$i30: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i37: i1, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i45: i32, out_$i46: i1, out_$i38: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i10: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32);



implementation {:SIextraRecBound 8} dump_packet___0_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i22: i32, in_vslice_dummy_var_126: i32) returns (out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i22: i32, out_vslice_dummy_var_126: i32)
{

  entry:
    out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_126 := in_$i23, in_$p24, in_$i25, in_$i26, in_$i28, in_$i29, in_$i22, in_vslice_dummy_var_126;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i28;
    goto $bb21_dummy;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, in_$i2);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i22, 1);
    call {:si_unique_call 706} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} out_vslice_dummy_var_126 := printk.ref.i32(.str.56, out_$i26);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p24);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p1, $mul.ref(out_$i23, 1));
    goto corral_source_split_3479;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_126 := dump_packet___0_loop_$bb19(in_$p1, in_$i2, out_$i23, out_$p24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i22, out_vslice_dummy_var_126);
    return;

  exit:
    return;
}



procedure dump_packet___0_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i22: i32, in_vslice_dummy_var_126: i32) returns (out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i22: i32, out_vslice_dummy_var_126: i32);



implementation dump_packet___0_loop_$bb12(in_$p1: ref, in_$i6: i32, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32, in_vslice_dummy_var_124: i32) returns (out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32, out_vslice_dummy_var_124: i32)
{

  entry:
    out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_124 := in_$i12, in_$p13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i11, in_vslice_dummy_var_124;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i17;
    goto $bb14_dummy;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, in_$i6);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i11, 1);
    call {:si_unique_call 702} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} out_vslice_dummy_var_124 := printk.ref.i32(.str.56, out_$i15);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(in_$p1, $mul.ref(out_$i12, 1));
    goto corral_source_split_3461;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_124 := dump_packet___0_loop_$bb12(in_$p1, in_$i6, out_$i12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i11, out_vslice_dummy_var_124);
    return;

  exit:
    return;
}



procedure dump_packet___0_loop_$bb12(in_$p1: ref, in_$i6: i32, in_$i12: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32, in_vslice_dummy_var_124: i32) returns (out_$i12: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32, out_vslice_dummy_var_124: i32);



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 726} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 727} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 728} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb11:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.18 := out_$i19;
    call {:si_unique_call 735} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 1);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i18 := $M.18;
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3550;

  $bb22:
    assume out_$i17 == 1;
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$i16 := $M.20;
    goto corral_source_split_3546;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.20 := out_$i15;
    call {:si_unique_call 733} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} out_$i15 := probe_st5481(out_$p14, in_$p1);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$p14 := $M.16;
    goto corral_source_split_3543;

  $bb20:
    assume out_$i13 == 1;
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 1);
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    out_$i12 := $M.17;
    goto corral_source_split_3539;

  $bb18:
    assume out_$i11 == 1;
    goto corral_source_split_3538;

  $bb13:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} out_$i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 731} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i8);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i7 == 1;
    goto corral_source_split_3532;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i6 := $M.17;
    goto corral_source_split_3529;

  $bb8:
    assume out_$i5 == 1;
    goto corral_source_split_3528;

  $bb3:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.18 := out_$i26;
    call {:si_unique_call 738} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i25, 1);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i25 := $M.18;
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} disconnect_st5481(out_$p24);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$p24 := $M.16;
    goto corral_source_split_3560;

  $bb30:
    assume out_$i23 == 1;
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$i22 := $M.21;
    goto corral_source_split_3556;

  $bb27:
    assume out_$i21 == 1;
    goto corral_source_split_3555;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$i20 := $M.17;
    goto corral_source_split_3535;

  $bb15:
    assume out_$i10 == 1;
    goto corral_source_split_3534;

  $bb14:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb29;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} ldv_stop();
    goto corral_source_split_3567;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb17;

  $bb38:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb49;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i35 := $M.18;
    goto corral_source_split_3580;

  $bb47:
    assume out_$i34 == 1;
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 3);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$i33 := $M.19;
    goto corral_source_split_3576;

  $bb45:
    assume out_$i32 == 1;
    goto corral_source_split_3575;

  $bb40:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 740} out_$i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 741} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i29);
    call {:si_unique_call 742} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i29);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i28 == 1;
    goto corral_source_split_3569;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$i27 := $M.19;
    goto corral_source_split_3525;

  $bb5:
    assume out_$i4 == 1;
    goto corral_source_split_3524;

  $bb4:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb56:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_3599;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i42 := $M.22;
    goto corral_source_split_3598;

  $bb58:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3596;

  $bb57:
    assume out_$i41 == 1;
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i40 := $M.22;
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.22 := out_$i39;
    call {:si_unique_call 747} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i39 := st5481_usb_init();
    goto corral_source_split_3590;

  $bb55:
    assume out_$i38 == 1;
    goto corral_source_split_3589;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i37 := $M.19;
    goto corral_source_split_3572;

  $bb42:
    assume out_$i31 == 1;
    goto corral_source_split_3571;

  $bb41:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ldv_stop();
    goto corral_source_split_3604;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb44;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} ldv_stop();
    goto corral_source_split_3606;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb7;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb7;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43 := main_loop_$bb1(in_$p1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1);
  modifies $M.18, $M.17, $M.20, $M.0, $M.2, $M.12, $CurrAddr, $M.5, $M.7, $M.9, $M.6, $M.11, $M.8, $M.15, $M.19, $M.22, $M.4, $M.21, $M.16;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


