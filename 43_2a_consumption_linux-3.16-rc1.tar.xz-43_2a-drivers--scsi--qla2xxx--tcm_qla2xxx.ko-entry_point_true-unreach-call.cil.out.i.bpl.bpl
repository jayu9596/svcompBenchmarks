var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: ref;

var $M.3: [ref]ref;

var $M.4: [ref]i8;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]i24;

var $M.10: [ref]i8;

var $M.11: [ref]ref;

var $M.12: [ref]i8;

var $M.13: [ref]i64;

var $M.14: [ref]i64;

var $M.15: [ref]i64;

var $M.16: [ref]i64;

var $M.17: i32;

var $M.18: [ref]i64;

var $M.19: [ref]i32;

var $M.20: [ref]i64;

var $M.21: ref;

var $M.22: [ref]i8;

var $M.23: [ref]i64;

var $M.24: [ref]i64;

var $M.29: [ref]i64;

var $M.30: ref;

var $M.36: [ref]i8;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.51: [ref]ref;

var $M.52: [ref]i64;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: ref;

var $M.59: ref;

var $M.60: ref;

var $M.61: ref;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.93: ref;

var $M.94: i32;

var $M.95: ref;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 487120);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_state_1: ref;

axiom ldv_timer_state_1 == $sub.ref(0, 2056);

const tcm_qla2xxx_tpg_attrib_prod_mode_write_protect_group0: ref;

axiom tcm_qla2xxx_tpg_attrib_prod_mode_write_protect_group0 == $sub.ref(0, 3088);

const tcm_qla2xxx_tpg_attrib_demo_mode_write_protect_group0: ref;

axiom tcm_qla2xxx_tpg_attrib_demo_mode_write_protect_group0 == $sub.ref(0, 4120);

const ldv_timer_list_1: ref;

axiom ldv_timer_list_1 == $sub.ref(0, 5152);

const tcm_qla2xxx_npiv_ops_group3: ref;

axiom tcm_qla2xxx_npiv_ops_group3 == $sub.ref(0, 6184);

const tcm_qla2xxx_npiv_ops_group2: ref;

axiom tcm_qla2xxx_npiv_ops_group2 == $sub.ref(0, 7216);

const tcm_qla2xxx_npiv_ops_group0: ref;

axiom tcm_qla2xxx_npiv_ops_group0 == $sub.ref(0, 8248);

const tcm_qla2xxx_npiv_ops_group4: ref;

axiom tcm_qla2xxx_npiv_ops_group4 == $sub.ref(0, 9280);

const tcm_qla2xxx_npiv_ops_group1: ref;

axiom tcm_qla2xxx_npiv_ops_group1 == $sub.ref(0, 10312);

const tcm_qla2xxx_npiv_ops_group6: ref;

axiom tcm_qla2xxx_npiv_ops_group6 == $sub.ref(0, 11344);

const tcm_qla2xxx_npiv_ops_group5: ref;

axiom tcm_qla2xxx_npiv_ops_group5 == $sub.ref(0, 12376);

const tcm_qla2xxx_tpg_attrib_demo_mode_login_only_group0: ref;

axiom tcm_qla2xxx_tpg_attrib_demo_mode_login_only_group0 == $sub.ref(0, 13408);

const tcm_qla2xxx_tpg_enable_group0: ref;

axiom tcm_qla2xxx_tpg_enable_group0 == $sub.ref(0, 14440);

const tcm_qla2xxx_npiv_tpg_enable_group0: ref;

axiom tcm_qla2xxx_npiv_tpg_enable_group0 == $sub.ref(0, 15472);

const tcm_qla2xxx_tpg_attrib_cache_dynamic_acls_group0: ref;

axiom tcm_qla2xxx_tpg_attrib_cache_dynamic_acls_group0 == $sub.ref(0, 16504);

const tcm_qla2xxx_template_group2: ref;

axiom tcm_qla2xxx_template_group2 == $sub.ref(0, 17536);

const tcm_qla2xxx_template_group0: ref;

axiom tcm_qla2xxx_template_group0 == $sub.ref(0, 18568);

const tcm_qla2xxx_template_group1: ref;

axiom tcm_qla2xxx_template_group1 == $sub.ref(0, 19600);

const tcm_qla2xxx_template_group3: ref;

axiom tcm_qla2xxx_template_group3 == $sub.ref(0, 20632);

const tcm_qla2xxx_tpg_attrib_generate_node_acls_group0: ref;

axiom tcm_qla2xxx_tpg_attrib_generate_node_acls_group0 == $sub.ref(0, 21664);

const tcm_qla2xxx_ops_group3: ref;

axiom tcm_qla2xxx_ops_group3 == $sub.ref(0, 22696);

const tcm_qla2xxx_ops_group2: ref;

axiom tcm_qla2xxx_ops_group2 == $sub.ref(0, 23728);

const tcm_qla2xxx_ops_group0: ref;

axiom tcm_qla2xxx_ops_group0 == $sub.ref(0, 24760);

const tcm_qla2xxx_ops_group4: ref;

axiom tcm_qla2xxx_ops_group4 == $sub.ref(0, 25792);

const tcm_qla2xxx_ops_group1: ref;

axiom tcm_qla2xxx_ops_group1 == $sub.ref(0, 26824);

const tcm_qla2xxx_ops_group6: ref;

axiom tcm_qla2xxx_ops_group6 == $sub.ref(0, 27856);

const tcm_qla2xxx_ops_group5: ref;

axiom tcm_qla2xxx_ops_group5 == $sub.ref(0, 28888);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 29916);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 30944);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 31972);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 33000);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 34028);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 35056);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 36084);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 37112);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 38140);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 39168);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 40196);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 41224);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 42252);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 43280);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 44308);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 45336);

const tcm_qla2xxx_free_wq: ref;

axiom tcm_qla2xxx_free_wq == $sub.ref(0, 46368);

const tcm_qla2xxx_cmd_wq: ref;

axiom tcm_qla2xxx_cmd_wq == $sub.ref(0, 47400);

const tcm_qla2xxx_fabric_configfs: ref;

axiom tcm_qla2xxx_fabric_configfs == $sub.ref(0, 48432);

const tcm_qla2xxx_npiv_fabric_configfs: ref;

axiom tcm_qla2xxx_npiv_fabric_configfs == $sub.ref(0, 49464);

const tcm_qla2xxx_npiv_tpg_enable: ref;

axiom tcm_qla2xxx_npiv_tpg_enable == $sub.ref(0, 50528);

const {:count 2} tcm_qla2xxx_npiv_tpg_attrs: ref;

axiom tcm_qla2xxx_npiv_tpg_attrs == $sub.ref(0, 51568);

const tcm_qla2xxx_npiv_ops: ref;

axiom tcm_qla2xxx_npiv_ops == $sub.ref(0, 52936);

const tcm_qla2xxx_tpg_attrib_demo_mode_login_only: ref;

axiom tcm_qla2xxx_tpg_attrib_demo_mode_login_only == $sub.ref(0, 54000);

const tcm_qla2xxx_tpg_attrib_prod_mode_write_protect: ref;

axiom tcm_qla2xxx_tpg_attrib_prod_mode_write_protect == $sub.ref(0, 55064);

const tcm_qla2xxx_tpg_attrib_demo_mode_write_protect: ref;

axiom tcm_qla2xxx_tpg_attrib_demo_mode_write_protect == $sub.ref(0, 56128);

const tcm_qla2xxx_tpg_attrib_cache_dynamic_acls: ref;

axiom tcm_qla2xxx_tpg_attrib_cache_dynamic_acls == $sub.ref(0, 57192);

const tcm_qla2xxx_tpg_attrib_generate_node_acls: ref;

axiom tcm_qla2xxx_tpg_attrib_generate_node_acls == $sub.ref(0, 58256);

const {:count 6} tcm_qla2xxx_tpg_attrib_attrs: ref;

axiom tcm_qla2xxx_tpg_attrib_attrs == $sub.ref(0, 59328);

const tcm_qla2xxx_tpg_enable: ref;

axiom tcm_qla2xxx_tpg_enable == $sub.ref(0, 60392);

const {:count 2} tcm_qla2xxx_tpg_attrs: ref;

axiom tcm_qla2xxx_tpg_attrs == $sub.ref(0, 61432);

const tcm_qla2xxx_wwn_version: ref;

axiom tcm_qla2xxx_wwn_version == $sub.ref(0, 62496);

const {:count 2} tcm_qla2xxx_wwn_attrs: ref;

axiom tcm_qla2xxx_wwn_attrs == $sub.ref(0, 63536);

const tcm_qla2xxx_ops: ref;

axiom tcm_qla2xxx_ops == $sub.ref(0, 64904);

const tcm_qla2xxx_template: ref;

axiom tcm_qla2xxx_template == $sub.ref(0, 66040);

const {:count 225} .str.7: ref;

axiom .str.7 == $sub.ref(0, 67289);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 68334);

const {:count 12} .str.5: ref;

axiom .str.5 == $sub.ref(0, 69370);

const {:count 39} .str.75: ref;

axiom .str.75 == $sub.ref(0, 70433);

const {:count 33} .str.76: ref;

axiom .str.76 == $sub.ref(0, 71490);

const {:count 65} .str.77: ref;

axiom .str.77 == $sub.ref(0, 72579);

const {:count 32} .str.88: ref;

axiom .str.88 == $sub.ref(0, 73635);

const {:count 44} .str.89: ref;

axiom .str.89 == $sub.ref(0, 74703);

const {:count 50} .str.90: ref;

axiom .str.90 == $sub.ref(0, 75777);

const {:count 52} .str.91: ref;

axiom .str.91 == $sub.ref(0, 76853);

const {:count 62} .str.92: ref;

axiom .str.92 == $sub.ref(0, 77939);

const {:count 29} .str.93: ref;

axiom .str.93 == $sub.ref(0, 78992);

const {:count 69} .str.94: ref;

axiom .str.94 == $sub.ref(0, 80085);

const {:count 75} .str.95: ref;

axiom .str.95 == $sub.ref(0, 81184);

const {:count 29} .str.78: ref;

axiom .str.78 == $sub.ref(0, 82237);

const {:count 24} .str.79: ref;

axiom .str.79 == $sub.ref(0, 83285);

const {:count 45} .str.80: ref;

axiom .str.80 == $sub.ref(0, 84354);

const {:count 46} .str.81: ref;

axiom .str.81 == $sub.ref(0, 85424);

const {:count 34} .str.82: ref;

axiom .str.82 == $sub.ref(0, 86482);

const {:count 56} .str.83: ref;

axiom .str.83 == $sub.ref(0, 87562);

const {:count 57} .str.84: ref;

axiom .str.84 == $sub.ref(0, 88643);

const {:count 33} .str.85: ref;

axiom .str.85 == $sub.ref(0, 89700);

const {:count 64} .str.86: ref;

axiom .str.86 == $sub.ref(0, 90788);

const {:count 72} .str.87: ref;

axiom .str.87 == $sub.ref(0, 91884);

const btree_geo32: ref;

axiom btree_geo32 == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 44} .str.58: ref;

axiom .str.58 == $sub.ref(0, 92952);

const {:count 30} .str.59: ref;

axiom .str.59 == $sub.ref(0, 94006);

const {:count 27} .str.60: ref;

axiom .str.60 == $sub.ref(0, 95057);

const {:count 31} .str.61: ref;

axiom .str.61 == $sub.ref(0, 96112);

const {:count 59} .str.62: ref;

axiom .str.62 == $sub.ref(0, 97195);

const {:count 39} .str.63: ref;

axiom .str.63 == $sub.ref(0, 98258);

const {:count 33} .str.67: ref;

axiom .str.67 == $sub.ref(0, 99315);

const {:count 45} .str.68: ref;

axiom .str.68 == $sub.ref(0, 100384);

const {:count 45} .str.69: ref;

axiom .str.69 == $sub.ref(0, 101453);

const {:count 81} .str.70: ref;

axiom .str.70 == $sub.ref(0, 102558);

const {:count 49} .str.71: ref;

axiom .str.71 == $sub.ref(0, 103631);

const {:count 45} .str.72: ref;

axiom .str.72 == $sub.ref(0, 104700);

const {:count 55} .str.73: ref;

axiom .str.73 == $sub.ref(0, 105779);

const {:count 51} .str.96: ref;

axiom .str.96 == $sub.ref(0, 106854);

const {:count 41} .str.97: ref;

axiom .str.97 == $sub.ref(0, 107919);

const {:count 40} .str.98: ref;

axiom .str.98 == $sub.ref(0, 108983);

const {:count 39} .str.57: ref;

axiom .str.57 == $sub.ref(0, 110046);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 19} .str.74: ref;

axiom .str.74 == $sub.ref(0, 111089);

const {:count 13} .str.66: ref;

axiom .str.66 == $sub.ref(0, 112126);

const {:count 56} .str.64: ref;

axiom .str.64 == $sub.ref(0, 113206);

const {:count 44} .str.65: ref;

axiom .str.65 == $sub.ref(0, 114274);

const {:count 48} .str.15: ref;

axiom .str.15 == $sub.ref(0, 115346);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 22} .str.13: ref;

axiom .str.13 == $sub.ref(0, 116392);

const {:count 31} .str.14: ref;

axiom .str.14 == $sub.ref(0, 117447);

const {:count 6} .str.16: ref;

axiom .str.16 == $sub.ref(0, 118477);

const {:count 64} .str.17: ref;

axiom .str.17 == $sub.ref(0, 119565);

const {:count 44} .str.18: ref;

axiom .str.18 == $sub.ref(0, 120633);

const {:count 46} .str.19: ref;

axiom .str.19 == $sub.ref(0, 121703);

const {:count 12} .str.20: ref;

axiom .str.20 == $sub.ref(0, 122739);

const {:count 53} .str.21: ref;

axiom .str.21 == $sub.ref(0, 123816);

const {:count 58} .str.22: ref;

axiom .str.22 == $sub.ref(0, 124898);

const {:count 23} .str.23: ref;

axiom .str.23 == $sub.ref(0, 125945);

const {:count 50} .str.24: ref;

axiom .str.24 == $sub.ref(0, 127019);

const {:count 41} .str.11: ref;

axiom .str.11 == $sub.ref(0, 128084);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 25} .str.6: ref;

axiom .str.6 == $sub.ref(0, 129133);

const {:count 54} .str.8: ref;

axiom .str.8 == $sub.ref(0, 130211);

const {:count 45} .str.12: ref;

axiom .str.12 == $sub.ref(0, 131280);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 132312);

const {:count 8} .str.50: ref;

axiom .str.50 == $sub.ref(0, 133344);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 73} .str.35: ref;

axiom .str.35 == $sub.ref(0, 134441);

const {:count 5} .str.36: ref;

axiom .str.36 == $sub.ref(0, 135470);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 7} .str.51: ref;

axiom .str.51 == $sub.ref(0, 136501);

const .str: ref;

axiom .str == $sub.ref(0, 137550);

const {:count 36} .str.1: ref;

axiom .str.1 == $sub.ref(0, 138610);

const {:count 22} .str.25: ref;

axiom .str.25 == $sub.ref(0, 139656);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 9} .str.26: ref;

axiom .str.26 == $sub.ref(0, 140689);

const {:count 4} .str.27: ref;

axiom .str.27 == $sub.ref(0, 141717);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 142760);

const {:count 33} .str.2: ref;

axiom .str.2 == $sub.ref(0, 143817);

const {:count 28} .str.3: ref;

axiom .str.3 == $sub.ref(0, 144869);

const {:count 4} .str.4: ref;

axiom .str.4 == $sub.ref(0, 145897);

const {:count 19} .str.53: ref;

axiom .str.53 == $sub.ref(0, 146940);

const {:count 24} .str.54: ref;

axiom .str.54 == $sub.ref(0, 147988);

const {:count 24} .str.55: ref;

axiom .str.55 == $sub.ref(0, 149036);

const {:count 21} .str.56: ref;

axiom .str.56 == $sub.ref(0, 150081);

const {:count 3} .str.29: ref;

axiom .str.29 == $sub.ref(0, 151108);

const {:count 38} .str.30: ref;

axiom .str.30 == $sub.ref(0, 152170);

const {:count 55} .str.31: ref;

axiom .str.31 == $sub.ref(0, 153249);

const {:count 47} .str.32: ref;

axiom .str.32 == $sub.ref(0, 154320);

const {:count 44} .str.33: ref;

axiom .str.33 == $sub.ref(0, 155388);

const {:count 42} .str.34: ref;

axiom .str.34 == $sub.ref(0, 156454);

const {:count 13} .str.28: ref;

axiom .str.28 == $sub.ref(0, 157491);

const {:count 30} .str.40: ref;

axiom .str.40 == $sub.ref(0, 158545);

const {:count 60} .str.41: ref;

axiom .str.41 == $sub.ref(0, 159629);

const {:count 39} .str.42: ref;

axiom .str.42 == $sub.ref(0, 160692);

const {:count 59} .str.43: ref;

axiom .str.43 == $sub.ref(0, 161775);

const {:count 60} .str.44: ref;

axiom .str.44 == $sub.ref(0, 162859);

const {:count 65} .str.45: ref;

axiom .str.45 == $sub.ref(0, 163948);

const {:count 19} .str.46: ref;

axiom .str.46 == $sub.ref(0, 164991);

const {:count 17} .str.47: ref;

axiom .str.47 == $sub.ref(0, 166032);

const {:count 18} .str.48: ref;

axiom .str.48 == $sub.ref(0, 167074);

const {:count 16} .str.49: ref;

axiom .str.49 == $sub.ref(0, 168114);

const {:count 32} .str.37: ref;

axiom .str.37 == $sub.ref(0, 169170);

const {:count 54} .str.38: ref;

axiom .str.38 == $sub.ref(0, 170248);

const {:count 59} .str.39: ref;

axiom .str.39 == $sub.ref(0, 171331);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 172363);

const {:count 3} .str.1.212: ref;

axiom .str.1.212 == $sub.ref(0, 173390);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 174428);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 175456);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 176488);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 177520);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const tcm_qla2xxx_handle_cmd: ref;

axiom tcm_qla2xxx_handle_cmd == $sub.ref(0, 178552);

procedure tcm_qla2xxx_handle_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_handle_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i16: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "tcm_qla2xxx_handle_cmd:arg:data_length"} boogie_si_record_i32($i3);
    call {:si_unique_call 2} {:cexpr "tcm_qla2xxx_handle_cmd:arg:fcp_task_attr"} boogie_si_record_i32($i4);
    call {:si_unique_call 3} {:cexpr "tcm_qla2xxx_handle_cmd:arg:data_dir"} boogie_si_record_i32($i5);
    call {:si_unique_call 4} {:cexpr "tcm_qla2xxx_handle_cmd:arg:bidi"} boogie_si_record_i32($i6);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i6, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(832, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1008, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1136, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i26 := target_submit_cmd($p7, $p18, $p2, $p23, $i25, $i3, $i4, $i5, $i10);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_57 := printk.ref(.str.65);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} vslice_dummy_var_56 := printk.ref(.str.64);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i9 := $or.i32(2, 1);
    call {:si_unique_call 5} {:cexpr "flags"} boogie_si_record_i32($i9);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const tcm_qla2xxx_handle_data: ref;

axiom tcm_qla2xxx_handle_data == $sub.ref(0, 179584);

procedure tcm_qla2xxx_handle_data($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_handle_data($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_58: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} __init_work($p3, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 137438953408);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 13} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(32, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} lockdep_init_map($p10, .str.66, $p1, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} INIT_LIST_HEAD($p12);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(24, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, tcm_qla2xxx_handle_data_work);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p15 := $M.2;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_58 := queue_work($p15, $p16);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_handle_dif_err: ref;

axiom tcm_qla2xxx_handle_dif_err == $sub.ref(0, 180616);

procedure tcm_qla2xxx_handle_dif_err($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_handle_dif_err($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_59: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} __init_work($p3, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 137438953408);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 20} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(32, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} lockdep_init_map($p10, .str.66, $p1, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} INIT_LIST_HEAD($p12);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(24, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, tcm_qla2xxx_handle_dif_work);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p15 := $M.2;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_59 := queue_work($p15, $p16);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_handle_tmr: ref;

axiom tcm_qla2xxx_handle_tmr == $sub.ref(0, 181648);

procedure tcm_qla2xxx_handle_tmr($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_handle_tmr($p0: ref, $i1: i32, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "tcm_qla2xxx_handle_tmr:arg:lun"} boogie_si_record_i32($i1);
    call {:si_unique_call 25} {:cexpr "tcm_qla2xxx_handle_tmr:arg:tmr_func"} boogie_si_record_i8($i2);
    call {:si_unique_call 26} {:cexpr "tcm_qla2xxx_handle_tmr:arg:tag"} boogie_si_record_i32($i3);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(8, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(16, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.3, $p7);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i2);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i12 := target_submit_tmr($p6, $p8, $0.ref, $i1, $p9, $i11, 32, $i3, 2);
    call {:si_unique_call 28} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const tcm_qla2xxx_free_cmd: ref;

axiom tcm_qla2xxx_free_cmd == $sub.ref(0, 182680);

procedure tcm_qla2xxx_free_cmd($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_free_cmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_60: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} __init_work($p3, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 137438953408);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 32} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(32, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} lockdep_init_map($p10, .str.66, $p1, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} INIT_LIST_HEAD($p12);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1)), $mul.ref(24, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, tcm_qla2xxx_complete_free);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p15 := $M.2;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1256)), $mul.ref(928, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_60 := queue_work($p15, $p16);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_free_mcmd: ref;

axiom tcm_qla2xxx_free_mcmd == $sub.ref(0, 183712);

procedure tcm_qla2xxx_free_mcmd($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_free_mcmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_61: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(848, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __init_work($p3, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 137438953408);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(848, 1)), $mul.ref(0, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 39} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(848, 1)), $mul.ref(32, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} lockdep_init_map($p10, .str.74, $p1, 0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(848, 1)), $mul.ref(8, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} INIT_LIST_HEAD($p12);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(848, 1)), $mul.ref(24, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, tcm_qla2xxx_complete_mcmd);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p15 := $M.2;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(848, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_61 := queue_work($p15, $p16);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_free_session: ref;

axiom tcm_qla2xxx_free_session == $sub.ref(0, 184744);

procedure tcm_qla2xxx_free_session($p0: ref);
  free requires assertsPassed;
  modifies $M.17, $M.0;



implementation tcm_qla2xxx_free_session($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 856)), $mul.ref(8, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12080)), $mul.ref(0, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p7 := pci_get_drvdata($p6);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i9 := preempt_count();
    call {:si_unique_call 45} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 2096896);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 47} {:cexpr "tmp___1"} boogie_si_record_i64($i15);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} target_wait_for_sess_cmds($p18);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} transport_deregister_session_configfs($p30);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} transport_deregister_session($p32);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_63 := printk.ref(.str.58);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} dump_stack();
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_62 := printk.ref(.str.57);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} dump_stack();
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    call {:si_unique_call 48} devirtbounce(0, .str.7, 1537, 12);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call tcm_qla2xxx_free_session_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tcm_qla2xxx_check_initiator_node_acl: ref;

axiom tcm_qla2xxx_check_initiator_node_acl == $sub.ref(0, 185776);

procedure tcm_qla2xxx_check_initiator_node_acl($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.17, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.13, $CurrAddr, $M.14, $M.15, $M.16;



implementation tcm_qla2xxx_check_initiator_node_acl($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i16;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i24: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p5 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    call {:si_unique_call 57} {:cexpr "tcm_qla2xxx_check_initiator_node_acl:arg:loop_id"} boogie_si_record_i16($i4);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 12080)), $mul.ref(1668, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i16 := 2088;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 1248)), $mul.ref(992, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(40, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p31 := transport_init_session_tags($i16, 1256, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i33 := IS_ERR($p32);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 63} {:cexpr "tmp___0"} boogie_si_record_i8($i34);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.4;
    call {:si_unique_call 67} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p40, 0, 36, $zext.i32.i64(16), 0 == 1);
    $M.4 := cmdloc_dummy_var_13;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p5);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p1, $mul.ref(7, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_67 := snprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32($p41, 36, .str.98, $i43, $i46, $i49, $i52, $i55, $i58, $i61, $i64);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p5);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p67 := core_tpg_check_initiator_node_acl($p30, $p66);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p31, $mul.ref(0, 1432)), $mul.ref(24, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p31, $mul.ref(0, 1432)), $mul.ref(24, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p31, $mul.ref(0, 1432)), $mul.ref(24, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref($sub.ref(0, 64), 1272));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ldv_spin_lock();
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p2);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} tcm_qla2xxx_set_sess_by_s_id($p20, $p74, $p76, $p31, $p77, $p3);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i4);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} tcm_qla2xxx_set_sess_by_loop_id($p20, $p74, $p76, $p31, $p78, $i80);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 12080)), $mul.ref(24, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} spin_unlock_irqrestore($p81, $u0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p74, $mul.ref(0, 1208)), $mul.ref(320, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p8);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} __transport_register_session($p83, $p74, $p31, $p84);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb14:
    assume $i72 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} transport_free_session($p31);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_66 := printk.ref(.str.97);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p31);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i38 := PTR_ERR($p37);
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i24 := $i39;
    goto $bb6;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_65 := printk.ref(.str.96);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_64 := printk.ref(.str.58);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} dump_stack();
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 12080)), $mul.ref(1668, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const tcm_qla2xxx_update_sess: ref;

axiom tcm_qla2xxx_update_sess == $sub.ref(0, 186808);

procedure tcm_qla2xxx_update_sess($p0: ref, $i1: i32, $i2: i16, $i3: i1);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.13, $M.15, $M.16, $CurrAddr;



implementation tcm_qla2xxx_update_sess($p0: ref, $i1: i32, $i2: i16, $i3: i1)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i16;
  var $i92: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i64;
  var $i163: i1;
  var $i164: i32;
  var $i165: i64;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i8;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i64;
  var $p187: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $p199: ref;
  var $i200: i8;
  var $i201: i32;
  var $i202: i32;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $i207: i1;
  var $i208: i32;
  var $i209: i64;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $p220: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i64;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i1;
  var $i239: i8;
  var $p240: ref;
  var $i241: i8;
  var $i242: i8;
  var $i243: i8;
  var $i244: i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i64;
  var vslice_dummy_var_70: i64;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i64;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    call {:si_unique_call 77} {:cexpr "tcm_qla2xxx_update_sess:arg:loop_id"} boogie_si_record_i16($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 78} {:cexpr "tcm_qla2xxx_update_sess:arg:conf_compl_supported"} boogie_si_record_i1($i3);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 856)), $mul.ref(8, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 12080)), $mul.ref(0, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p13 := pci_get_drvdata($p12);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1432)), $mul.ref(24, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i2);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i27, $i28);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i29 == 1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16777215);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 16777215);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i33, $i36);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i2);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i74, $i75);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 16777215);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p4);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 16777215);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i104, $i107);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i8.i1($i6);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i239 := $zext.i1.i8($i238);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.0, $p240);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i242 := $and.i8($i239, 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i243 := $and.i8($i241, $sub.i8(0, 2));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i244 := $or.i8($i243, $i242);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p240, $i244);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i108 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32($i113, 16);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i120 := $shl.i32($i119, 8);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i114, $i120);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i121, $i126);
    call {:si_unique_call 81} {:cexpr "key"} boogie_si_record_i32($i127);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p129 := btree_lookup32($p128, $i127);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i131 == 1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32(1, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i164 := $zext.i1.i32($i163);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i164);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i166 := ldv__builtin_expect($i165, 0);
    call {:si_unique_call 88} {:cexpr "tmp___2"} boogie_si_record_i64($i166);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i167 := $ne.i64($i166, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32(1, 0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i184 := $zext.i1.i32($i183);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i184);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_70 := ldv__builtin_expect($i185, 0);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p4);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i191 := $shl.i32($i190, 16);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p4);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i196 := $shl.i32($i195, 8);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i191, $i196);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p4);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.0, $p199);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i197, $i201);
    call {:si_unique_call 91} {:cexpr "key"} boogie_si_record_i32($i202);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p204 := btree_lookup32($p203, $i202);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i206 == 1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p22);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_71 := btree_insert32($p231, $i202, $p232, 32);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p4);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 101} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p235, $p236, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(0, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, $i202);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i206 == 1;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32(1, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i208 := $zext.i1.i32($i207);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i209 := $sext.i32.i64($i208);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i210 := ldv__builtin_expect($i209, 0);
    call {:si_unique_call 96} {:cexpr "tmp___4"} boogie_si_record_i64($i210);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i210, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32(1, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i225 := $zext.i1.i32($i224);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i225);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} vslice_dummy_var_72 := ldv__builtin_expect($i226, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p22);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_73 := btree_update32($p228, $i202, $p229);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i211 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p4);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p4);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p4);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p220, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} warn_slowpath_fmt.ref.i32.ref.i32.i32.i32(.str.7, 1701, .str.73, $i215, $i219, $i223);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb21:
    assume $i167 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.0, $p175);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} warn_slowpath_fmt.ref.i32.ref.i32.i32.i32(.str.7, 1693, .str.72, $i172, $i177, $i182);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i131 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p133 := btree_remove32($p132, $i127);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p22);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i134, $i136);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i32($i137);
    call {:si_unique_call 84} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i138);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i140 := $zext.i1.i32($i139);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i142 := ldv__builtin_expect($i141, 0);
    call {:si_unique_call 86} {:cexpr "tmp___1"} boogie_si_record_i64($i142);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i138, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i160 := $zext.i1.i32($i159);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i161 := $sext.i32.i64($i160);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_69 := ldv__builtin_expect($i161, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i143 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} warn_slowpath_fmt.ref.i32.ref.i32.i32.i32(.str.7, 1690, .str.71, $i148, $i153, $i158);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb7:
    assume $i76 == 1;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i64($i80);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p78, $mul.ref($i81, 8)), $mul.ref(0, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p22);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i85, $i86);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i64($i2);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p96, $mul.ref($i97, 8)), $mul.ref(0, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, $p22);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i2);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i87 == 1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p18, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i64($i91);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p89, $mul.ref($i92, 8)), $mul.ref(0, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $0.ref);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i2);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p4);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p4);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} vslice_dummy_var_68 := printk.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32(.str.70, $p0, $p39, $i42, $i43, $i48, $i53, $i58, $i62, $i66, $i70);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb2;
}



const tcm_qla2xxx_find_sess_by_loop_id: ref;

axiom tcm_qla2xxx_find_sess_by_loop_id == $sub.ref(0, 187840);

procedure tcm_qla2xxx_find_sess_by_loop_id($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr;



implementation tcm_qla2xxx_find_sess_by_loop_id($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p11: ref;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 104} {:cexpr "tcm_qla2xxx_find_sess_by_loop_id:arg:loop_id"} boogie_si_record_i16($i1);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.5);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.67);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.7);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p15, .str.68);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.9, $p17);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1424);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p17, $i20);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p21, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.10, $p22);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 108} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i64($i1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 8)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.11, $p34);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p35);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(48, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p56, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(48, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p11 := $p64;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_77 := printk.ref(.str.63);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p38, .str.5);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.67);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, .str.7);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p41, .str.69);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.9, $p43);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 1430);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p43, $i46);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p47, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.10, $p48);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 111} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_76 := __dynamic_pr_debug.ref.ref.i32($p3, .str.69, $i54);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_75 := __dynamic_pr_debug.ref.ref.i32($p2, .str.68, $i28);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_74 := printk.ref(.str.58);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} dump_stack();
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;
}



const tcm_qla2xxx_find_sess_by_s_id: ref;

axiom tcm_qla2xxx_find_sess_by_s_id == $sub.ref(0, 188872);

procedure tcm_qla2xxx_find_sess_by_s_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.14, $CurrAddr;



implementation tcm_qla2xxx_find_sess_by_s_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p90: ref;
  var $p91: ref;
  var $p12: ref;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 16);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 8);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i15, $i19);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i20, $i23);
    call {:si_unique_call 119} {:cexpr "key"} boogie_si_record_i32($i24);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p25, .str.5);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, .str.59);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p27, .str.7);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p28, .str.60);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.9, $p30);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 1318);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p30, $i33);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p34, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.10, $p35);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 121} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p43 := btree_lookup32($p42, $i24);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p64, .str.5);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p65, .str.59);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p66, .str.7);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p67, .str.62);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.9, $p69);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 1326);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p69, $i72);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p73, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.10, $p74);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 128} {:cexpr "tmp___2"} boogie_si_record_i64($i78);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p44);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(48, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(48, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p12 := $p91;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb17:
    assume $i88 == 1;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_82 := printk.ref(.str.63);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb14:
    assume $i79 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p44, $mul.ref(0, 1208)), $mul.ref(0, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_81 := __dynamic_pr_debug.ref.ref.ref.ref($p4, .str.62, $p44, $p81);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p47, .str.5);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p48, .str.59);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p49, .str.7);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p50, .str.61);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.9, $p52);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 1322);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p52, $i55);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p56, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.10, $p57);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 125} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb10:
    assume $i62 == 1;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_80 := __dynamic_pr_debug.ref.ref.i32($p3, .str.61, $i24);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_79 := __dynamic_pr_debug.ref.ref.i32($p2, .str.60, $i24);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_78 := printk.ref(.str.58);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} dump_stack();
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;
}



const tcm_qla2xxx_clear_nacl_from_fcport_map: ref;

axiom tcm_qla2xxx_clear_nacl_from_fcport_map == $sub.ref(0, 189904);

procedure tcm_qla2xxx_clear_nacl_from_fcport_map($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.13, $M.0, $CurrAddr, $M.14, $M.15, $M.16;



implementation tcm_qla2xxx_clear_nacl_from_fcport_map($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i40: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i64;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1432)), $mul.ref(24, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1208)), $mul.ref(320, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2152)), $mul.ref(1304, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 1000), 1248));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p6);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 64), 1272));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.5);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, .str.75);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p17, .str.7);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p18, .str.76);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.9, $p20);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 834);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p20, $i23);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p24, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.10, $p25);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(0, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p37 := btree_remove32($p34, $i36);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i40 := 0;
    assume {:branchcond $i39} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i40);
    call {:si_unique_call 137} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i45);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 139} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i45, 0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_84 := ldv__builtin_expect($i53, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p55, .str.5);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p56, .str.75);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p57, .str.7);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p58, .str.77);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.9, $p60);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 840);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p60, $i63);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p64, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.10, $p65);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 143} {:cexpr "tmp___1"} boogie_si_record_i64($i69);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} tcm_qla2xxx_clear_sess_lookup($p12, $p14, $p0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i70 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(8, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_85 := __dynamic_pr_debug.ref.ref.ref.i64.i32($p2, .str.77, $p6, $i72, $i74);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i50 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} warn_slowpath_null(.str.7, 837);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p37);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p6);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i41, $i43);
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb6;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(0, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_83 := __dynamic_pr_debug.ref.ref.i32($p1, .str.76, $i32);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_qla2xxx_put_sess: ref;

axiom tcm_qla2xxx_put_sess == $sub.ref(0, 190936);

procedure tcm_qla2xxx_put_sess($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.24, $M.14, $M.15, $M.16;



implementation tcm_qla2xxx_put_sess($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12080)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i11 := arch_spin_is_locked($p10);
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 149} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1432)), $mul.ref(184, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_86 := kref_put($p19, tcm_qla2xxx_release_session);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i16 == 1;
    call {:si_unique_call 150} devirtbounce(0, .str.7, 877, 12);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call tcm_qla2xxx_put_sess_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const tcm_qla2xxx_shutdown_sess: ref;

axiom tcm_qla2xxx_shutdown_sess == $sub.ref(0, 191968);

procedure tcm_qla2xxx_shutdown_sess($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_shutdown_sess($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 12080)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i9 := arch_spin_is_locked($p8);
    call {:si_unique_call 153} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 155} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} target_sess_cmd_list_set_waiting($p16);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 156} devirtbounce(0, .str.7, 883, 12);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call tcm_qla2xxx_shutdown_sess_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_spin_is_locked: ref;

axiom arch_spin_is_locked == $sub.ref(0, 193000);

procedure arch_spin_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation arch_spin_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 159} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p4, $p5, 4, $zext.i32.i64(2), 1 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i8, $i11);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 194032);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 161} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const target_sess_cmd_list_set_waiting: ref;

axiom target_sess_cmd_list_set_waiting == $sub.ref(0, 195064);

procedure target_sess_cmd_list_set_waiting($p0: ref);
  free requires assertsPassed;



implementation target_sess_cmd_list_set_waiting($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 196096);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const tcm_qla2xxx_release_session: ref;

axiom tcm_qla2xxx_release_session == $sub.ref(0, 197128);

procedure tcm_qla2xxx_release_session($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_release_session($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 184), 1432)), $mul.ref(40, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} qlt_unreg_sess($p5);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 198160);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.24, $CurrAddr, $M.14, $M.15, $M.16;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i2 := kref_sub($p0, 1, $p1);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 199192);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.24, $CurrAddr, $M.14, $M.15, $M.16;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_87: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 166} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 168} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_87 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 172} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 173} devirtbounce.1($p2, $p0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} warn_slowpath_null(.str.9, 71);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 200224);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 201256);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 176} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 177} devirtbounce.2(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.12, $p2);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const qlt_unreg_sess: ref;

axiom qlt_unreg_sess == $sub.ref(0, 202288);

procedure qlt_unreg_sess($p0: ref);
  free requires assertsPassed;



implementation qlt_unreg_sess($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 203320);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 180} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i64.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i64.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 186} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 188} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 189} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 190} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 192} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const btree_remove32: ref;

axiom btree_remove32 == $sub.ref(0, 204352);

procedure btree_remove32($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $CurrAddr;



implementation btree_remove32($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 195} {:cexpr "btree_remove32:arg:key"} boogie_si_record_i32($i1);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p2, $i3);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p5 := btree_remove($p4, btree_geo32, $p2);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const tcm_qla2xxx_clear_sess_lookup: ref;

axiom tcm_qla2xxx_clear_sess_lookup == $sub.ref(0, 205384);

procedure tcm_qla2xxx_clear_sess_lookup($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.13, $CurrAddr, $M.14, $M.15, $M.16;



implementation tcm_qla2xxx_clear_sess_lookup($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p3 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} tcm_qla2xxx_set_sess_by_s_id($p0, $0.ref, $p1, $p5, $p2, $p21);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} tcm_qla2xxx_set_sess_by_loop_id($p0, $0.ref, $p1, $p5, $p2, $i25);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_set_sess_by_s_id: ref;

axiom tcm_qla2xxx_set_sess_by_s_id == $sub.ref(0, 206416);

procedure tcm_qla2xxx_set_sess_by_s_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.0, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation tcm_qla2xxx_set_sess_by_s_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i24;
  var $i148: i24;
  var $i149: i24;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $i156: i1;
  var $p158: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i24;
  var $i167: i24;
  var $i168: i24;
  var $p169: ref;
  var $p170: ref;
  var $i171: i8;
  var $i172: i64;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i24;
  var $i189: i24;
  var $i190: i24;
  var $p191: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i64;
  var $i195: i64;
  var $i196: i64;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: ref;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: ref;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p5);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 16);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 8);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, $i20);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p5, $mul.ref(2, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i21, $i24);
    call {:si_unique_call 208} {:cexpr "key"} boogie_si_record_i32($i25);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p26, .str.5);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p27, .str.78);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p28, .str.7);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p29, .str.79);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.9, $p31);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 1355);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p31, $i34);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p35, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.10, $p36);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 210} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p44 := btree_lookup32($p43, $i25);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p160, .str.5);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p161, .str.78);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p162, .str.7);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p163, .str.86);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i166 := $load.i24($M.9, $p165);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i167 := $and.i24($i166, $sub.i24(0, 262144));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i168 := $or.i24($i167, 1396);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p165, $i168);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p169, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.10, $p170);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i64($i171);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i173 := $and.i64($i172, 1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i174 := ldv__builtin_expect($i173, 0);
    call {:si_unique_call 235} {:cexpr "tmp___5"} boogie_si_record_i64($i174);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} vslice_dummy_var_99 := btree_update32($p177, $i25, $p178);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $p3);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, $p4);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p182, .str.5);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p183, .str.78);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p184, .str.7);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p185, .str.87);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i188 := $load.i24($M.9, $p187);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i189 := $and.i24($i188, $sub.i24(0, 262144));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i190 := $or.i24($i189, 1402);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p187, $i190);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p191, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.10, $p192);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i64($i193);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i195 := $and.i64($i194, 1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i196 := ldv__builtin_expect($i195, 0);
    call {:si_unique_call 239} {:cexpr "tmp___6"} boogie_si_record_i64($i196);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i197 := $ne.i64($i196, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i197 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p1, $mul.ref(0, 1208)), $mul.ref(0, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_100 := __dynamic_pr_debug.ref.ref.ref.ref.ref($p13, .str.87, $p199, $p1, $p201);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i175 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_98 := __dynamic_pr_debug.ref.ref($p12, .str.86);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i140 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p141, .str.5);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p142, .str.78);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p143, .str.7);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p144, .str.85);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i147 := $load.i24($M.9, $p146);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i148 := $and.i24($i147, $sub.i24(0, 262144));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i149 := $or.i24($i148, 1391);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p146, $i149);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p150, 0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.10, $p151);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i64($i152);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i154 := $and.i64($i153, 1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i155 := ldv__builtin_expect($i154, 0);
    call {:si_unique_call 231} {:cexpr "tmp___4"} boogie_si_record_i64($i155);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_97 := btree_remove32($p158, $i25);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb34:
    assume $i156 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_96 := __dynamic_pr_debug.ref.ref($p11, .str.85);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb20:
    assume $i94 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p117, .str.5);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p118, .str.78);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p119, .str.7);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p120, .str.84);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.9, $p122);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 1383);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p122, $i125);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p126, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.10, $p127);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 227} {:cexpr "tmp___3"} boogie_si_record_i64($i131);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_95 := btree_update32($p134, $i25, $p135);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p137, $p3);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, $p4);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i132 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} vslice_dummy_var_94 := __dynamic_pr_debug.ref.ref($p10, .str.84);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i96 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p97, .str.5);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p98, .str.78);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p99, .str.7);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p100, .str.83);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.9, $p102);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 1378);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p102, $i105);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p106, 0);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.10, $p107);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 223} {:cexpr "tmp___2"} boogie_si_record_i64($i111);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_93 := btree_remove32($p114, $i25);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $0.ref);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume $i112 == 1;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_92 := __dynamic_pr_debug.ref.ref($p9, .str.83);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p72, .str.5);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p73, .str.78);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p74, .str.7);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p75, .str.82);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.9, $p77);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 1368);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p77, $i80);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p81, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.10, $p82);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 216} {:cexpr "tmp___1"} boogie_si_record_i64($i86);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p3);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p4);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i87 == 1;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_91 := __dynamic_pr_debug.ref.ref($p8, .str.82);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i48 == 1;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p49, .str.5);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, .str.78);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p51, .str.7);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p52, .str.80);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.9, $p54);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 1360);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p54, $i57);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p58, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.10, $p59);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 214} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(0, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i25);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p1);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i69 := btree_insert32($p67, $i25, $p68, 32);
    call {:si_unique_call 219} {:cexpr "rc"} boogie_si_record_i32($i69);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i70 == 1;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_90 := printk.ref.i32(.str.81, $i25);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i64 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_89 := __dynamic_pr_debug.ref.ref($p7, .str.80);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_88 := __dynamic_pr_debug.ref.ref.i32($p6, .str.79, $i25);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_qla2xxx_set_sess_by_loop_id: ref;

axiom tcm_qla2xxx_set_sess_by_loop_id == $sub.ref(0, 207448);

procedure tcm_qla2xxx_set_sess_by_loop_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i16);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.0, $CurrAddr;



implementation tcm_qla2xxx_set_sess_by_loop_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i16)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i24;
  var $i101: i24;
  var $i102: i24;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i24;
  var $i133: i24;
  var $i134: i24;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i64;
  var $i139: i64;
  var $i140: i64;
  var $i141: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i24;
  var $i151: i24;
  var $i152: i24;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i64;
  var $i157: i64;
  var $i158: i64;
  var $i159: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i24;
  var $i181: i24;
  var $i182: i24;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 248} {:cexpr "tcm_qla2xxx_set_sess_by_loop_id:arg:loop_id"} boogie_si_record_i16($i5);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.5);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.88);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.7);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p16, .str.89);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.9, $p18);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1458);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p18, $i21);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p22, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.10, $p23);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 250} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i64($i5);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref($i33, 8)), $mul.ref(0, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i124, 0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p144, .str.5);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p145, .str.88);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p146, .str.7);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p147, .str.94);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i150 := $load.i24($M.9, $p149);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i151 := $and.i24($i150, $sub.i24(0, 262144));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i152 := $or.i24($i151, 1497);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p149, $i152);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p153, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.10, $p154);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i64($i155);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i157 := $and.i64($i156, 1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i158 := ldv__builtin_expect($i157, 0);
    call {:si_unique_call 265} {:cexpr "tmp___4"} boogie_si_record_i64($i158);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p32, $mul.ref($i33, 8)), $mul.ref(0, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p161, $p1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p3);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i164, $i165);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p4);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i170, $i171);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p174, .str.5);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p175, .str.88);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p176, .str.7);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p177, .str.95);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i180 := $load.i24($M.9, $p179);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i181 := $and.i24($i180, $sub.i24(0, 262144));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i182 := $or.i24($i181, 1505);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p179, $i182);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p183, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.10, $p184);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i64($i185);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i187 := $and.i64($i186, 1);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i188 := ldv__builtin_expect($i187, 0);
    call {:si_unique_call 268} {:cexpr "tmp___5"} boogie_si_record_i64($i188);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb50:
    assume $i189 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p1, $mul.ref(0, 1208)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_107 := __dynamic_pr_debug.ref.ref.ref.ref.ref($p12, .str.95, $p191, $p1, $p193);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i172 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p173, $p4);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i166 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p167, $p3);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i159 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_106 := __dynamic_pr_debug.ref.ref($p11, .str.94);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i125 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p126, .str.5);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p127, .str.88);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p128, .str.7);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p129, .str.93);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i132 := $load.i24($M.9, $p131);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i133 := $and.i24($i132, $sub.i24(0, 262144));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i134 := $or.i24($i133, 1492);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p131, $i134);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p135, 0);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.10, $p136);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i64($i137);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i139 := $and.i64($i138, 1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i140 := ldv__builtin_expect($i139, 0);
    call {:si_unique_call 262} {:cexpr "tmp___3"} boogie_si_record_i64($i140);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p32, $mul.ref($i33, 8)), $mul.ref(0, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, $0.ref);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb37:
    assume $i141 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_105 := __dynamic_pr_debug.ref.ref($p10, .str.93);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p94, .str.5);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p95, .str.88);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p96, .str.7);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p97, .str.92);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i100 := $load.i24($M.9, $p99);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i101 := $and.i24($i100, $sub.i24(0, 262144));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i102 := $or.i24($i101, 1482);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p99, $i102);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p103, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.10, $p104);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i64($i105);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i107 := $and.i64($i106, 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i108 := ldv__builtin_expect($i107, 0);
    call {:si_unique_call 259} {:cexpr "tmp___2"} boogie_si_record_i64($i108);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p32, $mul.ref($i33, 8)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p3);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i114, $i115);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p4);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i120, $i121);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb31:
    assume $i122 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p4);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i116 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, $p3);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i109 == 1;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_104 := __dynamic_pr_debug.ref.ref($p9, .str.92);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i74 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p75, .str.5);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p76, .str.88);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p77, .str.7);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p78, .str.91);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.9, $p80);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 1476);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p80, $i83);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p84, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.10, $p85);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 256} {:cexpr "tmp___1"} boogie_si_record_i64($i89);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p32, $mul.ref($i33, 8)), $mul.ref(0, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $0.ref);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $0.ref);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume $i90 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_103 := __dynamic_pr_debug.ref.ref($p8, .str.91);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p39, .str.5);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p40, .str.88);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p41, .str.7);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p42, .str.90);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.9, $p44);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 1465);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p44, $i47);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p48, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.10, $p49);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 253} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p32, $mul.ref($i33, 8)), $mul.ref(0, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p1);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p3);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i59, $i60);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p4);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i65, $i66);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i67 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(48, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p4);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i61 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p3);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i54 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_102 := __dynamic_pr_debug.ref.ref($p7, .str.90);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i5);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_101 := __dynamic_pr_debug.ref.ref.i32($p6, .str.89, $i29);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const btree_lookup32: ref;

axiom btree_lookup32 == $sub.ref(0, 208480);

procedure btree_lookup32($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.14, $CurrAddr;



implementation btree_lookup32($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 271} {:cexpr "btree_lookup32:arg:key"} boogie_si_record_i32($i1);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p2, $i3);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p5 := btree_lookup($p4, btree_geo32, $p2);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const btree_insert32: ref;

axiom btree_insert32 == $sub.ref(0, 209512);

procedure btree_insert32($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $CurrAddr;



implementation btree_insert32($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 274} {:cexpr "btree_insert32:arg:key"} boogie_si_record_i32($i1);
    call {:si_unique_call 275} {:cexpr "btree_insert32:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p4, $i5);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i7 := btree_insert($p6, btree_geo32, $p4, $p2, $i3);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 210544);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 278} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 279} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 1} true;
    call {:si_unique_call 280} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 282} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 283} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 284} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 285} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const btree_update32: ref;

axiom btree_update32 == $sub.ref(0, 211576);

procedure btree_update32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $CurrAddr;



implementation btree_update32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 287} {:cexpr "btree_update32:arg:key"} boogie_si_record_i32($i1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p3, $i4);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i6 := btree_update($p5, btree_geo32, $p3, $p2);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const btree_update: ref;

axiom btree_update == $sub.ref(0, 212608);

procedure btree_update($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation btree_update($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 290} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 291} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const btree_insert: ref;

axiom btree_insert == $sub.ref(0, 213640);

procedure btree_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation btree_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} {:cexpr "btree_insert:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const btree_lookup: ref;

axiom btree_lookup == $sub.ref(0, 214672);

procedure btree_lookup($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation btree_lookup($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p3 := external_alloc();
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 215704);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 296} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 297} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const btree_remove: ref;

axiom btree_remove == $sub.ref(0, 216736);

procedure btree_remove($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation btree_remove($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p3 := external_alloc();
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dump_stack: ref;

axiom dump_stack == $sub.ref(0, 217768);

procedure dump_stack();
  free requires assertsPassed;



implementation dump_stack()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 218800);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 219832);

procedure warn_slowpath_fmt.ref.i32.ref.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 220864);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const transport_init_session_tags: ref;

axiom transport_init_session_tags == $sub.ref(0, 221896);

procedure transport_init_session_tags($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation transport_init_session_tags($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "transport_init_session_tags:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 302} {:cexpr "transport_init_session_tags:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 303} {:cexpr "transport_init_session_tags:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p3 := external_alloc();
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 222928);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 223960);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 224992);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 226024);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);



const core_tpg_check_initiator_node_acl: ref;

axiom core_tpg_check_initiator_node_acl == $sub.ref(0, 227056);

procedure core_tpg_check_initiator_node_acl($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation core_tpg_check_initiator_node_acl($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p2 := external_alloc();
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const transport_free_session: ref;

axiom transport_free_session == $sub.ref(0, 228088);

procedure transport_free_session($p0: ref);
  free requires assertsPassed;



implementation transport_free_session($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 229120);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 308} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 230152);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.17;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} ldv_spin_unlock();
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    return;
}



const __transport_register_session: ref;

axiom __transport_register_session == $sub.ref(0, 231184);

procedure __transport_register_session($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation __transport_register_session($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 232216);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 312} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 233248);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 234280);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 235312);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i0 := devirtbounce.3(0, __preempt_count);
    call {:si_unique_call 317} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const target_wait_for_sess_cmds: ref;

axiom target_wait_for_sess_cmds == $sub.ref(0, 236344);

procedure target_wait_for_sess_cmds($p0: ref);
  free requires assertsPassed;



implementation target_wait_for_sess_cmds($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    return;
}



const transport_deregister_session_configfs: ref;

axiom transport_deregister_session_configfs == $sub.ref(0, 237376);

procedure transport_deregister_session_configfs($p0: ref);
  free requires assertsPassed;



implementation transport_deregister_session_configfs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    return;
}



const transport_deregister_session: ref;

axiom transport_deregister_session == $sub.ref(0, 238408);

procedure transport_deregister_session($p0: ref);
  free requires assertsPassed;



implementation transport_deregister_session($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 239440);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 240472);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 241504);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_complete_mcmd: ref;

axiom tcm_qla2xxx_complete_mcmd == $sub.ref(0, 242536);

procedure tcm_qla2xxx_complete_mcmd($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_complete_mcmd($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 848), 1000)), $mul.ref(16, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_108 := transport_generic_free_cmd($p3, 0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 243568);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 322} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 244600);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 324} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 325} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const transport_generic_free_cmd: ref;

axiom transport_generic_free_cmd == $sub.ref(0, 245632);

procedure transport_generic_free_cmd($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation transport_generic_free_cmd($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 326} {:cexpr "transport_generic_free_cmd:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 327} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tcm_qla2xxx_complete_free: ref;

axiom tcm_qla2xxx_complete_free == $sub.ref(0, 246664);

procedure tcm_qla2xxx_complete_free($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_complete_free($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_109 := transport_generic_free_cmd($p3, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    return;
}



const target_submit_tmr: ref;

axiom target_submit_tmr == $sub.ref(0, 247696);

procedure target_submit_tmr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $i5: i8, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation target_submit_tmr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $i5: i8, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} {:cexpr "target_submit_tmr:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 331} {:cexpr "target_submit_tmr:arg:arg5"} boogie_si_record_i8($i5);
    call {:si_unique_call 332} {:cexpr "target_submit_tmr:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 333} {:cexpr "target_submit_tmr:arg:arg7"} boogie_si_record_i32($i7);
    call {:si_unique_call 334} {:cexpr "target_submit_tmr:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const tcm_qla2xxx_handle_dif_work: ref;

axiom tcm_qla2xxx_handle_dif_work == $sub.ref(0, 248728);

procedure tcm_qla2xxx_handle_dif_work($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_handle_dif_work($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} kref_get($p4);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1)), $mul.ref(812, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} transport_generic_request_failure($p5, $i8);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 249760);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_110: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 341} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 343} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_110 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 344} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 346} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 349} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} warn_slowpath_null(.str.9, 47);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const transport_generic_request_failure: ref;

axiom transport_generic_request_failure == $sub.ref(0, 250792);

procedure transport_generic_request_failure($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation transport_generic_request_failure($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} {:cexpr "transport_generic_request_failure:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 251824);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 353} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 354} $i3 := devirtbounce.4(0, $p2, $i0, $p2);
    call {:si_unique_call 355} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tcm_qla2xxx_handle_data_work: ref;

axiom tcm_qla2xxx_handle_data_work == $sub.ref(0, 252856);

procedure tcm_qla2xxx_handle_data_work($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_handle_data_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 928), 1256));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1104, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1)), $mul.ref(348, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1)), $mul.ref(812, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} transport_generic_request_failure($p23, 13);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1)), $mul.ref(812, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} transport_generic_request_failure($p19, $i22);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 928), 1256)), $mul.ref(0, 1)), $mul.ref(424, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} complete_($p14);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 253888);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    return;
}



const target_submit_cmd: ref;

axiom target_submit_cmd == $sub.ref(0, 254920);

procedure target_submit_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation target_submit_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 359} {:cexpr "target_submit_cmd:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 360} {:cexpr "target_submit_cmd:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 361} {:cexpr "target_submit_cmd:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 362} {:cexpr "target_submit_cmd:arg:arg7"} boogie_si_record_i32($i7);
    call {:si_unique_call 363} {:cexpr "target_submit_cmd:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 364} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const tcm_qla2xxx_get_fabric_name: ref;

axiom tcm_qla2xxx_get_fabric_name == $sub.ref(0, 255952);

procedure tcm_qla2xxx_get_fabric_name() returns ($r: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_fabric_name() returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $r := .str.10;
    return;
}



const tcm_qla2xxx_get_fabric_proto_ident: ref;

axiom tcm_qla2xxx_get_fabric_proto_ident == $sub.ref(0, 256984);

procedure tcm_qla2xxx_get_fabric_proto_ident($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_fabric_proto_ident($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(8, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i9 := fc_get_fabric_proto_ident($p0);
    call {:si_unique_call 367} {:cexpr "proto_id"} boogie_si_record_i8($i9);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb4;
}



const tcm_qla2xxx_get_fabric_wwn: ref;

axiom tcm_qla2xxx_get_fabric_wwn == $sub.ref(0, 258016);

procedure tcm_qla2xxx_get_fabric_wwn($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_fabric_wwn($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(8, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1248)), $mul.ref(64, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const tcm_qla2xxx_get_tag: ref;

axiom tcm_qla2xxx_get_tag == $sub.ref(0, 259048);

procedure tcm_qla2xxx_get_tag($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_tag($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(0, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tcm_qla2xxx_get_default_depth: ref;

axiom tcm_qla2xxx_get_default_depth == $sub.ref(0, 260080);

procedure tcm_qla2xxx_get_default_depth($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_default_depth($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const tcm_qla2xxx_get_pr_transport_id: ref;

axiom tcm_qla2xxx_get_pr_transport_id == $sub.ref(0, 261112);

procedure tcm_qla2xxx_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(8, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i13 := fc_get_pr_transport_id($p0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 369} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb2:
    assume $i12 == 1;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto $bb4;
}



const tcm_qla2xxx_get_pr_transport_id_len: ref;

axiom tcm_qla2xxx_get_pr_transport_id_len == $sub.ref(0, 262144);

procedure tcm_qla2xxx_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(8, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i12 := fc_get_pr_transport_id_len($p0, $p1, $p2, $p3);
    call {:si_unique_call 371} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb4;
}



const tcm_qla2xxx_parse_pr_out_transport_id: ref;

axiom tcm_qla2xxx_parse_pr_out_transport_id == $sub.ref(0, 263176);

procedure tcm_qla2xxx_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(8, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p12 := fc_parse_pr_out_transport_id($p0, $p1, $p2, $p3);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb4;
}



const tcm_qla2xxx_check_demo_mode: ref;

axiom tcm_qla2xxx_check_demo_mode == $sub.ref(0, 264208);

procedure tcm_qla2xxx_check_demo_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_check_demo_mode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const tcm_qla2xxx_check_demo_mode_cache: ref;

axiom tcm_qla2xxx_check_demo_mode_cache == $sub.ref(0, 265240);

procedure tcm_qla2xxx_check_demo_mode_cache($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_check_demo_mode_cache($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const tcm_qla2xxx_check_demo_write_protect: ref;

axiom tcm_qla2xxx_check_demo_write_protect == $sub.ref(0, 266272);

procedure tcm_qla2xxx_check_demo_write_protect($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_check_demo_write_protect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const tcm_qla2xxx_check_prod_write_protect: ref;

axiom tcm_qla2xxx_check_prod_write_protect == $sub.ref(0, 267304);

procedure tcm_qla2xxx_check_prod_write_protect($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_check_prod_write_protect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const tcm_qla2xxx_check_demo_mode_login_only: ref;

axiom tcm_qla2xxx_check_demo_mode_login_only == $sub.ref(0, 268336);

procedure tcm_qla2xxx_check_demo_mode_login_only($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_check_demo_mode_login_only($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const tcm_qla2xxx_alloc_fabric_acl: ref;

axiom tcm_qla2xxx_alloc_fabric_acl == $sub.ref(0, 269368);

procedure tcm_qla2xxx_alloc_fabric_acl($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation tcm_qla2xxx_alloc_fabric_acl($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $p6: ref;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p1 := kzalloc(1272, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(64, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_111 := printk.ref(.str.12);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const tcm_qla2xxx_release_fabric_acl: ref;

axiom tcm_qla2xxx_release_fabric_acl == $sub.ref(0, 270400);

procedure tcm_qla2xxx_release_fabric_acl($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_release_fabric_acl($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 64), 1272));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} kfree($p4);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_tpg_get_inst_index: ref;

axiom tcm_qla2xxx_tpg_get_inst_index == $sub.ref(0, 271432);

procedure tcm_qla2xxx_tpg_get_inst_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_get_inst_index($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(0, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const tcm_qla2xxx_check_stop_free: ref;

axiom tcm_qla2xxx_check_stop_free == $sub.ref(0, 272464);

procedure tcm_qla2xxx_check_stop_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_check_stop_free($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(128, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i3 := target_put_sess_cmd($p2, $p0);
    call {:si_unique_call 377} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tcm_qla2xxx_release_cmd: ref;

axiom tcm_qla2xxx_release_cmd == $sub.ref(0, 273496);

procedure tcm_qla2xxx_release_cmd($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_release_cmd($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 16);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} qlt_free_cmd($p7);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 16), 1000));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} qlt_free_mcmd($p6);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_qla2xxx_put_session: ref;

axiom tcm_qla2xxx_put_session == $sub.ref(0, 274528);

procedure tcm_qla2xxx_put_session($p0: ref);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.19, $M.13, $M.24, $CurrAddr, $M.14, $M.15, $M.16;



implementation tcm_qla2xxx_put_session($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1432)), $mul.ref(40, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} ldv_spin_lock();
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1432)), $mul.ref(184, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_112 := kref_put($p8, tcm_qla2xxx_release_session);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 12080)), $mul.ref(24, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_shutdown_session: ref;

axiom tcm_qla2xxx_shutdown_session == $sub.ref(0, 275560);

procedure tcm_qla2xxx_shutdown_session($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17;



implementation tcm_qla2xxx_shutdown_session($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1432)), $mul.ref(40, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} ldv_spin_lock();
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} target_sess_cmd_list_set_waiting($p0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 12080)), $mul.ref(24, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 385} devirtbounce(0, .str.7, 512, 12);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call tcm_qla2xxx_shutdown_session_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tcm_qla2xxx_close_session: ref;

axiom tcm_qla2xxx_close_session == $sub.ref(0, 276592);

procedure tcm_qla2xxx_close_session($p0: ref);
  free requires assertsPassed;
  modifies $M.17;



implementation tcm_qla2xxx_close_session($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1432)), $mul.ref(40, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 390} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_spin_lock();
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} qlt_unreg_sess($p3);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 12080)), $mul.ref(24, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 391} devirtbounce(0, .str.7, 528, 12);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call tcm_qla2xxx_close_session_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tcm_qla2xxx_sess_get_index: ref;

axiom tcm_qla2xxx_sess_get_index == $sub.ref(0, 277624);

procedure tcm_qla2xxx_sess_get_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_sess_get_index($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_qla2xxx_write_pending: ref;

axiom tcm_qla2xxx_write_pending == $sub.ref(0, 278656);

procedure tcm_qla2xxx_write_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_write_pending($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1124, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i5 := target_reverse_dma_direction($p0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1140, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(616, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1120, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(600, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1112, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(808, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1240, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(800, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1232, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(104, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 4840)), $mul.ref(1872, 1)), $mul.ref(72, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1244, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(812, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i26 := qlt_rdy_to_xfer($p1);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;
}



const tcm_qla2xxx_write_pending_status: ref;

axiom tcm_qla2xxx_write_pending_status == $sub.ref(0, 279688);

procedure tcm_qla2xxx_write_pending_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17;



implementation tcm_qla2xxx_write_pending_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var vslice_dummy_var_113: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} ldv_spin_lock();
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 3);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 18);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(352, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(352, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(424, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_113 := wait_for_completion_timeout($p8, 3000);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const tcm_qla2xxx_set_default_node_attrs: ref;

axiom tcm_qla2xxx_set_default_node_attrs == $sub.ref(0, 280720);

procedure tcm_qla2xxx_set_default_node_attrs($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_set_default_node_attrs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_get_task_tag: ref;

axiom tcm_qla2xxx_get_task_tag == $sub.ref(0, 281752);

procedure tcm_qla2xxx_get_task_tag($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_task_tag($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1132, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tcm_qla2xxx_get_cmd_state: ref;

axiom tcm_qla2xxx_get_cmd_state == $sub.ref(0, 282784);

procedure tcm_qla2xxx_get_cmd_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_qla2xxx_get_cmd_state($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_qla2xxx_queue_data_in: ref;

axiom tcm_qla2xxx_queue_data_in == $sub.ref(0, 283816);

procedure tcm_qla2xxx_queue_data_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_queue_data_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1124, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i5 := target_reverse_dma_direction($p0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1140, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(348, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1104, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i12, 1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i16 := $shl.i8($i15, 3);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i14, $sub.i8(0, 9));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i18 := $or.i8($i17, $i16);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i18);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(616, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1120, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(600, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1112, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1128, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(808, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1240, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(800, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1232, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p30);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(104, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 4840)), $mul.ref(1872, 1)), $mul.ref(72, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1244, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(812, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i43 := qlt_xmit_response($p1, 3, $i42);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;
}



const tcm_qla2xxx_queue_status: ref;

axiom tcm_qla2xxx_queue_status == $sub.ref(0, 284848);

procedure tcm_qla2xxx_queue_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_queue_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1124, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1112, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1120, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1128, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i8 := target_reverse_dma_direction($p0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1140, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(348, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1104, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i15, 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i19 := $shl.i8($i18, 3);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i17, $sub.i8(0, 9));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i21 := $or.i8($i20, $i19);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i21);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(12, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i49 := qlt_xmit_response($p1, 2, $i48);
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4096);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 8192);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(44, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i39, $i41);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(44, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1124, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, $sub.i32(0, 4097));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(44, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const tcm_qla2xxx_queue_tm_rsp: ref;

axiom tcm_qla2xxx_queue_tm_rsp == $sub.ref(0, 285880);

procedure tcm_qla2xxx_queue_tm_rsp($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.0, $CurrAddr;



implementation tcm_qla2xxx_queue_tm_rsp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(136, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 1000));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.5);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.6);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p8, .str.7);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p9, .str.8);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.9, $p11);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 773);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p11, $i14);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p15, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.10, $p16);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 410} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i31, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 1000)), $mul.ref(1, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 5);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} qlt_xmit_tm_rsp($p5);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 1000)), $mul.ref(1, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 4);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i31, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 1000)), $mul.ref(1, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 2);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i31, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb11;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 1000)), $mul.ref(1, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_114 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p1, .str.8, $p5, $i24, $i27);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_qla2xxx_aborted_task: ref;

axiom tcm_qla2xxx_aborted_task == $sub.ref(0, 286912);

procedure tcm_qla2xxx_aborted_task($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_aborted_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1160, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(1104, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 12080)), $mul.ref(0, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1112, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1120, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1140, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} pci_unmap_sg($p12, $p14, $i16, $i18);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1256)), $mul.ref(1104, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, $sub.i8(0, 3));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i21);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_qla2xxx_make_lport: ref;

axiom tcm_qla2xxx_make_lport == $sub.ref(0, 287944);

procedure tcm_qla2xxx_make_lport($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.22, assertsPassed;



implementation tcm_qla2xxx_make_lport($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i28: i32;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p8: ref;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i64;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i4 := tcm_qla2xxx_parse_wwn($p2, $p3, 1);
    call {:si_unique_call 416} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i4, 0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p9 := kzalloc(1248, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.18, $p3);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 1248)), $mul.ref(8, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i16);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.18, $p3);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_116 := tcm_qla2xxx_format_wwn($p19, 32, $i20);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 1248)), $mul.ref(64, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.18, $p3);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_117 := sprintf.ref.ref.i64($p23, .str.20, $i24);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i26 := tcm_qla2xxx_init_lport($p10);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 424} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p10);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.18, $p3);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i31 := qlt_lport_register($p29, $i30, 0, 0, tcm_qla2xxx_lport_register_cb);
    call {:si_unique_call 428} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 1248)), $mul.ref(1000, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p8 := $p33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vfree($p36);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} btree_destroy32($p37);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i28 := $i31;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p10);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} kfree($p38);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i28);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p40 := ERR_PTR($i39);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p8 := $p40;
    goto $bb3;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb10;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_115 := printk.ref(.str.19);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p14 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p8 := $p14;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p6 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;
}



const tcm_qla2xxx_drop_lport: ref;

axiom tcm_qla2xxx_drop_lport == $sub.ref(0, 288976);

procedure tcm_qla2xxx_drop_lport($p0: ref);
  free requires assertsPassed;
  modifies $M.19, $M.13, $M.24, $CurrAddr;



implementation tcm_qla2xxx_drop_lport($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_118: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(128, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} qlt_lport_deregister($p5);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(120, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vfree($p22);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p24 := btree_last32($p23, $p1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} btree_destroy32($p36);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} kfree($p37);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p28, $i29, $p31, $p32, $p33, $i34, $i35, vslice_dummy_var_118 := tcm_qla2xxx_drop_lport_loop_$bb10($p1, $p2, $p28, $i29, $p31, $p32, $p33, $i34, $i35, vslice_dummy_var_118);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.19, $p1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_118 := btree_remove32($p28, $i29);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p32 := btree_get_prev32($p31, $p1);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb12_dummy;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 856)), $mul.ref(40, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} qlt_stop_phase2($p19);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const tcm_qla2xxx_make_tpg: ref;

axiom tcm_qla2xxx_make_tpg == $sub.ref(0, 290008);

procedure tcm_qla2xxx_make_tpg($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation tcm_qla2xxx_make_tpg($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i16;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p12: ref;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 1000), 1248));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p6 := strstr($p2, .str.16);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p2);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i7, $i8);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i14 := kstrtoul($p13, 10, $p3);
    call {:si_unique_call 444} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.20, $p3);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 65535);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.20, $p3);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p25 := kzalloc(2368, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(8, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p5);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.20, $p3);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i16($i33);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i34);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p44 := $M.21;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1344)), $mul.ref(328, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(40, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p26);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i48 := core_tpg_register($p45, $p0, $p46, $p47, 0);
    call {:si_unique_call 452} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(992, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p25);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p26, $mul.ref(0, 2368)), $mul.ref(40, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p12 := $p52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p26);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} kfree($p50);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_120 := printk.ref(.str.18);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p30 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p12 := $p30;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_119 := printk.ref(.str.17);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p23 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p12 := $p23;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p18 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p12 := $p18;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p10 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb3;
}



const tcm_qla2xxx_drop_tpg: ref;

axiom tcm_qla2xxx_drop_tpg == $sub.ref(0, 291040);

procedure tcm_qla2xxx_drop_tpg($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_drop_tpg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 40), 2368));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(8, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1248)), $mul.ref(128, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_122 := core_tpg_deregister($p0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 1248)), $mul.ref(992, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} kfree($p24);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 856)), $mul.ref(36, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_121 := qlt_stop_phase1($p20);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const tcm_qla2xxx_make_nodeacl: ref;

axiom tcm_qla2xxx_make_nodeacl == $sub.ref(0, 292072);

procedure tcm_qla2xxx_make_nodeacl($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.22, assertsPassed;



implementation tcm_qla2xxx_make_nodeacl($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p8: ref;
  var vslice_dummy_var_123: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i4 := tcm_qla2xxx_parse_wwn($p2, $p3, 1);
    call {:si_unique_call 459} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i4, 0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $p9 := tcm_qla2xxx_alloc_fabric_acl($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p14 := core_tpg_add_initiator_node_acl($p0, $p9, $p2, 1);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i16 := IS_ERR($p15);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 465} {:cexpr "tmp___2"} boogie_si_record_i8($i17);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p14);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.18, $p3);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(8, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 64), 1272)), $mul.ref(16, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.18, $p3);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_123 := tcm_qla2xxx_format_wwn($p24, 32, $i25);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p8 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} tcm_qla2xxx_release_fabric_acl($p0, $p9);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p8 := $p14;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p12 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p8 := $p12;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p6 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;
}



const tcm_qla2xxx_drop_nodeacl: ref;

axiom tcm_qla2xxx_drop_nodeacl == $sub.ref(0, 293104);

procedure tcm_qla2xxx_drop_nodeacl($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_drop_nodeacl($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(320, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 64), 1272));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_124 := core_tpg_del_initiator_node_acl($p2, $p0, 1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} kfree($p6);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    return;
}



const core_tpg_del_initiator_node_acl: ref;

axiom core_tpg_del_initiator_node_acl == $sub.ref(0, 294136);

procedure core_tpg_del_initiator_node_acl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation core_tpg_del_initiator_node_acl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 470} {:cexpr "core_tpg_del_initiator_node_acl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 471} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 472} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 295168);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} free_($p0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 296200);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 474} $free($p0);
    return;
}



const tcm_qla2xxx_parse_wwn: ref;

axiom tcm_qla2xxx_parse_wwn == $sub.ref(0, 297232);

procedure tcm_qla2xxx_parse_wwn($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.18, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr;



implementation tcm_qla2xxx_parse_wwn($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i8;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i55: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i24;
  var $i96: i24;
  var $i97: i24;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i45: i64;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 476} {:cexpr "tcm_qla2xxx_parse_wwn:arg:strict"} boogie_si_record_i32($i2);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p1, 0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(31, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i6, $i7, $p8 := 0, 0, $p0;
    goto $bb1;

  $bb1:
    call $i9, $i10, $i11, $p12, $i13, $i14, $i15, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $p63, $i64, $i65, $i55, $i79, $i80, $i81, $i82, $p16, $i17, $i18, $p83, $i84, $i85, $i6, $i7, $p8, $p86, $i87, $i88 := tcm_qla2xxx_parse_wwn_loop_$bb1($p1, $i2, $i5, $i9, $i10, $i11, $p12, $i13, $i14, $i15, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $p63, $i64, $i65, $i55, $i79, $i80, $i81, $i82, $p16, $i17, $i18, $p83, $i84, $i85, $i6, $i7, $p8, $p86, $i87, $i88);
    goto $bb1_last;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 477} {:cexpr "c"} boogie_si_record_i8($i9);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 10);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i2, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i33, $i34 := $i7, $i6;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i9);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p37, $i38, $i39 := $p8, $i33, $i34;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i9);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i47, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 4);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i52 == 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i9);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i57, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 68);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p63, $i64, $i65 := $p8, $i33, $i34;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p28, $i29, $i30, $i31 := $p63, $i64, $i65, 3;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p89, .str.5);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p90, .str.13);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p91, .str.7);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p92, .str.14);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i95 := $load.i24($M.9, $p94);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i96 := $and.i24($i95, $sub.i24(0, 262144));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i97 := $or.i24($i96, 178);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p94, $i97);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p98, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.10, $p99);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 481} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i45 := $sub.i64(0, 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb48:
    assume $i104 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p28);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i107 := $sub.i64($i105, $i106);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_125 := __dynamic_pr_debug.ref.ref.i32.i64.i32.i32($p3, .str.14, $i31, $i107, $i30, $i29);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb36:
    assume $i62 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i9);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i67, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 2);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i72 == 1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i2, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p63, $i64, $i65 := $p8, $i33, $i34;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb38;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i9);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i76 := __tolower($i75);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i8($i76);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, $sub.i32(0, 87));
    call {:si_unique_call 485} {:cexpr "nibble"} boogie_si_record_i32($i78);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i55 := $i78;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.18, $p1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i80 := $shl.i64($i79, 4);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i55);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i82 := $or.i64($i80, $i81);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p1, $i82);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p8, $i33, $i34;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p16, $mul.ref(1, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i85 := $ugt.i64($i5, $i84);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p86, $i87, $i88 := $p83, $i17, $i18;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p28, $i29, $i30, $i31 := $p86, $i87, $i88, 4;
    goto $bb19;

  $bb45:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7, $p8 := $i18, $i17, $p83;
    goto $bb45_dummy;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb40;

  $bb33:
    assume $i52 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i53 := $sext.i8.i32($i9);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, $sub.i32(0, 48));
    call {:si_unique_call 482} {:cexpr "nibble"} boogie_si_record_i32($i54);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb35;

  $bb23:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i2, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p37);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i42, $i43);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb31;

  $bb25:
    assume $i40 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i38, 8);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb27;

  $bb28:
    assume $i41 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p28, $i29, $i30, $i31 := $p37, $i38, $i39, 2;
    goto $bb19;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i6, 1);
    call {:si_unique_call 478} {:cexpr "pos"} boogie_si_record_i32($i20);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i6, 2);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i7;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i32, $i20;
    goto $bb22;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 479} {:cexpr "byte"} boogie_si_record_i32($i22);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i7, 6);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i32 := $i22;
    goto $bb21;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i9);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 58);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p8, $i22;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p28, $i29, $i30, $i31 := $p26, $i27, 0, 1;
    goto $bb19;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p8, $i22, 0;
    goto $bb8;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p8, $mul.ref(1, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p8, $i7, $i6;
    goto $bb8;

  $bb45_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2591;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 298264);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const core_tpg_add_initiator_node_acl: ref;

axiom core_tpg_add_initiator_node_acl == $sub.ref(0, 299296);

procedure core_tpg_add_initiator_node_acl($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation core_tpg_add_initiator_node_acl($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} {:cexpr "core_tpg_add_initiator_node_acl:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p4 := external_alloc();
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const tcm_qla2xxx_format_wwn: ref;

axiom tcm_qla2xxx_format_wwn == $sub.ref(0, 300328);

procedure tcm_qla2xxx_format_wwn($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.22, $CurrAddr;



implementation tcm_qla2xxx_format_wwn($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 491} {:cexpr "tcm_qla2xxx_format_wwn:arg:len"} boogie_si_record_i64($i1);
    call {:si_unique_call 492} {:cexpr "tcm_qla2xxx_format_wwn:arg:wwn"} boogie_si_record_i64($i2);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} put_unaligned_be64($i2, $p4);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.22, $p5);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.22, $p8);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.22, $p11);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.22, $p14);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.22, $p17);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.22, $p20);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.22, $p23);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.22, $p26);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i29 := snprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0, $i1, .str.15, $i7, $i10, $i13, $i16, $i19, $i22, $i25, $i28);
    call {:si_unique_call 495} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;
}



const put_unaligned_be64: ref;

axiom put_unaligned_be64 == $sub.ref(0, 301360);

procedure put_unaligned_be64($i0: i64, $p1: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation put_unaligned_be64($i0: i64, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} {:cexpr "put_unaligned_be64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i2 := __fswab64($i0);
    call {:si_unique_call 498} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p3, $i2);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    return;
}



const __fswab64: ref;

axiom __fswab64 == $sub.ref(0, 302392);

procedure __fswab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __fswab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} {:cexpr "__fswab64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i1 := __arch_swab64($i0);
    call {:si_unique_call 501} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab64: ref;

axiom __arch_swab64 == $sub.ref(0, 303424);

procedure __arch_swab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __arch_swab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "__arch_swab64:arg:val"} boogie_si_record_i64($i0);
    call {:si_unique_call 503} $i1 := devirtbounce.5(0, $i0);
    call {:si_unique_call 504} {:cexpr "val"} boogie_si_record_i64($i1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __tolower: ref;

axiom __tolower == $sub.ref(0, 304456);

procedure __tolower($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation __tolower($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} {:cexpr "__tolower:arg:c"} boogie_si_record_i8($i0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i2, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 32);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 506} {:cexpr "c"} boogie_si_record_i8($i10);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const qlt_stop_phase1: ref;

axiom qlt_stop_phase1 == $sub.ref(0, 305488);

procedure qlt_stop_phase1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qlt_stop_phase1($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 1} true;
    call {:si_unique_call 507} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const core_tpg_deregister: ref;

axiom core_tpg_deregister == $sub.ref(0, 306520);

procedure core_tpg_deregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation core_tpg_deregister($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 509} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 510} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strstr: ref;

axiom strstr == $sub.ref(0, 307552);

procedure strstr($p0: ref, $p1: ref) returns ($r: ref);



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 308584);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 513} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 309616);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 515} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} ldv_check_alloc_flags($i1);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const core_tpg_register: ref;

axiom core_tpg_register == $sub.ref(0, 310648);

procedure core_tpg_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation core_tpg_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 517} {:cexpr "core_tpg_register:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 518} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 519} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 311680);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 312712);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 522} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 313744);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 524} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 525} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qlt_stop_phase2: ref;

axiom qlt_stop_phase2 == $sub.ref(0, 314776);

procedure qlt_stop_phase2($p0: ref);
  free requires assertsPassed;



implementation qlt_stop_phase2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    return;
}



const qlt_lport_deregister: ref;

axiom qlt_lport_deregister == $sub.ref(0, 315808);

procedure qlt_lport_deregister($p0: ref);
  free requires assertsPassed;



implementation qlt_lport_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 316840);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    return;
}



const btree_last32: ref;

axiom btree_last32 == $sub.ref(0, 317872);

procedure btree_last32($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.19, $CurrAddr;



implementation btree_last32($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p4 := btree_last($p3, btree_geo32, $p2);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.23, $p2);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, $i8);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const btree_get_prev32: ref;

axiom btree_get_prev32 == $sub.ref(0, 318904);

procedure btree_get_prev32($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.24, $M.19, $CurrAddr;



implementation btree_get_prev32($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.19, $p1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p2, $i4);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p6 := btree_get_prev($p5, btree_geo32, $p2);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.24, $p2);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, $i10);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const btree_destroy32: ref;

axiom btree_destroy32 == $sub.ref(0, 319936);

procedure btree_destroy32($p0: ref);
  free requires assertsPassed;



implementation btree_destroy32($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} btree_destroy($p1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    return;
}



const btree_destroy: ref;

axiom btree_destroy == $sub.ref(0, 320968);

procedure btree_destroy($p0: ref);
  free requires assertsPassed;



implementation btree_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    return;
}



const btree_get_prev: ref;

axiom btree_get_prev == $sub.ref(0, 322000);

procedure btree_get_prev($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation btree_get_prev($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p3 := external_alloc();
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const btree_last: ref;

axiom btree_last == $sub.ref(0, 323032);

procedure btree_last($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation btree_last($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p3 := external_alloc();
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 324064);

procedure sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const tcm_qla2xxx_init_lport: ref;

axiom tcm_qla2xxx_init_lport == $sub.ref(0, 325096);

procedure tcm_qla2xxx_init_lport($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, assertsPassed;



implementation tcm_qla2xxx_init_lport($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i6: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i3 := btree_init32($p2);
    call {:si_unique_call 535} {:cexpr "rc"} boogie_si_record_i32($i3);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p7 := ldv_vmalloc_36(524288);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p7);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 540} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p18, 0, 524288, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.5);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.23);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.7);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p22, .str.24);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.9, $p24);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1755);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p24, $i27);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p28, 0);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.10, $p29);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 542} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_128 := __dynamic_pr_debug.ref.ref.i64($p1, .str.24, 524288);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_127 := printk.ref.i64(.str.22, 524288);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} btree_destroy32($p15);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_126 := printk.ref(.str.21);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;
}



const tcm_qla2xxx_lport_register_cb: ref;

axiom tcm_qla2xxx_lport_register_cb == $sub.ref(0, 326128);

procedure tcm_qla2xxx_lport_register_cb($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: i32);



const qlt_lport_register: ref;

axiom qlt_lport_register == $sub.ref(0, 327160);

procedure qlt_lport_register($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qlt_lport_register($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} {:cexpr "qlt_lport_register:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 545} {:cexpr "qlt_lport_register:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 546} {:cexpr "qlt_lport_register:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 547} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 548} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const btree_init32: ref;

axiom btree_init32 == $sub.ref(0, 328192);

procedure btree_init32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation btree_init32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i2 := btree_init($p1);
    call {:si_unique_call 550} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_vmalloc_36: ref;

axiom ldv_vmalloc_36 == $sub.ref(0, 329224);

procedure ldv_vmalloc_36($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_36($i0: i64) returns ($r: ref)
{
  var vslice_dummy_var_129: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} {:cexpr "ldv_vmalloc_36:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} ldv_check_alloc_nonatomic();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_129 := vmalloc($i0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 330256);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 331288);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p1 := external_alloc();
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const btree_init: ref;

axiom btree_init == $sub.ref(0, 332320);

procedure btree_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation btree_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_unmap_sg: ref;

axiom pci_unmap_sg == $sub.ref(0, 333352);

procedure pci_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "pci_unmap_sg:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 560} {:cexpr "pci_unmap_sg:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} dma_unmap_sg_attrs($p7, $p1, $i2, $i3, $0.ref);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_unmap_sg_attrs: ref;

axiom dma_unmap_sg_attrs == $sub.ref(0, 334384);

procedure dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} {:cexpr "dma_unmap_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 563} {:cexpr "dma_unmap_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p5 := get_dma_ops($p0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 566} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 568} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} debug_dma_unmap_sg($p0, $p1, $i2, $i3);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 571} devirtbounce.6($p17, $p0, $p1, $i2, $i3, $p4);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 569} devirtbounce(0, .str.11, 65, 12);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_sg_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 335416);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 573} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 336448);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_sg: ref;

axiom debug_dma_unmap_sg == $sub.ref(0, 337480);

procedure debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "debug_dma_unmap_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 576} {:cexpr "debug_dma_unmap_sg:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    return;
}



const qlt_xmit_tm_rsp: ref;

axiom qlt_xmit_tm_rsp == $sub.ref(0, 338512);

procedure qlt_xmit_tm_rsp($p0: ref);
  free requires assertsPassed;



implementation qlt_xmit_tm_rsp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    return;
}



const target_reverse_dma_direction: ref;

axiom target_reverse_dma_direction == $sub.ref(0, 339544);

procedure target_reverse_dma_direction($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation target_reverse_dma_direction($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1024);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(12, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i5 := 3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i5 := 2;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const qlt_xmit_response: ref;

axiom qlt_xmit_response == $sub.ref(0, 340576);

procedure qlt_xmit_response($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation qlt_xmit_response($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} {:cexpr "qlt_xmit_response:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 578} {:cexpr "qlt_xmit_response:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 341608);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qlt_rdy_to_xfer: ref;

axiom qlt_rdy_to_xfer == $sub.ref(0, 342640);

procedure qlt_rdy_to_xfer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qlt_rdy_to_xfer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qlt_free_mcmd: ref;

axiom qlt_free_mcmd == $sub.ref(0, 343672);

procedure qlt_free_mcmd($p0: ref);
  free requires assertsPassed;



implementation qlt_free_mcmd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    return;
}



const qlt_free_cmd: ref;

axiom qlt_free_cmd == $sub.ref(0, 344704);

procedure qlt_free_cmd($p0: ref);
  free requires assertsPassed;



implementation qlt_free_cmd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    return;
}



const target_put_sess_cmd: ref;

axiom target_put_sess_cmd == $sub.ref(0, 345736);

procedure target_put_sess_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation target_put_sess_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 586} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 587} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fc_parse_pr_out_transport_id: ref;

axiom fc_parse_pr_out_transport_id == $sub.ref(0, 346768);

procedure fc_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p4 := external_alloc();
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fc_get_pr_transport_id_len: ref;

axiom fc_get_pr_transport_id_len == $sub.ref(0, 347800);

procedure fc_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 589} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 590} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fc_get_pr_transport_id: ref;

axiom fc_get_pr_transport_id == $sub.ref(0, 348832);

procedure fc_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 591} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 592} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fc_get_fabric_proto_ident: ref;

axiom fc_get_fabric_proto_ident == $sub.ref(0, 349864);

procedure fc_get_fabric_proto_ident($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation fc_get_fabric_proto_ident($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 593} $i1 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 594} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tcm_qla2xxx_wwn_show_attr_version: ref;

axiom tcm_qla2xxx_wwn_show_attr_version == $sub.ref(0, 350896);

procedure tcm_qla2xxx_wwn_show_attr_version($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation tcm_qla2xxx_wwn_show_attr_version($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p2 := utsname();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p3 := utsname();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 390)), $mul.ref(0, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 390)), $mul.ref(260, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i8 := sprintf.ref.ref.ref.ref.ref($p1, .str.35, .str.36, $p5, $p7);
    call {:si_unique_call 598} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const utsname: ref;

axiom utsname == $sub.ref(0, 351928);

procedure utsname() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation utsname() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p0 := get_current();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(2696, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(4, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 352960);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p0 := devirtbounce.7(0, current_task);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const tcm_qla2xxx_tpg_show_enable: ref;

axiom tcm_qla2xxx_tpg_show_enable == $sub.ref(0, 353992);

procedure tcm_qla2xxx_tpg_show_enable($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_show_enable($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i5 := atomic_read($p4);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i6 := snprintf.ref.i64.ref.i32($p1, 4096, .str.27, $i5);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const tcm_qla2xxx_tpg_store_enable: ref;

axiom tcm_qla2xxx_tpg_store_enable == $sub.ref(0, 355024);

procedure tcm_qla2xxx_tpg_store_enable($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_tpg_store_enable($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i13: i64;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 610} {:cexpr "tcm_qla2xxx_tpg_store_enable:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i10 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 612} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.20, $p3);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 1);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.20, $p3);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i38 := atomic_read($p37);
    call {:si_unique_call 618} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __init_work($p40, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 137438953408);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p7);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 627} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p44, $p45, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(32, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} lockdep_init_map($p47, .str.25, $p6, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(8, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} INIT_LIST_HEAD($p49);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, tcm_qla2xxx_undepend_tpg);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2192, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} init_completion($p52);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_132 := schedule_work($p53);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2192, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} wait_for_completion($p55);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.20, $p3);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i62 := atomic_read($p61);
    call {:si_unique_call 633} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 1);
    goto $bb3;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i59 := atomic_read($p58);
    call {:si_unique_call 631} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb3;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i23 := atomic_read($p22);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __init_work($p25, 0);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 137438953408);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p5);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 620} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p29, $p30, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(32, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} lockdep_init_map($p32, .str.25, $p4, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(8, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} INIT_LIST_HEAD($p34);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(2288, 1)), $mul.ref(24, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, tcm_qla2xxx_depend_tpg);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 17);
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.20, $p3);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.20, $p3);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_131 := printk.ref.i64(.str.1, $i18);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_130 := printk.ref.i32(.str, $i10);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb3;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 356056);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tcm_qla2xxx_depend_tpg: ref;

axiom tcm_qla2xxx_depend_tpg == $sub.ref(0, 357088);

procedure tcm_qla2xxx_depend_tpg($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_depend_tpg($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(8, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1248)), $mul.ref(128, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(40, 1)), $mul.ref(1296, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(40, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i14 := configfs_depend_item($p11, $p13);
    call {:si_unique_call 635} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(2192, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} complete_($p17);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} atomic_set($p16, 1);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} qlt_enable_vha($p7);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_qla2xxx_undepend_tpg: ref;

axiom tcm_qla2xxx_undepend_tpg == $sub.ref(0, 358120);

procedure tcm_qla2xxx_undepend_tpg($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_undepend_tpg($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(8, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1248)), $mul.ref(128, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i11 := qlt_stop_phase1($p10);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(2192, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} complete_($p20);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} atomic_set($p13, 0);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(40, 1)), $mul.ref(1296, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    $p19 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2288), 2368)), $mul.ref(40, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} configfs_undepend_item($p17, $p19);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 359152);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} __init_waitqueue_head($p3, .str.26, $p1);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 360184);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i2 := queue_work($p1, $p0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 361216);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 362248);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 363280);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    return;
}



const configfs_undepend_item: ref;

axiom configfs_undepend_item == $sub.ref(0, 364312);

procedure configfs_undepend_item($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation configfs_undepend_item($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    return;
}



const configfs_depend_item: ref;

axiom configfs_depend_item == $sub.ref(0, 365344);

procedure configfs_depend_item($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation configfs_depend_item($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qlt_enable_vha: ref;

axiom qlt_enable_vha == $sub.ref(0, 366376);

procedure qlt_enable_vha($p0: ref);
  free requires assertsPassed;



implementation qlt_enable_vha($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_tpg_attrib_show_generate_node_acls: ref;

axiom tcm_qla2xxx_tpg_attrib_show_generate_node_acls == $sub.ref(0, 367408);

procedure tcm_qla2xxx_tpg_attrib_show_generate_node_acls($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_attrib_show_generate_node_acls($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i7 := sprintf.ref.ref.i32($p1, .str.4, $i6);
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcm_qla2xxx_tpg_attrib_store_generate_node_acls: ref;

axiom tcm_qla2xxx_tpg_attrib_store_generate_node_acls == $sub.ref(0, 368440);

procedure tcm_qla2xxx_tpg_attrib_store_generate_node_acls($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_tpg_attrib_store_generate_node_acls($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i9: i64;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 654} {:cexpr "tcm_qla2xxx_tpg_attrib_store_generate_node_acls:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 40), 2368));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i6 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.20, $p3);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i11 := tcm_qla2xxx_set_attrib_generate_node_acls($p5, $i10);
    call {:si_unique_call 659} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_133 := printk.ref.i32(.str.2, $i6);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 22);
    goto $bb3;
}



const tcm_qla2xxx_set_attrib_generate_node_acls: ref;

axiom tcm_qla2xxx_set_attrib_generate_node_acls == $sub.ref(0, 369472);

procedure tcm_qla2xxx_set_attrib_generate_node_acls($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_set_attrib_generate_node_acls($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "tcm_qla2xxx_set_attrib_generate_node_acls:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i1, 1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_134 := printk.ref.i64(.str.3, $i1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;
}



const tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls: ref;

axiom tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls == $sub.ref(0, 370504);

procedure tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i7 := sprintf.ref.ref.i32($p1, .str.4, $i6);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls: ref;

axiom tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls == $sub.ref(0, 371536);

procedure tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i9: i64;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 665} {:cexpr "tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 40), 2368));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i6 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 667} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.20, $p3);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i11 := tcm_qla2xxx_set_attrib_cache_dynamic_acls($p5, $i10);
    call {:si_unique_call 670} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_135 := printk.ref.i32(.str.2, $i6);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 22);
    goto $bb3;
}



const tcm_qla2xxx_set_attrib_cache_dynamic_acls: ref;

axiom tcm_qla2xxx_set_attrib_cache_dynamic_acls == $sub.ref(0, 372568);

procedure tcm_qla2xxx_set_attrib_cache_dynamic_acls($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_set_attrib_cache_dynamic_acls($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "tcm_qla2xxx_set_attrib_cache_dynamic_acls:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i1, 1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_136 := printk.ref.i64(.str.3, $i1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;
}



const tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect: ref;

axiom tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect == $sub.ref(0, 373600);

procedure tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i7 := sprintf.ref.ref.i32($p1, .str.4, $i6);
    call {:si_unique_call 674} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect: ref;

axiom tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect == $sub.ref(0, 374632);

procedure tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i9: i64;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 676} {:cexpr "tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 40), 2368));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i6 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 678} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.20, $p3);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i11 := tcm_qla2xxx_set_attrib_demo_mode_write_protect($p5, $i10);
    call {:si_unique_call 681} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_137 := printk.ref.i32(.str.2, $i6);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 22);
    goto $bb3;
}



const tcm_qla2xxx_set_attrib_demo_mode_write_protect: ref;

axiom tcm_qla2xxx_set_attrib_demo_mode_write_protect == $sub.ref(0, 375664);

procedure tcm_qla2xxx_set_attrib_demo_mode_write_protect($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_set_attrib_demo_mode_write_protect($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} {:cexpr "tcm_qla2xxx_set_attrib_demo_mode_write_protect:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i1, 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_138 := printk.ref.i64(.str.3, $i1);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;
}



const tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect: ref;

axiom tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect == $sub.ref(0, 376696);

procedure tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i7 := sprintf.ref.ref.i32($p1, .str.4, $i6);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect: ref;

axiom tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect == $sub.ref(0, 377728);

procedure tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i9: i64;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 687} {:cexpr "tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 40), 2368));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i6 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 689} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.20, $p3);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i11 := tcm_qla2xxx_set_attrib_prod_mode_write_protect($p5, $i10);
    call {:si_unique_call 692} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_139 := printk.ref.i32(.str.2, $i6);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 22);
    goto $bb3;
}



const tcm_qla2xxx_set_attrib_prod_mode_write_protect: ref;

axiom tcm_qla2xxx_set_attrib_prod_mode_write_protect == $sub.ref(0, 378760);

procedure tcm_qla2xxx_set_attrib_prod_mode_write_protect($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_set_attrib_prod_mode_write_protect($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} {:cexpr "tcm_qla2xxx_set_attrib_prod_mode_write_protect:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i1, 1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_140 := printk.ref.i64(.str.3, $i1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;
}



const tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only: ref;

axiom tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only == $sub.ref(0, 379792);

procedure tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i7 := sprintf.ref.ref.i32($p1, .str.4, $i6);
    call {:si_unique_call 696} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only: ref;

axiom tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only == $sub.ref(0, 380824);

procedure tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i9: i64;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 698} {:cexpr "tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 40), 2368));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i6 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 700} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.20, $p3);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i11 := tcm_qla2xxx_set_attrib_demo_mode_login_only($p5, $i10);
    call {:si_unique_call 703} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_141 := printk.ref.i32(.str.2, $i6);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 22);
    goto $bb3;
}



const tcm_qla2xxx_set_attrib_demo_mode_login_only: ref;

axiom tcm_qla2xxx_set_attrib_demo_mode_login_only == $sub.ref(0, 381856);

procedure tcm_qla2xxx_set_attrib_demo_mode_login_only($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tcm_qla2xxx_set_attrib_demo_mode_login_only($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} {:cexpr "tcm_qla2xxx_set_attrib_demo_mode_login_only:arg:val"} boogie_si_record_i64($i1);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i1);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i1, 1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_142 := printk.ref.i64(.str.3, $i1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;
}



const tcm_qla2xxx_npiv_get_fabric_name: ref;

axiom tcm_qla2xxx_npiv_get_fabric_name == $sub.ref(0, 382888);

procedure tcm_qla2xxx_npiv_get_fabric_name() returns ($r: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_npiv_get_fabric_name() returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $r := .str.28;
    return;
}



const tcm_qla2xxx_npiv_make_lport: ref;

axiom tcm_qla2xxx_npiv_make_lport == $sub.ref(0, 383920);

procedure tcm_qla2xxx_npiv_make_lport($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.29, $CurrAddr, $M.36, assertsPassed;



implementation tcm_qla2xxx_npiv_make_lport($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i46: i32;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p16: ref;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p6 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_143 := snprintf.ref.i64.ref.ref($p7, 128, .str.29, $p2);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p6);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p10 := strchr($p9, 64);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p6);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i19 := tcm_qla2xxx_parse_wwn($p18, $p3, 1);
    call {:si_unique_call 715} {:cexpr "tmp___3"} boogie_si_record_i64($i19);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i20 := $slt.i64($i19, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i23 := strlen($p17);
    call {:si_unique_call 718} {:cexpr "tmp___5"} boogie_si_record_i64($i23);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i25 := tcm_qla2xxx_npiv_parse_wwn($p17, $i24, $p4, $p5);
    call {:si_unique_call 720} {:cexpr "tmp___6"} boogie_si_record_i32($i25);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p29 := kzalloc(1248, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.29, $p4);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref(0, 1248)), $mul.ref(16, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i36);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.29, $p5);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 1248)), $mul.ref(24, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p30, $mul.ref(0, 1248)), $mul.ref(64, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.29, $p4);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_146 := sprintf.ref.ref.i64($p41, .str.20, $i42);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i44 := tcm_qla2xxx_init_lport($p30);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 727} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p30);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.18, $p3);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.29, $p4);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.29, $p5);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i51 := qlt_lport_register($p47, $i48, $i49, $i50, tcm_qla2xxx_lport_register_npiv_cb);
    call {:si_unique_call 731} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p30, $mul.ref(0, 1248)), $mul.ref(1000, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p16 := $p53;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p30, $mul.ref(0, 1248)), $mul.ref(120, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vfree($p56);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p30, $mul.ref(0, 1248)), $mul.ref(96, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} btree_destroy32($p57);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i46 := $i51;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p30);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} kfree($p58);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i46);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p60 := ERR_PTR($i59);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p16 := $p60;
    goto $bb3;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    goto $bb16;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_145 := printk.ref(.str.31);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p34 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p16 := $p34;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p27 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p16 := $p27;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p21 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p16 := $p21;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_144 := printk.ref(.str.30);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p14 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p16 := $p14;
    goto $bb3;
}



const tcm_qla2xxx_npiv_drop_lport: ref;

axiom tcm_qla2xxx_npiv_drop_lport == $sub.ref(0, 384952);

procedure tcm_qla2xxx_npiv_drop_lport($p0: ref);
  free requires assertsPassed;



implementation tcm_qla2xxx_npiv_drop_lport($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1000), 1248));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(128, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1344)), $mul.ref(528, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 12080)), $mul.ref(0, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $p9 := pci_get_drvdata($p8);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1344)), $mul.ref(120, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} scsi_host_put($p12);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1344)), $mul.ref(496, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_147 := fc_vport_terminate($p14);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 1344)), $mul.ref(120, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} scsi_host_put($p17);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} kfree($p18);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_npiv_make_tpg: ref;

axiom tcm_qla2xxx_npiv_make_tpg == $sub.ref(0, 385984);

procedure tcm_qla2xxx_npiv_make_tpg($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation tcm_qla2xxx_npiv_make_tpg($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i16;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p12: ref;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 1000), 1248));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p6 := strstr($p2, .str.16);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p2);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i7, $i8);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i14 := kstrtoul($p13, 10, $p3);
    call {:si_unique_call 743} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.20, $p3);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 65535);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p20 := kzalloc(2368, 208);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(8, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p5);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.20, $p3);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i16($i28);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i29);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 1);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p39 := $M.30;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1344)), $mul.ref(328, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(40, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p21);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i43 := core_tpg_register($p40, $p0, $p41, $p42, 0);
    call {:si_unique_call 749} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(992, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p20);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p21, $mul.ref(0, 2368)), $mul.ref(40, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p12 := $p47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p21);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} kfree($p45);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_148 := printk.ref(.str.18);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p25 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p12 := $p25;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p18 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p12 := $p18;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p10 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb3;
}



const scsi_host_put: ref;

axiom scsi_host_put == $sub.ref(0, 387016);

procedure scsi_host_put($p0: ref);
  free requires assertsPassed;



implementation scsi_host_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    return;
}



const fc_vport_terminate: ref;

axiom fc_vport_terminate == $sub.ref(0, 388048);

procedure fc_vport_terminate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_vport_terminate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strchr: ref;

axiom strchr == $sub.ref(0, 389080);

procedure strchr($p0: ref, $i1: i32) returns ($r: ref);



const strlen: ref;

axiom strlen == $sub.ref(0, 390112);

procedure strlen($p0: ref) returns ($r: i64);



const tcm_qla2xxx_npiv_parse_wwn: ref;

axiom tcm_qla2xxx_npiv_parse_wwn == $sub.ref(0, 391144);

procedure tcm_qla2xxx_npiv_parse_wwn($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.36, $CurrAddr;



implementation tcm_qla2xxx_npiv_parse_wwn($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} {:cexpr "tcm_qla2xxx_npiv_parse_wwn:arg:count"} boogie_si_record_i64($i1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i1);
    call {:si_unique_call 754} {:cexpr "cnt"} boogie_si_record_i32($i4);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p2, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p3, 0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref($i6, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 10);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i4, 1);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref($i12, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 33);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p0, $mul.ref(16, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 58);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i25 := tcm_qla2xxx_npiv_extract_wwn($p0, $p2);
    call {:si_unique_call 757} {:cexpr "rc"} boogie_si_record_i32($i25);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p0, $mul.ref(17, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i28 := tcm_qla2xxx_npiv_extract_wwn($p27, $p3);
    call {:si_unique_call 759} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i24 := $i28;
    goto $bb12;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i4, 1);
    call {:si_unique_call 755} {:cexpr "cnt"} boogie_si_record_i32($i17);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const tcm_qla2xxx_lport_register_npiv_cb: ref;

axiom tcm_qla2xxx_lport_register_npiv_cb == $sub.ref(0, 392176);

procedure tcm_qla2xxx_lport_register_npiv_cb($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: i32);



const qla_tgt_mode_enabled: ref;

axiom qla_tgt_mode_enabled == $sub.ref(0, 393208);

procedure qla_tgt_mode_enabled($p0: ref) returns ($r: i1);



const fc_vport_create: ref;

axiom fc_vport_create == $sub.ref(0, 394240);

procedure fc_vport_create($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);



const scsi_host_get: ref;

axiom scsi_host_get == $sub.ref(0, 395272);

procedure scsi_host_get($p0: ref) returns ($r: ref);



const tcm_qla2xxx_npiv_extract_wwn: ref;

axiom tcm_qla2xxx_npiv_extract_wwn == $sub.ref(0, 396304);

procedure tcm_qla2xxx_npiv_extract_wwn($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.29, $CurrAddr;



implementation tcm_qla2xxx_npiv_extract_wwn($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i8;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p25: ref;
  var $i26: i64;
  var $i15: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.36;
    call {:si_unique_call 761} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p3, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.36 := cmdloc_dummy_var_29;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p4, $i5, $i6 := $p0, 0, 0;
    goto $bb1;

  $bb1:
    call $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $p4, $i5, $i6 := tcm_qla2xxx_npiv_extract_wwn_loop_$bb1($p2, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $p4, $i5, $i6);
    goto $bb1_last;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref(1, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p4);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i11 := hex_to_bin($i10);
    call {:si_unique_call 763} {:cexpr "value"} boogie_si_record_i32($i11);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i12 := $sge.i32($i11, 0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i5, 4);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, $i11);
    call {:si_unique_call 764} {:cexpr "j"} boogie_si_record_i32($i14);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i6, 1);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i6, 1);
    call {:si_unique_call 765} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 15);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i26 := wwn_to_u64($p25);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p1, $i26);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p4, $i5, $i6 := $p7, $i22, $i23;
    goto $bb10_dummy;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i14);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i32($i6, 2);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i20, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.36 := $store.i8($M.36, $p21, $i18);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3699;
}



const hex_to_bin: ref;

axiom hex_to_bin == $sub.ref(0, 397336);

procedure hex_to_bin($i0: i8) returns ($r: i32);
  free requires assertsPassed;



implementation hex_to_bin($i0: i8) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} {:cexpr "hex_to_bin:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 768} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 769} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wwn_to_u64: ref;

axiom wwn_to_u64 == $sub.ref(0, 398368);

procedure wwn_to_u64($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation wwn_to_u64($p0: ref) returns ($r: i64)
{
  var $i1: i8;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.36, $p0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i3 := $shl.i64($i2, 56);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.36, $p4);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 48);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i3, $i7);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.36, $p9);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i64($i10);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i12 := $shl.i64($i11, 40);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i13 := $or.i64($i8, $i12);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.36, $p14);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i17 := $shl.i64($i16, 32);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i18 := $or.i64($i13, $i17);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.36, $p19);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i22 := $shl.i64($i21, 24);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i18, $i22);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.36, $p24);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i27 := $shl.i64($i26, 16);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i28 := $or.i64($i23, $i27);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.36, $p29);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i32 := $shl.i64($i31, 8);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i28, $i32);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.36, $p34);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i37 := $or.i64($i33, $i36);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;
}



const tcm_qla2xxx_npiv_tpg_show_enable: ref;

axiom tcm_qla2xxx_npiv_tpg_show_enable == $sub.ref(0, 399400);

procedure tcm_qla2xxx_npiv_tpg_show_enable($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation tcm_qla2xxx_npiv_tpg_show_enable($p0: ref, $p1: ref) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i2 := tcm_qla2xxx_tpg_show_enable($p0, $p1);
    call {:si_unique_call 771} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tcm_qla2xxx_npiv_tpg_store_enable: ref;

axiom tcm_qla2xxx_npiv_tpg_store_enable == $sub.ref(0, 400432);

procedure tcm_qla2xxx_npiv_tpg_store_enable($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation tcm_qla2xxx_npiv_tpg_store_enable($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i15: i64;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 773} {:cexpr "tcm_qla2xxx_npiv_tpg_store_enable:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2152)), $mul.ref(1304, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(128, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i12 := kstrtoul($p1, 0, $p3);
    call {:si_unique_call 775} {:cexpr "rc"} boogie_si_record_i32($i12);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.20, $p3);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.20, $p3);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i29 := atomic_read($p28);
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} atomic_set($p31, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1344)), $mul.ref(536, 1)), $mul.ref(344, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_151 := qlt_stop_phase1($p34);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i15 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i15 := $i2;
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i25 := atomic_read($p24);
    call {:si_unique_call 779} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 40), 2368)), $mul.ref(4, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} atomic_set($p27, 1);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} qlt_enable_vha($p9);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 17);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.20, $p3);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.20, $p3);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_150 := printk.ref.i64(.str.1, $i20);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_149 := printk.ref.i32(.str, $i12);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 401464);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 786} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 788} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 789} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p4 := calloc(1, $i0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 791} __VERIFIER_assume($i7);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_target_fabric_tpg_attrib_attribute_9: ref;

axiom ldv_initialize_target_fabric_tpg_attrib_attribute_9 == $sub.ref(0, 402496);

procedure ldv_initialize_target_fabric_tpg_attrib_attribute_9();
  free requires assertsPassed;
  modifies $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attrib_attribute_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_fabric_tpg_attrib_attribute_10: ref;

axiom ldv_initialize_target_fabric_tpg_attrib_attribute_10 == $sub.ref(0, 403528);

procedure ldv_initialize_target_fabric_tpg_attrib_attribute_10();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attrib_attribute_10()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_core_fabric_ops_2: ref;

axiom ldv_initialize_target_core_fabric_ops_2 == $sub.ref(0, 404560);

procedure ldv_initialize_target_core_fabric_ops_2();
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.0, $CurrAddr;



implementation ldv_initialize_target_core_fabric_ops_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p0 := ldv_zalloc(696);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p2 := ldv_zalloc(832);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.40 := $p2;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p4 := ldv_zalloc(112);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.41 := $p4;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p6 := ldv_zalloc(2152);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.42 := $p6;
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p8 := ldv_zalloc(1208);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.43 := $p8;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p10 := ldv_zalloc(248);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.44 := $p10;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p12 := ldv_zalloc(1536);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.45 := $p12;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_fabric_tpg_attrib_attribute_8: ref;

axiom ldv_initialize_target_fabric_tpg_attrib_attribute_8 == $sub.ref(0, 405592);

procedure ldv_initialize_target_fabric_tpg_attrib_attribute_8();
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attrib_attribute_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.46 := $p0;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_fabric_tpg_attribute_7: ref;

axiom ldv_initialize_target_fabric_tpg_attribute_7 == $sub.ref(0, 406624);

procedure ldv_initialize_target_fabric_tpg_attribute_7();
  free requires assertsPassed;
  modifies $M.47, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attribute_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_fabric_tpg_attribute_6: ref;

axiom ldv_initialize_target_fabric_tpg_attribute_6 == $sub.ref(0, 407656);

procedure ldv_initialize_target_fabric_tpg_attribute_6();
  free requires assertsPassed;
  modifies $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attribute_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.48 := $p0;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_fabric_tpg_attrib_attribute_11: ref;

axiom ldv_initialize_target_fabric_tpg_attrib_attribute_11 == $sub.ref(0, 408688);

procedure ldv_initialize_target_fabric_tpg_attrib_attribute_11();
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attrib_attribute_11()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 409720);

procedure choose_timer_1($p0: ref);
  free requires assertsPassed;



implementation choose_timer_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.51, $p1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.52, $p3);
    call {:si_unique_call 806} devirtbounce.8($p2, $i4);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_qla_tgt_func_tmpl_5: ref;

axiom ldv_initialize_qla_tgt_func_tmpl_5 == $sub.ref(0, 410752);

procedure ldv_initialize_qla_tgt_func_tmpl_5();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.56, $M.57, $M.0, $CurrAddr;



implementation ldv_initialize_qla_tgt_func_tmpl_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p0 := ldv_zalloc(1000);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p2 := ldv_zalloc(1344);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p4 := ldv_zalloc(1256);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.56 := $p4;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p6 := ldv_zalloc(168);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.57 := $p6;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_fabric_tpg_attrib_attribute_12: ref;

axiom ldv_initialize_target_fabric_tpg_attrib_attribute_12 == $sub.ref(0, 411784);

procedure ldv_initialize_target_fabric_tpg_attrib_attribute_12();
  free requires assertsPassed;
  modifies $M.58, $M.0, $CurrAddr;



implementation ldv_initialize_target_fabric_tpg_attrib_attribute_12()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p0 := ldv_zalloc(2152);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.58 := $p0;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_target_core_fabric_ops_3: ref;

axiom ldv_initialize_target_core_fabric_ops_3 == $sub.ref(0, 412816);

procedure ldv_initialize_target_core_fabric_ops_3();
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.0, $CurrAddr;



implementation ldv_initialize_target_core_fabric_ops_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p0 := ldv_zalloc(832);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.59 := $p0;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $p2 := ldv_zalloc(696);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.60 := $p2;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p4 := ldv_zalloc(112);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.61 := $p4;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p6 := ldv_zalloc(2152);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.62 := $p6;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p8 := ldv_zalloc(1208);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.63 := $p8;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p10 := ldv_zalloc(1536);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.64 := $p10;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p12 := ldv_zalloc(248);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.65 := $p12;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 413848);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.18, $M.94, $M.54, $M.55, $M.56, $M.57, $M.38, $M.46, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.58, $M.37, $M.47, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.49, $M.48, $M.4, $M.93, $M.2, $M.95, $M.21, $M.30, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $CurrAddr, $M.24, $M.29, $M.14, $M.15, $M.16, $M.22, $M.36, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $i344: i32;
  var $i345: i1;
  var $p346: ref;
  var $i348: i32;
  var $i349: i1;
  var $p350: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i356: i32;
  var $i357: i1;
  var $i359: i32;
  var $i360: i1;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $i384: i32;
  var $i385: i1;
  var $p386: ref;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $p395: ref;
  var $i397: i32;
  var $i398: i1;
  var $p399: ref;
  var $p400: ref;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $i405: i32;
  var $i406: i1;
  var $p407: ref;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $i422: i32;
  var $i423: i1;
  var $p424: ref;
  var $p425: ref;
  var $i427: i32;
  var $i428: i1;
  var $p429: ref;
  var $p430: ref;
  var $i432: i32;
  var $i433: i1;
  var $p434: ref;
  var $i436: i32;
  var $i437: i1;
  var $p438: ref;
  var $i440: i32;
  var $i441: i1;
  var $p442: ref;
  var $i444: i32;
  var $i445: i1;
  var $p446: ref;
  var $i448: i32;
  var $i449: i1;
  var $i451: i32;
  var $i452: i32;
  var $i453: i32;
  var $i454: i1;
  var $i456: i32;
  var $i457: i32;
  var $i458: i32;
  var $i459: i1;
  var $i460: i32;
  var $i461: i1;
  var $i462: i1;
  var $i463: i1;
  var $i464: i32;
  var $i465: i1;
  var $p466: ref;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $i472: i32;
  var $i473: i1;
  var $i474: i32;
  var $i475: i1;
  var $i476: i1;
  var $i477: i1;
  var $i478: i32;
  var $i479: i1;
  var $p480: ref;
  var $i482: i32;
  var $i483: i1;
  var $p484: ref;
  var $i486: i32;
  var $i487: i1;
  var $i488: i32;
  var $i489: i1;
  var $i490: i1;
  var $i491: i1;
  var $i492: i32;
  var $i493: i1;
  var $p494: ref;
  var $i496: i32;
  var $i497: i1;
  var $p498: ref;
  var $i500: i32;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $i504: i1;
  var $i505: i1;
  var $i506: i1;
  var $i507: i1;
  var $i508: i1;
  var $i509: i1;
  var $i510: i1;
  var $i511: i1;
  var $i512: i1;
  var $i513: i1;
  var $i514: i1;
  var $i515: i1;
  var $i516: i1;
  var $i517: i1;
  var $i518: i1;
  var $i519: i1;
  var $i520: i1;
  var $i521: i1;
  var $i522: i1;
  var $i523: i1;
  var $i524: i1;
  var $i525: i1;
  var $i526: i1;
  var $i527: i1;
  var $i528: i1;
  var $i529: i1;
  var $i530: i1;
  var $i531: i1;
  var $i532: i1;
  var $i533: i1;
  var $i534: i1;
  var $i535: i1;
  var $i536: i1;
  var $i537: i1;
  var $i538: i1;
  var $i539: i1;
  var $i540: i1;
  var $i541: i1;
  var $i542: i1;
  var $i543: i32;
  var $i544: i1;
  var $p545: ref;
  var $i547: i32;
  var $i548: i1;
  var $p549: ref;
  var $i551: i32;
  var $i552: i1;
  var $p553: ref;
  var $i555: i32;
  var $i556: i1;
  var $p557: ref;
  var $i558: i32;
  var $i559: i1;
  var $p560: ref;
  var $i561: i32;
  var $i562: i1;
  var $p563: ref;
  var $i565: i32;
  var $i566: i1;
  var $p567: ref;
  var $i569: i32;
  var $i570: i1;
  var $p571: ref;
  var $i573: i32;
  var $i574: i1;
  var $p575: ref;
  var $i577: i32;
  var $i578: i1;
  var $p579: ref;
  var $i581: i32;
  var $i582: i1;
  var $p583: ref;
  var $i585: i32;
  var $i586: i1;
  var $p587: ref;
  var $i588: i32;
  var $i589: i1;
  var $p590: ref;
  var $i591: i32;
  var $i592: i1;
  var $p593: ref;
  var $i595: i32;
  var $i596: i1;
  var $p597: ref;
  var $i599: i32;
  var $i600: i1;
  var $p601: ref;
  var $i603: i32;
  var $i604: i1;
  var $p605: ref;
  var $i607: i32;
  var $i608: i1;
  var $p609: ref;
  var $i610: i32;
  var $i611: i1;
  var $p612: ref;
  var $i613: i32;
  var $i614: i1;
  var $p615: ref;
  var $i616: i32;
  var $i617: i1;
  var $p618: ref;
  var $i619: i32;
  var $i620: i1;
  var $p621: ref;
  var $i623: i32;
  var $i624: i1;
  var $p625: ref;
  var $i627: i32;
  var $i628: i1;
  var $p629: ref;
  var $i630: i32;
  var $i631: i1;
  var $p632: ref;
  var $i633: i32;
  var $i634: i1;
  var $p635: ref;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $i641: i32;
  var $i642: i1;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $i647: i32;
  var $i648: i1;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $i653: i32;
  var $i654: i1;
  var $p655: ref;
  var $i656: i32;
  var $i657: i1;
  var $p658: ref;
  var $i659: i32;
  var $i660: i1;
  var $p661: ref;
  var $i663: i32;
  var $i664: i1;
  var $p665: ref;
  var $i667: i32;
  var $i668: i1;
  var $p669: ref;
  var $i671: i32;
  var $i672: i1;
  var $p673: ref;
  var $i675: i32;
  var $i676: i1;
  var $p677: ref;
  var $p678: ref;
  var $i679: i32;
  var $i680: i1;
  var $p681: ref;
  var $p682: ref;
  var $i683: i32;
  var $i684: i1;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $i689: i32;
  var $i690: i1;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $i695: i32;
  var $i696: i1;
  var $p697: ref;
  var $i699: i32;
  var $i700: i1;
  var $p701: ref;
  var $i703: i32;
  var $i704: i1;
  var $p705: ref;
  var $i707: i32;
  var $i708: i1;
  var $p709: ref;
  var $i711: i32;
  var $i712: i1;
  var $p713: ref;
  var $i715: i32;
  var $i716: i1;
  var $p717: ref;
  var $i719: i32;
  var $i720: i1;
  var $p721: ref;
  var $i723: i32;
  var $i724: i1;
  var $p725: ref;
  var $i727: i32;
  var $i728: i1;
  var $p729: ref;
  var $i731: i32;
  var $i732: i1;
  var $p733: ref;
  var $i735: i32;
  var $i736: i1;
  var $i738: i32;
  var $i739: i1;
  var $i741: i32;
  var $i742: i1;
  var $p743: ref;
  var $i744: i32;
  var $i745: i1;
  var $p746: ref;
  var $i747: i32;
  var $i748: i1;
  var $p749: ref;
  var $i751: i32;
  var $i752: i1;
  var $p753: ref;
  var $i755: i32;
  var $i756: i1;
  var $p757: ref;
  var $i759: i32;
  var $i760: i1;
  var $p761: ref;
  var $i763: i32;
  var $i764: i1;
  var $p765: ref;
  var $i767: i32;
  var $i768: i1;
  var $p769: ref;
  var $i771: i32;
  var $i772: i1;
  var $p773: ref;
  var $p774: ref;
  var $i776: i32;
  var $i777: i1;
  var $p778: ref;
  var $p779: ref;
  var $i781: i32;
  var $i782: i1;
  var $p783: ref;
  var $i784: i32;
  var $i785: i1;
  var $p786: ref;
  var $i787: i32;
  var $i788: i1;
  var $p789: ref;
  var $i790: i32;
  var $i791: i1;
  var $p792: ref;
  var $i793: i32;
  var $i794: i1;
  var $p795: ref;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $i801: i32;
  var $i802: i1;
  var $p803: ref;
  var $p804: ref;
  var $i806: i32;
  var $i807: i1;
  var $p808: ref;
  var $p809: ref;
  var $i811: i32;
  var $i812: i1;
  var $p813: ref;
  var $i815: i32;
  var $i816: i1;
  var $p817: ref;
  var $i819: i32;
  var $i820: i1;
  var $p821: ref;
  var $i823: i32;
  var $i824: i1;
  var $p825: ref;
  var $i827: i32;
  var $i828: i1;
  var $i830: i32;
  var $i831: i32;
  var $i832: i32;
  var $i833: i1;
  var $i835: i32;
  var $i836: i32;
  var $i837: i32;
  var $i838: i1;
  var $i839: i32;
  var $i840: i1;
  var $i841: i1;
  var $i842: i1;
  var $i843: i32;
  var $i844: i1;
  var $p845: ref;
  var $i847: i32;
  var $i848: i1;
  var $p849: ref;
  var $i851: i32;
  var $i852: i1;
  var $p853: ref;
  var $i854: i32;
  var $i855: i1;
  var $i856: i32;
  var $i857: i1;
  var $i858: i32;
  var $i859: i1;
  var $i861: i32;
  var $i862: i1;
  var $i863: i32;
  var $i864: i1;
  var $i865: i1;
  var $i866: i1;
  var $i867: i32;
  var $i868: i1;
  var $i869: i32;
  var $i870: i1;
  var $i871: i32;
  var $i872: i1;
  var $i873: i32;
  var $i874: i32;
  var $i875: i1;
  var $i876: i32;
  var $i877: i1;
  var $i878: i32;
  var $i879: i1;
  var $i880: i32;
  var $i881: i1;
  var $i882: i1;
  var $i883: i1;
  var $i884: i32;
  var $i885: i1;
  var $p886: ref;
  var $i888: i32;
  var $i889: i1;
  var $p890: ref;
  var $i892: i32;
  var $i893: i1;
  var $i894: i32;
  var $i895: i1;
  var $i896: i1;
  var $i897: i1;
  var $i898: i1;
  var $i899: i1;
  var $i900: i1;
  var $i901: i1;
  var $i902: i1;
  var $i903: i1;
  var $i904: i1;
  var $i905: i1;
  var $i906: i1;
  var $i907: i1;
  var $i908: i1;
  var $i909: i1;
  var $i910: i32;
  var $i911: i1;
  var $p912: ref;
  var $i913: i32;
  var $i914: i1;
  var $p915: ref;
  var $i917: i32;
  var $i918: i1;
  var $p919: ref;
  var $p920: ref;
  var $i921: i32;
  var $i923: i32;
  var $i924: i1;
  var $p925: ref;
  var $i926: i32;
  var $i927: i8;
  var $i928: i32;
  var $i929: i8;
  var $i930: i32;
  var $i932: i32;
  var $i933: i1;
  var $p934: ref;
  var $i935: i32;
  var $i936: i1;
  var $p937: ref;
  var $i938: i16;
  var $i939: i32;
  var $i940: i16;
  var $i942: i32;
  var $i943: i1;
  var $p944: ref;
  var $i945: i32;
  var $i946: i1;
  var $p947: ref;
  var $i948: i16;
  var $i949: i32;
  var $i950: i16;
  var $i951: i8;
  var $i952: i1;
  var $p953: ref;
  var $i954: i32;
  var $i955: i32;
  var $i956: i1;
  var $p957: ref;
  var $i958: i32;
  var $i959: i1;
  var $p960: ref;
  var $i961: i32;
  var $i962: i1;
  var $p963: ref;
  var $i964: i32;
  var $i965: i1;
  var $p966: ref;
  var $i967: i32;
  var $i968: i1;
  var $p969: ref;
  var $i970: i32;
  var $i971: i1;
  var $p972: ref;
  var $i973: i16;
  var $i974: i32;
  var $i975: i16;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i64;
  var vslice_dummy_var_154: i64;
  var vslice_dummy_var_155: i64;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: ref;
  var vslice_dummy_var_166: ref;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i8;
  var vslice_dummy_var_178: i8;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i16;
  var vslice_dummy_var_188: i16;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: ref;
  var vslice_dummy_var_192: ref;
  var vslice_dummy_var_193: ref;
  var vslice_dummy_var_194: ref;
  var vslice_dummy_var_195: ref;
  var vslice_dummy_var_196: ref;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: ref;
  var vslice_dummy_var_200: ref;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: ref;
  var vslice_dummy_var_204: ref;
  var vslice_dummy_var_205: ref;
  var vslice_dummy_var_206: ref;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i64;
  var vslice_dummy_var_212: i64;
  var vslice_dummy_var_213: i64;
  var vslice_dummy_var_214: i64;
  var vslice_dummy_var_215: i64;
  var vslice_dummy_var_216: i64;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: ref;
  var vslice_dummy_var_227: ref;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i8;
  var vslice_dummy_var_239: i8;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i16;
  var vslice_dummy_var_249: i16;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: ref;
  var vslice_dummy_var_253: ref;
  var vslice_dummy_var_254: ref;
  var vslice_dummy_var_255: ref;
  var vslice_dummy_var_256: ref;
  var vslice_dummy_var_257: ref;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: ref;
  var vslice_dummy_var_261: ref;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: ref;
  var vslice_dummy_var_265: ref;
  var vslice_dummy_var_266: ref;
  var vslice_dummy_var_267: ref;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i64;
  var vslice_dummy_var_273: i64;
  var vslice_dummy_var_274: i64;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i64;
  var vslice_dummy_var_277: ref;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: ref;
  var vslice_dummy_var_281: i32;

  $bb0:
    call {:si_unique_call 821} $initialize();
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 832} $i9 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 833} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i9);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p10 := ldv_zalloc(1);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p11 := ldv_zalloc(1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} $i12 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 838} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i12);
    call {:si_unique_call 839} {:cexpr "tmp___2"} boogie_si_record_i64($i12);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p13 := ldv_zalloc(1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p14 := ldv_zalloc(1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p15 := ldv_zalloc(4);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p17 := ldv_zalloc(1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p18 := ldv_zalloc(1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p19 := ldv_zalloc(1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p20 := ldv_zalloc(1344);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p22 := ldv_zalloc(1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p23 := ldv_zalloc(4);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p25 := ldv_zalloc(8);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p27 := ldv_zalloc(4);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p29 := ldv_zalloc(1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p30 := ldv_zalloc(1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i31 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i31);
    call {:si_unique_call 855} {:cexpr "tmp___16"} boogie_si_record_i64($i31);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p32 := ldv_zalloc(1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p33 := ldv_zalloc(1);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} $i34 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 859} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i34);
    call {:si_unique_call 860} {:cexpr "tmp___19"} boogie_si_record_i64($i34);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p35 := ldv_zalloc(1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p36 := ldv_zalloc(1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 863} $i37 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 864} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i37);
    call {:si_unique_call 865} {:cexpr "tmp___22"} boogie_si_record_i64($i37);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p38 := ldv_zalloc(1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p39 := ldv_zalloc(1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p40 := ldv_zalloc(1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p41 := ldv_zalloc(8);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p43 := ldv_zalloc(1);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p44 := ldv_zalloc(4);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p46 := ldv_zalloc(4);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $p48 := ldv_zalloc(1344);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p50 := ldv_zalloc(4);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p52 := ldv_zalloc(1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p53 := ldv_zalloc(1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p54 := ldv_zalloc(1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p55 := ldv_zalloc(1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 1} true;
    call {:si_unique_call 879} $i56 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 880} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i56);
    call {:si_unique_call 881} {:cexpr "tmp___36"} boogie_si_record_i64($i56);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p57 := ldv_zalloc(1);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p58 := ldv_zalloc(1344);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 884} $i60 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 885} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i60);
    call {:si_unique_call 886} {:cexpr "tmp___39"} boogie_si_record_i64($i60);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p61 := ldv_zalloc(1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p62 := ldv_zalloc(1);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p63 := ldv_zalloc(1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p64 := ldv_zalloc(1);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p65 := ldv_zalloc(1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 892} $i66 := __VERIFIER_nondet_int();
    call {:si_unique_call 893} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i66);
    call {:si_unique_call 894} {:cexpr "tmp___45"} boogie_si_record_i32($i66);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i67 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i67);
    call {:si_unique_call 897} {:cexpr "tmp___46"} boogie_si_record_i32($i67);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p68 := ldv_zalloc(1);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p69 := ldv_zalloc(1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 900} $i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i70);
    call {:si_unique_call 902} {:cexpr "tmp___49"} boogie_si_record_i32($i70);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_initialize();
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.66;
    call {:si_unique_call 904} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p71, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.66 := cmdloc_dummy_var_31;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.67;
    call {:si_unique_call 905} cmdloc_dummy_var_33 := $memset.i8(cmdloc_dummy_var_32, $p72, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.67 := cmdloc_dummy_var_33;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p2);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.68;
    call {:si_unique_call 906} cmdloc_dummy_var_35 := $memset.i8(cmdloc_dummy_var_34, $p73, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.68 := cmdloc_dummy_var_35;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p3);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.69;
    call {:si_unique_call 907} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p74, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.69 := cmdloc_dummy_var_37;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.70;
    call {:si_unique_call 908} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p75, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.70 := cmdloc_dummy_var_39;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p5);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.71;
    call {:si_unique_call 909} cmdloc_dummy_var_41 := $memset.i8(cmdloc_dummy_var_40, $p76, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.71 := cmdloc_dummy_var_41;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p6);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.72;
    call {:si_unique_call 910} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p77, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.72 := cmdloc_dummy_var_43;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.73;
    call {:si_unique_call 911} cmdloc_dummy_var_45 := $memset.i8(cmdloc_dummy_var_44, $p7, 0, 1, $zext.i32.i64(1), 0 == 1);
    $M.73 := cmdloc_dummy_var_45;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.74;
    call {:si_unique_call 912} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p8, 0, 1, $zext.i32.i64(1), 0 == 1);
    $M.74 := cmdloc_dummy_var_47;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 923} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $p101, $i103, $i104, $p105, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $p166, $i168, $i169, $p170, $i172, $i173, $p174, $i176, $i177, $p178, $i179, $i180, $p181, $i182, $i183, $p184, $i186, $i187, $p188, $i190, $i191, $p192, $i194, $i195, $p196, $i198, $i199, $p200, $i202, $i203, $p204, $i206, $i207, $p208, $i209, $i210, $p211, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i224, $i225, $p226, $i228, $i229, $p230, $i231, $i232, $p233, $i234, $i235, $p236, $i237, $i238, $p239, $i240, $i241, $p242, $i244, $i245, $p246, $i248, $i249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $i259, $i260, $p261, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $p271, $p272, $i274, $i275, $p276, $p277, $p278, $i280, $i281, $p282, $i284, $i285, $p286, $i288, $i289, $p290, $i292, $i293, $p294, $i296, $i297, $p298, $p299, $i300, $i301, $p302, $p303, $i304, $i305, $p306, $i308, $i309, $p310, $i312, $i313, $p314, $p315, $p316, $i318, $i319, $p320, $p321, $p322, $i324, $i325, $p326, $i328, $i329, $p330, $i332, $i333, $p334, $i336, $i337, $p338, $i340, $i341, $p342, $i344, $i345, $p346, $i348, $i349, $p350, $i352, $i353, $p354, $i356, $i357, $i359, $i360, $i362, $i363, $p364, $i365, $i366, $p367, $i368, $i369, $p370, $i372, $i373, $p374, $i376, $i377, $p378, $i380, $i381, $p382, $i384, $i385, $p386, $i388, $i389, $p390, $i392, $i393, $p394, $p395, $i397, $i398, $p399, $p400, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $p410, $i411, $i412, $p413, $i414, $i415, $p416, $i418, $i419, $p420, $i422, $i423, $p424, $p425, $i427, $i428, $p429, $p430, $i432, $i433, $p434, $i436, $i437, $p438, $i440, $i441, $p442, $i444, $i445, $p446, $i448, $i449, $i451, $i452, $i453, $i454, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $p466, $i468, $i469, $p470, $i472, $i473, $i474, $i475, $i476, $i477, $i478, $i479, $p480, $i482, $i483, $p484, $i486, $i487, $i488, $i489, $i490, $i491, $i492, $i493, $p494, $i496, $i497, $p498, $i500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $i510, $i511, $i512, $i513, $i514, $i515, $i516, $i517, $i518, $i519, $i520, $i521, $i522, $i523, $i524, $i525, $i526, $i527, $i528, $i529, $i530, $i531, $i532, $i533, $i534, $i535, $i536, $i537, $i538, $i539, $i540, $i541, $i542, $i543, $i544, $p545, $i547, $i548, $p549, $i551, $i552, $p553, $i555, $i556, $p557, $i558, $i559, $p560, $i561, $i562, $p563, $i565, $i566, $p567, $i569, $i570, $p571, $i573, $i574, $p575, $i577, $i578, $p579, $i581, $i582, $p583, $i585, $i586, $p587, $i588, $i589, $p590, $i591, $i592, $p593, $i595, $i596, $p597, $i599, $i600, $p601, $i603, $i604, $p605, $i607, $i608, $p609, $i610, $i611, $p612, $i613, $i614, $p615, $i616, $i617, $p618, $i619, $i620, $p621, $i623, $i624, $p625, $i627, $i628, $p629, $i630, $i631, $p632, $i633, $i634, $p635, $i637, $i638, $p639, $i641, $i642, $p643, $p644, $p645, $i647, $i648, $p649, $p650, $p651, $i653, $i654, $p655, $i656, $i657, $p658, $i659, $i660, $p661, $i663, $i664, $p665, $i667, $i668, $p669, $i671, $i672, $p673, $i675, $i676, $p677, $p678, $i679, $i680, $p681, $p682, $i683, $i684, $p685, $p686, $p687, $i689, $i690, $p691, $p692, $p693, $i695, $i696, $p697, $i699, $i700, $p701, $i703, $i704, $p705, $i707, $i708, $p709, $i711, $i712, $p713, $i715, $i716, $p717, $i719, $i720, $p721, $i723, $i724, $p725, $i727, $i728, $p729, $i731, $i732, $p733, $i735, $i736, $i738, $i739, $i741, $i742, $p743, $i744, $i745, $p746, $i747, $i748, $p749, $i751, $i752, $p753, $i755, $i756, $p757, $i759, $i760, $p761, $i763, $i764, $p765, $i767, $i768, $p769, $i771, $i772, $p773, $p774, $i776, $i777, $p778, $p779, $i781, $i782, $p783, $i784, $i785, $p786, $i787, $i788, $p789, $i790, $i791, $p792, $i793, $i794, $p795, $i797, $i798, $p799, $i801, $i802, $p803, $p804, $i806, $i807, $p808, $p809, $i811, $i812, $p813, $i815, $i816, $p817, $i819, $i820, $p821, $i823, $i824, $p825, $i827, $i828, $i830, $i831, $i832, $i833, $i835, $i836, $i837, $i838, $i839, $i840, $i841, $i842, $i843, $i844, $p845, $i847, $i848, $p849, $i851, $i852, $p853, $i854, $i855, $i856, $i857, $i858, $i859, $i861, $i862, $i863, $i864, $i865, $i866, $i867, $i868, $i869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $p886, $i888, $i889, $p890, $i892, $i893, $i894, $i895, $i896, $i897, $i898, $i899, $i900, $i901, $i902, $i903, $i904, $i905, $i906, $i907, $i908, $i909, $i910, $i911, $p912, $i913, $i914, $p915, $i917, $i918, $p919, $p920, $i921, $i923, $i924, $p925, $i926, $i927, $i928, $i929, $i930, $i932, $i933, $p934, $i935, $i936, $p937, $i938, $i939, $i940, $i942, $i943, $p944, $i945, $i946, $p947, $i948, $i949, $i950, $i951, $i952, $p953, $i954, $i955, $i956, $p957, $i958, $i959, $p960, $i961, $i962, $p963, $i964, $i965, $p966, $i967, $i968, $p969, $i970, $i971, $p972, $i973, $i974, $i975, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250, vslice_dummy_var_251, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $i9, $p10, $p11, $i12, $p13, $p14, $p16, $p17, $p18, $p19, $p21, $p22, $p24, $p26, $p28, $p29, $p30, $i31, $p32, $p33, $i34, $p35, $p36, $i37, $p38, $p39, $p40, $p42, $p43, $p45, $p47, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $p57, $p59, $i60, $p61, $p62, $p63, $p64, $p65, $i66, $i67, $p68, $p69, $i70, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $p101, $i103, $i104, $p105, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $p166, $i168, $i169, $p170, $i172, $i173, $p174, $i176, $i177, $p178, $i179, $i180, $p181, $i182, $i183, $p184, $i186, $i187, $p188, $i190, $i191, $p192, $i194, $i195, $p196, $i198, $i199, $p200, $i202, $i203, $p204, $i206, $i207, $p208, $i209, $i210, $p211, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i224, $i225, $p226, $i228, $i229, $p230, $i231, $i232, $p233, $i234, $i235, $p236, $i237, $i238, $p239, $i240, $i241, $p242, $i244, $i245, $p246, $i248, $i249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $i259, $i260, $p261, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $p271, $p272, $i274, $i275, $p276, $p277, $p278, $i280, $i281, $p282, $i284, $i285, $p286, $i288, $i289, $p290, $i292, $i293, $p294, $i296, $i297, $p298, $p299, $i300, $i301, $p302, $p303, $i304, $i305, $p306, $i308, $i309, $p310, $i312, $i313, $p314, $p315, $p316, $i318, $i319, $p320, $p321, $p322, $i324, $i325, $p326, $i328, $i329, $p330, $i332, $i333, $p334, $i336, $i337, $p338, $i340, $i341, $p342, $i344, $i345, $p346, $i348, $i349, $p350, $i352, $i353, $p354, $i356, $i357, $i359, $i360, $i362, $i363, $p364, $i365, $i366, $p367, $i368, $i369, $p370, $i372, $i373, $p374, $i376, $i377, $p378, $i380, $i381, $p382, $i384, $i385, $p386, $i388, $i389, $p390, $i392, $i393, $p394, $p395, $i397, $i398, $p399, $p400, $i402, $i403, $p404, $i405, $i406, $p407, $i408, $i409, $p410, $i411, $i412, $p413, $i414, $i415, $p416, $i418, $i419, $p420, $i422, $i423, $p424, $p425, $i427, $i428, $p429, $p430, $i432, $i433, $p434, $i436, $i437, $p438, $i440, $i441, $p442, $i444, $i445, $p446, $i448, $i449, $i451, $i452, $i453, $i454, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $p466, $i468, $i469, $p470, $i472, $i473, $i474, $i475, $i476, $i477, $i478, $i479, $p480, $i482, $i483, $p484, $i486, $i487, $i488, $i489, $i490, $i491, $i492, $i493, $p494, $i496, $i497, $p498, $i500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $i510, $i511, $i512, $i513, $i514, $i515, $i516, $i517, $i518, $i519, $i520, $i521, $i522, $i523, $i524, $i525, $i526, $i527, $i528, $i529, $i530, $i531, $i532, $i533, $i534, $i535, $i536, $i537, $i538, $i539, $i540, $i541, $i542, $i543, $i544, $p545, $i547, $i548, $p549, $i551, $i552, $p553, $i555, $i556, $p557, $i558, $i559, $p560, $i561, $i562, $p563, $i565, $i566, $p567, $i569, $i570, $p571, $i573, $i574, $p575, $i577, $i578, $p579, $i581, $i582, $p583, $i585, $i586, $p587, $i588, $i589, $p590, $i591, $i592, $p593, $i595, $i596, $p597, $i599, $i600, $p601, $i603, $i604, $p605, $i607, $i608, $p609, $i610, $i611, $p612, $i613, $i614, $p615, $i616, $i617, $p618, $i619, $i620, $p621, $i623, $i624, $p625, $i627, $i628, $p629, $i630, $i631, $p632, $i633, $i634, $p635, $i637, $i638, $p639, $i641, $i642, $p643, $p644, $p645, $i647, $i648, $p649, $p650, $p651, $i653, $i654, $p655, $i656, $i657, $p658, $i659, $i660, $p661, $i663, $i664, $p665, $i667, $i668, $p669, $i671, $i672, $p673, $i675, $i676, $p677, $p678, $i679, $i680, $p681, $p682, $i683, $i684, $p685, $p686, $p687, $i689, $i690, $p691, $p692, $p693, $i695, $i696, $p697, $i699, $i700, $p701, $i703, $i704, $p705, $i707, $i708, $p709, $i711, $i712, $p713, $i715, $i716, $p717, $i719, $i720, $p721, $i723, $i724, $p725, $i727, $i728, $p729, $i731, $i732, $p733, $i735, $i736, $i738, $i739, $i741, $i742, $p743, $i744, $i745, $p746, $i747, $i748, $p749, $i751, $i752, $p753, $i755, $i756, $p757, $i759, $i760, $p761, $i763, $i764, $p765, $i767, $i768, $p769, $i771, $i772, $p773, $p774, $i776, $i777, $p778, $p779, $i781, $i782, $p783, $i784, $i785, $p786, $i787, $i788, $p789, $i790, $i791, $p792, $i793, $i794, $p795, $i797, $i798, $p799, $i801, $i802, $p803, $p804, $i806, $i807, $p808, $p809, $i811, $i812, $p813, $i815, $i816, $p817, $i819, $i820, $p821, $i823, $i824, $p825, $i827, $i828, $i830, $i831, $i832, $i833, $i835, $i836, $i837, $i838, $i839, $i840, $i841, $i842, $i843, $i844, $p845, $i847, $i848, $p849, $i851, $i852, $p853, $i854, $i855, $i856, $i857, $i858, $i859, $i861, $i862, $i863, $i864, $i865, $i866, $i867, $i868, $i869, $i870, $i871, $i872, $i873, $i874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $p886, $i888, $i889, $p890, $i892, $i893, $i894, $i895, $i896, $i897, $i898, $i899, $i900, $i901, $i902, $i903, $i904, $i905, $i906, $i907, $i908, $i909, $i910, $i911, $p912, $i913, $i914, $p915, $i917, $i918, $p919, $p920, $i921, $i923, $i924, $p925, $i926, $i927, $i928, $i929, $i930, $i932, $i933, $p934, $i935, $i936, $p937, $i938, $i939, $i940, $i942, $i943, $p944, $i945, $i946, $p947, $i948, $i949, $i950, $i951, $i952, $p953, $i954, $i955, $i956, $p957, $i958, $i959, $p960, $i961, $i962, $p963, $i964, $i965, $p966, $i967, $i968, $p969, $i970, $i971, $p972, $i973, $i974, $i975, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250, vslice_dummy_var_251, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i78, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i78, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i78, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i78, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_stop();
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb52_dummy;

  $bb11:
    assume $i83 == 1;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i892 := $M.88;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i893 := $ne.i32($i892, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb844, $bb845;

  $bb845:
    assume !($i893 == 1);
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb844:
    assume $i893 == 1;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1337} $i894 := __VERIFIER_nondet_int();
    call {:si_unique_call 1338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i894);
    call {:si_unique_call 1339} {:cexpr "tmp___62"} boogie_si_record_i32($i894);
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    $i895 := $slt.i32($i894, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb847, $bb848;

  $bb848:
    assume !($i895 == 1);
    assume {:verifier.code 0} true;
    $i896 := $slt.i32($i894, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb849, $bb850;

  $bb850:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    $i897 := $slt.i32($i894, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb851, $bb852;

  $bb852:
    assume !($i897 == 1);
    assume {:verifier.code 0} true;
    $i898 := $slt.i32($i894, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb853, $bb854;

  $bb854:
    assume !($i898 == 1);
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i894, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb855, $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    assume !($i899 == 1);
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ldv_stop();
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb855:
    assume $i899 == 1;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i970 := $M.88;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i971 := $eq.i32($i970, 1);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb918, $bb919;

  $bb919:
    assume !($i971 == 1);
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb918:
    assume $i971 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p972 := $M.55;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i973 := $load.i16($M.69, $p3);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i974 := $zext.i16.i32($i973);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i975 := $trunc.i32.i16($i974);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_281 := tcm_qla2xxx_check_initiator_node_acl($p972, $p69, $p68, $p63, $i975);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb853:
    assume $i898 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i967 := $M.88;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i968 := $eq.i32($i967, 1);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb915, $bb916;

  $bb916:
    assume !($i968 == 1);
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb915:
    assume $i968 == 1;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p969 := $M.56;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} tcm_qla2xxx_free_cmd($p969);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb851:
    assume $i897 == 1;
    assume {:verifier.code 0} true;
    $i900 := $slt.i32($i894, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb858, $bb859;

  $bb859:
    assume !($i900 == 1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i964 := $M.88;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i965 := $eq.i32($i964, 1);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb912, $bb913;

  $bb913:
    assume !($i965 == 1);
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb912:
    assume $i965 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p966 := $M.57;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} tcm_qla2xxx_clear_nacl_from_fcport_map($p966);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb858:
    assume $i900 == 1;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i961 := $M.88;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i962 := $eq.i32($i961, 1);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb909, $bb910;

  $bb910:
    assume !($i962 == 1);
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb909:
    assume $i962 == 1;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p963 := $M.56;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} tcm_qla2xxx_handle_data($p963);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb849:
    assume $i896 == 1;
    assume {:verifier.code 0} true;
    $i901 := $slt.i32($i894, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb860, $bb861;

  $bb861:
    assume !($i901 == 1);
    assume {:verifier.code 0} true;
    $i902 := $slt.i32($i894, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb862, $bb863;

  $bb863:
    assume !($i902 == 1);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i958 := $M.88;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i959 := $eq.i32($i958, 1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb906, $bb907;

  $bb907:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb906:
    assume $i959 == 1;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p960 := $M.54;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} tcm_qla2xxx_free_mcmd($p960);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb862:
    assume $i902 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i955 := $M.88;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i956 := $eq.i32($i955, 1);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb903, $bb904;

  $bb904:
    assume !($i956 == 1);
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb903:
    assume $i956 == 1;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p957 := $M.57;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} tcm_qla2xxx_shutdown_sess($p957);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb860:
    assume $i901 == 1;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i945 := $M.88;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i946 := $eq.i32($i945, 1);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb900, $bb901;

  $bb901:
    assume !($i946 == 1);
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb900:
    assume $i946 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p947 := $M.57;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i948 := $load.i16($M.72, $p6);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i949 := $zext.i16.i32($i948);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i950 := $trunc.i32.i16($i949);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i951 := $load.i8($M.74, $p8);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i952 := $trunc.i8.i1($i951);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p953 := $bitcast.ref.ref($p1);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i954 := $load.i32($M.67, $p953);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} tcm_qla2xxx_update_sess($p947, $i954, $i950, $i952);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb847:
    assume $i895 == 1;
    assume {:verifier.code 0} true;
    $i903 := $slt.i32($i894, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb864, $bb865;

  $bb865:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    $i904 := $slt.i32($i894, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb866, $bb867;

  $bb867:
    assume !($i904 == 1);
    assume {:verifier.code 0} true;
    $i905 := $slt.i32($i894, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb868, $bb869;

  $bb869:
    assume !($i905 == 1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i942 := $M.88;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i943 := $eq.i32($i942, 1);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb897, $bb898;

  $bb898:
    assume !($i943 == 1);
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb897:
    assume $i943 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p944 := $M.57;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} tcm_qla2xxx_put_sess($p944);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb868:
    assume $i905 == 1;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i935 := $M.88;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i936 := $eq.i32($i935, 1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb894, $bb895;

  $bb895:
    assume !($i936 == 1);
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb894:
    assume $i936 == 1;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p937 := $M.55;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i938 := $load.i16($M.68, $p2);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i939 := $zext.i16.i32($i938);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i940 := $trunc.i32.i16($i939);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_280 := tcm_qla2xxx_find_sess_by_loop_id($p937, $i940);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb866:
    assume $i904 == 1;
    assume {:verifier.code 0} true;
    $i906 := $slt.i32($i894, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb870, $bb871;

  $bb871:
    assume !($i906 == 1);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i932 := $M.88;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i933 := $eq.i32($i932, 1);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb891, $bb892;

  $bb892:
    assume !($i933 == 1);
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb891:
    assume $i933 == 1;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p934 := $M.56;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} tcm_qla2xxx_handle_dif_err($p934);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb870:
    assume $i906 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i923 := $M.88;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i924 := $eq.i32($i923, 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb888, $bb889;

  $bb889:
    assume !($i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb888:
    assume $i924 == 1;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p925 := $M.54;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i926 := $load.i32($M.70, $p4);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i927 := $load.i8($M.73, $p7);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i928 := $zext.i8.i32($i927);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i929 := $trunc.i32.i8($i928);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i930 := $load.i32($M.66, $p0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_279 := tcm_qla2xxx_handle_tmr($p925, $i926, $i929, $i930);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb864:
    assume $i903 == 1;
    assume {:verifier.code 0} true;
    $i907 := $slt.i32($i894, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb872, $bb873;

  $bb873:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    $i908 := $slt.i32($i894, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb874, $bb875;

  $bb875:
    assume !($i908 == 1);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i917 := $M.88;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i918 := $eq.i32($i917, 1);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb885, $bb886;

  $bb886:
    assume !($i918 == 1);
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb885:
    assume $i918 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p919 := $M.55;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p920 := $M.56;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i921 := $load.i32($M.71, $p5);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_278 := tcm_qla2xxx_handle_cmd($p919, $p920, $p65, $i921, $i67, $i70, $i66);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb874:
    assume $i908 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i913 := $M.88;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i914 := $eq.i32($i913, 1);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb882, $bb883;

  $bb883:
    assume !($i914 == 1);
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb882:
    assume $i914 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p915 := $M.55;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vslice_dummy_var_277 := tcm_qla2xxx_find_sess_by_s_id($p915, $p64);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb872:
    assume $i907 == 1;
    assume {:verifier.code 0} true;
    $i909 := $eq.i32($i894, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb876, $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    assume !($i909 == 1);
    goto $bb857;

  $bb876:
    assume $i909 == 1;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i910 := $M.88;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i910, 1);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb878, $bb879;

  $bb879:
    assume !($i911 == 1);
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb878:
    assume $i911 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p912 := $M.57;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} tcm_qla2xxx_free_session($p912);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb9:
    assume $i82 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i878 := $M.87;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i879 := $ne.i32($i878, 0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb824, $bb825;

  $bb825:
    assume !($i879 == 1);
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb824:
    assume $i879 == 1;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1329} $i880 := __VERIFIER_nondet_int();
    call {:si_unique_call 1330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i880);
    call {:si_unique_call 1331} {:cexpr "tmp___61"} boogie_si_record_i32($i880);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    $i881 := $slt.i32($i880, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb827, $bb828;

  $bb828:
    assume !($i881 == 1);
    assume {:verifier.code 0} true;
    $i882 := $eq.i32($i880, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb829, $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    assume !($i882 == 1);
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} ldv_stop();
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb829:
    assume $i882 == 1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i888 := $M.87;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i889 := $eq.i32($i888, 1);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb838, $bb839;

  $bb839:
    assume !($i889 == 1);
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb838:
    assume $i889 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p890 := $M.38;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_276 := tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect($p890, $p62);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb827:
    assume $i881 == 1;
    assume {:verifier.code 0} true;
    $i883 := $eq.i32($i880, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb832, $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    assume !($i883 == 1);
    goto $bb831;

  $bb832:
    assume $i883 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i884 := $M.87;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i885 := $eq.i32($i884, 1);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb834, $bb835;

  $bb835:
    assume !($i885 == 1);
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb834:
    assume $i885 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p886 := $M.38;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_275 := tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect($p886, $p61, $i60);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb7:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i78, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i84 == 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i861 := $M.86;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i862 := $ne.i32($i861, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb794, $bb795;

  $bb795:
    assume !($i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb794:
    assume $i862 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1297} $i863 := __VERIFIER_nondet_int();
    call {:si_unique_call 1298} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i863);
    call {:si_unique_call 1299} {:cexpr "tmp___60"} boogie_si_record_i32($i863);
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    $i864 := $slt.i32($i863, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb797, $bb798;

  $bb798:
    assume !($i864 == 1);
    assume {:verifier.code 0} true;
    $i865 := $eq.i32($i863, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb799, $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    assume !($i865 == 1);
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_stop();
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb799:
    assume $i865 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i871 := $M.86;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i872 := $eq.i32($i871, 1);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb812:
    assume $i872 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $i873 := tcm_qla2xxx_init();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.94 := $i873;
    call {:si_unique_call 1304} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i873);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i874 := $M.94;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i875 := $eq.i32($i874, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb814, $bb815;

  $bb815:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    $i876 := $M.94;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i877 := $ne.i32($i876, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb817, $bb818;

  $bb818:
    assume !($i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb817:
    assume $i877 == 1;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_check_final_state();
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb814:
    assume $i875 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.86 := 3;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1306} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} ldv_initialize_qla_tgt_func_tmpl_5();
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_initialize_target_fabric_tpg_attrib_attribute_10();
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1311} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} ldv_initialize_target_fabric_tpg_attrib_attribute_8();
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_initialize_target_core_fabric_ops_2();
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1315} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} ldv_initialize_target_fabric_tpg_attrib_attribute_12();
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1317} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ldv_initialize_target_fabric_tpg_attrib_attribute_9();
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1319} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_initialize_target_fabric_tpg_attribute_7();
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} ldv_initialize_target_core_fabric_ops_3();
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_initialize_target_fabric_tpg_attrib_attribute_11();
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_initialize_target_fabric_tpg_attribute_6();
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto $bb816;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb797:
    assume $i864 == 1;
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i863, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb802, $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    assume !($i866 == 1);
    goto $bb801;

  $bb802:
    assume $i866 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i867 := $M.86;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i868 := $eq.i32($i867, 3);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb804, $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    assume !($i868 == 1);
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb804:
    assume $i868 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i869 := $M.85;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i870 := $eq.i32($i869, 0);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb807, $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    assume !($i870 == 1);
    goto $bb806;

  $bb807:
    assume $i870 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} tcm_qla2xxx_exit();
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb14:
    assume $i84 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i854 := $M.84;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i855 := $ne.i32($i854, 0);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb782, $bb783;

  $bb783:
    assume !($i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb782:
    assume $i855 == 1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} $i856 := __VERIFIER_nondet_int();
    call {:si_unique_call 1292} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i856);
    call {:si_unique_call 1293} {:cexpr "tmp___59"} boogie_si_record_i32($i856);
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i856, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb785, $bb786;

  $bb786:
    assume !($i857 == 1);
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} ldv_stop();
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb785:
    assume $i857 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i858 := $M.84;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i859 := $eq.i32($i858, 1);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb787, $bb788;

  $bb788:
    assume !($i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb787:
    assume $i859 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} vslice_dummy_var_274 := tcm_qla2xxx_wwn_show_attr_version($p59, $p57);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb789;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i78, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i78, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i86 == 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i851 := $M.83;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i852 := $ne.i32($i851, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb779, $bb780;

  $bb780:
    assume !($i852 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb779:
    assume $i852 == 1;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p853 := $M.93;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} choose_timer_1($p853);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb18:
    assume $i86 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i837 := $M.82;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i838 := $ne.i32($i837, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb759:
    assume $i838 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1282} $i839 := __VERIFIER_nondet_int();
    call {:si_unique_call 1283} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i839);
    call {:si_unique_call 1284} {:cexpr "tmp___58"} boogie_si_record_i32($i839);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    $i840 := $slt.i32($i839, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb762, $bb763;

  $bb763:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    $i841 := $eq.i32($i839, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb764, $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    assume !($i841 == 1);
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} ldv_stop();
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb764:
    assume $i841 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i847 := $M.82;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i847, 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb773, $bb774;

  $bb774:
    assume !($i848 == 1);
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb773:
    assume $i848 == 1;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p849 := $M.46;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_273 := tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only($p849, $p55);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb762:
    assume $i840 == 1;
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i839, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb767, $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    assume !($i842 == 1);
    goto $bb766;

  $bb767:
    assume $i842 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i843 := $M.82;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i844 := $eq.i32($i843, 1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb769, $bb770;

  $bb770:
    assume !($i844 == 1);
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb769:
    assume $i844 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p845 := $M.46;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_272 := tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only($p845, $p54, $i56);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1286} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb16:
    assume $i85 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i500 := $M.81;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i501 := $ne.i32($i500, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb446:
    assume $i501 == 1;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1126} $i502 := __VERIFIER_nondet_int();
    call {:si_unique_call 1127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i502);
    call {:si_unique_call 1128} {:cexpr "tmp___57"} boogie_si_record_i32($i502);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $i503 := $slt.i32($i502, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    $i504 := $slt.i32($i502, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    $i505 := $slt.i32($i502, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    $i506 := $slt.i32($i502, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    $i507 := $slt.i32($i502, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    $i508 := $slt.i32($i502, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i502, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i509 == 1);
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} ldv_stop();
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb461:
    assume $i509 == 1;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i832 := $M.81;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i833 := $eq.i32($i832, 1);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb753, $bb754;

  $bb754:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb753:
    assume $i833 == 1;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_271 := ldv_probe_2();
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i835 := $M.85;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i836 := $add.i32($i835, 1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.85 := $i836;
    call {:si_unique_call 1280} {:cexpr "ref_cnt"} boogie_si_record_i32($i836);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb459:
    assume $i508 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i827 := $M.81;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i828 := $eq.i32($i827, 2);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb750, $bb751;

  $bb751:
    assume !($i828 == 1);
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb750:
    assume $i828 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_270 := ldv_release_2();
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i830 := $M.85;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i831 := $sub.i32($i830, 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $M.85 := $i831;
    call {:si_unique_call 1277} {:cexpr "ref_cnt"} boogie_si_record_i32($i831);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb457:
    assume $i507 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i819 := $M.81;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i820 := $eq.i32($i819, 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb744, $bb745;

  $bb745:
    assume !($i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    $i823 := $M.81;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i823, 2);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb747, $bb748;

  $bb748:
    assume !($i824 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb747:
    assume $i824 == 1;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p825 := $M.45;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_269 := tcm_qla2xxx_shutdown_session($p825);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb744:
    assume $i820 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p821 := $M.45;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_268 := tcm_qla2xxx_shutdown_session($p821);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb455:
    assume $i506 == 1;
    assume {:verifier.code 0} true;
    $i510 := $slt.i32($i502, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i510 == 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i811 := $M.81;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i812 := $eq.i32($i811, 1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738, $bb739;

  $bb739:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $i815 := $M.81;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i816 := $eq.i32($i815, 2);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb741, $bb742;

  $bb742:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb741:
    assume $i816 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p817 := $M.41;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} vslice_dummy_var_267 := tcm_qla2xxx_npiv_make_lport($p49, $p817, $p40);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    goto $bb743;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb738:
    assume $i812 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p813 := $M.41;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} vslice_dummy_var_266 := tcm_qla2xxx_npiv_make_lport($p49, $p813, $p40);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1268} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    goto $bb740;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb464:
    assume $i510 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i801 := $M.81;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i802 := $eq.i32($i801, 1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb732, $bb733;

  $bb733:
    assume !($i802 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $i806 := $M.81;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i807 := $eq.i32($i806, 2);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb735:
    assume $i807 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p808 := $M.44;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p809 := $M.41;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_265 := tcm_qla2xxx_npiv_make_tpg($p808, $p809, $p39);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb737;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb732:
    assume $i802 == 1;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p803 := $M.44;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p804 := $M.41;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_264 := tcm_qla2xxx_npiv_make_tpg($p803, $p804, $p39);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto $bb734;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb453:
    assume $i505 == 1;
    assume {:verifier.code 0} true;
    $i511 := $slt.i32($i502, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    $i512 := $slt.i32($i502, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    $i513 := $slt.i32($i502, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i513 == 1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i793 := $M.81;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i794 := $eq.i32($i793, 1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb726, $bb727;

  $bb727:
    assume !($i794 == 1);
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    $i797 := $M.81;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i798 := $eq.i32($i797, 2);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb729, $bb730;

  $bb730:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb729:
    assume $i798 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p799 := $M.40;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_263 := tcm_qla2xxx_get_cmd_state($p799);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb726:
    assume $i794 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p795 := $M.40;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_262 := tcm_qla2xxx_get_cmd_state($p795);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb470:
    assume $i513 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i787 := $M.81;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i788 := $eq.i32($i787, 1);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $i790 := $M.81;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i791 := $eq.i32($i790, 2);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb723:
    assume $i791 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p792 := $M.45;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} tcm_qla2xxx_close_session($p792);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb720:
    assume $i788 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p789 := $M.45;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} tcm_qla2xxx_close_session($p789);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb468:
    assume $i512 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i781 := $M.81;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i781, 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb714, $bb715;

  $bb715:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    $i784 := $M.81;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i784, 2);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb717, $bb718;

  $bb718:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb717:
    assume $i785 == 1;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p786 := $M.42;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} tcm_qla2xxx_drop_tpg($p786);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb714:
    assume $i782 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p783 := $M.42;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} tcm_qla2xxx_drop_tpg($p783);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1252} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb466:
    assume $i511 == 1;
    assume {:verifier.code 0} true;
    $i514 := $slt.i32($i502, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i514 == 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i771 := $M.81;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i772 := $eq.i32($i771, 1);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i772 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $i776 := $M.81;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i777 := $eq.i32($i776, 2);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb711:
    assume $i777 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p778 := $M.42;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p779 := $M.41;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vslice_dummy_var_261 := tcm_qla2xxx_make_nodeacl($p778, $p779, $p53);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1250} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb713;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb708:
    assume $i772 == 1;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p773 := $M.42;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p774 := $M.41;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_260 := tcm_qla2xxx_make_nodeacl($p773, $p774, $p53);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1248} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb710;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb472:
    assume $i514 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i763 := $M.81;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i763, 1);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb702, $bb703;

  $bb703:
    assume !($i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    $i767 := $M.81;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i768 := $eq.i32($i767, 2);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb705, $bb706;

  $bb706:
    assume !($i768 == 1);
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb705:
    assume $i768 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p769 := $M.40;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} vslice_dummy_var_259 := tcm_qla2xxx_get_task_tag($p769);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1246} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb702:
    assume $i764 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p765 := $M.40;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vslice_dummy_var_258 := tcm_qla2xxx_get_task_tag($p765);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1244} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb451:
    assume $i504 == 1;
    assume {:verifier.code 0} true;
    $i515 := $slt.i32($i502, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb475:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    $i516 := $slt.i32($i502, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    $i517 := $slt.i32($i502, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    $i518 := $slt.i32($i502, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i518 == 1);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i755 := $M.81;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i756 := $eq.i32($i755, 1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb696, $bb697;

  $bb697:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    $i759 := $M.81;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i760 := $eq.i32($i759, 2);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb699, $bb700;

  $bb700:
    assume !($i760 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb699:
    assume $i760 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p761 := $M.42;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} vslice_dummy_var_257 := tcm_qla2xxx_alloc_fabric_acl($p761);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb701;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb696:
    assume $i756 == 1;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p757 := $M.42;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_256 := tcm_qla2xxx_alloc_fabric_acl($p757);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1240} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb698;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb480:
    assume $i518 == 1;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i747 := $M.81;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i748 := $eq.i32($i747, 1);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb690, $bb691;

  $bb691:
    assume !($i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    $i751 := $M.81;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i752 := $eq.i32($i751, 2);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  $bb694:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb693:
    assume $i752 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p753 := $M.42;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_255 := tcm_qla2xxx_get_fabric_wwn($p753);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1238} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb690:
    assume $i748 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p749 := $M.42;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_254 := tcm_qla2xxx_get_fabric_wwn($p749);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1236} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb478:
    assume $i517 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i741 := $M.81;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i742 := $eq.i32($i741, 1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $i744 := $M.81;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i745 := $eq.i32($i744, 2);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i745 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb687:
    assume $i745 == 1;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p746 := $M.40;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} tcm_qla2xxx_aborted_task($p746);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1234} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb684:
    assume $i742 == 1;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p743 := $M.40;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} tcm_qla2xxx_aborted_task($p743);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1232} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb476:
    assume $i516 == 1;
    assume {:verifier.code 0} true;
    $i519 := $slt.i32($i502, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i519 == 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i735 := $M.81;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i736 := $eq.i32($i735, 1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb678, $bb679;

  $bb679:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    $i738 := $M.81;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i739 := $eq.i32($i738, 2);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb681, $bb682;

  $bb682:
    assume !($i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb681:
    assume $i739 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_253 := tcm_qla2xxx_npiv_get_fabric_name();
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1230} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb678:
    assume $i736 == 1;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} vslice_dummy_var_252 := tcm_qla2xxx_npiv_get_fabric_name();
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1228} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb482:
    assume $i519 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i727 := $M.81;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i727, 1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    $i731 := $M.81;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i732 := $eq.i32($i731, 2);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb675, $bb676;

  $bb676:
    assume !($i732 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb675:
    assume $i732 == 1;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p733 := $M.42;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_251 := tcm_qla2xxx_check_demo_mode_login_only($p733);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1226} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb672:
    assume $i728 == 1;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p729 := $M.42;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_250 := tcm_qla2xxx_check_demo_mode_login_only($p729);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1224} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb474:
    assume $i515 == 1;
    assume {:verifier.code 0} true;
    $i520 := $slt.i32($i502, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    $i521 := $slt.i32($i502, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    $i522 := $slt.i32($i502, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i522 == 1);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i719 := $M.81;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i720 := $eq.i32($i719, 1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb666, $bb667;

  $bb667:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    $i723 := $M.81;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i724 := $eq.i32($i723, 2);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb669, $bb670;

  $bb670:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb669:
    assume $i724 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p725 := $M.42;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_249 := tcm_qla2xxx_get_tag($p725);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1222} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb666:
    assume $i720 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p721 := $M.42;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} vslice_dummy_var_248 := tcm_qla2xxx_get_tag($p721);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb488:
    assume $i522 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i711 := $M.81;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i712 := $eq.i32($i711, 1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $i715 := $M.81;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i715, 2);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb663:
    assume $i716 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p717 := $M.42;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_247 := tcm_qla2xxx_tpg_get_inst_index($p717);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1218} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb660:
    assume $i712 == 1;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p713 := $M.42;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_246 := tcm_qla2xxx_tpg_get_inst_index($p713);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1216} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb486:
    assume $i521 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i703 := $M.81;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i703, 1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb654, $bb655;

  $bb655:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    $i707 := $M.81;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i708 := $eq.i32($i707, 2);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb657, $bb658;

  $bb658:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb657:
    assume $i708 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p709 := $M.40;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} vslice_dummy_var_245 := tcm_qla2xxx_check_stop_free($p709);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1214} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb654:
    assume $i704 == 1;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p705 := $M.40;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vslice_dummy_var_244 := tcm_qla2xxx_check_stop_free($p705);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1212} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb484:
    assume $i520 == 1;
    assume {:verifier.code 0} true;
    $i523 := $slt.i32($i502, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i523 == 1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i695 := $M.81;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i696 := $eq.i32($i695, 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648, $bb649;

  $bb649:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    $i699 := $M.81;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i700 := $eq.i32($i699, 2);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb651:
    assume $i700 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p701 := $M.40;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_243 := tcm_qla2xxx_write_pending_status($p701);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1210} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb648:
    assume $i696 == 1;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p697 := $M.40;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} vslice_dummy_var_242 := tcm_qla2xxx_write_pending_status($p697);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb490:
    assume $i523 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i683 := $M.81;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i684 := $eq.i32($i683, 1);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  $bb643:
    assume !($i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    $i689 := $M.81;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i690 := $eq.i32($i689, 2);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  $bb646:
    assume !($i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb645:
    assume $i690 == 1;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p691 := $M.42;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p692 := $M.43;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p693 := $M.39;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_241 := tcm_qla2xxx_get_pr_transport_id_len($p691, $p692, $p693, $p51);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1206} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb642:
    assume $i684 == 1;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p685 := $M.42;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p686 := $M.43;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p687 := $M.39;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} vslice_dummy_var_240 := tcm_qla2xxx_get_pr_transport_id_len($p685, $p686, $p687, $p51);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1204} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb449:
    assume $i503 == 1;
    assume {:verifier.code 0} true;
    $i524 := $slt.i32($i502, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    $i525 := $slt.i32($i502, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb495:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    $i526 := $slt.i32($i502, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    $i527 := $slt.i32($i502, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    $i528 := $slt.i32($i502, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i528 == 1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i675 := $M.81;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i675, 1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  $bb637:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $i679 := $M.81;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i679, 2);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb639:
    assume $i680 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p681 := $M.42;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p682 := $M.43;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} tcm_qla2xxx_release_fabric_acl($p681, $p682);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb636:
    assume $i676 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p677 := $M.42;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p678 := $M.43;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} tcm_qla2xxx_release_fabric_acl($p677, $p678);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1200} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb500:
    assume $i528 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i667 := $M.81;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i667, 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb630, $bb631;

  $bb631:
    assume !($i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    $i671 := $M.81;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i672 := $eq.i32($i671, 2);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  $bb634:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb633:
    assume $i672 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p673 := $M.42;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} vslice_dummy_var_239 := tcm_qla2xxx_get_fabric_proto_ident($p673);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1198} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb630:
    assume $i668 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p669 := $M.42;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} vslice_dummy_var_238 := tcm_qla2xxx_get_fabric_proto_ident($p669);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1196} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb498:
    assume $i527 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i659 := $M.81;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i659, 1);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    $i663 := $M.81;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i664 := $eq.i32($i663, 2);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  $bb628:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb627:
    assume $i664 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p665 := $M.42;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} vslice_dummy_var_237 := tcm_qla2xxx_get_default_depth($p665);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1194} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb624:
    assume $i660 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p661 := $M.42;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vslice_dummy_var_236 := tcm_qla2xxx_get_default_depth($p661);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1192} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb496:
    assume $i526 == 1;
    assume {:verifier.code 0} true;
    $i529 := $slt.i32($i502, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  $bb503:
    assume !($i529 == 1);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i653 := $M.81;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i653, 1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb618, $bb619;

  $bb619:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    $i656 := $M.81;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i657 := $eq.i32($i656, 2);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb621, $bb622;

  $bb622:
    assume !($i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb621:
    assume $i657 == 1;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p658 := $M.44;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} tcm_qla2xxx_npiv_drop_lport($p658);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1190} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb618:
    assume $i654 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p655 := $M.44;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} tcm_qla2xxx_npiv_drop_lport($p655);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1188} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb502:
    assume $i529 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i641 := $M.81;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i642 := $eq.i32($i641, 1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $i647 := $M.81;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i648 := $eq.i32($i647, 2);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb615:
    assume $i648 == 1;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p649 := $M.42;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p650 := $M.43;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p651 := $M.39;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_235 := tcm_qla2xxx_get_pr_transport_id($p649, $p650, $p651, $p47, $p43);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1186} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb612:
    assume $i642 == 1;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p643 := $M.42;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p644 := $M.43;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p645 := $M.39;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} vslice_dummy_var_234 := tcm_qla2xxx_get_pr_transport_id($p643, $p644, $p645, $p47, $p43);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1184} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb494:
    assume $i525 == 1;
    assume {:verifier.code 0} true;
    $i530 := $slt.i32($i502, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    $i531 := $slt.i32($i502, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    $i532 := $slt.i32($i502, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i532 == 1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i633 := $M.81;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i634 := $eq.i32($i633, 1);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb607:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    $i637 := $M.81;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i637, 2);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  $bb610:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb609:
    assume $i638 == 1;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p639 := $M.45;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} vslice_dummy_var_233 := tcm_qla2xxx_sess_get_index($p639);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1182} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb606:
    assume $i634 == 1;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p635 := $M.45;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} vslice_dummy_var_232 := tcm_qla2xxx_sess_get_index($p635);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1180} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb508:
    assume $i532 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i627 := $M.81;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i628 := $eq.i32($i627, 1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    $i630 := $M.81;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i631 := $eq.i32($i630, 2);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb603:
    assume $i631 == 1;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p632 := $M.43;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} tcm_qla2xxx_drop_nodeacl($p632);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb600:
    assume $i628 == 1;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p629 := $M.43;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} tcm_qla2xxx_drop_nodeacl($p629);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb506:
    assume $i531 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i619 := $M.81;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i619, 1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb595:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    $i623 := $M.81;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i624 := $eq.i32($i623, 2);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb597:
    assume $i624 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p625 := $M.42;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} vslice_dummy_var_231 := tcm_qla2xxx_check_demo_mode($p625);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1174} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb594:
    assume $i620 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p621 := $M.42;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} vslice_dummy_var_230 := tcm_qla2xxx_check_demo_mode($p621);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb504:
    assume $i530 == 1;
    assume {:verifier.code 0} true;
    $i533 := $slt.i32($i502, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i533 == 1);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i613 := $M.81;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i613, 1);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $i616 := $M.81;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i616, 2);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb591:
    assume $i617 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p618 := $M.45;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} tcm_qla2xxx_put_session($p618);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1170} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb588:
    assume $i614 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p615 := $M.45;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} tcm_qla2xxx_put_session($p615);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1168} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb510:
    assume $i533 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i607 := $M.81;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i607, 1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  $bb583:
    assume !($i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $i610 := $M.81;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i610, 2);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb585:
    assume $i611 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p612 := $M.40;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} tcm_qla2xxx_release_cmd($p612);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb582:
    assume $i608 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p609 := $M.40;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} tcm_qla2xxx_release_cmd($p609);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1164} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb492:
    assume $i524 == 1;
    assume {:verifier.code 0} true;
    $i534 := $slt.i32($i502, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    $i535 := $slt.i32($i502, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb514, $bb515;

  $bb515:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    $i536 := $slt.i32($i502, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    $i537 := $slt.i32($i502, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i537 == 1);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i599 := $M.81;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i599, 1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    $i603 := $M.81;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i604 := $eq.i32($i603, 2);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb579:
    assume $i604 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p605 := $M.42;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} vslice_dummy_var_229 := tcm_qla2xxx_check_prod_write_protect($p605);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1162} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb576:
    assume $i600 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p601 := $M.42;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_228 := tcm_qla2xxx_check_prod_write_protect($p601);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1160} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb518:
    assume $i537 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i591 := $M.81;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i591, 1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  $bb571:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    $i595 := $M.81;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i595, 2);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb573:
    assume $i596 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p597 := $M.42;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_227 := tcm_qla2xxx_parse_pr_out_transport_id($p597, $p52, $p45, $p42);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1158} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb570:
    assume $i592 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p593 := $M.42;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_226 := tcm_qla2xxx_parse_pr_out_transport_id($p593, $p52, $p45, $p42);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1156} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb516:
    assume $i536 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i585 := $M.81;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i586 := $eq.i32($i585, 1);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $i588 := $M.81;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i589 := $eq.i32($i588, 2);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb567:
    assume $i589 == 1;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p590 := $M.43;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} tcm_qla2xxx_set_default_node_attrs($p590);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb564:
    assume $i586 == 1;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p587 := $M.43;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} tcm_qla2xxx_set_default_node_attrs($p587);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb514:
    assume $i535 == 1;
    assume {:verifier.code 0} true;
    $i538 := $slt.i32($i502, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520, $bb521;

  $bb521:
    assume !($i538 == 1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i577 := $M.81;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i577, 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  $bb559:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    $i581 := $M.81;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 2);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  $bb562:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb561:
    assume $i582 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p583 := $M.42;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_225 := tcm_qla2xxx_check_demo_mode_cache($p583);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb558:
    assume $i578 == 1;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p579 := $M.42;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_224 := tcm_qla2xxx_check_demo_mode_cache($p579);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb520:
    assume $i538 == 1;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i569 := $M.81;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i570 := $eq.i32($i569, 1);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    $i573 := $M.81;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i573, 2);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb555:
    assume $i574 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p575 := $M.40;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_223 := tcm_qla2xxx_queue_data_in($p575);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb552:
    assume $i570 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p571 := $M.40;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_222 := tcm_qla2xxx_queue_data_in($p571);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb512:
    assume $i534 == 1;
    assume {:verifier.code 0} true;
    $i539 := $slt.i32($i502, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    $i540 := $slt.i32($i502, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i540 == 1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i561 := $M.81;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i562 := $eq.i32($i561, 1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    $i565 := $M.81;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i565, 2);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb549:
    assume $i566 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p567 := $M.42;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_221 := tcm_qla2xxx_check_demo_mode($p567);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1142} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb546:
    assume $i562 == 1;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p563 := $M.42;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_220 := tcm_qla2xxx_check_demo_mode($p563);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb524:
    assume $i540 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i555 := $M.81;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i556 := $eq.i32($i555, 1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $i558 := $M.81;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i559 := $eq.i32($i558, 2);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb543:
    assume $i559 == 1;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p560 := $M.40;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} tcm_qla2xxx_queue_tm_rsp($p560);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1138} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb540:
    assume $i556 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p557 := $M.40;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} tcm_qla2xxx_queue_tm_rsp($p557);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb522:
    assume $i539 == 1;
    assume {:verifier.code 0} true;
    $i541 := $slt.i32($i502, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  $bb527:
    assume !($i541 == 1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i551 := $M.81;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i552 := $eq.i32($i551, 2);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb537:
    assume $i552 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p553 := $M.40;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_219 := tcm_qla2xxx_write_pending($p553);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb526:
    assume $i541 == 1;
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i502, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    assume !($i542 == 1);
    goto $bb463;

  $bb528:
    assume $i542 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i543 := $M.81;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i543, 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  $bb531:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $i547 := $M.81;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i547, 2);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb533:
    assume $i548 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p549 := $M.40;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_218 := tcm_qla2xxx_queue_status($p549);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1132} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb530:
    assume $i544 == 1;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p545 := $M.40;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_217 := tcm_qla2xxx_queue_status($p545);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1130} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb3:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i78, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i78, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i78, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i89 == 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i486 := $M.80;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb426:
    assume $i487 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} $i488 := __VERIFIER_nondet_int();
    call {:si_unique_call 1119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i488);
    call {:si_unique_call 1120} {:cexpr "tmp___56"} boogie_si_record_i32($i488);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $i489 := $slt.i32($i488, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i488, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ldv_stop();
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb431:
    assume $i490 == 1;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i496 := $M.80;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 1);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb440:
    assume $i497 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p498 := $M.58;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_216 := tcm_qla2xxx_tpg_attrib_show_generate_node_acls($p498, $p38);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb429:
    assume $i489 == 1;
    assume {:verifier.code 0} true;
    $i491 := $eq.i32($i488, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    assume !($i491 == 1);
    goto $bb433;

  $bb434:
    assume $i491 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i492 := $M.80;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i493 := $eq.i32($i492, 1);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb436:
    assume $i493 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p494 := $M.58;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} vslice_dummy_var_215 := tcm_qla2xxx_tpg_attrib_store_generate_node_acls($p494, $p36, $i37);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb24:
    assume $i89 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i472 := $M.79;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i473 := $ne.i32($i472, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb406:
    assume $i473 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} $i474 := __VERIFIER_nondet_int();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i474);
    call {:si_unique_call 1112} {:cexpr "tmp___55"} boogie_si_record_i32($i474);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $i475 := $slt.i32($i474, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i474, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    assume !($i476 == 1);
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_stop();
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb411:
    assume $i476 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i482 := $M.79;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i482, 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb420:
    assume $i483 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p484 := $M.37;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_214 := tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect($p484, $p35);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb409:
    assume $i475 == 1;
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i474, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    assume !($i477 == 1);
    goto $bb413;

  $bb414:
    assume $i477 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i478 := $M.79;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 1);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb416:
    assume $i479 == 1;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p480 := $M.37;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_213 := tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect($p480, $p33, $i34);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb22:
    assume $i88 == 1;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i458 := $M.78;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i459 := $ne.i32($i458, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb386:
    assume $i459 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $i460 := __VERIFIER_nondet_int();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i460);
    call {:si_unique_call 1104} {:cexpr "tmp___54"} boogie_si_record_i32($i460);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i461 := $slt.i32($i460, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i460, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_stop();
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb391:
    assume $i462 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i468 := $M.78;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i468, 1);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb400:
    assume $i469 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p470 := $M.47;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_212 := tcm_qla2xxx_tpg_show_enable($p470, $p32);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb389:
    assume $i461 == 1;
    assume {:verifier.code 0} true;
    $i463 := $eq.i32($i460, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    assume !($i463 == 1);
    goto $bb393;

  $bb394:
    assume $i463 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i464 := $M.78;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i464, 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb396:
    assume $i465 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p466 := $M.47;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_211 := tcm_qla2xxx_tpg_store_enable($p466, $p30, $i31);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1106} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb20:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i78, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i78, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i121 := $M.77;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb73:
    assume $i122 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} $i123 := __VERIFIER_nondet_int();
    call {:si_unique_call 947} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i123);
    call {:si_unique_call 948} {:cexpr "tmp___53"} boogie_si_record_i32($i123);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i123, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i123, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i123, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i123, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i123, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i123, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_stop();
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb88:
    assume $i130 == 1;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i453 := $M.77;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb380:
    assume $i454 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_210 := ldv_probe_3();
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1099} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i456 := $M.85;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i457 := $add.i32($i456, 1);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.85 := $i457;
    call {:si_unique_call 1100} {:cexpr "ref_cnt"} boogie_si_record_i32($i457);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb86:
    assume $i129 == 1;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i448 := $M.77;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 2);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb377:
    assume $i449 == 1;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_209 := ldv_release_3();
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1096} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i451 := $M.85;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i452 := $sub.i32($i451, 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.85 := $i452;
    call {:si_unique_call 1097} {:cexpr "ref_cnt"} boogie_si_record_i32($i452);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb84:
    assume $i128 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i440 := $M.77;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i440, 1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i444 := $M.77;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i444, 2);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb374:
    assume $i445 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p446 := $M.64;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_208 := tcm_qla2xxx_shutdown_session($p446);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1094} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb371:
    assume $i441 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p442 := $M.64;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_207 := tcm_qla2xxx_shutdown_session($p442);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1092} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb82:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i123, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i131 == 1);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i432 := $M.77;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i432, 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $i436 := $M.77;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 2);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb368:
    assume $i437 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p438 := $M.61;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_206 := tcm_qla2xxx_make_lport($p21, $p438, $p17);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1090} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb370;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb365:
    assume $i433 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p434 := $M.61;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} vslice_dummy_var_205 := tcm_qla2xxx_make_lport($p21, $p434, $p17);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1088} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb367;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i131 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i422 := $M.77;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i422, 1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $i427 := $M.77;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 2);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb362:
    assume $i428 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p429 := $M.65;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p430 := $M.61;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_204 := tcm_qla2xxx_make_tpg($p429, $p430, $p22);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1086} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb364;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb359:
    assume $i423 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p424 := $M.65;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p425 := $M.61;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_203 := tcm_qla2xxx_make_tpg($p424, $p425, $p22);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb361;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i123, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i123, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i123, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i134 == 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i414 := $M.77;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i414, 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i418 := $M.77;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 2);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb356:
    assume $i419 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p420 := $M.59;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_202 := tcm_qla2xxx_get_cmd_state($p420);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb353:
    assume $i415 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p416 := $M.59;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_201 := tcm_qla2xxx_get_cmd_state($p416);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb97:
    assume $i134 == 1;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i408 := $M.77;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i411 := $M.77;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 2);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb350:
    assume $i412 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p413 := $M.64;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} tcm_qla2xxx_close_session($p413);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1078} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb347:
    assume $i409 == 1;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p410 := $M.64;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} tcm_qla2xxx_close_session($p410);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1076} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb95:
    assume $i133 == 1;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i402 := $M.77;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i405 := $M.77;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i405, 2);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb344:
    assume $i406 == 1;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p407 := $M.62;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} tcm_qla2xxx_drop_tpg($p407);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1074} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb341:
    assume $i403 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p404 := $M.62;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} tcm_qla2xxx_drop_tpg($p404);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb93:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i123, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i135 == 1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i392 := $M.77;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $i397 := $M.77;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 2);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb338:
    assume $i398 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p399 := $M.62;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p400 := $M.61;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_200 := tcm_qla2xxx_make_nodeacl($p399, $p400, $p29);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb340;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb335:
    assume $i393 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p394 := $M.62;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p395 := $M.61;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_199 := tcm_qla2xxx_make_nodeacl($p394, $p395, $p29);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1068} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb337;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i135 == 1;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i384 := $M.77;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $i388 := $M.77;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 2);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb332:
    assume $i389 == 1;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p390 := $M.59;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_198 := tcm_qla2xxx_get_task_tag($p390);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb329:
    assume $i385 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p386 := $M.59;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_197 := tcm_qla2xxx_get_task_tag($p386);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb78:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i123, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i123, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i123, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i123, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i139 == 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i376 := $M.77;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $i380 := $M.77;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 2);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb326:
    assume $i381 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p382 := $M.62;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_196 := tcm_qla2xxx_alloc_fabric_acl($p382);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1062} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb328;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb323:
    assume $i377 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p378 := $M.62;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_195 := tcm_qla2xxx_alloc_fabric_acl($p378);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb325;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i139 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i368 := $M.77;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 1);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $i372 := $M.77;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 2);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb320:
    assume $i373 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p374 := $M.62;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_194 := tcm_qla2xxx_get_fabric_wwn($p374);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb317:
    assume $i369 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p370 := $M.62;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_193 := tcm_qla2xxx_get_fabric_wwn($p370);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb105:
    assume $i138 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i362 := $M.77;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i365 := $M.77;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 2);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb314:
    assume $i366 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p367 := $M.59;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} tcm_qla2xxx_aborted_task($p367);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb311:
    assume $i363 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p364 := $M.59;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} tcm_qla2xxx_aborted_task($p364);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1052} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb103:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i123, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i140 == 1);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i356 := $M.77;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 1);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i359 := $M.77;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 2);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb308:
    assume $i360 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_192 := tcm_qla2xxx_get_fabric_name();
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb305:
    assume $i357 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_191 := tcm_qla2xxx_get_fabric_name();
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb109:
    assume $i140 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i348 := $M.77;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $i352 := $M.77;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 2);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb302:
    assume $i353 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p354 := $M.62;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_190 := tcm_qla2xxx_check_demo_mode_login_only($p354);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1046} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb299:
    assume $i349 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p350 := $M.62;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_189 := tcm_qla2xxx_check_demo_mode_login_only($p350);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb101:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i123, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i123, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i123, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i143 == 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i340 := $M.77;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i344 := $M.77;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 2);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb296:
    assume $i345 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p346 := $M.62;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_188 := tcm_qla2xxx_get_tag($p346);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1042} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb293:
    assume $i341 == 1;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p342 := $M.62;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_187 := tcm_qla2xxx_get_tag($p342);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1040} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb115:
    assume $i143 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i332 := $M.77;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i336 := $M.77;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 2);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb290:
    assume $i337 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p338 := $M.62;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_186 := tcm_qla2xxx_tpg_get_inst_index($p338);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1038} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb287:
    assume $i333 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p334 := $M.62;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_185 := tcm_qla2xxx_tpg_get_inst_index($p334);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1036} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb113:
    assume $i142 == 1;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i324 := $M.77;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i328 := $M.77;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 2);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb284:
    assume $i329 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p330 := $M.59;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_184 := tcm_qla2xxx_check_stop_free($p330);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1034} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb281:
    assume $i325 == 1;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p326 := $M.59;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_183 := tcm_qla2xxx_check_stop_free($p326);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb111:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i123, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i144 == 1);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i312 := $M.77;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i318 := $M.77;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 2);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb278:
    assume $i319 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p320 := $M.62;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p321 := $M.63;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p322 := $M.60;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_182 := tcm_qla2xxx_get_pr_transport_id_len($p320, $p321, $p322, $p28);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume $i313 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p314 := $M.62;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p315 := $M.63;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p316 := $M.60;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_181 := tcm_qla2xxx_get_pr_transport_id_len($p314, $p315, $p316, $p28);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1028} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb117:
    assume $i144 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i304 := $M.77;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i308 := $M.77;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 2);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb272:
    assume $i309 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p310 := $M.59;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_180 := tcm_qla2xxx_write_pending_status($p310);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb269:
    assume $i305 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p306 := $M.59;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_179 := tcm_qla2xxx_write_pending_status($p306);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb76:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i123, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i123, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i123, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i123, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i123, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i149 == 1);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i296 := $M.77;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i300 := $M.77;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 2);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb266:
    assume $i301 == 1;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p302 := $M.62;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p303 := $M.63;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} tcm_qla2xxx_release_fabric_acl($p302, $p303);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb263:
    assume $i297 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p298 := $M.62;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p299 := $M.63;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} tcm_qla2xxx_release_fabric_acl($p298, $p299);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb127:
    assume $i149 == 1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i288 := $M.77;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i292 := $M.77;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 2);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb260:
    assume $i293 == 1;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p294 := $M.62;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_178 := tcm_qla2xxx_get_fabric_proto_ident($p294);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume $i289 == 1;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p290 := $M.62;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_177 := tcm_qla2xxx_get_fabric_proto_ident($p290);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb125:
    assume $i148 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i280 := $M.77;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 1);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i284 := $M.77;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 2);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb254:
    assume $i285 == 1;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p286 := $M.62;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_176 := tcm_qla2xxx_get_default_depth($p286);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i281 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p282 := $M.62;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_175 := tcm_qla2xxx_get_default_depth($p282);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb123:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i123, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i150 == 1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i268 := $M.77;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 1);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i274 := $M.77;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 2);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb248:
    assume $i275 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p276 := $M.62;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p277 := $M.63;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p278 := $M.60;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_174 := tcm_qla2xxx_get_pr_transport_id($p276, $p277, $p278, $p16, $p18);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i269 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p270 := $M.62;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p271 := $M.63;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p272 := $M.60;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} vslice_dummy_var_173 := tcm_qla2xxx_get_pr_transport_id($p270, $p271, $p272, $p16, $p18);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb129:
    assume $i150 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i262 := $M.77;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 1);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i265 := $M.77;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb242:
    assume $i266 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p267 := $M.65;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} tcm_qla2xxx_drop_lport($p267);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb239:
    assume $i263 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p264 := $M.65;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} tcm_qla2xxx_drop_lport($p264);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb121:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i123, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i123, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i123, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i153 == 1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i256 := $M.77;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i259 := $M.77;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 2);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb236:
    assume $i260 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p261 := $M.63;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} tcm_qla2xxx_drop_nodeacl($p261);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb233:
    assume $i257 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p258 := $M.63;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} tcm_qla2xxx_drop_nodeacl($p258);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb135:
    assume $i153 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i248 := $M.77;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i252 := $M.77;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 2);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb230:
    assume $i253 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p254 := $M.64;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_172 := tcm_qla2xxx_sess_get_index($p254);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb227:
    assume $i249 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p250 := $M.64;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_171 := tcm_qla2xxx_sess_get_index($p250);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb133:
    assume $i152 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i240 := $M.77;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i244 := $M.77;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 2);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb224:
    assume $i245 == 1;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p246 := $M.62;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_170 := tcm_qla2xxx_check_demo_mode($p246);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb221:
    assume $i241 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p242 := $M.62;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_169 := tcm_qla2xxx_check_demo_mode($p242);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb131:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i123, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i154 == 1);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i234 := $M.77;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i237 := $M.77;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 2);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb218:
    assume $i238 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p239 := $M.59;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} tcm_qla2xxx_release_cmd($p239);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb215:
    assume $i235 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p236 := $M.59;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} tcm_qla2xxx_release_cmd($p236);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb137:
    assume $i154 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i228 := $M.77;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i231 := $M.77;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 2);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb212:
    assume $i232 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p233 := $M.64;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} tcm_qla2xxx_put_session($p233);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb209:
    assume $i229 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p230 := $M.64;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} tcm_qla2xxx_put_session($p230);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb119:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i123, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i123, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i123, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i158 == 1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i220 := $M.77;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i224 := $M.77;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 2);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb206:
    assume $i225 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p226 := $M.62;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_168 := tcm_qla2xxx_check_prod_write_protect($p226);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb203:
    assume $i221 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p222 := $M.62;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_167 := tcm_qla2xxx_check_prod_write_protect($p222);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb145:
    assume $i158 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i212 := $M.77;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i216 := $M.77;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 2);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb200:
    assume $i217 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p218 := $M.62;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_166 := tcm_qla2xxx_parse_pr_out_transport_id($p218, $p19, $p24, $p26);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume $i213 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p214 := $M.62;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_165 := tcm_qla2xxx_parse_pr_out_transport_id($p214, $p19, $p24, $p26);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb143:
    assume $i157 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i206 := $M.77;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i209 := $M.77;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 2);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb194:
    assume $i210 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p211 := $M.63;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} tcm_qla2xxx_set_default_node_attrs($p211);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i207 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p208 := $M.63;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} tcm_qla2xxx_set_default_node_attrs($p208);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb141:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i123, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i159 == 1);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i198 := $M.77;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i202 := $M.77;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 2);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb188:
    assume $i203 == 1;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p204 := $M.62;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vslice_dummy_var_164 := tcm_qla2xxx_check_demo_mode_cache($p204);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i199 == 1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p200 := $M.62;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} vslice_dummy_var_163 := tcm_qla2xxx_check_demo_mode_cache($p200);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb147:
    assume $i159 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i190 := $M.77;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i194 := $M.77;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 2);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb182:
    assume $i195 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p196 := $M.59;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_162 := tcm_qla2xxx_queue_data_in($p196);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume $i191 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p192 := $M.59;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_161 := tcm_qla2xxx_queue_data_in($p192);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb139:
    assume $i155 == 1;
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i123, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i161 == 1);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i182 := $M.77;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i186 := $M.77;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb176:
    assume $i187 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p188 := $M.62;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_160 := tcm_qla2xxx_check_demo_write_protect($p188);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 962} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume $i183 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p184 := $M.62;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_159 := tcm_qla2xxx_check_demo_write_protect($p184);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb151:
    assume $i161 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i176 := $M.77;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i179 := $M.77;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb170:
    assume $i180 == 1;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p181 := $M.59;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} tcm_qla2xxx_queue_tm_rsp($p181);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 958} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb167:
    assume $i177 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p178 := $M.59;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} tcm_qla2xxx_queue_tm_rsp($p178);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 956} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb149:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i123, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i162 == 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i172 := $M.77;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 2);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb164:
    assume $i173 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p174 := $M.59;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_158 := tcm_qla2xxx_write_pending($p174);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb153:
    assume $i162 == 1;
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i123, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb90;

  $bb155:
    assume $i163 == 1;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i164 := $M.77;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i168 := $M.77;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 2);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i169 == 1;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p170 := $M.59;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_157 := tcm_qla2xxx_queue_status($p170);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i165 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p166 := $M.59;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_156 := tcm_qla2xxx_queue_status($p166);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb28:
    assume $i91 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i107 := $M.76;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i108 == 1;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 938} $i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 939} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i109);
    call {:si_unique_call 940} {:cexpr "tmp___52"} boogie_si_record_i32($i109);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} ldv_stop();
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb58:
    assume $i111 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i117 := $M.76;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb67:
    assume $i118 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p119 := $M.49;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_155 := tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls($p119, $p13);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 944} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb56:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i109, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb60;

  $bb61:
    assume $i112 == 1;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i113 := $M.76;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i114 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p115 := $M.49;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_154 := tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls($p115, $p14, $i12);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 942} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb26:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i78, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb13;

  $bb30:
    assume $i92 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i93 := $M.75;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb32:
    assume $i94 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 930} $i95 := __VERIFIER_nondet_int();
    call {:si_unique_call 931} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i95);
    call {:si_unique_call 932} {:cexpr "tmp___51"} boogie_si_record_i32($i95);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_stop();
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb37:
    assume $i97 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i103 := $M.75;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i104 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p105 := $M.48;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_153 := tcm_qla2xxx_npiv_tpg_show_enable($p105, $p10);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 936} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb35:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i95, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb39;

  $bb40:
    assume $i98 == 1;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i99 := $M.75;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i100 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p101 := $M.48;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_152 := tcm_qla2xxx_npiv_tpg_store_enable($p101, $p11, $i9);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb52_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i78);
    call {:si_unique_call 929} {:cexpr "tmp___50"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 414880);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 415912);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 416944);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 417976);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1370} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 419008);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1372} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_2: ref;

axiom ldv_release_2 == $sub.ref(0, 420040);

procedure ldv_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1374} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1375} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 421072);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1376} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const tcm_qla2xxx_exit: ref;

axiom tcm_qla2xxx_exit == $sub.ref(0, 422104);

procedure tcm_qla2xxx_exit();
  free requires assertsPassed;
  modifies $M.21, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.30, $CurrAddr;



implementation tcm_qla2xxx_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} tcm_qla2xxx_deregister_configfs();
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_init: ref;

axiom tcm_qla2xxx_init == $sub.ref(0, 423136);

procedure tcm_qla2xxx_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.0, $M.21, $M.30, $M.2, $M.95, $CurrAddr, assertsPassed;



implementation tcm_qla2xxx_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i0 := tcm_qla2xxx_register_configfs();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 1380} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 424168);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_register_configfs: ref;

axiom tcm_qla2xxx_register_configfs == $sub.ref(0, 425200);

procedure tcm_qla2xxx_register_configfs() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.0, $M.21, $M.30, $M.2, $M.95, $CurrAddr, assertsPassed;



implementation tcm_qla2xxx_register_configfs() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p45: ref;
  var $p48: ref;
  var $p51: ref;
  var $p54: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i24;
  var $i77: i24;
  var $i78: i24;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i1;
  var $i90: i8;
  var $i91: i1;
  var $p93: ref;
  var $i94: i64;
  var $i95: i32;
  var $p97: ref;
  var $p98: ref;
  var $p101: ref;
  var $p104: ref;
  var $p107: ref;
  var $p110: ref;
  var $p113: ref;
  var $p116: ref;
  var $p119: ref;
  var $p122: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i24;
  var $i136: i24;
  var $i137: i24;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i96: i32;
  var $p156: ref;
  var $i37: i32;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.5);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.40);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.7);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p8, .str.41);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.9, $p10);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 2086);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p10, $i13);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p14, 0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.10, $p15);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1387} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p28 := target_fabric_configfs_init(__this_module, .str.10);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i30 := IS_ERR($p29);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 1393} {:cexpr "tmp___3"} boogie_si_record_i8($i31);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(328, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 1397} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p39, tcm_qla2xxx_ops, 344, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, tcm_qla2xxx_wwn_attrs);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, tcm_qla2xxx_tpg_attrs);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(320, 1)), $mul.ref(24, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, tcm_qla2xxx_tpg_attrib_attrs);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(384, 1)), $mul.ref(24, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $0.ref);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(288, 1)), $mul.ref(24, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $0.ref);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(448, 1)), $mul.ref(24, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $0.ref);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(480, 1)), $mul.ref(24, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(512, 1)), $mul.ref(24, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $0.ref);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(544, 1)), $mul.ref(24, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i67 := target_fabric_configfs_register($p28);
    call {:si_unique_call 1399} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.21 := $p28;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p70, .str.5);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p71, .str.40);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p72, .str.7);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p73, .str.44);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i76 := $load.i24($M.9, $p75);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i77 := $and.i24($i76, $sub.i24(0, 262144));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i78 := $or.i24($i77, 2124);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p75, $i78);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p79, 0);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.10, $p80);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i64($i81);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 1402} {:cexpr "tmp___4"} boogie_si_record_i64($i84);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p87 := target_fabric_configfs_init(__this_module, .str.28);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i89 := IS_ERR($p88);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i8($i89);
    call {:si_unique_call 1406} {:cexpr "tmp___6"} boogie_si_record_i8($i90);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i8.i1($i90);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(328, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 1412} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p98, tcm_qla2xxx_npiv_ops, 344, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, tcm_qla2xxx_wwn_attrs);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, tcm_qla2xxx_npiv_tpg_attrs);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(320, 1)), $mul.ref(24, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $0.ref);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(384, 1)), $mul.ref(24, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $0.ref);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(288, 1)), $mul.ref(24, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, $0.ref);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(448, 1)), $mul.ref(24, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $0.ref);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(480, 1)), $mul.ref(24, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, $0.ref);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(512, 1)), $mul.ref(24, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p122, $0.ref);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 1344)), $mul.ref(672, 1)), $mul.ref(544, 1)), $mul.ref(24, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $0.ref);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $i126 := target_fabric_configfs_register($p87);
    call {:si_unique_call 1414} {:cexpr "ret"} boogie_si_record_i32($i126);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 0);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $M.30 := $p87;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p129, .str.5);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p130, .str.40);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p131, .str.7);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p132, .str.45);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i135 := $load.i24($M.9, $p134);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i136 := $and.i24($i135, $sub.i24(0, 262144));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i137 := $or.i24($i136, 2164);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p134, $i137);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p138, 0);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.10, $p139);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i64($i140);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i141, 1);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 1417} {:cexpr "tmp___7"} boogie_si_record_i64($i143);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p146 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.47, 8, 0, $p3, .str.46);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.2 := $p146;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p147 := $M.2;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i148, 0);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p150 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.49, 0, 0, $p4, .str.48);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.95 := $p150;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p151 := $M.95;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i153 := $eq.i64($i152, 0);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb28:
    assume $i153 == 1;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p154 := $M.2;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} destroy_workqueue($p154);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p155 := $M.30;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} target_fabric_configfs_deregister($p155);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32(0, 12);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p156 := $M.21;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} target_fabric_configfs_deregister($p156);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i37 := $i96;
    goto $bb6;

  $bb24:
    assume $i149 == 1;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i144 == 1;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_288 := __dynamic_pr_debug.ref.ref($p2, .str.45);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i127 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} vslice_dummy_var_287 := printk.ref(.str.43);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i96 := $i126;
    goto $bb16;

  $bb14:
    assume $i91 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_286 := printk.ref(.str.42);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p87);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i94 := PTR_ERR($p93);
    call {:si_unique_call 1409} {:cexpr "tmp___5"} boogie_si_record_i64($i94);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i32($i94);
    call {:si_unique_call 1410} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb16;

  $bb11:
    assume $i85 == 1;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} vslice_dummy_var_285 := __dynamic_pr_debug.ref.ref($p1, .str.44);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i68 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} vslice_dummy_var_284 := printk.ref(.str.43);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i37 := $i67;
    goto $bb6;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_283 := printk.ref(.str.42);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p28);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i35 := PTR_ERR($p34);
    call {:si_unique_call 1396} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p21 := utsname();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p22 := utsname();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 390)), $mul.ref(0, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 390)), $mul.ref(260, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_282 := __dynamic_pr_debug.ref.ref.ref.ref.ref($p0, .str.41, .str.36, $p24, $p26);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const target_fabric_configfs_init: ref;

axiom target_fabric_configfs_init == $sub.ref(0, 426232);

procedure target_fabric_configfs_init($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation target_fabric_configfs_init($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p2 := external_alloc();
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const target_fabric_configfs_register: ref;

axiom target_fabric_configfs_register == $sub.ref(0, 427264);

procedure target_fabric_configfs_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation target_fabric_configfs_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1424} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1425} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 428296);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1427} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p5 := external_alloc();
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 429328);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    return;
}



const target_fabric_configfs_deregister: ref;

axiom target_fabric_configfs_deregister == $sub.ref(0, 430360);

procedure target_fabric_configfs_deregister($p0: ref);
  free requires assertsPassed;



implementation target_fabric_configfs_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    return;
}



const tcm_qla2xxx_deregister_configfs: ref;

axiom tcm_qla2xxx_deregister_configfs == $sub.ref(0, 431392);

procedure tcm_qla2xxx_deregister_configfs();
  free requires assertsPassed;
  modifies $M.21, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.30, $CurrAddr;



implementation tcm_qla2xxx_deregister_configfs()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p2 := $M.95;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} destroy_workqueue($p2);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p3 := $M.2;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} destroy_workqueue($p3);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p4 := $M.21;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} target_fabric_configfs_deregister($p4);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $M.21 := $0.ref;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.5);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.37);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.7);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p8, .str.38);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.9, $p10);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 2197);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p10, $i13);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p14, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.10, $p15);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1435} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $M.30;
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} target_fabric_configfs_deregister($p22);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.30 := $0.ref;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p23, .str.5);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p24, .str.37);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p25, .str.7);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p26, .str.39);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.9, $p28);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 2201);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.9 := $store.i24($M.9, $p28, $i31);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p32, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.10, $p33);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 1439} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_290 := __dynamic_pr_debug.ref.ref($p1, .str.39);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_289 := __dynamic_pr_debug.ref.ref($p0, .str.38);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 432424);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1441} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 1} true;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 433456);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 434488);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 435520);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 436552);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 437584);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 438616);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 439648);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1443} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1444} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} __VERIFIER_assume($i6);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 440680);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 441712);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 442744);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 443776);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 444808);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 445840);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 446872);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1446} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1447} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1448} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1449} __VERIFIER_assume($i4);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 447904);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 448936);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 449968);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 451000);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1451} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1452} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1453} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1454} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1455} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1458} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} __VERIFIER_assume($i7);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1460} __VERIFIER_assume($i11);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 452032);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 453064);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 454096);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 455128);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 456160);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 457192);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1461} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1462} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1463} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1464} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1465} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1466} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1467} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1468} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1469} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1470} __VERIFIER_assume($i7);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1471} __VERIFIER_assume($i11);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 458224);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 459256);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 460288);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 461320);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 462352);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 463384);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 464416);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 465448);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 466480);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1474} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} __VERIFIER_assume($i10);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 467512);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1476} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1477} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1478} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 468544);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1479} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1480} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1481} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 469576);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1482} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1483} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1484} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 470608);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1485} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1486} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 471640);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 472672);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1487} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1488} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 473704);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 474736);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 475768);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1489} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1490} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1491} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p6 := malloc($i5);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1494} cmdloc_dummy_var_55 := $memset.i8(cmdloc_dummy_var_54, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 476800);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 477832);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.93, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.94, $M.17, $M.2, $M.95, $M.21, $M.30, $M.0, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1495} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    call {:si_unique_call 1496} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.93 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := $0.ref;
    $M.58 := $0.ref;
    $M.59 := $0.ref;
    $M.60 := $0.ref;
    $M.61 := $0.ref;
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1500} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1504} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1506} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1507} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1511} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 1512} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.2 := $0.ref;
    $M.95 := $0.ref;
    $M.21 := $0.ref;
    $M.30 := $0.ref;
    $M.0 := $store.ref($M.0, tcm_qla2xxx_npiv_tpg_enable, .str.51);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_npiv_tpg_enable, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_npiv_tpg_enable, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_tpg_enable, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_npiv_tpg_show_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_tpg_enable, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_npiv_tpg_store_enable);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_npiv_tpg_attrs, tcm_qla2xxx_npiv_tpg_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_tpg_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_npiv_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(8, 1)), tcm_qla2xxx_npiv_get_fabric_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(16, 1)), tcm_qla2xxx_get_fabric_proto_ident);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(24, 1)), tcm_qla2xxx_get_fabric_wwn);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(32, 1)), tcm_qla2xxx_get_tag);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(40, 1)), tcm_qla2xxx_get_default_depth);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(48, 1)), tcm_qla2xxx_get_pr_transport_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(56, 1)), tcm_qla2xxx_get_pr_transport_id_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(64, 1)), tcm_qla2xxx_parse_pr_out_transport_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(72, 1)), tcm_qla2xxx_check_demo_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(80, 1)), tcm_qla2xxx_check_demo_mode_cache);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(88, 1)), tcm_qla2xxx_check_demo_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(96, 1)), tcm_qla2xxx_check_prod_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(104, 1)), tcm_qla2xxx_check_demo_mode_login_only);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(112, 1)), tcm_qla2xxx_alloc_fabric_acl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(120, 1)), tcm_qla2xxx_release_fabric_acl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(128, 1)), tcm_qla2xxx_tpg_get_inst_index);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(136, 1)), tcm_qla2xxx_check_stop_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(144, 1)), tcm_qla2xxx_release_cmd);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(152, 1)), tcm_qla2xxx_put_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(160, 1)), tcm_qla2xxx_shutdown_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(168, 1)), tcm_qla2xxx_close_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(176, 1)), tcm_qla2xxx_sess_get_index);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(192, 1)), tcm_qla2xxx_write_pending);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(200, 1)), tcm_qla2xxx_write_pending_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(208, 1)), tcm_qla2xxx_set_default_node_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(216, 1)), tcm_qla2xxx_get_task_tag);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(224, 1)), tcm_qla2xxx_get_cmd_state);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(232, 1)), tcm_qla2xxx_queue_data_in);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(240, 1)), tcm_qla2xxx_queue_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(248, 1)), tcm_qla2xxx_queue_tm_rsp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(256, 1)), tcm_qla2xxx_aborted_task);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(264, 1)), tcm_qla2xxx_npiv_make_lport);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(272, 1)), tcm_qla2xxx_npiv_drop_lport);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(280, 1)), tcm_qla2xxx_npiv_make_tpg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(288, 1)), tcm_qla2xxx_drop_tpg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(328, 1)), tcm_qla2xxx_make_nodeacl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_npiv_ops, $mul.ref(0, 344)), $mul.ref(336, 1)), tcm_qla2xxx_drop_nodeacl);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrib_demo_mode_login_only, .str.56);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_login_only, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_login_only, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_login_only, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_login_only, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrib_prod_mode_write_protect, .str.55);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_prod_mode_write_protect, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_prod_mode_write_protect, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_prod_mode_write_protect, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_prod_mode_write_protect, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrib_demo_mode_write_protect, .str.54);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_write_protect, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_write_protect, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_write_protect, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_demo_mode_write_protect, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrib_cache_dynamic_acls, .str.53);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_cache_dynamic_acls, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_cache_dynamic_acls, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_cache_dynamic_acls, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_cache_dynamic_acls, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrib_generate_node_acls, .str.52);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_generate_node_acls, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_attrib_generate_node_acls, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_generate_node_acls, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_tpg_attrib_show_generate_node_acls);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_generate_node_acls, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_tpg_attrib_store_generate_node_acls);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrib_attrs, tcm_qla2xxx_tpg_attrib_generate_node_acls);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_attrs, $mul.ref(0, 48)), $mul.ref(1, 8)), tcm_qla2xxx_tpg_attrib_cache_dynamic_acls);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_attrs, $mul.ref(0, 48)), $mul.ref(2, 8)), tcm_qla2xxx_tpg_attrib_demo_mode_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_attrs, $mul.ref(0, 48)), $mul.ref(3, 8)), tcm_qla2xxx_tpg_attrib_prod_mode_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_attrs, $mul.ref(0, 48)), $mul.ref(4, 8)), tcm_qla2xxx_tpg_attrib_demo_mode_login_only);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrib_attrs, $mul.ref(0, 48)), $mul.ref(5, 8)), $0.ref);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_enable, .str.51);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_enable, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_tpg_enable, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_enable, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_tpg_show_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_enable, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_qla2xxx_tpg_store_enable);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_tpg_attrs, tcm_qla2xxx_tpg_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_tpg_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_wwn_version, .str.50);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_wwn_version, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(tcm_qla2xxx_wwn_version, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 292);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_wwn_version, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_qla2xxx_wwn_show_attr_version);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_wwn_version, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_wwn_attrs, tcm_qla2xxx_wwn_version);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_wwn_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, tcm_qla2xxx_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(8, 1)), tcm_qla2xxx_get_fabric_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(16, 1)), tcm_qla2xxx_get_fabric_proto_ident);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(24, 1)), tcm_qla2xxx_get_fabric_wwn);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(32, 1)), tcm_qla2xxx_get_tag);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(40, 1)), tcm_qla2xxx_get_default_depth);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(48, 1)), tcm_qla2xxx_get_pr_transport_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(56, 1)), tcm_qla2xxx_get_pr_transport_id_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(64, 1)), tcm_qla2xxx_parse_pr_out_transport_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(72, 1)), tcm_qla2xxx_check_demo_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(80, 1)), tcm_qla2xxx_check_demo_mode_cache);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(88, 1)), tcm_qla2xxx_check_demo_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(96, 1)), tcm_qla2xxx_check_prod_write_protect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(104, 1)), tcm_qla2xxx_check_demo_mode_login_only);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(112, 1)), tcm_qla2xxx_alloc_fabric_acl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(120, 1)), tcm_qla2xxx_release_fabric_acl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(128, 1)), tcm_qla2xxx_tpg_get_inst_index);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(136, 1)), tcm_qla2xxx_check_stop_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(144, 1)), tcm_qla2xxx_release_cmd);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(152, 1)), tcm_qla2xxx_put_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(160, 1)), tcm_qla2xxx_shutdown_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(168, 1)), tcm_qla2xxx_close_session);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(176, 1)), tcm_qla2xxx_sess_get_index);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(192, 1)), tcm_qla2xxx_write_pending);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(200, 1)), tcm_qla2xxx_write_pending_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(208, 1)), tcm_qla2xxx_set_default_node_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(216, 1)), tcm_qla2xxx_get_task_tag);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(224, 1)), tcm_qla2xxx_get_cmd_state);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(232, 1)), tcm_qla2xxx_queue_data_in);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(240, 1)), tcm_qla2xxx_queue_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(248, 1)), tcm_qla2xxx_queue_tm_rsp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(256, 1)), tcm_qla2xxx_aborted_task);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(264, 1)), tcm_qla2xxx_make_lport);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(272, 1)), tcm_qla2xxx_drop_lport);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(280, 1)), tcm_qla2xxx_make_tpg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(288, 1)), tcm_qla2xxx_drop_tpg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(328, 1)), tcm_qla2xxx_make_nodeacl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(tcm_qla2xxx_ops, $mul.ref(0, 344)), $mul.ref(336, 1)), tcm_qla2xxx_drop_nodeacl);
    $M.110 := $store.i8($M.110, .str.98, 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(1, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(2, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(3, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(4, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(5, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(6, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(7, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(8, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(9, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(10, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(11, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(12, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(13, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(14, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(15, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(16, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(17, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(18, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(19, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(20, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(21, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(22, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(23, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(24, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(25, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(26, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(27, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(28, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(29, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(30, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(31, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(32, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(33, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(34, 1)), 58);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(35, 1)), 37);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(36, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(37, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(38, 1)), 120);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(.str.98, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.111 := $store.i8($M.111, .str.15, 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(1, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(2, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(3, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(4, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(5, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(6, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(7, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(8, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(9, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(10, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(11, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(12, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(13, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(14, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(15, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(16, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(17, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(18, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(19, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(20, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(21, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(22, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(23, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(24, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(25, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(26, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(27, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(28, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(29, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(30, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(31, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(32, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(33, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(34, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(35, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(36, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(37, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(38, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(39, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(40, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(41, 1)), 58);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(42, 1)), 37);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(43, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(44, 1)), 46);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(45, 1)), 50);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(46, 1)), 120);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(.str.15, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.112 := $store.i8($M.112, .str.16, 116);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(2, 1)), 103);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(4, 1)), 95);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.16, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.113 := $store.i8($M.113, .str.20, 110);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(1, 1)), 97);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(2, 1)), 97);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(3, 1)), 46);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(5, 1)), 48);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(6, 1)), 49);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(7, 1)), 54);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(8, 1)), 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(9, 1)), 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(10, 1)), 120);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.20, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.114 := $store.i8($M.114, .str.35, 84);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(1, 1)), 67);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(2, 1)), 77);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(3, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(4, 1)), 81);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(5, 1)), 76);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(6, 1)), 79);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(7, 1)), 71);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(8, 1)), 73);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(9, 1)), 67);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(10, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(11, 1)), 81);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(12, 1)), 76);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(13, 1)), 65);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(14, 1)), 50);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(15, 1)), 88);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(16, 1)), 88);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(17, 1)), 88);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(18, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(19, 1)), 78);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(20, 1)), 80);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(21, 1)), 73);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(22, 1)), 86);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(23, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(24, 1)), 99);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(25, 1)), 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(26, 1)), 112);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(27, 1)), 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(28, 1)), 98);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(29, 1)), 108);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(30, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(31, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(32, 1)), 102);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(33, 1)), 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(34, 1)), 98);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(35, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(36, 1)), 105);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(37, 1)), 99);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(38, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(39, 1)), 109);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(40, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(41, 1)), 100);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(42, 1)), 117);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(43, 1)), 108);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(44, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(45, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(46, 1)), 37);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(47, 1)), 115);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(48, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(49, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(50, 1)), 110);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(51, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(52, 1)), 37);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(53, 1)), 115);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(54, 1)), 47);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(55, 1)), 37);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(56, 1)), 115);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(57, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(58, 1)), 111);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(59, 1)), 110);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(60, 1)), 32);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(61, 1)), 51);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(62, 1)), 46);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(63, 1)), 49);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(64, 1)), 54);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(65, 1)), 46);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(66, 1)), 48);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(67, 1)), 45);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(68, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(69, 1)), 99);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(70, 1)), 49);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(71, 1)), 10);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.35, $mul.ref(0, 73)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 5)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.115 := $store.i8($M.115, .str.27, 37);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.116 := $store.i8($M.116, .str.4, 37);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.4, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.4, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.4, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(3, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(7, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(10, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(10, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, .str.29, 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.29, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.29, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    call {:si_unique_call 1513} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 478864);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 479896);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.24, $CurrAddr, $M.14, $M.15, $M.16;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i49 := $eq.ref(tcm_qla2xxx_npiv_drop_lport, $p0);
    assume {:branchcond $i49} true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i49 == 1);
    $i48 := $eq.ref(tcm_qla2xxx_undepend_tpg, $p0);
    assume {:branchcond $i48} true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i48 == 1);
    $i47 := $eq.ref(tcm_qla2xxx_depend_tpg, $p0);
    assume {:branchcond $i47} true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i47 == 1);
    $i46 := $eq.ref(tcm_qla2xxx_drop_nodeacl, $p0);
    assume {:branchcond $i46} true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i46 == 1);
    $i45 := $eq.ref(tcm_qla2xxx_drop_tpg, $p0);
    assume {:branchcond $i45} true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i45 == 1);
    $i44 := $eq.ref(tcm_qla2xxx_drop_lport, $p0);
    assume {:branchcond $i44} true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i44 == 1);
    $i43 := $eq.ref(tcm_qla2xxx_aborted_task, $p0);
    assume {:branchcond $i43} true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i43 == 1);
    $i42 := $eq.ref(tcm_qla2xxx_queue_tm_rsp, $p0);
    assume {:branchcond $i42} true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i42 == 1);
    $i41 := $eq.ref(tcm_qla2xxx_set_default_node_attrs, $p0);
    assume {:branchcond $i41} true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i41 == 1);
    $i40 := $eq.ref(tcm_qla2xxx_close_session, $p0);
    assume {:branchcond $i40} true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i40 == 1);
    $i39 := $eq.ref(tcm_qla2xxx_put_session, $p0);
    assume {:branchcond $i39} true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i39 == 1);
    $i38 := $eq.ref(tcm_qla2xxx_release_cmd, $p0);
    assume {:branchcond $i38} true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i38 == 1);
    $i37 := $eq.ref(tcm_qla2xxx_handle_data_work, $p0);
    assume {:branchcond $i37} true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i37 == 1);
    $i36 := $eq.ref(tcm_qla2xxx_handle_dif_work, $p0);
    assume true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i36 == 1);
    $i35 := $eq.ref(tcm_qla2xxx_complete_free, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i35 == 1);
    $i34 := $eq.ref(tcm_qla2xxx_complete_mcmd, $p0);
    assume {:branchcond $i34} true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i34 == 1);
    $i33 := $eq.ref(tcm_qla2xxx_release_session, $p0);
    assume {:branchcond $i33} true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i33 == 1);
    $i32 := $eq.ref(tcm_qla2xxx_shutdown_sess, $p0);
    assume {:branchcond $i32} true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i32 == 1);
    $i31 := $eq.ref(tcm_qla2xxx_put_sess, $p0);
    assume {:branchcond $i31} true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i31 == 1);
    $i30 := $eq.ref(tcm_qla2xxx_clear_nacl_from_fcport_map, $p0);
    assume {:branchcond $i30} true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i30 == 1);
    $i29 := $eq.ref(tcm_qla2xxx_free_session, $p0);
    assume {:branchcond $i29} true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(tcm_qla2xxx_free_mcmd, $p0);
    assume {:branchcond $i28} true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(tcm_qla2xxx_free_cmd, $p0);
    assume {:branchcond $i27} true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(tcm_qla2xxx_handle_dif_err, $p0);
    assume {:branchcond $i26} true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(tcm_qla2xxx_handle_data, $p0);
    assume true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1514} tcm_qla2xxx_handle_data($p1);
    return;

  $bb3:
    assume $i26 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1515} tcm_qla2xxx_handle_dif_err($p2);
    return;

  $bb4:
    assume $i27 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1516} tcm_qla2xxx_free_cmd($p3);
    return;

  $bb5:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1517} tcm_qla2xxx_free_mcmd($p4);
    return;

  $bb6:
    assume $i29 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1518} tcm_qla2xxx_free_session($p5);
    return;

  $bb7:
    assume $i30 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1519} tcm_qla2xxx_clear_nacl_from_fcport_map($p6);
    return;

  $bb8:
    assume $i31 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1520} tcm_qla2xxx_put_sess($p7);
    return;

  $bb9:
    assume $i32 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1521} tcm_qla2xxx_shutdown_sess($p8);
    return;

  $bb10:
    assume $i33 == 1;
    call {:si_unique_call 1522} tcm_qla2xxx_release_session(arg);
    return;

  $bb11:
    assume $i34 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1523} tcm_qla2xxx_complete_mcmd($p9);
    return;

  $bb12:
    assume $i35 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1524} tcm_qla2xxx_complete_free($p10);
    return;

  $bb13:
    assume $i36 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1525} tcm_qla2xxx_handle_dif_work($p11);
    return;

  $bb14:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1526} tcm_qla2xxx_handle_data_work($p12);
    return;

  $bb15:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1527} tcm_qla2xxx_release_cmd($p13);
    return;

  $bb16:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1528} tcm_qla2xxx_put_session($p14);
    return;

  $bb17:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1529} tcm_qla2xxx_close_session($p15);
    return;

  $bb18:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1530} tcm_qla2xxx_set_default_node_attrs($p16);
    return;

  $bb19:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1531} tcm_qla2xxx_queue_tm_rsp($p17);
    return;

  $bb20:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1532} tcm_qla2xxx_aborted_task($p18);
    return;

  $bb21:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1533} tcm_qla2xxx_drop_lport($p19);
    return;

  $bb22:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1534} tcm_qla2xxx_drop_tpg($p20);
    return;

  $bb23:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1535} tcm_qla2xxx_drop_nodeacl($p21);
    return;

  $bb24:
    assume $i47 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1536} tcm_qla2xxx_depend_tpg($p22);
    return;

  $bb25:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1537} tcm_qla2xxx_undepend_tpg($p23);
    return;

  $bb26:
    assume $i49 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1538} tcm_qla2xxx_npiv_drop_lport($p24);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 480928);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 481960);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i48 := $eq.ref(tcm_qla2xxx_queue_status, $p0);
    assume {:branchcond $i48} true;
    goto $bb17, $bb33;

  $bb33:
    assume !($i48 == 1);
    $i47 := $eq.ref(tcm_qla2xxx_queue_data_in, $p0);
    assume {:branchcond $i47} true;
    goto $bb16, $bb32;

  $bb32:
    assume !($i47 == 1);
    $i46 := $eq.ref(tcm_qla2xxx_get_cmd_state, $p0);
    assume {:branchcond $i46} true;
    goto $bb15, $bb31;

  $bb31:
    assume !($i46 == 1);
    $i45 := $eq.ref(tcm_qla2xxx_get_task_tag, $p0);
    assume {:branchcond $i45} true;
    goto $bb14, $bb30;

  $bb30:
    assume !($i45 == 1);
    $i44 := $eq.ref(tcm_qla2xxx_write_pending_status, $p0);
    assume {:branchcond $i44} true;
    goto $bb13, $bb29;

  $bb29:
    assume !($i44 == 1);
    $i43 := $eq.ref(tcm_qla2xxx_write_pending, $p0);
    assume {:branchcond $i43} true;
    goto $bb12, $bb28;

  $bb28:
    assume !($i43 == 1);
    $i42 := $eq.ref(tcm_qla2xxx_sess_get_index, $p0);
    assume {:branchcond $i42} true;
    goto $bb11, $bb27;

  $bb27:
    assume !($i42 == 1);
    $i41 := $eq.ref(tcm_qla2xxx_shutdown_session, $p0);
    assume {:branchcond $i41} true;
    goto $bb10, $bb26;

  $bb26:
    assume !($i41 == 1);
    $i40 := $eq.ref(tcm_qla2xxx_check_stop_free, $p0);
    assume {:branchcond $i40} true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i40 == 1);
    $i39 := $eq.ref(tcm_qla2xxx_tpg_get_inst_index, $p0);
    assume {:branchcond $i39} true;
    goto $bb8, $bb24;

  $bb24:
    assume !($i39 == 1);
    $i38 := $eq.ref(tcm_qla2xxx_check_demo_mode_login_only, $p0);
    assume {:branchcond $i38} true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i38 == 1);
    $i37 := $eq.ref(tcm_qla2xxx_check_prod_write_protect, $p0);
    assume {:branchcond $i37} true;
    goto $bb6, $bb22;

  $bb22:
    assume !($i37 == 1);
    $i36 := $eq.ref(tcm_qla2xxx_check_demo_write_protect, $p0);
    assume true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(tcm_qla2xxx_check_demo_mode_cache, $p0);
    assume true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(tcm_qla2xxx_check_demo_mode, $p0);
    assume {:branchcond $i34} true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(tcm_qla2xxx_get_default_depth, $p0);
    assume {:branchcond $i33} true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume false;
    return;

  $bb2:
    assume $i33 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1539} $i2 := tcm_qla2xxx_get_default_depth($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i34 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1540} $i4 := tcm_qla2xxx_check_demo_mode($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i35 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1541} $i6 := tcm_qla2xxx_check_demo_mode_cache($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i36 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1542} $i8 := tcm_qla2xxx_check_demo_write_protect($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i37 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1543} $i10 := tcm_qla2xxx_check_prod_write_protect($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i38 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1544} $i12 := tcm_qla2xxx_check_demo_mode_login_only($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i39 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1545} $i14 := tcm_qla2xxx_tpg_get_inst_index($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1546} $i16 := tcm_qla2xxx_check_stop_free($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i41 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1547} $i18 := tcm_qla2xxx_shutdown_session($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i42 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1548} $i20 := tcm_qla2xxx_sess_get_index($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i43 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1549} $i22 := tcm_qla2xxx_write_pending($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i44 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1550} $i24 := tcm_qla2xxx_write_pending_status($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i45 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1551} $i26 := tcm_qla2xxx_get_task_tag($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i46 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1552} $i28 := tcm_qla2xxx_get_cmd_state($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i47 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1553} $i30 := tcm_qla2xxx_queue_data_in($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i48 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1554} $i32 := tcm_qla2xxx_queue_status($p31);
    $r := $i32;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 482992);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 484024);

procedure devirtbounce.5(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 485056);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 486088);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(tcm_qla2xxx_alloc_fabric_acl, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(tcm_qla2xxx_get_fabric_wwn, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1555} $p2 := tcm_qla2xxx_get_fabric_wwn($p1);
    $r := $p2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1556} $p4 := tcm_qla2xxx_alloc_fabric_acl($p3);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    $r := $p4;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 487120);

procedure devirtbounce.8(funcPtr: ref, arg: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.93, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.94, $M.17, $M.2, $M.95, $M.21, $M.30, $M.0, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1557} __SMACK_static_init();
    call {:si_unique_call 1558} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.18, $M.94, $M.54, $M.55, $M.56, $M.57, $M.38, $M.46, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.58, $M.37, $M.47, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.49, $M.48, $M.4, $M.93, $M.2, $M.95, $M.21, $M.30, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $CurrAddr, $M.24, $M.29, $M.14, $M.15, $M.16, $M.22, $M.36;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation tcm_qla2xxx_free_session_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} tcm_qla2xxx_free_session_loop_$bb3();
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_free_session_loop_$bb3();



implementation tcm_qla2xxx_put_sess_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} tcm_qla2xxx_put_sess_loop_$bb7();
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_put_sess_loop_$bb7();



implementation tcm_qla2xxx_shutdown_sess_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} tcm_qla2xxx_shutdown_sess_loop_$bb3();
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_shutdown_sess_loop_$bb3();



implementation tcm_qla2xxx_shutdown_session_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} tcm_qla2xxx_shutdown_session_loop_$bb3();
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_shutdown_session_loop_$bb3();



implementation tcm_qla2xxx_close_session_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} tcm_qla2xxx_close_session_loop_$bb3();
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_close_session_loop_$bb3();



implementation tcm_qla2xxx_drop_lport_loop_$bb10(in_$p1: ref, in_$p2: ref, in_$p28: ref, in_$i29: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_vslice_dummy_var_118: ref) returns (out_$p28: ref, out_$i29: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_vslice_dummy_var_118: ref)
{

  entry:
    out_$p28, out_$i29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_vslice_dummy_var_118 := in_$p28, in_$i29, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_vslice_dummy_var_118;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb12_dummy;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$p32 := btree_get_prev32(out_$p31, in_$p1);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_vslice_dummy_var_118 := btree_remove32(out_$p28, out_$i29);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.19, in_$p1);
    goto corral_source_split_2417;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 1000), 1248)), $mul.ref(96, 1));
    goto corral_source_split_2416;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p28, out_$i29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_vslice_dummy_var_118 := tcm_qla2xxx_drop_lport_loop_$bb10(in_$p1, in_$p2, out_$p28, out_$i29, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_vslice_dummy_var_118);
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_drop_lport_loop_$bb10(in_$p1: ref, in_$p2: ref, in_$p28: ref, in_$i29: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_vslice_dummy_var_118: ref) returns (out_$p28: ref, out_$i29: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_vslice_dummy_var_118: ref);
  modifies $M.24, $M.19, $CurrAddr, $M.13;



implementation tcm_qla2xxx_parse_wwn_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i5: i64, in_$i9: i8, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i56: i32, in_$i57: i64, in_$p58: ref, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i8, in_$i76: i8, in_$i77: i32, in_$i78: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i55: i32, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32) returns (out_$i9: i8, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i56: i32, out_$i57: i64, out_$p58: ref, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i8, out_$i76: i8, out_$i77: i32, out_$i78: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i55: i32, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$i6: i32, out_$i7: i32, out_$p8: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p63, out_$i64, out_$i65, out_$i55, out_$i79, out_$i80, out_$i81, out_$i82, out_$p16, out_$i17, out_$i18, out_$p83, out_$i84, out_$i85, out_$i6, out_$i7, out_$p8, out_$p86, out_$i87, out_$i88 := in_$i9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p63, in_$i64, in_$i65, in_$i55, in_$i79, in_$i80, in_$i81, in_$i82, in_$p16, in_$i17, in_$i18, in_$p83, in_$i84, in_$i85, in_$i6, in_$i7, in_$p8, in_$p86, in_$i87, in_$i88;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2591;

  $bb45:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7, out_$p8 := out_$i18, out_$i17, out_$p83;
    goto $bb45_dummy;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$p86, out_$i87, out_$i88 := out_$p83, out_$i17, out_$i18;
    assume true;
    goto $bb45;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$i85 := $ugt.i64(in_$i5, out_$i84);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(out_$p16, $mul.ref(1, 1));
    goto corral_source_split_2606;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p8, out_$i33, out_$i34;
    goto $bb8;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p8, out_$i22, 0;
    goto $bb8;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p8, out_$i7, out_$i6;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i8.i32(out_$i13);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p12);
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p8, $mul.ref(1, 1));
    goto corral_source_split_2598;

  $bb3:
    assume out_$i11 == 1;
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 10);
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i8.i32(out_$i9);
    goto corral_source_split_2594;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    call {:si_unique_call 477} {:cexpr "c"} boogie_si_record_i8(out_$i9);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb16:
    assume out_$i25 == 1;
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p8, out_$i22;
    assume true;
    goto $bb16;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 58);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i8.i32(out_$i9);
    goto corral_source_split_2621;

  $bb14:
    assume out_$i23 == 1;
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$i23 := $ule.i32(out_$i7, 6);
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i7, 1);
    call {:si_unique_call 479} {:cexpr "byte"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2617;

  $bb12:
    assume out_$i21 == 1;
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i6, 2);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i6, 1);
    call {:si_unique_call 478} {:cexpr "pos"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2613;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(in_$i2, 0);
    goto corral_source_split_2610;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb5;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, in_$p1, out_$i82);
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$i82 := $or.i64(out_$i80, out_$i81);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i32.i64(out_$i55);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i80 := $shl.i64(out_$i79, 4);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.18, in_$p1);
    goto corral_source_split_2692;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i78;
    goto $bb35;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i54;
    goto $bb35;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, $sub.i32(0, 48));
    call {:si_unique_call 482} {:cexpr "nibble"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i8.i32(out_$i9);
    goto corral_source_split_2679;

  $bb33:
    assume out_$i52 == 1;
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i32(out_$i50, 4);
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i47, 1));
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    goto corral_source_split_2671;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i9);
    goto corral_source_split_2670;

  $bb24:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$p37, out_$i38, out_$i39 := out_$p8, out_$i33, out_$i34;
    assume true;
    goto $bb24;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i8.i32(out_$i9);
    goto corral_source_split_2653;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i7, out_$i6;
    goto $bb22;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i32, out_$i20;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  $bb13:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i7;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i22;
    goto $bb21;

  $bb15:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i77, $sub.i32(0, 87));
    call {:si_unique_call 485} {:cexpr "nibble"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} out_$i76 := __tolower(out_$i75);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i76);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i8(out_$i74);
    goto corral_source_split_2710;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i9);
    goto corral_source_split_2709;

  $bb42:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    goto $bb40;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb41;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(out_$i70, 2);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, out_$p68);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i67, 1));
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i9);
    goto corral_source_split_2699;

  $bb36:
    assume out_$i62 == 1;
    goto corral_source_split_2698;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$p63, out_$i64, out_$i65 := out_$p8, out_$i33, out_$i34;
    assume true;
    goto $bb36;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    out_$i61 := $and.i32(out_$i60, 68);
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i59);
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.0, out_$p58);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i57, 1));
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i9);
    goto corral_source_split_2683;

  $bb34:
    assume !(out_$i52 == 1);
    goto corral_source_split_2682;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p63, out_$i64, out_$i65 := out_$p8, out_$i33, out_$i34;
    assume true;
    goto $bb42;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(in_$i2, 0);
    goto corral_source_split_2716;

  $bb41:
    assume !(out_$i72 == 1);
    goto corral_source_split_2715;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p63, out_$i64, out_$i65, out_$i55, out_$i79, out_$i80, out_$i81, out_$i82, out_$p16, out_$i17, out_$i18, out_$p83, out_$i84, out_$i85, out_$i6, out_$i7, out_$p8, out_$p86, out_$i87, out_$i88 := tcm_qla2xxx_parse_wwn_loop_$bb1(in_$p1, in_$i2, in_$i5, out_$i9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p63, out_$i64, out_$i65, out_$i55, out_$i79, out_$i80, out_$i81, out_$i82, out_$p16, out_$i17, out_$i18, out_$p83, out_$i84, out_$i85, out_$i6, out_$i7, out_$p8, out_$p86, out_$i87, out_$i88);
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_parse_wwn_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i5: i64, in_$i9: i8, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i56: i32, in_$i57: i64, in_$p58: ref, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i8, in_$i76: i8, in_$i77: i32, in_$i78: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i55: i32, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32) returns (out_$i9: i8, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i56: i32, out_$i57: i64, out_$p58: ref, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i8, out_$i76: i8, out_$i77: i32, out_$i78: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i55: i32, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$i6: i32, out_$i7: i32, out_$p8: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32);
  modifies $M.18;



implementation dma_unmap_sg_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_sg_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_sg_attrs_loop_$bb3();



implementation tcm_qla2xxx_npiv_extract_wwn_loop_$bb1(in_$p2: ref, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i32, in_$i16: i32, in_$i17: i1, in_$i18: i8, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$p4: ref, in_$i5: i32, in_$i6: i32) returns (out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i32, out_$i16: i32, out_$i17: i1, out_$i18: i8, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$p4: ref, out_$i5: i32, out_$i6: i32)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p4, out_$i5, out_$i6 := in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p4, in_$i5, in_$i6;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3699;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p4, out_$i5, out_$i6 := out_$p7, out_$i22, out_$i23;
    goto $bb10_dummy;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i24 := $ule.i32(out_$i23, 15);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i6, 1);
    call {:si_unique_call 765} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3727;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i14;
    goto $bb9;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$i22 := 0;
    goto $bb9;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.36 := $store.i8($M.36, out_$p21, out_$i18);
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(out_$i20, 1));
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i19);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i19 := $udiv.i32(out_$i6, 2);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i8(out_$i14);
    goto corral_source_split_3720;

  $bb7:
    assume out_$i17 == 1;
    goto corral_source_split_3719;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_3715;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i6, 1);
    goto corral_source_split_3714;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i14 := $or.i32(out_$i13, out_$i11);
    call {:si_unique_call 764} {:cexpr "j"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i13 := $shl.i32(out_$i5, 4);
    goto corral_source_split_3709;

  $bb3:
    assume out_$i12 == 1;
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i12 := $sge.i32(out_$i11, 0);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_$i11 := hex_to_bin(out_$i10);
    call {:si_unique_call 763} {:cexpr "value"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i8(out_$i9);
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i8.i32(out_$i8);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i8($M.0, out_$p4);
    goto corral_source_split_3702;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p4, $mul.ref(1, 1));
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p4, out_$i5, out_$i6 := tcm_qla2xxx_npiv_extract_wwn_loop_$bb1(in_$p2, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p4, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure tcm_qla2xxx_npiv_extract_wwn_loop_$bb1(in_$p2: ref, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i32, in_$i16: i32, in_$i17: i1, in_$i18: i8, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$p4: ref, in_$i5: i32, in_$i6: i32) returns (out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i32, out_$i16: i32, out_$i17: i1, out_$i18: i8, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$p4: ref, out_$i5: i32, out_$i6: i32);
  modifies $M.36;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$p303: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$p315: ref, in_$p316: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$p321: ref, in_$p322: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$i344: i32, in_$i345: i1, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$i359: i32, in_$i360: i1, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i384: i32, in_$i385: i1, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$p395: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$p400: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$i422: i32, in_$i423: i1, in_$p424: ref, in_$p425: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$p430: ref, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i444: i32, in_$i445: i1, in_$p446: ref, in_$i448: i32, in_$i449: i1, in_$i451: i32, in_$i452: i32, in_$i453: i32, in_$i454: i1, in_$i456: i32, in_$i457: i32, in_$i458: i32, in_$i459: i1, in_$i460: i32, in_$i461: i1, in_$i462: i1, in_$i463: i1, in_$i464: i32, in_$i465: i1, in_$p466: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i472: i32, in_$i473: i1, in_$i474: i32, in_$i475: i1, in_$i476: i1, in_$i477: i1, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i1, in_$i490: i1, in_$i491: i1, in_$i492: i32, in_$i493: i1, in_$p494: ref, in_$i496: i32, in_$i497: i1, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i1, in_$i505: i1, in_$i506: i1, in_$i507: i1, in_$i508: i1, in_$i509: i1, in_$i510: i1, in_$i511: i1, in_$i512: i1, in_$i513: i1, in_$i514: i1, in_$i515: i1, in_$i516: i1, in_$i517: i1, in_$i518: i1, in_$i519: i1, in_$i520: i1, in_$i521: i1, in_$i522: i1, in_$i523: i1, in_$i524: i1, in_$i525: i1, in_$i526: i1, in_$i527: i1, in_$i528: i1, in_$i529: i1, in_$i530: i1, in_$i531: i1, in_$i532: i1, in_$i533: i1, in_$i534: i1, in_$i535: i1, in_$i536: i1, in_$i537: i1, in_$i538: i1, in_$i539: i1, in_$i540: i1, in_$i541: i1, in_$i542: i1, in_$i543: i32, in_$i544: i1, in_$p545: ref, in_$i547: i32, in_$i548: i1, in_$p549: ref, in_$i551: i32, in_$i552: i1, in_$p553: ref, in_$i555: i32, in_$i556: i1, in_$p557: ref, in_$i558: i32, in_$i559: i1, in_$p560: ref, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i565: i32, in_$i566: i1, in_$p567: ref, in_$i569: i32, in_$i570: i1, in_$p571: ref, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i577: i32, in_$i578: i1, in_$p579: ref, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$i585: i32, in_$i586: i1, in_$p587: ref, in_$i588: i32, in_$i589: i1, in_$p590: ref, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$i595: i32, in_$i596: i1, in_$p597: ref, in_$i599: i32, in_$i600: i1, in_$p601: ref, in_$i603: i32, in_$i604: i1, in_$p605: ref, in_$i607: i32, in_$i608: i1, in_$p609: ref, in_$i610: i32, in_$i611: i1, in_$p612: ref, in_$i613: i32, in_$i614: i1, in_$p615: ref, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$i619: i32, in_$i620: i1, in_$p621: ref, in_$i623: i32, in_$i624: i1, in_$p625: ref, in_$i627: i32, in_$i628: i1, in_$p629: ref, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i633: i32, in_$i634: i1, in_$p635: ref, in_$i637: i32, in_$i638: i1, in_$p639: ref, in_$i641: i32, in_$i642: i1, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$p650: ref, in_$p651: ref, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$i656: i32, in_$i657: i1, in_$p658: ref, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_$i663: i32, in_$i664: i1, in_$p665: ref, in_$i667: i32, in_$i668: i1, in_$p669: ref, in_$i671: i32, in_$i672: i1, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$p678: ref, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$p682: ref, in_$i683: i32, in_$i684: i1, in_$p685: ref, in_$p686: ref, in_$p687: ref, in_$i689: i32, in_$i690: i1, in_$p691: ref, in_$p692: ref, in_$p693: ref, in_$i695: i32, in_$i696: i1, in_$p697: ref, in_$i699: i32, in_$i700: i1, in_$p701: ref, in_$i703: i32, in_$i704: i1, in_$p705: ref, in_$i707: i32, in_$i708: i1, in_$p709: ref, in_$i711: i32, in_$i712: i1, in_$p713: ref, in_$i715: i32, in_$i716: i1, in_$p717: ref, in_$i719: i32, in_$i720: i1, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$i727: i32, in_$i728: i1, in_$p729: ref, in_$i731: i32, in_$i732: i1, in_$p733: ref, in_$i735: i32, in_$i736: i1, in_$i738: i32, in_$i739: i1, in_$i741: i32, in_$i742: i1, in_$p743: ref, in_$i744: i32, in_$i745: i1, in_$p746: ref, in_$i747: i32, in_$i748: i1, in_$p749: ref, in_$i751: i32, in_$i752: i1, in_$p753: ref, in_$i755: i32, in_$i756: i1, in_$p757: ref, in_$i759: i32, in_$i760: i1, in_$p761: ref, in_$i763: i32, in_$i764: i1, in_$p765: ref, in_$i767: i32, in_$i768: i1, in_$p769: ref, in_$i771: i32, in_$i772: i1, in_$p773: ref, in_$p774: ref, in_$i776: i32, in_$i777: i1, in_$p778: ref, in_$p779: ref, in_$i781: i32, in_$i782: i1, in_$p783: ref, in_$i784: i32, in_$i785: i1, in_$p786: ref, in_$i787: i32, in_$i788: i1, in_$p789: ref, in_$i790: i32, in_$i791: i1, in_$p792: ref, in_$i793: i32, in_$i794: i1, in_$p795: ref, in_$i797: i32, in_$i798: i1, in_$p799: ref, in_$i801: i32, in_$i802: i1, in_$p803: ref, in_$p804: ref, in_$i806: i32, in_$i807: i1, in_$p808: ref, in_$p809: ref, in_$i811: i32, in_$i812: i1, in_$p813: ref, in_$i815: i32, in_$i816: i1, in_$p817: ref, in_$i819: i32, in_$i820: i1, in_$p821: ref, in_$i823: i32, in_$i824: i1, in_$p825: ref, in_$i827: i32, in_$i828: i1, in_$i830: i32, in_$i831: i32, in_$i832: i32, in_$i833: i1, in_$i835: i32, in_$i836: i32, in_$i837: i32, in_$i838: i1, in_$i839: i32, in_$i840: i1, in_$i841: i1, in_$i842: i1, in_$i843: i32, in_$i844: i1, in_$p845: ref, in_$i847: i32, in_$i848: i1, in_$p849: ref, in_$i851: i32, in_$i852: i1, in_$p853: ref, in_$i854: i32, in_$i855: i1, in_$i856: i32, in_$i857: i1, in_$i858: i32, in_$i859: i1, in_$i861: i32, in_$i862: i1, in_$i863: i32, in_$i864: i1, in_$i865: i1, in_$i866: i1, in_$i867: i32, in_$i868: i1, in_$i869: i32, in_$i870: i1, in_$i871: i32, in_$i872: i1, in_$i873: i32, in_$i874: i32, in_$i875: i1, in_$i876: i32, in_$i877: i1, in_$i878: i32, in_$i879: i1, in_$i880: i32, in_$i881: i1, in_$i882: i1, in_$i883: i1, in_$i884: i32, in_$i885: i1, in_$p886: ref, in_$i888: i32, in_$i889: i1, in_$p890: ref, in_$i892: i32, in_$i893: i1, in_$i894: i32, in_$i895: i1, in_$i896: i1, in_$i897: i1, in_$i898: i1, in_$i899: i1, in_$i900: i1, in_$i901: i1, in_$i902: i1, in_$i903: i1, in_$i904: i1, in_$i905: i1, in_$i906: i1, in_$i907: i1, in_$i908: i1, in_$i909: i1, in_$i910: i32, in_$i911: i1, in_$p912: ref, in_$i913: i32, in_$i914: i1, in_$p915: ref, in_$i917: i32, in_$i918: i1, in_$p919: ref, in_$p920: ref, in_$i921: i32, in_$i923: i32, in_$i924: i1, in_$p925: ref, in_$i926: i32, in_$i927: i8, in_$i928: i32, in_$i929: i8, in_$i930: i32, in_$i932: i32, in_$i933: i1, in_$p934: ref, in_$i935: i32, in_$i936: i1, in_$p937: ref, in_$i938: i16, in_$i939: i32, in_$i940: i16, in_$i942: i32, in_$i943: i1, in_$p944: ref, in_$i945: i32, in_$i946: i1, in_$p947: ref, in_$i948: i16, in_$i949: i32, in_$i950: i16, in_$i951: i8, in_$i952: i1, in_$p953: ref, in_$i954: i32, in_$i955: i32, in_$i956: i1, in_$p957: ref, in_$i958: i32, in_$i959: i1, in_$p960: ref, in_$i961: i32, in_$i962: i1, in_$p963: ref, in_$i964: i32, in_$i965: i1, in_$p966: ref, in_$i967: i32, in_$i968: i1, in_$p969: ref, in_$i970: i32, in_$i971: i1, in_$p972: ref, in_$i973: i16, in_$i974: i32, in_$i975: i16, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i64, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: ref, in_vslice_dummy_var_166: ref, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i8, in_vslice_dummy_var_178: i8, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: i16, in_vslice_dummy_var_188: i16, in_vslice_dummy_var_189: i32, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: ref, in_vslice_dummy_var_192: ref, in_vslice_dummy_var_193: ref, in_vslice_dummy_var_194: ref, in_vslice_dummy_var_195: ref, in_vslice_dummy_var_196: ref, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: ref, in_vslice_dummy_var_200: ref, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: ref, in_vslice_dummy_var_204: ref, in_vslice_dummy_var_205: ref, in_vslice_dummy_var_206: ref, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i64, in_vslice_dummy_var_212: i64, in_vslice_dummy_var_213: i64, in_vslice_dummy_var_214: i64, in_vslice_dummy_var_215: i64, in_vslice_dummy_var_216: i64, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: ref, in_vslice_dummy_var_227: ref, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: i8, in_vslice_dummy_var_239: i8, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32, in_vslice_dummy_var_247: i32, in_vslice_dummy_var_248: i16, in_vslice_dummy_var_249: i16, in_vslice_dummy_var_250: i32, in_vslice_dummy_var_251: i32, in_vslice_dummy_var_252: ref, in_vslice_dummy_var_253: ref, in_vslice_dummy_var_254: ref, in_vslice_dummy_var_255: ref, in_vslice_dummy_var_256: ref, in_vslice_dummy_var_257: ref, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: ref, in_vslice_dummy_var_261: ref, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: ref, in_vslice_dummy_var_265: ref, in_vslice_dummy_var_266: ref, in_vslice_dummy_var_267: ref, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i64, in_vslice_dummy_var_273: i64, in_vslice_dummy_var_274: i64, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i64, in_vslice_dummy_var_277: ref, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: ref, in_vslice_dummy_var_281: i32) returns (out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$p303: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$p315: ref, out_$p316: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$p321: ref, out_$p322: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$i344: i32, out_$i345: i1, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$i359: i32, out_$i360: i1, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i384: i32, out_$i385: i1, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$p395: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$p400: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$i422: i32, out_$i423: i1, out_$p424: ref, out_$p425: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$p430: ref, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i444: i32, out_$i445: i1, out_$p446: ref, out_$i448: i32, out_$i449: i1, out_$i451: i32, out_$i452: i32, out_$i453: i32, out_$i454: i1, out_$i456: i32, out_$i457: i32, out_$i458: i32, out_$i459: i1, out_$i460: i32, out_$i461: i1, out_$i462: i1, out_$i463: i1, out_$i464: i32, out_$i465: i1, out_$p466: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i472: i32, out_$i473: i1, out_$i474: i32, out_$i475: i1, out_$i476: i1, out_$i477: i1, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i1, out_$i490: i1, out_$i491: i1, out_$i492: i32, out_$i493: i1, out_$p494: ref, out_$i496: i32, out_$i497: i1, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i1, out_$i505: i1, out_$i506: i1, out_$i507: i1, out_$i508: i1, out_$i509: i1, out_$i510: i1, out_$i511: i1, out_$i512: i1, out_$i513: i1, out_$i514: i1, out_$i515: i1, out_$i516: i1, out_$i517: i1, out_$i518: i1, out_$i519: i1, out_$i520: i1, out_$i521: i1, out_$i522: i1, out_$i523: i1, out_$i524: i1, out_$i525: i1, out_$i526: i1, out_$i527: i1, out_$i528: i1, out_$i529: i1, out_$i530: i1, out_$i531: i1, out_$i532: i1, out_$i533: i1, out_$i534: i1, out_$i535: i1, out_$i536: i1, out_$i537: i1, out_$i538: i1, out_$i539: i1, out_$i540: i1, out_$i541: i1, out_$i542: i1, out_$i543: i32, out_$i544: i1, out_$p545: ref, out_$i547: i32, out_$i548: i1, out_$p549: ref, out_$i551: i32, out_$i552: i1, out_$p553: ref, out_$i555: i32, out_$i556: i1, out_$p557: ref, out_$i558: i32, out_$i559: i1, out_$p560: ref, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i565: i32, out_$i566: i1, out_$p567: ref, out_$i569: i32, out_$i570: i1, out_$p571: ref, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i577: i32, out_$i578: i1, out_$p579: ref, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$i585: i32, out_$i586: i1, out_$p587: ref, out_$i588: i32, out_$i589: i1, out_$p590: ref, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$i595: i32, out_$i596: i1, out_$p597: ref, out_$i599: i32, out_$i600: i1, out_$p601: ref, out_$i603: i32, out_$i604: i1, out_$p605: ref, out_$i607: i32, out_$i608: i1, out_$p609: ref, out_$i610: i32, out_$i611: i1, out_$p612: ref, out_$i613: i32, out_$i614: i1, out_$p615: ref, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$i619: i32, out_$i620: i1, out_$p621: ref, out_$i623: i32, out_$i624: i1, out_$p625: ref, out_$i627: i32, out_$i628: i1, out_$p629: ref, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i633: i32, out_$i634: i1, out_$p635: ref, out_$i637: i32, out_$i638: i1, out_$p639: ref, out_$i641: i32, out_$i642: i1, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$p650: ref, out_$p651: ref, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$i656: i32, out_$i657: i1, out_$p658: ref, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_$i663: i32, out_$i664: i1, out_$p665: ref, out_$i667: i32, out_$i668: i1, out_$p669: ref, out_$i671: i32, out_$i672: i1, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$p678: ref, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$p682: ref, out_$i683: i32, out_$i684: i1, out_$p685: ref, out_$p686: ref, out_$p687: ref, out_$i689: i32, out_$i690: i1, out_$p691: ref, out_$p692: ref, out_$p693: ref, out_$i695: i32, out_$i696: i1, out_$p697: ref, out_$i699: i32, out_$i700: i1, out_$p701: ref, out_$i703: i32, out_$i704: i1, out_$p705: ref, out_$i707: i32, out_$i708: i1, out_$p709: ref, out_$i711: i32, out_$i712: i1, out_$p713: ref, out_$i715: i32, out_$i716: i1, out_$p717: ref, out_$i719: i32, out_$i720: i1, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$i727: i32, out_$i728: i1, out_$p729: ref, out_$i731: i32, out_$i732: i1, out_$p733: ref, out_$i735: i32, out_$i736: i1, out_$i738: i32, out_$i739: i1, out_$i741: i32, out_$i742: i1, out_$p743: ref, out_$i744: i32, out_$i745: i1, out_$p746: ref, out_$i747: i32, out_$i748: i1, out_$p749: ref, out_$i751: i32, out_$i752: i1, out_$p753: ref, out_$i755: i32, out_$i756: i1, out_$p757: ref, out_$i759: i32, out_$i760: i1, out_$p761: ref, out_$i763: i32, out_$i764: i1, out_$p765: ref, out_$i767: i32, out_$i768: i1, out_$p769: ref, out_$i771: i32, out_$i772: i1, out_$p773: ref, out_$p774: ref, out_$i776: i32, out_$i777: i1, out_$p778: ref, out_$p779: ref, out_$i781: i32, out_$i782: i1, out_$p783: ref, out_$i784: i32, out_$i785: i1, out_$p786: ref, out_$i787: i32, out_$i788: i1, out_$p789: ref, out_$i790: i32, out_$i791: i1, out_$p792: ref, out_$i793: i32, out_$i794: i1, out_$p795: ref, out_$i797: i32, out_$i798: i1, out_$p799: ref, out_$i801: i32, out_$i802: i1, out_$p803: ref, out_$p804: ref, out_$i806: i32, out_$i807: i1, out_$p808: ref, out_$p809: ref, out_$i811: i32, out_$i812: i1, out_$p813: ref, out_$i815: i32, out_$i816: i1, out_$p817: ref, out_$i819: i32, out_$i820: i1, out_$p821: ref, out_$i823: i32, out_$i824: i1, out_$p825: ref, out_$i827: i32, out_$i828: i1, out_$i830: i32, out_$i831: i32, out_$i832: i32, out_$i833: i1, out_$i835: i32, out_$i836: i32, out_$i837: i32, out_$i838: i1, out_$i839: i32, out_$i840: i1, out_$i841: i1, out_$i842: i1, out_$i843: i32, out_$i844: i1, out_$p845: ref, out_$i847: i32, out_$i848: i1, out_$p849: ref, out_$i851: i32, out_$i852: i1, out_$p853: ref, out_$i854: i32, out_$i855: i1, out_$i856: i32, out_$i857: i1, out_$i858: i32, out_$i859: i1, out_$i861: i32, out_$i862: i1, out_$i863: i32, out_$i864: i1, out_$i865: i1, out_$i866: i1, out_$i867: i32, out_$i868: i1, out_$i869: i32, out_$i870: i1, out_$i871: i32, out_$i872: i1, out_$i873: i32, out_$i874: i32, out_$i875: i1, out_$i876: i32, out_$i877: i1, out_$i878: i32, out_$i879: i1, out_$i880: i32, out_$i881: i1, out_$i882: i1, out_$i883: i1, out_$i884: i32, out_$i885: i1, out_$p886: ref, out_$i888: i32, out_$i889: i1, out_$p890: ref, out_$i892: i32, out_$i893: i1, out_$i894: i32, out_$i895: i1, out_$i896: i1, out_$i897: i1, out_$i898: i1, out_$i899: i1, out_$i900: i1, out_$i901: i1, out_$i902: i1, out_$i903: i1, out_$i904: i1, out_$i905: i1, out_$i906: i1, out_$i907: i1, out_$i908: i1, out_$i909: i1, out_$i910: i32, out_$i911: i1, out_$p912: ref, out_$i913: i32, out_$i914: i1, out_$p915: ref, out_$i917: i32, out_$i918: i1, out_$p919: ref, out_$p920: ref, out_$i921: i32, out_$i923: i32, out_$i924: i1, out_$p925: ref, out_$i926: i32, out_$i927: i8, out_$i928: i32, out_$i929: i8, out_$i930: i32, out_$i932: i32, out_$i933: i1, out_$p934: ref, out_$i935: i32, out_$i936: i1, out_$p937: ref, out_$i938: i16, out_$i939: i32, out_$i940: i16, out_$i942: i32, out_$i943: i1, out_$p944: ref, out_$i945: i32, out_$i946: i1, out_$p947: ref, out_$i948: i16, out_$i949: i32, out_$i950: i16, out_$i951: i8, out_$i952: i1, out_$p953: ref, out_$i954: i32, out_$i955: i32, out_$i956: i1, out_$p957: ref, out_$i958: i32, out_$i959: i1, out_$p960: ref, out_$i961: i32, out_$i962: i1, out_$p963: ref, out_$i964: i32, out_$i965: i1, out_$p966: ref, out_$i967: i32, out_$i968: i1, out_$p969: ref, out_$i970: i32, out_$i971: i1, out_$p972: ref, out_$i973: i16, out_$i974: i32, out_$i975: i16, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i64, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: ref, out_vslice_dummy_var_166: ref, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i8, out_vslice_dummy_var_178: i8, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: i16, out_vslice_dummy_var_188: i16, out_vslice_dummy_var_189: i32, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: ref, out_vslice_dummy_var_192: ref, out_vslice_dummy_var_193: ref, out_vslice_dummy_var_194: ref, out_vslice_dummy_var_195: ref, out_vslice_dummy_var_196: ref, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: ref, out_vslice_dummy_var_200: ref, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: ref, out_vslice_dummy_var_204: ref, out_vslice_dummy_var_205: ref, out_vslice_dummy_var_206: ref, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i64, out_vslice_dummy_var_212: i64, out_vslice_dummy_var_213: i64, out_vslice_dummy_var_214: i64, out_vslice_dummy_var_215: i64, out_vslice_dummy_var_216: i64, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: ref, out_vslice_dummy_var_227: ref, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: i8, out_vslice_dummy_var_239: i8, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32, out_vslice_dummy_var_247: i32, out_vslice_dummy_var_248: i16, out_vslice_dummy_var_249: i16, out_vslice_dummy_var_250: i32, out_vslice_dummy_var_251: i32, out_vslice_dummy_var_252: ref, out_vslice_dummy_var_253: ref, out_vslice_dummy_var_254: ref, out_vslice_dummy_var_255: ref, out_vslice_dummy_var_256: ref, out_vslice_dummy_var_257: ref, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: ref, out_vslice_dummy_var_261: ref, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: ref, out_vslice_dummy_var_265: ref, out_vslice_dummy_var_266: ref, out_vslice_dummy_var_267: ref, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i64, out_vslice_dummy_var_273: i64, out_vslice_dummy_var_274: i64, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i64, out_vslice_dummy_var_277: ref, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: ref, out_vslice_dummy_var_281: i32)
{

  entry:
    out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$p271, out_$p272, out_$i274, out_$i275, out_$p276, out_$p277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$p299, out_$i300, out_$i301, out_$p302, out_$p303, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$p321, out_$p322, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i332, out_$i333, out_$p334, out_$i336, out_$i337, out_$p338, out_$i340, out_$i341, out_$p342, out_$i344, out_$i345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$i359, out_$i360, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i380, out_$i381, out_$p382, out_$i384, out_$i385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i392, out_$i393, out_$p394, out_$p395, out_$i397, out_$i398, out_$p399, out_$p400, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$p410, out_$i411, out_$i412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i418, out_$i419, out_$p420, out_$i422, out_$i423, out_$p424, out_$p425, out_$i427, out_$i428, out_$p429, out_$p430, out_$i432, out_$i433, out_$p434, out_$i436, out_$i437, out_$p438, out_$i440, out_$i441, out_$p442, out_$i444, out_$i445, out_$p446, out_$i448, out_$i449, out_$i451, out_$i452, out_$i453, out_$i454, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$i474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$i482, out_$i483, out_$p484, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$p494, out_$i496, out_$i497, out_$p498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$i535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i547, out_$i548, out_$p549, out_$i551, out_$i552, out_$p553, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$p560, out_$i561, out_$i562, out_$p563, out_$i565, out_$i566, out_$p567, out_$i569, out_$i570, out_$p571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$p579, out_$i581, out_$i582, out_$p583, out_$i585, out_$i586, out_$p587, out_$i588, out_$i589, out_$p590, out_$i591, out_$i592, out_$p593, out_$i595, out_$i596, out_$p597, out_$i599, out_$i600, out_$p601, out_$i603, out_$i604, out_$p605, out_$i607, out_$i608, out_$p609, out_$i610, out_$i611, out_$p612, out_$i613, out_$i614, out_$p615, out_$i616, out_$i617, out_$p618, out_$i619, out_$i620, out_$p621, out_$i623, out_$i624, out_$p625, out_$i627, out_$i628, out_$p629, out_$i630, out_$i631, out_$p632, out_$i633, out_$i634, out_$p635, out_$i637, out_$i638, out_$p639, out_$i641, out_$i642, out_$p643, out_$p644, out_$p645, out_$i647, out_$i648, out_$p649, out_$p650, out_$p651, out_$i653, out_$i654, out_$p655, out_$i656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p661, out_$i663, out_$i664, out_$p665, out_$i667, out_$i668, out_$p669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$p678, out_$i679, out_$i680, out_$p681, out_$p682, out_$i683, out_$i684, out_$p685, out_$p686, out_$p687, out_$i689, out_$i690, out_$p691, out_$p692, out_$p693, out_$i695, out_$i696, out_$p697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$i715, out_$i716, out_$p717, out_$i719, out_$i720, out_$p721, out_$i723, out_$i724, out_$p725, out_$i727, out_$i728, out_$p729, out_$i731, out_$i732, out_$p733, out_$i735, out_$i736, out_$i738, out_$i739, out_$i741, out_$i742, out_$p743, out_$i744, out_$i745, out_$p746, out_$i747, out_$i748, out_$p749, out_$i751, out_$i752, out_$p753, out_$i755, out_$i756, out_$p757, out_$i759, out_$i760, out_$p761, out_$i763, out_$i764, out_$p765, out_$i767, out_$i768, out_$p769, out_$i771, out_$i772, out_$p773, out_$p774, out_$i776, out_$i777, out_$p778, out_$p779, out_$i781, out_$i782, out_$p783, out_$i784, out_$i785, out_$p786, out_$i787, out_$i788, out_$p789, out_$i790, out_$i791, out_$p792, out_$i793, out_$i794, out_$p795, out_$i797, out_$i798, out_$p799, out_$i801, out_$i802, out_$p803, out_$p804, out_$i806, out_$i807, out_$p808, out_$p809, out_$i811, out_$i812, out_$p813, out_$i815, out_$i816, out_$p817, out_$i819, out_$i820, out_$p821, out_$i823, out_$i824, out_$p825, out_$i827, out_$i828, out_$i830, out_$i831, out_$i832, out_$i833, out_$i835, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$i843, out_$i844, out_$p845, out_$i847, out_$i848, out_$p849, out_$i851, out_$i852, out_$p853, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$i859, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$p886, out_$i888, out_$i889, out_$p890, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$i904, out_$i905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$i911, out_$p912, out_$i913, out_$i914, out_$p915, out_$i917, out_$i918, out_$p919, out_$p920, out_$i921, out_$i923, out_$i924, out_$p925, out_$i926, out_$i927, out_$i928, out_$i929, out_$i930, out_$i932, out_$i933, out_$p934, out_$i935, out_$i936, out_$p937, out_$i938, out_$i939, out_$i940, out_$i942, out_$i943, out_$p944, out_$i945, out_$i946, out_$p947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$i954, out_$i955, out_$i956, out_$p957, out_$i958, out_$i959, out_$p960, out_$i961, out_$i962, out_$p963, out_$i964, out_$i965, out_$p966, out_$i967, out_$i968, out_$p969, out_$i970, out_$i971, out_$p972, out_$i973, out_$i974, out_$i975, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281 := in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i103, in_$i104, in_$p105, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$p166, in_$i168, in_$i169, in_$p170, in_$i172, in_$i173, in_$p174, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$p184, in_$i186, in_$i187, in_$p188, in_$i190, in_$i191, in_$p192, in_$i194, in_$i195, in_$p196, in_$i198, in_$i199, in_$p200, in_$i202, in_$i203, in_$p204, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$p214, in_$i216, in_$i217, in_$p218, in_$i220, in_$i221, in_$p222, in_$i224, in_$i225, in_$p226, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$p233, in_$i234, in_$i235, in_$p236, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$p242, in_$i244, in_$i245, in_$p246, in_$i248, in_$i249, in_$p250, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$p267, in_$i268, in_$i269, in_$p270, in_$p271, in_$p272, in_$i274, in_$i275, in_$p276, in_$p277, in_$p278, in_$i280, in_$i281, in_$p282, in_$i284, in_$i285, in_$p286, in_$i288, in_$i289, in_$p290, in_$i292, in_$i293, in_$p294, in_$i296, in_$i297, in_$p298, in_$p299, in_$i300, in_$i301, in_$p302, in_$p303, in_$i304, in_$i305, in_$p306, in_$i308, in_$i309, in_$p310, in_$i312, in_$i313, in_$p314, in_$p315, in_$p316, in_$i318, in_$i319, in_$p320, in_$p321, in_$p322, in_$i324, in_$i325, in_$p326, in_$i328, in_$i329, in_$p330, in_$i332, in_$i333, in_$p334, in_$i336, in_$i337, in_$p338, in_$i340, in_$i341, in_$p342, in_$i344, in_$i345, in_$p346, in_$i348, in_$i349, in_$p350, in_$i352, in_$i353, in_$p354, in_$i356, in_$i357, in_$i359, in_$i360, in_$i362, in_$i363, in_$p364, in_$i365, in_$i366, in_$p367, in_$i368, in_$i369, in_$p370, in_$i372, in_$i373, in_$p374, in_$i376, in_$i377, in_$p378, in_$i380, in_$i381, in_$p382, in_$i384, in_$i385, in_$p386, in_$i388, in_$i389, in_$p390, in_$i392, in_$i393, in_$p394, in_$p395, in_$i397, in_$i398, in_$p399, in_$p400, in_$i402, in_$i403, in_$p404, in_$i405, in_$i406, in_$p407, in_$i408, in_$i409, in_$p410, in_$i411, in_$i412, in_$p413, in_$i414, in_$i415, in_$p416, in_$i418, in_$i419, in_$p420, in_$i422, in_$i423, in_$p424, in_$p425, in_$i427, in_$i428, in_$p429, in_$p430, in_$i432, in_$i433, in_$p434, in_$i436, in_$i437, in_$p438, in_$i440, in_$i441, in_$p442, in_$i444, in_$i445, in_$p446, in_$i448, in_$i449, in_$i451, in_$i452, in_$i453, in_$i454, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$i463, in_$i464, in_$i465, in_$p466, in_$i468, in_$i469, in_$p470, in_$i472, in_$i473, in_$i474, in_$i475, in_$i476, in_$i477, in_$i478, in_$i479, in_$p480, in_$i482, in_$i483, in_$p484, in_$i486, in_$i487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$i493, in_$p494, in_$i496, in_$i497, in_$p498, in_$i500, in_$i501, in_$i502, in_$i503, in_$i504, in_$i505, in_$i506, in_$i507, in_$i508, in_$i509, in_$i510, in_$i511, in_$i512, in_$i513, in_$i514, in_$i515, in_$i516, in_$i517, in_$i518, in_$i519, in_$i520, in_$i521, in_$i522, in_$i523, in_$i524, in_$i525, in_$i526, in_$i527, in_$i528, in_$i529, in_$i530, in_$i531, in_$i532, in_$i533, in_$i534, in_$i535, in_$i536, in_$i537, in_$i538, in_$i539, in_$i540, in_$i541, in_$i542, in_$i543, in_$i544, in_$p545, in_$i547, in_$i548, in_$p549, in_$i551, in_$i552, in_$p553, in_$i555, in_$i556, in_$p557, in_$i558, in_$i559, in_$p560, in_$i561, in_$i562, in_$p563, in_$i565, in_$i566, in_$p567, in_$i569, in_$i570, in_$p571, in_$i573, in_$i574, in_$p575, in_$i577, in_$i578, in_$p579, in_$i581, in_$i582, in_$p583, in_$i585, in_$i586, in_$p587, in_$i588, in_$i589, in_$p590, in_$i591, in_$i592, in_$p593, in_$i595, in_$i596, in_$p597, in_$i599, in_$i600, in_$p601, in_$i603, in_$i604, in_$p605, in_$i607, in_$i608, in_$p609, in_$i610, in_$i611, in_$p612, in_$i613, in_$i614, in_$p615, in_$i616, in_$i617, in_$p618, in_$i619, in_$i620, in_$p621, in_$i623, in_$i624, in_$p625, in_$i627, in_$i628, in_$p629, in_$i630, in_$i631, in_$p632, in_$i633, in_$i634, in_$p635, in_$i637, in_$i638, in_$p639, in_$i641, in_$i642, in_$p643, in_$p644, in_$p645, in_$i647, in_$i648, in_$p649, in_$p650, in_$p651, in_$i653, in_$i654, in_$p655, in_$i656, in_$i657, in_$p658, in_$i659, in_$i660, in_$p661, in_$i663, in_$i664, in_$p665, in_$i667, in_$i668, in_$p669, in_$i671, in_$i672, in_$p673, in_$i675, in_$i676, in_$p677, in_$p678, in_$i679, in_$i680, in_$p681, in_$p682, in_$i683, in_$i684, in_$p685, in_$p686, in_$p687, in_$i689, in_$i690, in_$p691, in_$p692, in_$p693, in_$i695, in_$i696, in_$p697, in_$i699, in_$i700, in_$p701, in_$i703, in_$i704, in_$p705, in_$i707, in_$i708, in_$p709, in_$i711, in_$i712, in_$p713, in_$i715, in_$i716, in_$p717, in_$i719, in_$i720, in_$p721, in_$i723, in_$i724, in_$p725, in_$i727, in_$i728, in_$p729, in_$i731, in_$i732, in_$p733, in_$i735, in_$i736, in_$i738, in_$i739, in_$i741, in_$i742, in_$p743, in_$i744, in_$i745, in_$p746, in_$i747, in_$i748, in_$p749, in_$i751, in_$i752, in_$p753, in_$i755, in_$i756, in_$p757, in_$i759, in_$i760, in_$p761, in_$i763, in_$i764, in_$p765, in_$i767, in_$i768, in_$p769, in_$i771, in_$i772, in_$p773, in_$p774, in_$i776, in_$i777, in_$p778, in_$p779, in_$i781, in_$i782, in_$p783, in_$i784, in_$i785, in_$p786, in_$i787, in_$i788, in_$p789, in_$i790, in_$i791, in_$p792, in_$i793, in_$i794, in_$p795, in_$i797, in_$i798, in_$p799, in_$i801, in_$i802, in_$p803, in_$p804, in_$i806, in_$i807, in_$p808, in_$p809, in_$i811, in_$i812, in_$p813, in_$i815, in_$i816, in_$p817, in_$i819, in_$i820, in_$p821, in_$i823, in_$i824, in_$p825, in_$i827, in_$i828, in_$i830, in_$i831, in_$i832, in_$i833, in_$i835, in_$i836, in_$i837, in_$i838, in_$i839, in_$i840, in_$i841, in_$i842, in_$i843, in_$i844, in_$p845, in_$i847, in_$i848, in_$p849, in_$i851, in_$i852, in_$p853, in_$i854, in_$i855, in_$i856, in_$i857, in_$i858, in_$i859, in_$i861, in_$i862, in_$i863, in_$i864, in_$i865, in_$i866, in_$i867, in_$i868, in_$i869, in_$i870, in_$i871, in_$i872, in_$i873, in_$i874, in_$i875, in_$i876, in_$i877, in_$i878, in_$i879, in_$i880, in_$i881, in_$i882, in_$i883, in_$i884, in_$i885, in_$p886, in_$i888, in_$i889, in_$p890, in_$i892, in_$i893, in_$i894, in_$i895, in_$i896, in_$i897, in_$i898, in_$i899, in_$i900, in_$i901, in_$i902, in_$i903, in_$i904, in_$i905, in_$i906, in_$i907, in_$i908, in_$i909, in_$i910, in_$i911, in_$p912, in_$i913, in_$i914, in_$p915, in_$i917, in_$i918, in_$p919, in_$p920, in_$i921, in_$i923, in_$i924, in_$p925, in_$i926, in_$i927, in_$i928, in_$i929, in_$i930, in_$i932, in_$i933, in_$p934, in_$i935, in_$i936, in_$p937, in_$i938, in_$i939, in_$i940, in_$i942, in_$i943, in_$p944, in_$i945, in_$i946, in_$p947, in_$i948, in_$i949, in_$i950, in_$i951, in_$i952, in_$p953, in_$i954, in_$i955, in_$i956, in_$p957, in_$i958, in_$i959, in_$p960, in_$i961, in_$i962, in_$p963, in_$i964, in_$i965, in_$p966, in_$i967, in_$i968, in_$p969, in_$i970, in_$i971, in_$p972, in_$i973, in_$i974, in_$i975, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_185, in_vslice_dummy_var_186, in_vslice_dummy_var_187, in_vslice_dummy_var_188, in_vslice_dummy_var_189, in_vslice_dummy_var_190, in_vslice_dummy_var_191, in_vslice_dummy_var_192, in_vslice_dummy_var_193, in_vslice_dummy_var_194, in_vslice_dummy_var_195, in_vslice_dummy_var_196, in_vslice_dummy_var_197, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200, in_vslice_dummy_var_201, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_209, in_vslice_dummy_var_210, in_vslice_dummy_var_211, in_vslice_dummy_var_212, in_vslice_dummy_var_213, in_vslice_dummy_var_214, in_vslice_dummy_var_215, in_vslice_dummy_var_216, in_vslice_dummy_var_217, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227, in_vslice_dummy_var_228, in_vslice_dummy_var_229, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232, in_vslice_dummy_var_233, in_vslice_dummy_var_234, in_vslice_dummy_var_235, in_vslice_dummy_var_236, in_vslice_dummy_var_237, in_vslice_dummy_var_238, in_vslice_dummy_var_239, in_vslice_dummy_var_240, in_vslice_dummy_var_241, in_vslice_dummy_var_242, in_vslice_dummy_var_243, in_vslice_dummy_var_244, in_vslice_dummy_var_245, in_vslice_dummy_var_246, in_vslice_dummy_var_247, in_vslice_dummy_var_248, in_vslice_dummy_var_249, in_vslice_dummy_var_250, in_vslice_dummy_var_251, in_vslice_dummy_var_252, in_vslice_dummy_var_253, in_vslice_dummy_var_254, in_vslice_dummy_var_255, in_vslice_dummy_var_256, in_vslice_dummy_var_257, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} out_$i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i78);
    call {:si_unique_call 929} {:cexpr "tmp___50"} boogie_si_record_i32(out_$i78);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb52_dummy;

  $bb925:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb923:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb33:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 934} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} out_vslice_dummy_var_152 := tcm_qla2xxx_npiv_tpg_store_enable(out_$p101, in_$p11, in_$i9);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$p101 := $M.48;
    goto corral_source_split_4111;

  $bb42:
    assume out_$i100 == 1;
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 1);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i99 := $M.75;
    goto corral_source_split_4107;

  $bb40:
    assume out_$i98 == 1;
    goto corral_source_split_4106;

  $bb35:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i95, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 930} out_$i95 := __VERIFIER_nondet_int();
    call {:si_unique_call 931} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i95);
    call {:si_unique_call 932} {:cexpr "tmp___51"} boogie_si_record_i32(out_$i95);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i94 == 1;
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$i93 := $M.75;
    goto corral_source_split_4097;

  $bb30:
    assume out_$i92 == 1;
    goto corral_source_split_4096;

  $bb26:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i78, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb20:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i78, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb3:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i78, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 936} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} out_vslice_dummy_var_153 := tcm_qla2xxx_npiv_tpg_show_enable(out_$p105, in_$p10);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$p105 := $M.48;
    goto corral_source_split_4116;

  $bb46:
    assume out_$i104 == 1;
    goto corral_source_split_4115;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i103 := $M.75;
    goto corral_source_split_4103;

  $bb37:
    assume out_$i97 == 1;
    goto corral_source_split_4102;

  $bb36:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i95, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_stop();
    goto corral_source_split_4120;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1);
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i98 == 1);
    goto $bb39;

  $bb54:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 942} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} out_vslice_dummy_var_154 := tcm_qla2xxx_tpg_attrib_store_cache_dynamic_acls(out_$p115, in_$p14, in_$i12);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$p115 := $M.49;
    goto corral_source_split_4133;

  $bb63:
    assume out_$i114 == 1;
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i113 := $M.76;
    goto corral_source_split_4129;

  $bb61:
    assume out_$i112 == 1;
    goto corral_source_split_4128;

  $bb56:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i109, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 938} out_$i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 939} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i109);
    call {:si_unique_call 940} {:cexpr "tmp___52"} boogie_si_record_i32(out_$i109);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i108 == 1;
    goto corral_source_split_4122;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i107 := $M.76;
    goto corral_source_split_4089;

  $bb28:
    assume out_$i91 == 1;
    goto corral_source_split_4088;

  $bb27:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i78, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb68:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 944} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} out_vslice_dummy_var_155 := tcm_qla2xxx_tpg_attrib_show_cache_dynamic_acls(out_$p119, in_$p13);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$p119 := $M.49;
    goto corral_source_split_4138;

  $bb67:
    assume out_$i118 == 1;
    goto corral_source_split_4137;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i117 := $M.76;
    goto corral_source_split_4125;

  $bb58:
    assume out_$i111 == 1;
    goto corral_source_split_4124;

  $bb57:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} ldv_stop();
    goto corral_source_split_4142;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i112 == 1);
    goto $bb60;

  $bb74:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4313;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} out_vslice_dummy_var_157 := tcm_qla2xxx_queue_status(out_$p170);
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$p170 := $M.59;
    goto corral_source_split_4311;

  $bb160:
    assume out_$i169 == 1;
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 2);
    goto corral_source_split_4308;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i168 := $M.77;
    goto corral_source_split_4307;

  $bb158:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} out_vslice_dummy_var_156 := tcm_qla2xxx_queue_status(out_$p166);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$p166 := $M.59;
    goto corral_source_split_4303;

  $bb157:
    assume out_$i165 == 1;
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_4300;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    out_$i164 := $M.77;
    goto corral_source_split_4299;

  $bb155:
    assume out_$i163 == 1;
    goto corral_source_split_4298;

  $bb153:
    assume out_$i162 == 1;
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i123, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb149:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i162 := $slt.i32(out_$i123, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb139:
    assume out_$i155 == 1;
    assume {:verifier.code 0} true;
    out_$i160 := $slt.i32(out_$i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb119:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(out_$i123, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb76:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i123, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} out_$i123 := __VERIFIER_nondet_int();
    call {:si_unique_call 947} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i123);
    call {:si_unique_call 948} {:cexpr "tmp___53"} boogie_si_record_i32(out_$i123);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume out_$i122 == 1;
    goto corral_source_split_4144;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 0);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$i121 := $M.77;
    goto corral_source_split_4093;

  $bb29:
    assume !(out_$i91 == 1);
    goto corral_source_split_4092;

  $bb165:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} out_vslice_dummy_var_158 := tcm_qla2xxx_write_pending(out_$p174);
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$p174 := $M.59;
    goto corral_source_split_4316;

  $bb164:
    assume out_$i173 == 1;
    goto corral_source_split_4315;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 2);
    goto corral_source_split_4296;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$i172 := $M.77;
    goto corral_source_split_4295;

  $bb154:
    assume !(out_$i162 == 1);
    goto corral_source_split_4294;

  $bb171:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 958} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} tcm_qla2xxx_queue_tm_rsp(out_$p181);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$p181 := $M.59;
    goto corral_source_split_4329;

  $bb170:
    assume out_$i180 == 1;
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_4326;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i179 := $M.77;
    goto corral_source_split_4325;

  $bb168:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 956} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} tcm_qla2xxx_queue_tm_rsp(out_$p178);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$p178 := $M.59;
    goto corral_source_split_4321;

  $bb167:
    assume out_$i177 == 1;
    goto corral_source_split_4320;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$i176 := $M.77;
    goto corral_source_split_4287;

  $bb151:
    assume out_$i161 == 1;
    goto corral_source_split_4286;

  $bb150:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i123, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb177:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 962} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} out_vslice_dummy_var_160 := tcm_qla2xxx_check_demo_write_protect(out_$p188);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$p188 := $M.62;
    goto corral_source_split_4342;

  $bb176:
    assume out_$i187 == 1;
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_4339;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i186 := $M.77;
    goto corral_source_split_4338;

  $bb174:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_vslice_dummy_var_159 := tcm_qla2xxx_check_demo_write_protect(out_$p184);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$p184 := $M.62;
    goto corral_source_split_4334;

  $bb173:
    assume out_$i183 == 1;
    goto corral_source_split_4333;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$i182 := $M.77;
    goto corral_source_split_4291;

  $bb152:
    assume !(out_$i161 == 1);
    goto corral_source_split_4290;

  $bb183:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} out_vslice_dummy_var_162 := tcm_qla2xxx_queue_data_in(out_$p196);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$p196 := $M.59;
    goto corral_source_split_4355;

  $bb182:
    assume out_$i195 == 1;
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 2);
    goto corral_source_split_4352;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i194 := $M.77;
    goto corral_source_split_4351;

  $bb180:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} out_vslice_dummy_var_161 := tcm_qla2xxx_queue_data_in(out_$p192);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$p192 := $M.59;
    goto corral_source_split_4347;

  $bb179:
    assume out_$i191 == 1;
    goto corral_source_split_4346;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    out_$i190 := $M.77;
    goto corral_source_split_4279;

  $bb147:
    assume out_$i159 == 1;
    goto corral_source_split_4278;

  $bb141:
    assume out_$i156 == 1;
    assume {:verifier.code 0} true;
    out_$i159 := $slt.i32(out_$i123, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb140:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i123, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb189:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} out_vslice_dummy_var_164 := tcm_qla2xxx_check_demo_mode_cache(out_$p204);
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p204 := $M.62;
    goto corral_source_split_4368;

  $bb188:
    assume out_$i203 == 1;
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 2);
    goto corral_source_split_4365;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i202 := $M.77;
    goto corral_source_split_4364;

  $bb186:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} out_vslice_dummy_var_163 := tcm_qla2xxx_check_demo_mode_cache(out_$p200);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$p200 := $M.62;
    goto corral_source_split_4360;

  $bb185:
    assume out_$i199 == 1;
    goto corral_source_split_4359;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 1);
    goto corral_source_split_4284;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i198 := $M.77;
    goto corral_source_split_4283;

  $bb148:
    assume !(out_$i159 == 1);
    goto corral_source_split_4282;

  $bb195:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} tcm_qla2xxx_set_default_node_attrs(out_$p211);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$p211 := $M.63;
    goto corral_source_split_4381;

  $bb194:
    assume out_$i210 == 1;
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 2);
    goto corral_source_split_4378;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i209 := $M.77;
    goto corral_source_split_4377;

  $bb192:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} tcm_qla2xxx_set_default_node_attrs(out_$p208);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$p208 := $M.63;
    goto corral_source_split_4373;

  $bb191:
    assume out_$i207 == 1;
    goto corral_source_split_4372;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i206 := $M.77;
    goto corral_source_split_4267;

  $bb143:
    assume out_$i157 == 1;
    goto corral_source_split_4266;

  $bb142:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i32(out_$i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb201:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_vslice_dummy_var_166 := tcm_qla2xxx_parse_pr_out_transport_id(out_$p218, in_$p19, in_$p24, in_$p26);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p218 := $M.62;
    goto corral_source_split_4394;

  $bb200:
    assume out_$i217 == 1;
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 2);
    goto corral_source_split_4391;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i216 := $M.77;
    goto corral_source_split_4390;

  $bb198:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_vslice_dummy_var_165 := tcm_qla2xxx_parse_pr_out_transport_id(out_$p214, in_$p19, in_$p24, in_$p26);
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$p214 := $M.62;
    goto corral_source_split_4386;

  $bb197:
    assume out_$i213 == 1;
    goto corral_source_split_4385;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$i212 := $M.77;
    goto corral_source_split_4271;

  $bb145:
    assume out_$i158 == 1;
    goto corral_source_split_4270;

  $bb144:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i123, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb207:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_vslice_dummy_var_168 := tcm_qla2xxx_check_prod_write_protect(out_$p226);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$p226 := $M.62;
    goto corral_source_split_4407;

  $bb206:
    assume out_$i225 == 1;
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 2);
    goto corral_source_split_4404;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i224 := $M.77;
    goto corral_source_split_4403;

  $bb204:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_vslice_dummy_var_167 := tcm_qla2xxx_check_prod_write_protect(out_$p222);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p222 := $M.62;
    goto corral_source_split_4399;

  $bb203:
    assume out_$i221 == 1;
    goto corral_source_split_4398;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 1);
    goto corral_source_split_4276;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    out_$i220 := $M.77;
    goto corral_source_split_4275;

  $bb146:
    assume !(out_$i158 == 1);
    goto corral_source_split_4274;

  $bb213:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} tcm_qla2xxx_put_session(out_$p233);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$p233 := $M.64;
    goto corral_source_split_4420;

  $bb212:
    assume out_$i232 == 1;
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 2);
    goto corral_source_split_4417;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i231 := $M.77;
    goto corral_source_split_4416;

  $bb210:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} tcm_qla2xxx_put_session(out_$p230);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$p230 := $M.64;
    goto corral_source_split_4412;

  $bb209:
    assume out_$i229 == 1;
    goto corral_source_split_4411;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 1);
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i228 := $M.77;
    goto corral_source_split_4259;

  $bb137:
    assume out_$i154 == 1;
    goto corral_source_split_4258;

  $bb131:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := $slt.i32(out_$i123, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb121:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i123, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb120:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i123, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb219:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} tcm_qla2xxx_release_cmd(out_$p239);
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$p239 := $M.59;
    goto corral_source_split_4433;

  $bb218:
    assume out_$i238 == 1;
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 2);
    goto corral_source_split_4430;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i237 := $M.77;
    goto corral_source_split_4429;

  $bb216:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} tcm_qla2xxx_release_cmd(out_$p236);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p236 := $M.59;
    goto corral_source_split_4425;

  $bb215:
    assume out_$i235 == 1;
    goto corral_source_split_4424;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 1);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$i234 := $M.77;
    goto corral_source_split_4263;

  $bb138:
    assume !(out_$i154 == 1);
    goto corral_source_split_4262;

  $bb225:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_vslice_dummy_var_170 := tcm_qla2xxx_check_demo_mode(out_$p246);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p246 := $M.62;
    goto corral_source_split_4446;

  $bb224:
    assume out_$i245 == 1;
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 2);
    goto corral_source_split_4443;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i244 := $M.77;
    goto corral_source_split_4442;

  $bb222:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} out_vslice_dummy_var_169 := tcm_qla2xxx_check_demo_mode(out_$p242);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$p242 := $M.62;
    goto corral_source_split_4438;

  $bb221:
    assume out_$i241 == 1;
    goto corral_source_split_4437;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i240 := $M.77;
    goto corral_source_split_4247;

  $bb133:
    assume out_$i152 == 1;
    goto corral_source_split_4246;

  $bb132:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    out_$i152 := $slt.i32(out_$i123, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb231:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 998} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} out_vslice_dummy_var_172 := tcm_qla2xxx_sess_get_index(out_$p254);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p254 := $M.64;
    goto corral_source_split_4459;

  $bb230:
    assume out_$i253 == 1;
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 2);
    goto corral_source_split_4456;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i252 := $M.77;
    goto corral_source_split_4455;

  $bb228:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 996} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} out_vslice_dummy_var_171 := tcm_qla2xxx_sess_get_index(out_$p250);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$p250 := $M.64;
    goto corral_source_split_4451;

  $bb227:
    assume out_$i249 == 1;
    goto corral_source_split_4450;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 1);
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i248 := $M.77;
    goto corral_source_split_4251;

  $bb135:
    assume out_$i153 == 1;
    goto corral_source_split_4250;

  $bb134:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i123, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb237:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} tcm_qla2xxx_drop_nodeacl(out_$p261);
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$p261 := $M.63;
    goto corral_source_split_4472;

  $bb236:
    assume out_$i260 == 1;
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 2);
    goto corral_source_split_4469;

  $bb235:
    assume {:verifier.code 0} true;
    out_$i259 := $M.77;
    goto corral_source_split_4468;

  $bb234:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} tcm_qla2xxx_drop_nodeacl(out_$p258);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$p258 := $M.63;
    goto corral_source_split_4464;

  $bb233:
    assume out_$i257 == 1;
    goto corral_source_split_4463;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$i256 := $M.77;
    goto corral_source_split_4255;

  $bb136:
    assume !(out_$i153 == 1);
    goto corral_source_split_4254;

  $bb243:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} tcm_qla2xxx_drop_lport(out_$p267);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$p267 := $M.65;
    goto corral_source_split_4485;

  $bb242:
    assume out_$i266 == 1;
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 2);
    goto corral_source_split_4482;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i265 := $M.77;
    goto corral_source_split_4481;

  $bb240:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} tcm_qla2xxx_drop_lport(out_$p264);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$p264 := $M.65;
    goto corral_source_split_4477;

  $bb239:
    assume out_$i263 == 1;
    goto corral_source_split_4476;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 1);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$i262 := $M.77;
    goto corral_source_split_4239;

  $bb129:
    assume out_$i150 == 1;
    goto corral_source_split_4238;

  $bb123:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$i150 := $slt.i32(out_$i123, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb122:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i123, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb249:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} out_vslice_dummy_var_174 := tcm_qla2xxx_get_pr_transport_id(out_$p276, out_$p277, out_$p278, in_$p16, in_$p18);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$p278 := $M.60;
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$p277 := $M.63;
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$p276 := $M.62;
    goto corral_source_split_4500;

  $bb248:
    assume out_$i275 == 1;
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 2);
    goto corral_source_split_4497;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i274 := $M.77;
    goto corral_source_split_4496;

  $bb246:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} out_vslice_dummy_var_173 := tcm_qla2xxx_get_pr_transport_id(out_$p270, out_$p271, out_$p272, in_$p16, in_$p18);
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$p272 := $M.60;
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p271 := $M.63;
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$p270 := $M.62;
    goto corral_source_split_4490;

  $bb245:
    assume out_$i269 == 1;
    goto corral_source_split_4489;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 1);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i268 := $M.77;
    goto corral_source_split_4243;

  $bb130:
    assume !(out_$i150 == 1);
    goto corral_source_split_4242;

  $bb255:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} out_vslice_dummy_var_176 := tcm_qla2xxx_get_default_depth(out_$p286);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$p286 := $M.62;
    goto corral_source_split_4515;

  $bb254:
    assume out_$i285 == 1;
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 2);
    goto corral_source_split_4512;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i284 := $M.77;
    goto corral_source_split_4511;

  $bb252:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} out_vslice_dummy_var_175 := tcm_qla2xxx_get_default_depth(out_$p282);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$p282 := $M.62;
    goto corral_source_split_4507;

  $bb251:
    assume out_$i281 == 1;
    goto corral_source_split_4506;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 1);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$i280 := $M.77;
    goto corral_source_split_4227;

  $bb125:
    assume out_$i148 == 1;
    goto corral_source_split_4226;

  $bb124:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    out_$i148 := $slt.i32(out_$i123, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb261:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} out_vslice_dummy_var_178 := tcm_qla2xxx_get_fabric_proto_ident(out_$p294);
    goto corral_source_split_4529;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$p294 := $M.62;
    goto corral_source_split_4528;

  $bb260:
    assume out_$i293 == 1;
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 2);
    goto corral_source_split_4525;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i292 := $M.77;
    goto corral_source_split_4524;

  $bb258:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_vslice_dummy_var_177 := tcm_qla2xxx_get_fabric_proto_ident(out_$p290);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$p290 := $M.62;
    goto corral_source_split_4520;

  $bb257:
    assume out_$i289 == 1;
    goto corral_source_split_4519;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 1);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i288 := $M.77;
    goto corral_source_split_4231;

  $bb127:
    assume out_$i149 == 1;
    goto corral_source_split_4230;

  $bb126:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i123, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb267:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4545;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} tcm_qla2xxx_release_fabric_acl(out_$p302, out_$p303);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$p303 := $M.63;
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p302 := $M.62;
    goto corral_source_split_4542;

  $bb266:
    assume out_$i301 == 1;
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 2);
    goto corral_source_split_4539;

  $bb265:
    assume {:verifier.code 0} true;
    out_$i300 := $M.77;
    goto corral_source_split_4538;

  $bb264:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} tcm_qla2xxx_release_fabric_acl(out_$p298, out_$p299);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$p299 := $M.63;
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$p298 := $M.62;
    goto corral_source_split_4533;

  $bb263:
    assume out_$i297 == 1;
    goto corral_source_split_4532;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i296 := $M.77;
    goto corral_source_split_4235;

  $bb128:
    assume !(out_$i149 == 1);
    goto corral_source_split_4234;

  $bb273:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} out_vslice_dummy_var_180 := tcm_qla2xxx_write_pending_status(out_$p310);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$p310 := $M.59;
    goto corral_source_split_4556;

  $bb272:
    assume out_$i309 == 1;
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 2);
    goto corral_source_split_4553;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i308 := $M.77;
    goto corral_source_split_4552;

  $bb270:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} out_vslice_dummy_var_179 := tcm_qla2xxx_write_pending_status(out_$p306);
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$p306 := $M.59;
    goto corral_source_split_4548;

  $bb269:
    assume out_$i305 == 1;
    goto corral_source_split_4547;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 1);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i304 := $M.77;
    goto corral_source_split_4219;

  $bb117:
    assume out_$i144 == 1;
    goto corral_source_split_4218;

  $bb111:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i123, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb101:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i123, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb78:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i123, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb77:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i123, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb279:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} out_vslice_dummy_var_182 := tcm_qla2xxx_get_pr_transport_id_len(out_$p320, out_$p321, out_$p322, in_$p28);
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$p322 := $M.60;
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$p321 := $M.63;
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$p320 := $M.62;
    goto corral_source_split_4571;

  $bb278:
    assume out_$i319 == 1;
    goto corral_source_split_4570;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 2);
    goto corral_source_split_4568;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i318 := $M.77;
    goto corral_source_split_4567;

  $bb276:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1028} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_vslice_dummy_var_181 := tcm_qla2xxx_get_pr_transport_id_len(out_$p314, out_$p315, out_$p316, in_$p28);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$p316 := $M.60;
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$p315 := $M.63;
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$p314 := $M.62;
    goto corral_source_split_4561;

  $bb275:
    assume out_$i313 == 1;
    goto corral_source_split_4560;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 1);
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i312 := $M.77;
    goto corral_source_split_4223;

  $bb118:
    assume !(out_$i144 == 1);
    goto corral_source_split_4222;

  $bb285:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1034} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_vslice_dummy_var_184 := tcm_qla2xxx_check_stop_free(out_$p330);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p330 := $M.59;
    goto corral_source_split_4586;

  $bb284:
    assume out_$i329 == 1;
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 2);
    goto corral_source_split_4583;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i328 := $M.77;
    goto corral_source_split_4582;

  $bb282:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} out_vslice_dummy_var_183 := tcm_qla2xxx_check_stop_free(out_$p326);
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$p326 := $M.59;
    goto corral_source_split_4578;

  $bb281:
    assume out_$i325 == 1;
    goto corral_source_split_4577;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 1);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i324 := $M.77;
    goto corral_source_split_4207;

  $bb113:
    assume out_$i142 == 1;
    goto corral_source_split_4206;

  $bb112:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i123, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb291:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1038} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_vslice_dummy_var_186 := tcm_qla2xxx_tpg_get_inst_index(out_$p338);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$p338 := $M.62;
    goto corral_source_split_4599;

  $bb290:
    assume out_$i337 == 1;
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 2);
    goto corral_source_split_4596;

  $bb289:
    assume {:verifier.code 0} true;
    out_$i336 := $M.77;
    goto corral_source_split_4595;

  $bb288:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1036} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} out_vslice_dummy_var_185 := tcm_qla2xxx_tpg_get_inst_index(out_$p334);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$p334 := $M.62;
    goto corral_source_split_4591;

  $bb287:
    assume out_$i333 == 1;
    goto corral_source_split_4590;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 1);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i332 := $M.77;
    goto corral_source_split_4211;

  $bb115:
    assume out_$i143 == 1;
    goto corral_source_split_4210;

  $bb114:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i123, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb297:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1042} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_vslice_dummy_var_188 := tcm_qla2xxx_get_tag(out_$p346);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$p346 := $M.62;
    goto corral_source_split_4612;

  $bb296:
    assume out_$i345 == 1;
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 2);
    goto corral_source_split_4609;

  $bb295:
    assume {:verifier.code 0} true;
    out_$i344 := $M.77;
    goto corral_source_split_4608;

  $bb294:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1040} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_vslice_dummy_var_187 := tcm_qla2xxx_get_tag(out_$p342);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$p342 := $M.62;
    goto corral_source_split_4604;

  $bb293:
    assume out_$i341 == 1;
    goto corral_source_split_4603;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i341 := $eq.i32(out_$i340, 1);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i340 := $M.77;
    goto corral_source_split_4215;

  $bb116:
    assume !(out_$i143 == 1);
    goto corral_source_split_4214;

  $bb303:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1046} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} out_vslice_dummy_var_190 := tcm_qla2xxx_check_demo_mode_login_only(out_$p354);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p354 := $M.62;
    goto corral_source_split_4625;

  $bb302:
    assume out_$i353 == 1;
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 2);
    goto corral_source_split_4622;

  $bb301:
    assume {:verifier.code 0} true;
    out_$i352 := $M.77;
    goto corral_source_split_4621;

  $bb300:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} out_vslice_dummy_var_189 := tcm_qla2xxx_check_demo_mode_login_only(out_$p350);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$p350 := $M.62;
    goto corral_source_split_4617;

  $bb299:
    assume out_$i349 == 1;
    goto corral_source_split_4616;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 1);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i348 := $M.77;
    goto corral_source_split_4199;

  $bb109:
    assume out_$i140 == 1;
    goto corral_source_split_4198;

  $bb103:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i123, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb102:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i123, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb309:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} out_vslice_dummy_var_192 := tcm_qla2xxx_get_fabric_name();
    goto corral_source_split_4637;

  $bb308:
    assume out_$i360 == 1;
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 2);
    goto corral_source_split_4634;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i359 := $M.77;
    goto corral_source_split_4633;

  $bb306:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1048} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} out_vslice_dummy_var_191 := tcm_qla2xxx_get_fabric_name();
    goto corral_source_split_4630;

  $bb305:
    assume out_$i357 == 1;
    goto corral_source_split_4629;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 1);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i356 := $M.77;
    goto corral_source_split_4203;

  $bb110:
    assume !(out_$i140 == 1);
    goto corral_source_split_4202;

  $bb315:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1054} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} tcm_qla2xxx_aborted_task(out_$p367);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$p367 := $M.59;
    goto corral_source_split_4649;

  $bb314:
    assume out_$i366 == 1;
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 2);
    goto corral_source_split_4646;

  $bb313:
    assume {:verifier.code 0} true;
    out_$i365 := $M.77;
    goto corral_source_split_4645;

  $bb312:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1052} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} tcm_qla2xxx_aborted_task(out_$p364);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$p364 := $M.59;
    goto corral_source_split_4641;

  $bb311:
    assume out_$i363 == 1;
    goto corral_source_split_4640;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 1);
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$i362 := $M.77;
    goto corral_source_split_4187;

  $bb105:
    assume out_$i138 == 1;
    goto corral_source_split_4186;

  $bb104:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i123, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb321:
    assume !(out_$i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4664;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} out_vslice_dummy_var_194 := tcm_qla2xxx_get_fabric_wwn(out_$p374);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$p374 := $M.62;
    goto corral_source_split_4662;

  $bb320:
    assume out_$i373 == 1;
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 2);
    goto corral_source_split_4659;

  $bb319:
    assume {:verifier.code 0} true;
    out_$i372 := $M.77;
    goto corral_source_split_4658;

  $bb318:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} out_vslice_dummy_var_193 := tcm_qla2xxx_get_fabric_wwn(out_$p370);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p370 := $M.62;
    goto corral_source_split_4654;

  $bb317:
    assume out_$i369 == 1;
    goto corral_source_split_4653;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 1);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i368 := $M.77;
    goto corral_source_split_4191;

  $bb107:
    assume out_$i139 == 1;
    goto corral_source_split_4190;

  $bb106:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i123, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb327:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1062} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4677;

  SeqInstr_60:
    goto corral_source_split_4676;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_vslice_dummy_var_196 := tcm_qla2xxx_alloc_fabric_acl(out_$p382);
    goto SeqInstr_59;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$p382 := $M.62;
    goto corral_source_split_4675;

  $bb326:
    assume out_$i381 == 1;
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 2);
    goto corral_source_split_4672;

  $bb325:
    assume {:verifier.code 0} true;
    out_$i380 := $M.77;
    goto corral_source_split_4671;

  $bb324:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1060} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4669;

  SeqInstr_57:
    goto corral_source_split_4668;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} out_vslice_dummy_var_195 := tcm_qla2xxx_alloc_fabric_acl(out_$p378);
    goto SeqInstr_56;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    out_$p378 := $M.62;
    goto corral_source_split_4667;

  $bb323:
    assume out_$i377 == 1;
    goto corral_source_split_4666;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 1);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i376 := $M.77;
    goto corral_source_split_4195;

  $bb108:
    assume !(out_$i139 == 1);
    goto corral_source_split_4194;

  $bb333:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_vslice_dummy_var_198 := tcm_qla2xxx_get_task_tag(out_$p390);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$p390 := $M.59;
    goto corral_source_split_4688;

  $bb332:
    assume out_$i389 == 1;
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 2);
    goto corral_source_split_4685;

  $bb331:
    assume {:verifier.code 0} true;
    out_$i388 := $M.77;
    goto corral_source_split_4684;

  $bb330:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} out_vslice_dummy_var_197 := tcm_qla2xxx_get_task_tag(out_$p386);
    goto corral_source_split_4681;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$p386 := $M.59;
    goto corral_source_split_4680;

  $bb329:
    assume out_$i385 == 1;
    goto corral_source_split_4679;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 1);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i384 := $M.77;
    goto corral_source_split_4179;

  $bb99:
    assume out_$i135 == 1;
    goto corral_source_split_4178;

  $bb93:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i123, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb80:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i123, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb79:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i123, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb339:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4705;

  SeqInstr_66:
    goto corral_source_split_4704;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} out_vslice_dummy_var_200 := tcm_qla2xxx_make_nodeacl(out_$p399, out_$p400, in_$p29);
    goto SeqInstr_65;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p400 := $M.61;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$p399 := $M.62;
    goto corral_source_split_4702;

  $bb338:
    assume out_$i398 == 1;
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 2);
    goto corral_source_split_4699;

  $bb337:
    assume {:verifier.code 0} true;
    out_$i397 := $M.77;
    goto corral_source_split_4698;

  $bb336:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1068} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4696;

  SeqInstr_63:
    goto corral_source_split_4695;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} out_vslice_dummy_var_199 := tcm_qla2xxx_make_nodeacl(out_$p394, out_$p395, in_$p29);
    goto SeqInstr_62;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$p395 := $M.61;
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$p394 := $M.62;
    goto corral_source_split_4693;

  $bb335:
    assume out_$i393 == 1;
    goto corral_source_split_4692;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 1);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i392 := $M.77;
    goto corral_source_split_4183;

  $bb100:
    assume !(out_$i135 == 1);
    goto corral_source_split_4182;

  $bb345:
    assume !(out_$i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1074} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} tcm_qla2xxx_drop_tpg(out_$p407);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$p407 := $M.62;
    goto corral_source_split_4716;

  $bb344:
    assume out_$i406 == 1;
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i406 := $eq.i32(out_$i405, 2);
    goto corral_source_split_4713;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i405 := $M.77;
    goto corral_source_split_4712;

  $bb342:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4710;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} tcm_qla2xxx_drop_tpg(out_$p404);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$p404 := $M.62;
    goto corral_source_split_4708;

  $bb341:
    assume out_$i403 == 1;
    goto corral_source_split_4707;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$i403 := $eq.i32(out_$i402, 1);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i402 := $M.77;
    goto corral_source_split_4167;

  $bb95:
    assume out_$i133 == 1;
    goto corral_source_split_4166;

  $bb94:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i123, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb351:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1078} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} tcm_qla2xxx_close_session(out_$p413);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p413 := $M.64;
    goto corral_source_split_4729;

  $bb350:
    assume out_$i412 == 1;
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 2);
    goto corral_source_split_4726;

  $bb349:
    assume {:verifier.code 0} true;
    out_$i411 := $M.77;
    goto corral_source_split_4725;

  $bb348:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1076} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} tcm_qla2xxx_close_session(out_$p410);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$p410 := $M.64;
    goto corral_source_split_4721;

  $bb347:
    assume out_$i409 == 1;
    goto corral_source_split_4720;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 1);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i408 := $M.77;
    goto corral_source_split_4171;

  $bb97:
    assume out_$i134 == 1;
    goto corral_source_split_4170;

  $bb96:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i123, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb357:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} out_vslice_dummy_var_202 := tcm_qla2xxx_get_cmd_state(out_$p420);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$p420 := $M.59;
    goto corral_source_split_4742;

  $bb356:
    assume out_$i419 == 1;
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i419 := $eq.i32(out_$i418, 2);
    goto corral_source_split_4739;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i418 := $M.77;
    goto corral_source_split_4738;

  $bb354:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_vslice_dummy_var_201 := tcm_qla2xxx_get_cmd_state(out_$p416);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$p416 := $M.59;
    goto corral_source_split_4734;

  $bb353:
    assume out_$i415 == 1;
    goto corral_source_split_4733;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i415 := $eq.i32(out_$i414, 1);
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i414 := $M.77;
    goto corral_source_split_4175;

  $bb98:
    assume !(out_$i134 == 1);
    goto corral_source_split_4174;

  $bb363:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1086} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4759;

  SeqInstr_72:
    goto corral_source_split_4758;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} out_vslice_dummy_var_204 := tcm_qla2xxx_make_tpg(out_$p429, out_$p430, in_$p22);
    goto SeqInstr_71;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$p430 := $M.61;
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$p429 := $M.65;
    goto corral_source_split_4756;

  $bb362:
    assume out_$i428 == 1;
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i427, 2);
    goto corral_source_split_4753;

  $bb361:
    assume {:verifier.code 0} true;
    out_$i427 := $M.77;
    goto corral_source_split_4752;

  $bb360:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4750;

  SeqInstr_69:
    goto corral_source_split_4749;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} out_vslice_dummy_var_203 := tcm_qla2xxx_make_tpg(out_$p424, out_$p425, in_$p22);
    goto SeqInstr_68;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$p425 := $M.61;
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    out_$p424 := $M.65;
    goto corral_source_split_4747;

  $bb359:
    assume out_$i423 == 1;
    goto corral_source_split_4746;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i423 := $eq.i32(out_$i422, 1);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i422 := $M.77;
    goto corral_source_split_4159;

  $bb91:
    assume out_$i131 == 1;
    goto corral_source_split_4158;

  $bb82:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i123, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb81:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i123, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb369:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1090} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4772;

  SeqInstr_78:
    goto corral_source_split_4771;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} out_vslice_dummy_var_206 := tcm_qla2xxx_make_lport(in_$p21, out_$p438, in_$p17);
    goto SeqInstr_77;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$p438 := $M.61;
    goto corral_source_split_4770;

  $bb368:
    assume out_$i437 == 1;
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$i437 := $eq.i32(out_$i436, 2);
    goto corral_source_split_4767;

  $bb367:
    assume {:verifier.code 0} true;
    out_$i436 := $M.77;
    goto corral_source_split_4766;

  $bb366:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1088} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4764;

  SeqInstr_75:
    goto corral_source_split_4763;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} out_vslice_dummy_var_205 := tcm_qla2xxx_make_lport(in_$p21, out_$p434, in_$p17);
    goto SeqInstr_74;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$p434 := $M.61;
    goto corral_source_split_4762;

  $bb365:
    assume out_$i433 == 1;
    goto corral_source_split_4761;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i433 := $eq.i32(out_$i432, 1);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i432 := $M.77;
    goto corral_source_split_4163;

  $bb92:
    assume !(out_$i131 == 1);
    goto corral_source_split_4162;

  $bb375:
    assume !(out_$i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1094} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_vslice_dummy_var_208 := tcm_qla2xxx_shutdown_session(out_$p446);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$p446 := $M.64;
    goto corral_source_split_4783;

  $bb374:
    assume out_$i445 == 1;
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$i445 := $eq.i32(out_$i444, 2);
    goto corral_source_split_4780;

  $bb373:
    assume {:verifier.code 0} true;
    out_$i444 := $M.77;
    goto corral_source_split_4779;

  $bb372:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1092} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_vslice_dummy_var_207 := tcm_qla2xxx_shutdown_session(out_$p442);
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$p442 := $M.64;
    goto corral_source_split_4775;

  $bb371:
    assume out_$i441 == 1;
    goto corral_source_split_4774;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i440, 1);
    goto corral_source_split_4148;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i440 := $M.77;
    goto corral_source_split_4147;

  $bb84:
    assume out_$i128 == 1;
    goto corral_source_split_4146;

  $bb83:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i123, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb378:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.85 := out_$i452;
    call {:si_unique_call 1097} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i452);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i452 := $sub.i32(out_$i451, 1);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i451 := $M.85;
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1096} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} out_vslice_dummy_var_209 := ldv_release_3();
    goto corral_source_split_4788;

  $bb377:
    assume out_$i449 == 1;
    goto corral_source_split_4787;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 2);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i448 := $M.77;
    goto corral_source_split_4151;

  $bb86:
    assume out_$i129 == 1;
    goto corral_source_split_4150;

  $bb85:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i123, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb381:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.85 := out_$i457;
    call {:si_unique_call 1100} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i457);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i457 := $add.i32(out_$i456, 1);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i456 := $M.85;
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 1099} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_vslice_dummy_var_210 := ldv_probe_3();
    goto corral_source_split_4795;

  $bb380:
    assume out_$i454 == 1;
    goto corral_source_split_4794;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    out_$i454 := $eq.i32(out_$i453, 1);
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i453 := $M.77;
    goto corral_source_split_4155;

  $bb88:
    assume out_$i130 == 1;
    goto corral_source_split_4154;

  $bb87:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i123, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_stop();
    goto corral_source_split_4801;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb90;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb90;

  $bb387:
    assume !(out_$i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb397:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1106} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} out_vslice_dummy_var_211 := tcm_qla2xxx_tpg_store_enable(out_$p466, in_$p30, in_$i31);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$p466 := $M.47;
    goto corral_source_split_4814;

  $bb396:
    assume out_$i465 == 1;
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i465 := $eq.i32(out_$i464, 1);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i464 := $M.78;
    goto corral_source_split_4810;

  $bb394:
    assume out_$i463 == 1;
    goto corral_source_split_4809;

  $bb389:
    assume out_$i461 == 1;
    assume {:verifier.code 0} true;
    out_$i463 := $eq.i32(out_$i460, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb388:
    assume {:verifier.code 0} true;
    out_$i461 := $slt.i32(out_$i460, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_4803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} out_$i460 := __VERIFIER_nondet_int();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i460);
    call {:si_unique_call 1104} {:cexpr "tmp___54"} boogie_si_record_i32(out_$i460);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb386:
    assume out_$i459 == 1;
    goto corral_source_split_4803;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i459 := $ne.i32(out_$i458, 0);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i458 := $M.78;
    goto corral_source_split_4077;

  $bb22:
    assume out_$i88 == 1;
    goto corral_source_split_4076;

  $bb21:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i78, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb401:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4821;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} out_vslice_dummy_var_212 := tcm_qla2xxx_tpg_show_enable(out_$p470, in_$p32);
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$p470 := $M.47;
    goto corral_source_split_4819;

  $bb400:
    assume out_$i469 == 1;
    goto corral_source_split_4818;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i468, 1);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i468 := $M.78;
    goto corral_source_split_4806;

  $bb391:
    assume out_$i462 == 1;
    goto corral_source_split_4805;

  $bb390:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i32(out_$i460, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_stop();
    goto corral_source_split_4823;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb392:
    assume {:verifier.code 0} true;
    assume !(out_$i462 == 1);
    goto $bb393;

  $bb395:
    assume {:verifier.code 0} true;
    assume !(out_$i463 == 1);
    goto $bb393;

  $bb407:
    assume !(out_$i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb417:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb418;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_vslice_dummy_var_213 := tcm_qla2xxx_tpg_attrib_store_prod_mode_write_protect(out_$p480, in_$p33, in_$i34);
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$p480 := $M.37;
    goto corral_source_split_4836;

  $bb416:
    assume out_$i479 == 1;
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i479 := $eq.i32(out_$i478, 1);
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i478 := $M.79;
    goto corral_source_split_4832;

  $bb414:
    assume out_$i477 == 1;
    goto corral_source_split_4831;

  $bb409:
    assume out_$i475 == 1;
    assume {:verifier.code 0} true;
    out_$i477 := $eq.i32(out_$i474, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb408:
    assume {:verifier.code 0} true;
    out_$i475 := $slt.i32(out_$i474, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_4825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} out_$i474 := __VERIFIER_nondet_int();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i474);
    call {:si_unique_call 1112} {:cexpr "tmp___55"} boogie_si_record_i32(out_$i474);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb406:
    assume out_$i473 == 1;
    goto corral_source_split_4825;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i473 := $ne.i32(out_$i472, 0);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i472 := $M.79;
    goto corral_source_split_4081;

  $bb24:
    assume out_$i89 == 1;
    goto corral_source_split_4080;

  $bb23:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i78, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb421:
    assume !(out_$i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} out_vslice_dummy_var_214 := tcm_qla2xxx_tpg_attrib_show_prod_mode_write_protect(out_$p484, in_$p35);
    goto corral_source_split_4842;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    out_$p484 := $M.37;
    goto corral_source_split_4841;

  $bb420:
    assume out_$i483 == 1;
    goto corral_source_split_4840;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i483 := $eq.i32(out_$i482, 1);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$i482 := $M.79;
    goto corral_source_split_4828;

  $bb411:
    assume out_$i476 == 1;
    goto corral_source_split_4827;

  $bb410:
    assume !(out_$i475 == 1);
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i474, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_stop();
    goto corral_source_split_4845;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb412:
    assume {:verifier.code 0} true;
    assume !(out_$i476 == 1);
    goto $bb413;

  $bb415:
    assume {:verifier.code 0} true;
    assume !(out_$i477 == 1);
    goto $bb413;

  $bb427:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb437:
    assume !(out_$i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_4860;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_vslice_dummy_var_215 := tcm_qla2xxx_tpg_attrib_store_generate_node_acls(out_$p494, in_$p36, in_$i37);
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$p494 := $M.58;
    goto corral_source_split_4858;

  $bb436:
    assume out_$i493 == 1;
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i493 := $eq.i32(out_$i492, 1);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i492 := $M.80;
    goto corral_source_split_4854;

  $bb434:
    assume out_$i491 == 1;
    goto corral_source_split_4853;

  $bb429:
    assume out_$i489 == 1;
    assume {:verifier.code 0} true;
    out_$i491 := $eq.i32(out_$i488, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb428:
    assume {:verifier.code 0} true;
    out_$i489 := $slt.i32(out_$i488, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_4847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} out_$i488 := __VERIFIER_nondet_int();
    call {:si_unique_call 1119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i488);
    call {:si_unique_call 1120} {:cexpr "tmp___56"} boogie_si_record_i32(out_$i488);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb426:
    assume out_$i487 == 1;
    goto corral_source_split_4847;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i32(out_$i486, 0);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i486 := $M.80;
    goto corral_source_split_4085;

  $bb25:
    assume !(out_$i89 == 1);
    goto corral_source_split_4084;

  $bb441:
    assume !(out_$i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_4865;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_vslice_dummy_var_216 := tcm_qla2xxx_tpg_attrib_show_generate_node_acls(out_$p498, in_$p38);
    goto corral_source_split_4864;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    out_$p498 := $M.58;
    goto corral_source_split_4863;

  $bb440:
    assume out_$i497 == 1;
    goto corral_source_split_4862;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i497 := $eq.i32(out_$i496, 1);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i496 := $M.80;
    goto corral_source_split_4850;

  $bb431:
    assume out_$i490 == 1;
    goto corral_source_split_4849;

  $bb430:
    assume !(out_$i489 == 1);
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i488, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ldv_stop();
    goto corral_source_split_4867;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb432:
    assume {:verifier.code 0} true;
    assume !(out_$i490 == 1);
    goto $bb433;

  $bb435:
    assume {:verifier.code 0} true;
    assume !(out_$i491 == 1);
    goto $bb433;

  $bb447:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb755:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb752:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb743:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb731:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb719:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb713:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb701:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb695:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb683:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb671:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb659:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb641:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb629:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb611:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb569:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb545:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb534:
    assume !(out_$i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb535;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1132} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5038;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} out_vslice_dummy_var_218 := tcm_qla2xxx_queue_status(out_$p549);
    goto corral_source_split_5037;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    out_$p549 := $M.40;
    goto corral_source_split_5036;

  $bb533:
    assume out_$i548 == 1;
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i548 := $eq.i32(out_$i547, 2);
    goto corral_source_split_5033;

  $bb532:
    assume {:verifier.code 0} true;
    out_$i547 := $M.81;
    goto corral_source_split_5032;

  $bb531:
    assume !(out_$i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb532;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb532;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1130} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_vslice_dummy_var_217 := tcm_qla2xxx_queue_status(out_$p545);
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    out_$p545 := $M.40;
    goto corral_source_split_5028;

  $bb530:
    assume out_$i544 == 1;
    goto corral_source_split_5027;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    out_$i544 := $eq.i32(out_$i543, 1);
    goto corral_source_split_5025;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$i543 := $M.81;
    goto corral_source_split_5024;

  $bb528:
    assume out_$i542 == 1;
    goto corral_source_split_5023;

  $bb526:
    assume out_$i541 == 1;
    assume {:verifier.code 0} true;
    out_$i542 := $eq.i32(out_$i502, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb522:
    assume out_$i539 == 1;
    assume {:verifier.code 0} true;
    out_$i541 := $slt.i32(out_$i502, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  $bb512:
    assume out_$i534 == 1;
    assume {:verifier.code 0} true;
    out_$i539 := $slt.i32(out_$i502, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb492:
    assume out_$i524 == 1;
    assume {:verifier.code 0} true;
    out_$i534 := $slt.i32(out_$i502, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  $bb449:
    assume out_$i503 == 1;
    assume {:verifier.code 0} true;
    out_$i524 := $slt.i32(out_$i502, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb448:
    assume {:verifier.code 0} true;
    out_$i503 := $slt.i32(out_$i502, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_4869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1126} out_$i502 := __VERIFIER_nondet_int();
    call {:si_unique_call 1127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i502);
    call {:si_unique_call 1128} {:cexpr "tmp___57"} boogie_si_record_i32(out_$i502);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb446:
    assume out_$i501 == 1;
    goto corral_source_split_4869;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i501 := $ne.i32(out_$i500, 0);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i500 := $M.81;
    goto corral_source_split_4065;

  $bb16:
    assume out_$i85 == 1;
    goto corral_source_split_4064;

  $bb5:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i78, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb4:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i78, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb538:
    assume !(out_$i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb539;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} out_vslice_dummy_var_219 := tcm_qla2xxx_write_pending(out_$p553);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    out_$p553 := $M.40;
    goto corral_source_split_5041;

  $bb537:
    assume out_$i552 == 1;
    goto corral_source_split_5040;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    out_$i552 := $eq.i32(out_$i551, 2);
    goto corral_source_split_5021;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    out_$i551 := $M.81;
    goto corral_source_split_5020;

  $bb527:
    assume !(out_$i541 == 1);
    goto corral_source_split_5019;

  $bb544:
    assume !(out_$i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1138} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5056;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} tcm_qla2xxx_queue_tm_rsp(out_$p560);
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$p560 := $M.40;
    goto corral_source_split_5054;

  $bb543:
    assume out_$i559 == 1;
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$i559 := $eq.i32(out_$i558, 2);
    goto corral_source_split_5051;

  $bb542:
    assume {:verifier.code 0} true;
    out_$i558 := $M.81;
    goto corral_source_split_5050;

  $bb541:
    assume !(out_$i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb542;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} tcm_qla2xxx_queue_tm_rsp(out_$p557);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$p557 := $M.40;
    goto corral_source_split_5046;

  $bb540:
    assume out_$i556 == 1;
    goto corral_source_split_5045;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$i556 := $eq.i32(out_$i555, 1);
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$i555 := $M.81;
    goto corral_source_split_5012;

  $bb524:
    assume out_$i540 == 1;
    goto corral_source_split_5011;

  $bb523:
    assume !(out_$i539 == 1);
    assume {:verifier.code 0} true;
    out_$i540 := $slt.i32(out_$i502, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb550:
    assume !(out_$i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1142} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} out_vslice_dummy_var_221 := tcm_qla2xxx_check_demo_mode(out_$p567);
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    out_$p567 := $M.42;
    goto corral_source_split_5067;

  $bb549:
    assume out_$i566 == 1;
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    out_$i566 := $eq.i32(out_$i565, 2);
    goto corral_source_split_5064;

  $bb548:
    assume {:verifier.code 0} true;
    out_$i565 := $M.81;
    goto corral_source_split_5063;

  $bb547:
    assume !(out_$i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} out_vslice_dummy_var_220 := tcm_qla2xxx_check_demo_mode(out_$p563);
    goto corral_source_split_5060;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    out_$p563 := $M.42;
    goto corral_source_split_5059;

  $bb546:
    assume out_$i562 == 1;
    goto corral_source_split_5058;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$i562 := $eq.i32(out_$i561, 1);
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i561 := $M.81;
    goto corral_source_split_5016;

  $bb525:
    assume !(out_$i540 == 1);
    goto corral_source_split_5015;

  $bb556:
    assume !(out_$i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb557;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5082;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_vslice_dummy_var_223 := tcm_qla2xxx_queue_data_in(out_$p575);
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    out_$p575 := $M.40;
    goto corral_source_split_5080;

  $bb555:
    assume out_$i574 == 1;
    goto corral_source_split_5079;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    out_$i574 := $eq.i32(out_$i573, 2);
    goto corral_source_split_5077;

  $bb554:
    assume {:verifier.code 0} true;
    out_$i573 := $M.81;
    goto corral_source_split_5076;

  $bb553:
    assume !(out_$i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb554;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5074;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} out_vslice_dummy_var_222 := tcm_qla2xxx_queue_data_in(out_$p571);
    goto corral_source_split_5073;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    out_$p571 := $M.40;
    goto corral_source_split_5072;

  $bb552:
    assume out_$i570 == 1;
    goto corral_source_split_5071;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb552, $bb553;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i570 := $eq.i32(out_$i569, 1);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$i569 := $M.81;
    goto corral_source_split_5004;

  $bb520:
    assume out_$i538 == 1;
    goto corral_source_split_5003;

  $bb514:
    assume out_$i535 == 1;
    assume {:verifier.code 0} true;
    out_$i538 := $slt.i32(out_$i502, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520, $bb521;

  $bb513:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    out_$i535 := $slt.i32(out_$i502, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb514, $bb515;

  $bb562:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb563;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    goto $bb563;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_vslice_dummy_var_225 := tcm_qla2xxx_check_demo_mode_cache(out_$p583);
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$p583 := $M.42;
    goto corral_source_split_5093;

  $bb561:
    assume out_$i582 == 1;
    goto corral_source_split_5092;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb561, $bb562;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 2);
    goto corral_source_split_5090;

  $bb560:
    assume {:verifier.code 0} true;
    out_$i581 := $M.81;
    goto corral_source_split_5089;

  $bb559:
    assume !(out_$i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    goto $bb560;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5087;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_vslice_dummy_var_224 := tcm_qla2xxx_check_demo_mode_cache(out_$p579);
    goto corral_source_split_5086;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    out_$p579 := $M.42;
    goto corral_source_split_5085;

  $bb558:
    assume out_$i578 == 1;
    goto corral_source_split_5084;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$i578 := $eq.i32(out_$i577, 1);
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$i577 := $M.81;
    goto corral_source_split_5008;

  $bb521:
    assume !(out_$i538 == 1);
    goto corral_source_split_5007;

  $bb568:
    assume !(out_$i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5108;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} tcm_qla2xxx_set_default_node_attrs(out_$p590);
    goto corral_source_split_5107;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    out_$p590 := $M.43;
    goto corral_source_split_5106;

  $bb567:
    assume out_$i589 == 1;
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    out_$i589 := $eq.i32(out_$i588, 2);
    goto corral_source_split_5103;

  $bb566:
    assume {:verifier.code 0} true;
    out_$i588 := $M.81;
    goto corral_source_split_5102;

  $bb565:
    assume !(out_$i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    goto $bb566;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5100;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} tcm_qla2xxx_set_default_node_attrs(out_$p587);
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    out_$p587 := $M.43;
    goto corral_source_split_5098;

  $bb564:
    assume out_$i586 == 1;
    goto corral_source_split_5097;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i586 := $eq.i32(out_$i585, 1);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i585 := $M.81;
    goto corral_source_split_4992;

  $bb516:
    assume out_$i536 == 1;
    goto corral_source_split_4991;

  $bb515:
    assume !(out_$i535 == 1);
    assume {:verifier.code 0} true;
    out_$i536 := $slt.i32(out_$i502, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb574:
    assume !(out_$i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb575;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb575;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1158} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} out_vslice_dummy_var_227 := tcm_qla2xxx_parse_pr_out_transport_id(out_$p597, in_$p52, in_$p45, in_$p42);
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    out_$p597 := $M.42;
    goto corral_source_split_5119;

  $bb573:
    assume out_$i596 == 1;
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$i596 := $eq.i32(out_$i595, 2);
    goto corral_source_split_5116;

  $bb572:
    assume {:verifier.code 0} true;
    out_$i595 := $M.81;
    goto corral_source_split_5115;

  $bb571:
    assume !(out_$i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb572;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1156} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} out_vslice_dummy_var_226 := tcm_qla2xxx_parse_pr_out_transport_id(out_$p593, in_$p52, in_$p45, in_$p42);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$p593 := $M.42;
    goto corral_source_split_5111;

  $bb570:
    assume out_$i592 == 1;
    goto corral_source_split_5110;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb570, $bb571;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i592 := $eq.i32(out_$i591, 1);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i591 := $M.81;
    goto corral_source_split_4996;

  $bb518:
    assume out_$i537 == 1;
    goto corral_source_split_4995;

  $bb517:
    assume !(out_$i536 == 1);
    assume {:verifier.code 0} true;
    out_$i537 := $slt.i32(out_$i502, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb580:
    assume !(out_$i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb581;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1162} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} out_vslice_dummy_var_229 := tcm_qla2xxx_check_prod_write_protect(out_$p605);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$p605 := $M.42;
    goto corral_source_split_5132;

  $bb579:
    assume out_$i604 == 1;
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$i604 := $eq.i32(out_$i603, 2);
    goto corral_source_split_5129;

  $bb578:
    assume {:verifier.code 0} true;
    out_$i603 := $M.81;
    goto corral_source_split_5128;

  $bb577:
    assume !(out_$i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb578;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1160} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} out_vslice_dummy_var_228 := tcm_qla2xxx_check_prod_write_protect(out_$p601);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$p601 := $M.42;
    goto corral_source_split_5124;

  $bb576:
    assume out_$i600 == 1;
    goto corral_source_split_5123;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i600 := $eq.i32(out_$i599, 1);
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$i599 := $M.81;
    goto corral_source_split_5000;

  $bb519:
    assume !(out_$i537 == 1);
    goto corral_source_split_4999;

  $bb586:
    assume !(out_$i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    goto $bb587;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5147;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} tcm_qla2xxx_release_cmd(out_$p612);
    goto corral_source_split_5146;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    out_$p612 := $M.40;
    goto corral_source_split_5145;

  $bb585:
    assume out_$i611 == 1;
    goto corral_source_split_5144;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    out_$i611 := $eq.i32(out_$i610, 2);
    goto corral_source_split_5142;

  $bb584:
    assume {:verifier.code 0} true;
    out_$i610 := $M.81;
    goto corral_source_split_5141;

  $bb583:
    assume !(out_$i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    goto $bb584;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1164} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} tcm_qla2xxx_release_cmd(out_$p609);
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$p609 := $M.40;
    goto corral_source_split_5137;

  $bb582:
    assume out_$i608 == 1;
    goto corral_source_split_5136;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb582, $bb583;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$i608 := $eq.i32(out_$i607, 1);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i607 := $M.81;
    goto corral_source_split_4984;

  $bb510:
    assume out_$i533 == 1;
    goto corral_source_split_4983;

  $bb504:
    assume out_$i530 == 1;
    assume {:verifier.code 0} true;
    out_$i533 := $slt.i32(out_$i502, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb494:
    assume out_$i525 == 1;
    assume {:verifier.code 0} true;
    out_$i530 := $slt.i32(out_$i502, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb493:
    assume !(out_$i524 == 1);
    assume {:verifier.code 0} true;
    out_$i525 := $slt.i32(out_$i502, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb592:
    assume !(out_$i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb593;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1170} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5160;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} tcm_qla2xxx_put_session(out_$p618);
    goto corral_source_split_5159;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    out_$p618 := $M.45;
    goto corral_source_split_5158;

  $bb591:
    assume out_$i617 == 1;
    goto corral_source_split_5157;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb591, $bb592;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    out_$i617 := $eq.i32(out_$i616, 2);
    goto corral_source_split_5155;

  $bb590:
    assume {:verifier.code 0} true;
    out_$i616 := $M.81;
    goto corral_source_split_5154;

  $bb589:
    assume !(out_$i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1168} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5152;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} tcm_qla2xxx_put_session(out_$p615);
    goto corral_source_split_5151;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    out_$p615 := $M.45;
    goto corral_source_split_5150;

  $bb588:
    assume out_$i614 == 1;
    goto corral_source_split_5149;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i614 := $eq.i32(out_$i613, 1);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i613 := $M.81;
    goto corral_source_split_4988;

  $bb511:
    assume !(out_$i533 == 1);
    goto corral_source_split_4987;

  $bb598:
    assume !(out_$i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1174} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5173;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} out_vslice_dummy_var_231 := tcm_qla2xxx_check_demo_mode(out_$p625);
    goto corral_source_split_5172;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    out_$p625 := $M.42;
    goto corral_source_split_5171;

  $bb597:
    assume out_$i624 == 1;
    goto corral_source_split_5170;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    out_$i624 := $eq.i32(out_$i623, 2);
    goto corral_source_split_5168;

  $bb596:
    assume {:verifier.code 0} true;
    out_$i623 := $M.81;
    goto corral_source_split_5167;

  $bb595:
    assume !(out_$i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb596;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5165;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_vslice_dummy_var_230 := tcm_qla2xxx_check_demo_mode(out_$p621);
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    out_$p621 := $M.42;
    goto corral_source_split_5163;

  $bb594:
    assume out_$i620 == 1;
    goto corral_source_split_5162;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$i620 := $eq.i32(out_$i619, 1);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i619 := $M.81;
    goto corral_source_split_4972;

  $bb506:
    assume out_$i531 == 1;
    goto corral_source_split_4971;

  $bb505:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    out_$i531 := $slt.i32(out_$i502, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb604:
    assume !(out_$i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb605;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} tcm_qla2xxx_drop_nodeacl(out_$p632);
    goto corral_source_split_5185;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    out_$p632 := $M.43;
    goto corral_source_split_5184;

  $bb603:
    assume out_$i631 == 1;
    goto corral_source_split_5183;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    out_$i631 := $eq.i32(out_$i630, 2);
    goto corral_source_split_5181;

  $bb602:
    assume {:verifier.code 0} true;
    out_$i630 := $M.81;
    goto corral_source_split_5180;

  $bb601:
    assume !(out_$i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb602;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5178;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} tcm_qla2xxx_drop_nodeacl(out_$p629);
    goto corral_source_split_5177;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    out_$p629 := $M.43;
    goto corral_source_split_5176;

  $bb600:
    assume out_$i628 == 1;
    goto corral_source_split_5175;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb600, $bb601;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i628 := $eq.i32(out_$i627, 1);
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$i627 := $M.81;
    goto corral_source_split_4976;

  $bb508:
    assume out_$i532 == 1;
    goto corral_source_split_4975;

  $bb507:
    assume !(out_$i531 == 1);
    assume {:verifier.code 0} true;
    out_$i532 := $slt.i32(out_$i502, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  $bb610:
    assume !(out_$i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb611;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto $bb611;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1182} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} out_vslice_dummy_var_233 := tcm_qla2xxx_sess_get_index(out_$p639);
    goto corral_source_split_5198;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    out_$p639 := $M.45;
    goto corral_source_split_5197;

  $bb609:
    assume out_$i638 == 1;
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    out_$i638 := $eq.i32(out_$i637, 2);
    goto corral_source_split_5194;

  $bb608:
    assume {:verifier.code 0} true;
    out_$i637 := $M.81;
    goto corral_source_split_5193;

  $bb607:
    assume !(out_$i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb608;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto $bb608;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1180} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5191;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} out_vslice_dummy_var_232 := tcm_qla2xxx_sess_get_index(out_$p635);
    goto corral_source_split_5190;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    out_$p635 := $M.45;
    goto corral_source_split_5189;

  $bb606:
    assume out_$i634 == 1;
    goto corral_source_split_5188;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i634 := $eq.i32(out_$i633, 1);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i633 := $M.81;
    goto corral_source_split_4980;

  $bb509:
    assume !(out_$i532 == 1);
    goto corral_source_split_4979;

  $bb616:
    assume !(out_$i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb617;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1186} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} out_vslice_dummy_var_235 := tcm_qla2xxx_get_pr_transport_id(out_$p649, out_$p650, out_$p651, in_$p47, in_$p43);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    out_$p651 := $M.39;
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    out_$p650 := $M.43;
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$p649 := $M.42;
    goto corral_source_split_5212;

  $bb615:
    assume out_$i648 == 1;
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    out_$i648 := $eq.i32(out_$i647, 2);
    goto corral_source_split_5209;

  $bb614:
    assume {:verifier.code 0} true;
    out_$i647 := $M.81;
    goto corral_source_split_5208;

  $bb613:
    assume !(out_$i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb614;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1184} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5206;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} out_vslice_dummy_var_234 := tcm_qla2xxx_get_pr_transport_id(out_$p643, out_$p644, out_$p645, in_$p47, in_$p43);
    goto corral_source_split_5205;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    out_$p645 := $M.39;
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    out_$p644 := $M.43;
    goto corral_source_split_5203;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    out_$p643 := $M.42;
    goto corral_source_split_5202;

  $bb612:
    assume out_$i642 == 1;
    goto corral_source_split_5201;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb612, $bb613;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i642 := $eq.i32(out_$i641, 1);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i641 := $M.81;
    goto corral_source_split_4964;

  $bb502:
    assume out_$i529 == 1;
    goto corral_source_split_4963;

  $bb496:
    assume out_$i526 == 1;
    assume {:verifier.code 0} true;
    out_$i529 := $slt.i32(out_$i502, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  $bb495:
    assume !(out_$i525 == 1);
    assume {:verifier.code 0} true;
    out_$i526 := $slt.i32(out_$i502, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb622:
    assume !(out_$i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb623;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    goto $bb623;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1190} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} tcm_qla2xxx_npiv_drop_lport(out_$p658);
    goto corral_source_split_5228;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    out_$p658 := $M.44;
    goto corral_source_split_5227;

  $bb621:
    assume out_$i657 == 1;
    goto corral_source_split_5226;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb621, $bb622;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    out_$i657 := $eq.i32(out_$i656, 2);
    goto corral_source_split_5224;

  $bb620:
    assume {:verifier.code 0} true;
    out_$i656 := $M.81;
    goto corral_source_split_5223;

  $bb619:
    assume !(out_$i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb620;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    goto $bb620;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1188} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5221;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} tcm_qla2xxx_npiv_drop_lport(out_$p655);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$p655 := $M.44;
    goto corral_source_split_5219;

  $bb618:
    assume out_$i654 == 1;
    goto corral_source_split_5218;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb618, $bb619;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i654 := $eq.i32(out_$i653, 1);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$i653 := $M.81;
    goto corral_source_split_4968;

  $bb503:
    assume !(out_$i529 == 1);
    goto corral_source_split_4967;

  $bb628:
    assume !(out_$i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb629;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb629;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1194} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} out_vslice_dummy_var_237 := tcm_qla2xxx_get_default_depth(out_$p665);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$p665 := $M.42;
    goto corral_source_split_5240;

  $bb627:
    assume out_$i664 == 1;
    goto corral_source_split_5239;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$i664 := $eq.i32(out_$i663, 2);
    goto corral_source_split_5237;

  $bb626:
    assume {:verifier.code 0} true;
    out_$i663 := $M.81;
    goto corral_source_split_5236;

  $bb625:
    assume !(out_$i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb626;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb626;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1192} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5234;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} out_vslice_dummy_var_236 := tcm_qla2xxx_get_default_depth(out_$p661);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$p661 := $M.42;
    goto corral_source_split_5232;

  $bb624:
    assume out_$i660 == 1;
    goto corral_source_split_5231;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i660 := $eq.i32(out_$i659, 1);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$i659 := $M.81;
    goto corral_source_split_4952;

  $bb498:
    assume out_$i527 == 1;
    goto corral_source_split_4951;

  $bb497:
    assume !(out_$i526 == 1);
    assume {:verifier.code 0} true;
    out_$i527 := $slt.i32(out_$i502, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb634:
    assume !(out_$i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb635;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    goto $bb635;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1198} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} out_vslice_dummy_var_239 := tcm_qla2xxx_get_fabric_proto_ident(out_$p673);
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$p673 := $M.42;
    goto corral_source_split_5253;

  $bb633:
    assume out_$i672 == 1;
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i672 := $eq.i32(out_$i671, 2);
    goto corral_source_split_5250;

  $bb632:
    assume {:verifier.code 0} true;
    out_$i671 := $M.81;
    goto corral_source_split_5249;

  $bb631:
    assume !(out_$i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    goto $bb632;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1196} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} out_vslice_dummy_var_238 := tcm_qla2xxx_get_fabric_proto_ident(out_$p669);
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    out_$p669 := $M.42;
    goto corral_source_split_5245;

  $bb630:
    assume out_$i668 == 1;
    goto corral_source_split_5244;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb630, $bb631;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i668 := $eq.i32(out_$i667, 1);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i667 := $M.81;
    goto corral_source_split_4956;

  $bb500:
    assume out_$i528 == 1;
    goto corral_source_split_4955;

  $bb499:
    assume !(out_$i527 == 1);
    assume {:verifier.code 0} true;
    out_$i528 := $slt.i32(out_$i502, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb640:
    assume !(out_$i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb641;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5270;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} tcm_qla2xxx_release_fabric_acl(out_$p681, out_$p682);
    goto corral_source_split_5269;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    out_$p682 := $M.43;
    goto corral_source_split_5268;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$p681 := $M.42;
    goto corral_source_split_5267;

  $bb639:
    assume out_$i680 == 1;
    goto corral_source_split_5266;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb639, $bb640;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    out_$i680 := $eq.i32(out_$i679, 2);
    goto corral_source_split_5264;

  $bb638:
    assume {:verifier.code 0} true;
    out_$i679 := $M.81;
    goto corral_source_split_5263;

  $bb637:
    assume !(out_$i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb638;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1200} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5261;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} tcm_qla2xxx_release_fabric_acl(out_$p677, out_$p678);
    goto corral_source_split_5260;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$p678 := $M.43;
    goto corral_source_split_5259;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    out_$p677 := $M.42;
    goto corral_source_split_5258;

  $bb636:
    assume out_$i676 == 1;
    goto corral_source_split_5257;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i676 := $eq.i32(out_$i675, 1);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$i675 := $M.81;
    goto corral_source_split_4960;

  $bb501:
    assume !(out_$i528 == 1);
    goto corral_source_split_4959;

  $bb646:
    assume !(out_$i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb647;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    goto $bb647;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1206} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} out_vslice_dummy_var_241 := tcm_qla2xxx_get_pr_transport_id_len(out_$p691, out_$p692, out_$p693, in_$p51);
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$p693 := $M.39;
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$p692 := $M.43;
    goto corral_source_split_5284;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    out_$p691 := $M.42;
    goto corral_source_split_5283;

  $bb645:
    assume out_$i690 == 1;
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$i690 := $eq.i32(out_$i689, 2);
    goto corral_source_split_5280;

  $bb644:
    assume {:verifier.code 0} true;
    out_$i689 := $M.81;
    goto corral_source_split_5279;

  $bb643:
    assume !(out_$i684 == 1);
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1204} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} out_vslice_dummy_var_240 := tcm_qla2xxx_get_pr_transport_id_len(out_$p685, out_$p686, out_$p687, in_$p51);
    goto corral_source_split_5276;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    out_$p687 := $M.39;
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    out_$p686 := $M.43;
    goto corral_source_split_5274;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    out_$p685 := $M.42;
    goto corral_source_split_5273;

  $bb642:
    assume out_$i684 == 1;
    goto corral_source_split_5272;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    out_$i684 := $eq.i32(out_$i683, 1);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i683 := $M.81;
    goto corral_source_split_4944;

  $bb490:
    assume out_$i523 == 1;
    goto corral_source_split_4943;

  $bb484:
    assume out_$i520 == 1;
    assume {:verifier.code 0} true;
    out_$i523 := $slt.i32(out_$i502, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb490, $bb491;

  $bb474:
    assume out_$i515 == 1;
    assume {:verifier.code 0} true;
    out_$i520 := $slt.i32(out_$i502, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb484, $bb485;

  $bb451:
    assume out_$i504 == 1;
    assume {:verifier.code 0} true;
    out_$i515 := $slt.i32(out_$i502, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb450:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    out_$i504 := $slt.i32(out_$i502, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb652:
    assume !(out_$i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb653;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1210} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} out_vslice_dummy_var_243 := tcm_qla2xxx_write_pending_status(out_$p701);
    goto corral_source_split_5299;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    out_$p701 := $M.40;
    goto corral_source_split_5298;

  $bb651:
    assume out_$i700 == 1;
    goto corral_source_split_5297;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb651, $bb652;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i700 := $eq.i32(out_$i699, 2);
    goto corral_source_split_5295;

  $bb650:
    assume {:verifier.code 0} true;
    out_$i699 := $M.81;
    goto corral_source_split_5294;

  $bb649:
    assume !(out_$i696 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    goto $bb650;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} out_vslice_dummy_var_242 := tcm_qla2xxx_write_pending_status(out_$p697);
    goto corral_source_split_5291;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    out_$p697 := $M.40;
    goto corral_source_split_5290;

  $bb648:
    assume out_$i696 == 1;
    goto corral_source_split_5289;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb648, $bb649;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$i696 := $eq.i32(out_$i695, 1);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i695 := $M.81;
    goto corral_source_split_4948;

  $bb491:
    assume !(out_$i523 == 1);
    goto corral_source_split_4947;

  $bb658:
    assume !(out_$i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb659;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    goto $bb659;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1214} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} out_vslice_dummy_var_245 := tcm_qla2xxx_check_stop_free(out_$p709);
    goto corral_source_split_5312;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    out_$p709 := $M.40;
    goto corral_source_split_5311;

  $bb657:
    assume out_$i708 == 1;
    goto corral_source_split_5310;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb657, $bb658;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    out_$i708 := $eq.i32(out_$i707, 2);
    goto corral_source_split_5308;

  $bb656:
    assume {:verifier.code 0} true;
    out_$i707 := $M.81;
    goto corral_source_split_5307;

  $bb655:
    assume !(out_$i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb656;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb656;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1212} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} out_vslice_dummy_var_244 := tcm_qla2xxx_check_stop_free(out_$p705);
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$p705 := $M.40;
    goto corral_source_split_5303;

  $bb654:
    assume out_$i704 == 1;
    goto corral_source_split_5302;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb654, $bb655;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i704 := $eq.i32(out_$i703, 1);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$i703 := $M.81;
    goto corral_source_split_4932;

  $bb486:
    assume out_$i521 == 1;
    goto corral_source_split_4931;

  $bb485:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    out_$i521 := $slt.i32(out_$i502, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb664:
    assume !(out_$i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    goto $bb665;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1218} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} out_vslice_dummy_var_247 := tcm_qla2xxx_tpg_get_inst_index(out_$p717);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p717 := $M.42;
    goto corral_source_split_5324;

  $bb663:
    assume out_$i716 == 1;
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb663, $bb664;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i716 := $eq.i32(out_$i715, 2);
    goto corral_source_split_5321;

  $bb662:
    assume {:verifier.code 0} true;
    out_$i715 := $M.81;
    goto corral_source_split_5320;

  $bb661:
    assume !(out_$i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb662;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1216} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} out_vslice_dummy_var_246 := tcm_qla2xxx_tpg_get_inst_index(out_$p713);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$p713 := $M.42;
    goto corral_source_split_5316;

  $bb660:
    assume out_$i712 == 1;
    goto corral_source_split_5315;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb660, $bb661;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i712 := $eq.i32(out_$i711, 1);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i711 := $M.81;
    goto corral_source_split_4936;

  $bb488:
    assume out_$i522 == 1;
    goto corral_source_split_4935;

  $bb487:
    assume !(out_$i521 == 1);
    assume {:verifier.code 0} true;
    out_$i522 := $slt.i32(out_$i502, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb670:
    assume !(out_$i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb671;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    goto $bb671;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1222} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} out_vslice_dummy_var_249 := tcm_qla2xxx_get_tag(out_$p725);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$p725 := $M.42;
    goto corral_source_split_5337;

  $bb669:
    assume out_$i724 == 1;
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb669, $bb670;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$i724 := $eq.i32(out_$i723, 2);
    goto corral_source_split_5334;

  $bb668:
    assume {:verifier.code 0} true;
    out_$i723 := $M.81;
    goto corral_source_split_5333;

  $bb667:
    assume !(out_$i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb668;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    goto $bb668;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} out_vslice_dummy_var_248 := tcm_qla2xxx_get_tag(out_$p721);
    goto corral_source_split_5330;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$p721 := $M.42;
    goto corral_source_split_5329;

  $bb666:
    assume out_$i720 == 1;
    goto corral_source_split_5328;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb666, $bb667;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i720 := $eq.i32(out_$i719, 1);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i719 := $M.81;
    goto corral_source_split_4940;

  $bb489:
    assume !(out_$i522 == 1);
    goto corral_source_split_4939;

  $bb676:
    assume !(out_$i732 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb677;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1226} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} out_vslice_dummy_var_251 := tcm_qla2xxx_check_demo_mode_login_only(out_$p733);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$p733 := $M.42;
    goto corral_source_split_5350;

  $bb675:
    assume out_$i732 == 1;
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb675, $bb676;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i732 := $eq.i32(out_$i731, 2);
    goto corral_source_split_5347;

  $bb674:
    assume {:verifier.code 0} true;
    out_$i731 := $M.81;
    goto corral_source_split_5346;

  $bb673:
    assume !(out_$i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb674;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    goto $bb674;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1224} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} out_vslice_dummy_var_250 := tcm_qla2xxx_check_demo_mode_login_only(out_$p729);
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$p729 := $M.42;
    goto corral_source_split_5342;

  $bb672:
    assume out_$i728 == 1;
    goto corral_source_split_5341;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb672, $bb673;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i728 := $eq.i32(out_$i727, 1);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i727 := $M.81;
    goto corral_source_split_4924;

  $bb482:
    assume out_$i519 == 1;
    goto corral_source_split_4923;

  $bb476:
    assume out_$i516 == 1;
    assume {:verifier.code 0} true;
    out_$i519 := $slt.i32(out_$i502, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb475:
    assume !(out_$i515 == 1);
    assume {:verifier.code 0} true;
    out_$i516 := $slt.i32(out_$i502, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb682:
    assume !(out_$i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb683;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb683;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1230} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5363;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} out_vslice_dummy_var_253 := tcm_qla2xxx_npiv_get_fabric_name();
    goto corral_source_split_5362;

  $bb681:
    assume out_$i739 == 1;
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb681, $bb682;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i739 := $eq.i32(out_$i738, 2);
    goto corral_source_split_5359;

  $bb680:
    assume {:verifier.code 0} true;
    out_$i738 := $M.81;
    goto corral_source_split_5358;

  $bb679:
    assume !(out_$i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb680;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    goto $bb680;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1228} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} out_vslice_dummy_var_252 := tcm_qla2xxx_npiv_get_fabric_name();
    goto corral_source_split_5355;

  $bb678:
    assume out_$i736 == 1;
    goto corral_source_split_5354;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb678, $bb679;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i736 := $eq.i32(out_$i735, 1);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i735 := $M.81;
    goto corral_source_split_4928;

  $bb483:
    assume !(out_$i519 == 1);
    goto corral_source_split_4927;

  $bb688:
    assume !(out_$i745 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    goto $bb689;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1234} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} tcm_qla2xxx_aborted_task(out_$p746);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$p746 := $M.40;
    goto corral_source_split_5374;

  $bb687:
    assume out_$i745 == 1;
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb687, $bb688;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i745 := $eq.i32(out_$i744, 2);
    goto corral_source_split_5371;

  $bb686:
    assume {:verifier.code 0} true;
    out_$i744 := $M.81;
    goto corral_source_split_5370;

  $bb685:
    assume !(out_$i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb686;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1232} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} tcm_qla2xxx_aborted_task(out_$p743);
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$p743 := $M.40;
    goto corral_source_split_5366;

  $bb684:
    assume out_$i742 == 1;
    goto corral_source_split_5365;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb684, $bb685;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i742 := $eq.i32(out_$i741, 1);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$i741 := $M.81;
    goto corral_source_split_4912;

  $bb478:
    assume out_$i517 == 1;
    goto corral_source_split_4911;

  $bb477:
    assume !(out_$i516 == 1);
    assume {:verifier.code 0} true;
    out_$i517 := $slt.i32(out_$i502, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb694:
    assume !(out_$i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb695;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb695;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1238} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} out_vslice_dummy_var_255 := tcm_qla2xxx_get_fabric_wwn(out_$p753);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$p753 := $M.42;
    goto corral_source_split_5387;

  $bb693:
    assume out_$i752 == 1;
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i752 := $eq.i32(out_$i751, 2);
    goto corral_source_split_5384;

  $bb692:
    assume {:verifier.code 0} true;
    out_$i751 := $M.81;
    goto corral_source_split_5383;

  $bb691:
    assume !(out_$i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb692;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb692;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1236} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} out_vslice_dummy_var_254 := tcm_qla2xxx_get_fabric_wwn(out_$p749);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$p749 := $M.42;
    goto corral_source_split_5379;

  $bb690:
    assume out_$i748 == 1;
    goto corral_source_split_5378;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb690, $bb691;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$i748 := $eq.i32(out_$i747, 1);
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i747 := $M.81;
    goto corral_source_split_4916;

  $bb480:
    assume out_$i518 == 1;
    goto corral_source_split_4915;

  $bb479:
    assume !(out_$i517 == 1);
    assume {:verifier.code 0} true;
    out_$i518 := $slt.i32(out_$i502, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb700:
    assume !(out_$i760 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb701;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5402;

  SeqInstr_84:
    goto corral_source_split_5401;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} out_vslice_dummy_var_257 := tcm_qla2xxx_alloc_fabric_acl(out_$p761);
    goto SeqInstr_83;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$p761 := $M.42;
    goto corral_source_split_5400;

  $bb699:
    assume out_$i760 == 1;
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb699, $bb700;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$i760 := $eq.i32(out_$i759, 2);
    goto corral_source_split_5397;

  $bb698:
    assume {:verifier.code 0} true;
    out_$i759 := $M.81;
    goto corral_source_split_5396;

  $bb697:
    assume !(out_$i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb698;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb698;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1240} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5394;

  SeqInstr_81:
    goto corral_source_split_5393;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} out_vslice_dummy_var_256 := tcm_qla2xxx_alloc_fabric_acl(out_$p757);
    goto SeqInstr_80;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$p757 := $M.42;
    goto corral_source_split_5392;

  $bb696:
    assume out_$i756 == 1;
    goto corral_source_split_5391;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb696, $bb697;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i756 := $eq.i32(out_$i755, 1);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i755 := $M.81;
    goto corral_source_split_4920;

  $bb481:
    assume !(out_$i518 == 1);
    goto corral_source_split_4919;

  $bb706:
    assume !(out_$i768 == 1);
    assume {:verifier.code 0} true;
    goto $bb707;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    goto $bb707;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1246} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} out_vslice_dummy_var_259 := tcm_qla2xxx_get_task_tag(out_$p769);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$p769 := $M.40;
    goto corral_source_split_5413;

  $bb705:
    assume out_$i768 == 1;
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb705, $bb706;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$i768 := $eq.i32(out_$i767, 2);
    goto corral_source_split_5410;

  $bb704:
    assume {:verifier.code 0} true;
    out_$i767 := $M.81;
    goto corral_source_split_5409;

  $bb703:
    assume !(out_$i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb704;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    goto $bb704;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1244} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} out_vslice_dummy_var_258 := tcm_qla2xxx_get_task_tag(out_$p765);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$p765 := $M.40;
    goto corral_source_split_5405;

  $bb702:
    assume out_$i764 == 1;
    goto corral_source_split_5404;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb702, $bb703;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i764 := $eq.i32(out_$i763, 1);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i763 := $M.81;
    goto corral_source_split_4904;

  $bb472:
    assume out_$i514 == 1;
    goto corral_source_split_4903;

  $bb466:
    assume out_$i511 == 1;
    assume {:verifier.code 0} true;
    out_$i514 := $slt.i32(out_$i502, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472, $bb473;

  $bb453:
    assume out_$i505 == 1;
    assume {:verifier.code 0} true;
    out_$i511 := $slt.i32(out_$i502, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb452:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    out_$i505 := $slt.i32(out_$i502, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb712:
    assume !(out_$i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb713;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1250} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5430;

  SeqInstr_90:
    goto corral_source_split_5429;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} out_vslice_dummy_var_261 := tcm_qla2xxx_make_nodeacl(out_$p778, out_$p779, in_$p53);
    goto SeqInstr_89;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$p779 := $M.41;
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    out_$p778 := $M.42;
    goto corral_source_split_5427;

  $bb711:
    assume out_$i777 == 1;
    goto corral_source_split_5426;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb711, $bb712;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i777 := $eq.i32(out_$i776, 2);
    goto corral_source_split_5424;

  $bb710:
    assume {:verifier.code 0} true;
    out_$i776 := $M.81;
    goto corral_source_split_5423;

  $bb709:
    assume !(out_$i772 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb710;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1248} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5421;

  SeqInstr_87:
    goto corral_source_split_5420;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} out_vslice_dummy_var_260 := tcm_qla2xxx_make_nodeacl(out_$p773, out_$p774, in_$p53);
    goto SeqInstr_86;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$p774 := $M.41;
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$p773 := $M.42;
    goto corral_source_split_5418;

  $bb708:
    assume out_$i772 == 1;
    goto corral_source_split_5417;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i772 := $eq.i32(out_$i771, 1);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i771 := $M.81;
    goto corral_source_split_4908;

  $bb473:
    assume !(out_$i514 == 1);
    goto corral_source_split_4907;

  $bb718:
    assume !(out_$i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb719;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb719;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5443;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} tcm_qla2xxx_drop_tpg(out_$p786);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    out_$p786 := $M.42;
    goto corral_source_split_5441;

  $bb717:
    assume out_$i785 == 1;
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb717, $bb718;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$i785 := $eq.i32(out_$i784, 2);
    goto corral_source_split_5438;

  $bb716:
    assume {:verifier.code 0} true;
    out_$i784 := $M.81;
    goto corral_source_split_5437;

  $bb715:
    assume !(out_$i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb716;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb716;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1252} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} tcm_qla2xxx_drop_tpg(out_$p783);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$p783 := $M.42;
    goto corral_source_split_5433;

  $bb714:
    assume out_$i782 == 1;
    goto corral_source_split_5432;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb714, $bb715;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$i782 := $eq.i32(out_$i781, 1);
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$i781 := $M.81;
    goto corral_source_split_4892;

  $bb468:
    assume out_$i512 == 1;
    goto corral_source_split_4891;

  $bb467:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    out_$i512 := $slt.i32(out_$i502, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb724:
    assume !(out_$i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb725;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1258} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} tcm_qla2xxx_close_session(out_$p792);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p792 := $M.45;
    goto corral_source_split_5454;

  $bb723:
    assume out_$i791 == 1;
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb723, $bb724;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    out_$i791 := $eq.i32(out_$i790, 2);
    goto corral_source_split_5451;

  $bb722:
    assume {:verifier.code 0} true;
    out_$i790 := $M.81;
    goto corral_source_split_5450;

  $bb721:
    assume !(out_$i788 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    goto $bb722;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5448;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} tcm_qla2xxx_close_session(out_$p789);
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$p789 := $M.45;
    goto corral_source_split_5446;

  $bb720:
    assume out_$i788 == 1;
    goto corral_source_split_5445;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i788 := $eq.i32(out_$i787, 1);
    goto corral_source_split_4897;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i787 := $M.81;
    goto corral_source_split_4896;

  $bb470:
    assume out_$i513 == 1;
    goto corral_source_split_4895;

  $bb469:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    out_$i513 := $slt.i32(out_$i502, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb730:
    assume !(out_$i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb731;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto $bb731;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1262} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} out_vslice_dummy_var_263 := tcm_qla2xxx_get_cmd_state(out_$p799);
    goto corral_source_split_5468;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$p799 := $M.40;
    goto corral_source_split_5467;

  $bb729:
    assume out_$i798 == 1;
    goto corral_source_split_5466;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb729, $bb730;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$i798 := $eq.i32(out_$i797, 2);
    goto corral_source_split_5464;

  $bb728:
    assume {:verifier.code 0} true;
    out_$i797 := $M.81;
    goto corral_source_split_5463;

  $bb727:
    assume !(out_$i794 == 1);
    assume {:verifier.code 0} true;
    goto $bb728;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb728;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} out_vslice_dummy_var_262 := tcm_qla2xxx_get_cmd_state(out_$p795);
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$p795 := $M.40;
    goto corral_source_split_5459;

  $bb726:
    assume out_$i794 == 1;
    goto corral_source_split_5458;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb726, $bb727;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$i794 := $eq.i32(out_$i793, 1);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$i793 := $M.81;
    goto corral_source_split_4900;

  $bb471:
    assume !(out_$i513 == 1);
    goto corral_source_split_4899;

  $bb736:
    assume !(out_$i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb737;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5484;

  SeqInstr_96:
    goto corral_source_split_5483;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out_vslice_dummy_var_265 := tcm_qla2xxx_npiv_make_tpg(out_$p808, out_$p809, in_$p39);
    goto SeqInstr_95;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$p809 := $M.41;
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$p808 := $M.44;
    goto corral_source_split_5481;

  $bb735:
    assume out_$i807 == 1;
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb735, $bb736;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i807 := $eq.i32(out_$i806, 2);
    goto corral_source_split_5478;

  $bb734:
    assume {:verifier.code 0} true;
    out_$i806 := $M.81;
    goto corral_source_split_5477;

  $bb733:
    assume !(out_$i802 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto $bb734;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1264} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5475;

  SeqInstr_93:
    goto corral_source_split_5474;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} out_vslice_dummy_var_264 := tcm_qla2xxx_npiv_make_tpg(out_$p803, out_$p804, in_$p39);
    goto SeqInstr_92;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$p804 := $M.41;
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$p803 := $M.44;
    goto corral_source_split_5472;

  $bb732:
    assume out_$i802 == 1;
    goto corral_source_split_5471;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb732, $bb733;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$i802 := $eq.i32(out_$i801, 1);
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i801 := $M.81;
    goto corral_source_split_4884;

  $bb464:
    assume out_$i510 == 1;
    goto corral_source_split_4883;

  $bb455:
    assume out_$i506 == 1;
    assume {:verifier.code 0} true;
    out_$i510 := $slt.i32(out_$i502, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb454:
    assume !(out_$i505 == 1);
    assume {:verifier.code 0} true;
    out_$i506 := $slt.i32(out_$i502, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb742:
    assume !(out_$i816 == 1);
    assume {:verifier.code 0} true;
    goto $bb743;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    goto $bb743;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5497;

  SeqInstr_102:
    goto corral_source_split_5496;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_vslice_dummy_var_267 := tcm_qla2xxx_npiv_make_lport(in_$p49, out_$p817, in_$p40);
    goto SeqInstr_101;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$p817 := $M.41;
    goto corral_source_split_5495;

  $bb741:
    assume out_$i816 == 1;
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb741, $bb742;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i816 := $eq.i32(out_$i815, 2);
    goto corral_source_split_5492;

  $bb740:
    assume {:verifier.code 0} true;
    out_$i815 := $M.81;
    goto corral_source_split_5491;

  $bb739:
    assume !(out_$i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb740;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    goto $bb740;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1268} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5489;

  SeqInstr_99:
    goto corral_source_split_5488;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} out_vslice_dummy_var_266 := tcm_qla2xxx_npiv_make_lport(in_$p49, out_$p813, in_$p40);
    goto SeqInstr_98;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$p813 := $M.41;
    goto corral_source_split_5487;

  $bb738:
    assume out_$i812 == 1;
    goto corral_source_split_5486;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb738, $bb739;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$i812 := $eq.i32(out_$i811, 1);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i811 := $M.81;
    goto corral_source_split_4888;

  $bb465:
    assume !(out_$i510 == 1);
    goto corral_source_split_4887;

  $bb748:
    assume !(out_$i824 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb749;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} out_vslice_dummy_var_269 := tcm_qla2xxx_shutdown_session(out_$p825);
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$p825 := $M.45;
    goto corral_source_split_5508;

  $bb747:
    assume out_$i824 == 1;
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb747, $bb748;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$i824 := $eq.i32(out_$i823, 2);
    goto corral_source_split_5505;

  $bb746:
    assume {:verifier.code 0} true;
    out_$i823 := $M.81;
    goto corral_source_split_5504;

  $bb745:
    assume !(out_$i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb746;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb746;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} out_vslice_dummy_var_268 := tcm_qla2xxx_shutdown_session(out_$p821);
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$p821 := $M.45;
    goto corral_source_split_5500;

  $bb744:
    assume out_$i820 == 1;
    goto corral_source_split_5499;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb744, $bb745;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i820 := $eq.i32(out_$i819, 1);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i819 := $M.81;
    goto corral_source_split_4872;

  $bb457:
    assume out_$i507 == 1;
    goto corral_source_split_4871;

  $bb456:
    assume !(out_$i506 == 1);
    assume {:verifier.code 0} true;
    out_$i507 := $slt.i32(out_$i502, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb751:
    assume !(out_$i828 == 1);
    assume {:verifier.code 0} true;
    goto $bb752;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto $bb752;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $M.85 := out_$i831;
    call {:si_unique_call 1277} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i831);
    goto corral_source_split_5517;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    out_$i831 := $sub.i32(out_$i830, 1);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i830 := $M.85;
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} out_vslice_dummy_var_270 := ldv_release_2();
    goto corral_source_split_5513;

  $bb750:
    assume out_$i828 == 1;
    goto corral_source_split_5512;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb750, $bb751;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i828 := $eq.i32(out_$i827, 2);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$i827 := $M.81;
    goto corral_source_split_4876;

  $bb459:
    assume out_$i508 == 1;
    goto corral_source_split_4875;

  $bb458:
    assume !(out_$i507 == 1);
    assume {:verifier.code 0} true;
    out_$i508 := $slt.i32(out_$i502, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb754:
    assume !(out_$i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb755;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb755;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.85 := out_$i836;
    call {:si_unique_call 1280} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i836);
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$i836 := $add.i32(out_$i835, 1);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$i835 := $M.85;
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} out_vslice_dummy_var_271 := ldv_probe_2();
    goto corral_source_split_5520;

  $bb753:
    assume out_$i833 == 1;
    goto corral_source_split_5519;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb753, $bb754;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i833 := $eq.i32(out_$i832, 1);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$i832 := $M.81;
    goto corral_source_split_4880;

  $bb461:
    assume out_$i509 == 1;
    goto corral_source_split_4879;

  $bb460:
    assume !(out_$i508 == 1);
    assume {:verifier.code 0} true;
    out_$i509 := $eq.i32(out_$i502, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} ldv_stop();
    goto corral_source_split_5526;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb462:
    assume {:verifier.code 0} true;
    assume !(out_$i509 == 1);
    goto $bb463;

  $bb529:
    assume {:verifier.code 0} true;
    assume !(out_$i542 == 1);
    goto $bb463;

  $bb760:
    assume !(out_$i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb772:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb775:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb771:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb770:
    assume !(out_$i844 == 1);
    assume {:verifier.code 0} true;
    goto $bb771;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    goto $bb771;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1286} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5541;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} out_vslice_dummy_var_272 := tcm_qla2xxx_tpg_attrib_store_demo_mode_login_only(out_$p845, in_$p54, in_$i56);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$p845 := $M.46;
    goto corral_source_split_5539;

  $bb769:
    assume out_$i844 == 1;
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb769, $bb770;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    out_$i844 := $eq.i32(out_$i843, 1);
    goto corral_source_split_5536;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    out_$i843 := $M.82;
    goto corral_source_split_5535;

  $bb767:
    assume out_$i842 == 1;
    goto corral_source_split_5534;

  $bb762:
    assume out_$i840 == 1;
    assume {:verifier.code 0} true;
    out_$i842 := $eq.i32(out_$i839, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb767, $bb768;

  $bb761:
    assume {:verifier.code 0} true;
    out_$i840 := $slt.i32(out_$i839, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb762, $bb763;

  corral_source_split_5528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1282} out_$i839 := __VERIFIER_nondet_int();
    call {:si_unique_call 1283} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i839);
    call {:si_unique_call 1284} {:cexpr "tmp___58"} boogie_si_record_i32(out_$i839);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb759:
    assume out_$i838 == 1;
    goto corral_source_split_5528;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb759, $bb760;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i838 := $ne.i32(out_$i837, 0);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i837 := $M.82;
    goto corral_source_split_4069;

  $bb18:
    assume out_$i86 == 1;
    goto corral_source_split_4068;

  $bb17:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i78, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb774:
    assume !(out_$i848 == 1);
    assume {:verifier.code 0} true;
    goto $bb775;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto $bb775;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} out_vslice_dummy_var_273 := tcm_qla2xxx_tpg_attrib_show_demo_mode_login_only(out_$p849, in_$p55);
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$p849 := $M.46;
    goto corral_source_split_5544;

  $bb773:
    assume out_$i848 == 1;
    goto corral_source_split_5543;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb773, $bb774;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i848 := $eq.i32(out_$i847, 1);
    goto corral_source_split_5532;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i847 := $M.82;
    goto corral_source_split_5531;

  $bb764:
    assume out_$i841 == 1;
    goto corral_source_split_5530;

  $bb763:
    assume !(out_$i840 == 1);
    assume {:verifier.code 0} true;
    out_$i841 := $eq.i32(out_$i839, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb764, $bb765;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} ldv_stop();
    goto corral_source_split_5548;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb765:
    assume {:verifier.code 0} true;
    assume !(out_$i841 == 1);
    goto $bb766;

  $bb768:
    assume {:verifier.code 0} true;
    assume !(out_$i842 == 1);
    goto $bb766;

  $bb780:
    assume !(out_$i852 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto $bb781;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} choose_timer_1(out_$p853);
    goto corral_source_split_5552;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    out_$p853 := $M.93;
    goto corral_source_split_5551;

  $bb779:
    assume out_$i852 == 1;
    goto corral_source_split_5550;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb779, $bb780;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i852 := $ne.i32(out_$i851, 0);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i851 := $M.83;
    goto corral_source_split_4073;

  $bb19:
    assume !(out_$i86 == 1);
    goto corral_source_split_4072;

  $bb783:
    assume !(out_$i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb790:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb792:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb789:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb788:
    assume !(out_$i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb789;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1295} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5562;

  SeqInstr_105:
    goto corral_source_split_5561;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} out_vslice_dummy_var_274 := tcm_qla2xxx_wwn_show_attr_version(in_$p59, in_$p57);
    goto SeqInstr_104;

  $bb787:
    assume out_$i859 == 1;
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb787, $bb788;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$i859 := $eq.i32(out_$i858, 1);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$i858 := $M.84;
    goto corral_source_split_5557;

  $bb785:
    assume out_$i857 == 1;
    goto corral_source_split_5556;

  $bb784:
    assume {:verifier.code 0} true;
    out_$i857 := $eq.i32(out_$i856, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb785, $bb786;

  corral_source_split_5554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} out_$i856 := __VERIFIER_nondet_int();
    call {:si_unique_call 1292} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i856);
    call {:si_unique_call 1293} {:cexpr "tmp___59"} boogie_si_record_i32(out_$i856);
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb782:
    assume out_$i855 == 1;
    goto corral_source_split_5554;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb782, $bb783;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i855 := $ne.i32(out_$i854, 0);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$i854 := $M.84;
    goto corral_source_split_4057;

  $bb14:
    assume out_$i84 == 1;
    goto corral_source_split_4056;

  $bb7:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i78, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb6:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i78, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} ldv_stop();
    goto corral_source_split_5564;

  $bb786:
    assume !(out_$i857 == 1);
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb795:
    assume !(out_$i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb811:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb822:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb820:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb810:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb805:
    assume {:verifier.code 0} true;
    assume !(out_$i868 == 1);
    goto $bb806;

  $bb808:
    assume {:verifier.code 0} true;
    assume !(out_$i870 == 1);
    goto $bb806;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb808;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i870 := $eq.i32(out_$i869, 0);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i869 := $M.85;
    goto corral_source_split_5577;

  $bb804:
    assume out_$i868 == 1;
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb804, $bb805;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i868 := $eq.i32(out_$i867, 3);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i867 := $M.86;
    goto corral_source_split_5573;

  $bb802:
    assume out_$i866 == 1;
    goto corral_source_split_5572;

  $bb797:
    assume out_$i864 == 1;
    assume {:verifier.code 0} true;
    out_$i866 := $eq.i32(out_$i863, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb802, $bb803;

  $bb796:
    assume {:verifier.code 0} true;
    out_$i864 := $slt.i32(out_$i863, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb797, $bb798;

  corral_source_split_5566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1297} out_$i863 := __VERIFIER_nondet_int();
    call {:si_unique_call 1298} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i863);
    call {:si_unique_call 1299} {:cexpr "tmp___60"} boogie_si_record_i32(out_$i863);
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb794:
    assume out_$i862 == 1;
    goto corral_source_split_5566;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb794, $bb795;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i862 := $ne.i32(out_$i861, 0);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i861 := $M.86;
    goto corral_source_split_4061;

  $bb15:
    assume !(out_$i84 == 1);
    goto corral_source_split_4060;

  $bb813:
    assume !(out_$i872 == 1);
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb819:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb818:
    assume !(out_$i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb819;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb818;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$i877 := $ne.i32(out_$i876, 0);
    goto corral_source_split_5617;

  $bb816:
    assume {:verifier.code 0} true;
    out_$i876 := $M.94;
    goto corral_source_split_5616;

  $bb815:
    assume !(out_$i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb816;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto $bb816;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_initialize_target_fabric_tpg_attribute_6();
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_initialize_target_fabric_tpg_attrib_attribute_11();
    goto corral_source_split_5612;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1323} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} ldv_initialize_target_core_fabric_ops_3();
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ldv_initialize_target_fabric_tpg_attribute_7();
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 1319} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ldv_initialize_target_fabric_tpg_attrib_attribute_9();
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 1317} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} ldv_initialize_target_fabric_tpg_attrib_attribute_12();
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 1315} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ldv_initialize_target_core_fabric_ops_2();
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} ldv_initialize_target_fabric_tpg_attrib_attribute_8();
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1311} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_initialize_target_fabric_tpg_attrib_attribute_10();
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} ldv_initialize_qla_tgt_func_tmpl_5();
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1306} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.86 := 3;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5593;

  $bb814:
    assume out_$i875 == 1;
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb814, $bb815;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$i875 := $eq.i32(out_$i874, 0);
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$i874 := $M.94;
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.94 := out_$i873;
    call {:si_unique_call 1304} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i873);
    goto corral_source_split_5588;

  SeqInstr_108:
    goto corral_source_split_5587;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} out_$i873 := tcm_qla2xxx_init();
    goto SeqInstr_107;

  $bb812:
    assume out_$i872 == 1;
    goto corral_source_split_5586;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb812, $bb813;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i872 := $eq.i32(out_$i871, 1);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i871 := $M.86;
    goto corral_source_split_5569;

  $bb799:
    assume out_$i865 == 1;
    goto corral_source_split_5568;

  $bb798:
    assume !(out_$i864 == 1);
    assume {:verifier.code 0} true;
    out_$i865 := $eq.i32(out_$i863, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb799, $bb800;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_stop();
    goto corral_source_split_5622;

  $bb801:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb800:
    assume {:verifier.code 0} true;
    assume !(out_$i865 == 1);
    goto $bb801;

  $bb803:
    assume {:verifier.code 0} true;
    assume !(out_$i866 == 1);
    goto $bb801;

  $bb825:
    assume !(out_$i879 == 1);
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb840:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb835:
    assume !(out_$i885 == 1);
    assume {:verifier.code 0} true;
    goto $bb836;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto $bb836;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} out_vslice_dummy_var_275 := tcm_qla2xxx_tpg_attrib_store_demo_mode_write_protect(out_$p886, in_$p61, in_$i60);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$p886 := $M.38;
    goto corral_source_split_5635;

  $bb834:
    assume out_$i885 == 1;
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb834, $bb835;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i885 := $eq.i32(out_$i884, 1);
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$i884 := $M.87;
    goto corral_source_split_5631;

  $bb832:
    assume out_$i883 == 1;
    goto corral_source_split_5630;

  $bb827:
    assume out_$i881 == 1;
    assume {:verifier.code 0} true;
    out_$i883 := $eq.i32(out_$i880, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb832, $bb833;

  $bb826:
    assume {:verifier.code 0} true;
    out_$i881 := $slt.i32(out_$i880, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb827, $bb828;

  corral_source_split_5624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1329} out_$i880 := __VERIFIER_nondet_int();
    call {:si_unique_call 1330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i880);
    call {:si_unique_call 1331} {:cexpr "tmp___61"} boogie_si_record_i32(out_$i880);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb824:
    assume out_$i879 == 1;
    goto corral_source_split_5624;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb824, $bb825;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i879 := $ne.i32(out_$i878, 0);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i878 := $M.87;
    goto corral_source_split_4049;

  $bb9:
    assume out_$i82 == 1;
    goto corral_source_split_4048;

  $bb8:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i78, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb839:
    assume !(out_$i889 == 1);
    assume {:verifier.code 0} true;
    goto $bb840;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    goto $bb840;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} out_vslice_dummy_var_276 := tcm_qla2xxx_tpg_attrib_show_demo_mode_write_protect(out_$p890, in_$p62);
    goto corral_source_split_5641;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    out_$p890 := $M.38;
    goto corral_source_split_5640;

  $bb838:
    assume out_$i889 == 1;
    goto corral_source_split_5639;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb838, $bb839;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i889 := $eq.i32(out_$i888, 1);
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i888 := $M.87;
    goto corral_source_split_5627;

  $bb829:
    assume out_$i882 == 1;
    goto corral_source_split_5626;

  $bb828:
    assume !(out_$i881 == 1);
    assume {:verifier.code 0} true;
    out_$i882 := $eq.i32(out_$i880, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb829, $bb830;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} ldv_stop();
    goto corral_source_split_5644;

  $bb831:
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb830:
    assume {:verifier.code 0} true;
    assume !(out_$i882 == 1);
    goto $bb831;

  $bb833:
    assume {:verifier.code 0} true;
    assume !(out_$i883 == 1);
    goto $bb831;

  $bb845:
    assume !(out_$i893 == 1);
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb881:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb922:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb917:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb914:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb911:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb905:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb902:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb899:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb896:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb890:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb887:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb884:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb880:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb879:
    assume !(out_$i911 == 1);
    assume {:verifier.code 0} true;
    goto $bb880;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb880;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} tcm_qla2xxx_free_session(out_$p912);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$p912 := $M.57;
    goto corral_source_split_5705;

  $bb878:
    assume out_$i911 == 1;
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb878, $bb879;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i911 := $eq.i32(out_$i910, 1);
    goto corral_source_split_5702;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i910 := $M.88;
    goto corral_source_split_5701;

  $bb876:
    assume out_$i909 == 1;
    goto corral_source_split_5700;

  $bb872:
    assume out_$i907 == 1;
    assume {:verifier.code 0} true;
    out_$i909 := $eq.i32(out_$i894, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb876, $bb877;

  $bb864:
    assume out_$i903 == 1;
    assume {:verifier.code 0} true;
    out_$i907 := $slt.i32(out_$i894, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb872, $bb873;

  $bb847:
    assume out_$i895 == 1;
    assume {:verifier.code 0} true;
    out_$i903 := $slt.i32(out_$i894, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb864, $bb865;

  $bb846:
    assume {:verifier.code 0} true;
    out_$i895 := $slt.i32(out_$i894, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb847, $bb848;

  corral_source_split_5646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1337} out_$i894 := __VERIFIER_nondet_int();
    call {:si_unique_call 1338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i894);
    call {:si_unique_call 1339} {:cexpr "tmp___62"} boogie_si_record_i32(out_$i894);
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb844:
    assume out_$i893 == 1;
    goto corral_source_split_5646;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb844, $bb845;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i893 := $ne.i32(out_$i892, 0);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i892 := $M.88;
    goto corral_source_split_4053;

  $bb11:
    assume out_$i83 == 1;
    goto corral_source_split_4052;

  $bb10:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i78, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb883:
    assume !(out_$i914 == 1);
    assume {:verifier.code 0} true;
    goto $bb884;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb884;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} out_vslice_dummy_var_277 := tcm_qla2xxx_find_sess_by_s_id(out_$p915, in_$p64);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$p915 := $M.55;
    goto corral_source_split_5710;

  $bb882:
    assume out_$i914 == 1;
    goto corral_source_split_5709;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb882, $bb883;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$i914 := $eq.i32(out_$i913, 1);
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$i913 := $M.88;
    goto corral_source_split_5693;

  $bb874:
    assume out_$i908 == 1;
    goto corral_source_split_5692;

  $bb873:
    assume !(out_$i907 == 1);
    assume {:verifier.code 0} true;
    out_$i908 := $slt.i32(out_$i894, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb874, $bb875;

  $bb886:
    assume !(out_$i918 == 1);
    assume {:verifier.code 0} true;
    goto $bb887;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb887;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} out_vslice_dummy_var_278 := tcm_qla2xxx_handle_cmd(out_$p919, out_$p920, in_$p65, out_$i921, in_$i67, in_$i70, in_$i66);
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i921 := $load.i32($M.71, in_$p5);
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    out_$p920 := $M.56;
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$p919 := $M.55;
    goto corral_source_split_5715;

  $bb885:
    assume out_$i918 == 1;
    goto corral_source_split_5714;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb885, $bb886;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i918 := $eq.i32(out_$i917, 1);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$i917 := $M.88;
    goto corral_source_split_5697;

  $bb875:
    assume !(out_$i908 == 1);
    goto corral_source_split_5696;

  $bb889:
    assume !(out_$i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb890;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb890;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} out_vslice_dummy_var_279 := tcm_qla2xxx_handle_tmr(out_$p925, out_$i926, out_$i929, out_$i930);
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$i930 := $load.i32($M.66, in_$p0);
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i929 := $trunc.i32.i8(out_$i928);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$i928 := $zext.i8.i32(out_$i927);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$i927 := $load.i8($M.73, in_$p7);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$i926 := $load.i32($M.70, in_$p4);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$p925 := $M.54;
    goto corral_source_split_5722;

  $bb888:
    assume out_$i924 == 1;
    goto corral_source_split_5721;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb888, $bb889;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    out_$i924 := $eq.i32(out_$i923, 1);
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    out_$i923 := $M.88;
    goto corral_source_split_5685;

  $bb870:
    assume out_$i906 == 1;
    goto corral_source_split_5684;

  $bb866:
    assume out_$i904 == 1;
    assume {:verifier.code 0} true;
    out_$i906 := $slt.i32(out_$i894, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb870, $bb871;

  $bb865:
    assume !(out_$i903 == 1);
    assume {:verifier.code 0} true;
    out_$i904 := $slt.i32(out_$i894, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb866, $bb867;

  $bb892:
    assume !(out_$i933 == 1);
    assume {:verifier.code 0} true;
    goto $bb893;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb893;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} tcm_qla2xxx_handle_dif_err(out_$p934);
    goto corral_source_split_5733;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    out_$p934 := $M.56;
    goto corral_source_split_5732;

  $bb891:
    assume out_$i933 == 1;
    goto corral_source_split_5731;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb891, $bb892;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    out_$i933 := $eq.i32(out_$i932, 1);
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i932 := $M.88;
    goto corral_source_split_5689;

  $bb871:
    assume !(out_$i906 == 1);
    goto corral_source_split_5688;

  $bb895:
    assume !(out_$i936 == 1);
    assume {:verifier.code 0} true;
    goto $bb896;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb896;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} out_vslice_dummy_var_280 := tcm_qla2xxx_find_sess_by_loop_id(out_$p937, out_$i940);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    out_$i940 := $trunc.i32.i16(out_$i939);
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$i939 := $zext.i16.i32(out_$i938);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i938 := $load.i16($M.68, in_$p2);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$p937 := $M.55;
    goto corral_source_split_5737;

  $bb894:
    assume out_$i936 == 1;
    goto corral_source_split_5736;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb894, $bb895;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$i936 := $eq.i32(out_$i935, 1);
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i935 := $M.88;
    goto corral_source_split_5677;

  $bb868:
    assume out_$i905 == 1;
    goto corral_source_split_5676;

  $bb867:
    assume !(out_$i904 == 1);
    assume {:verifier.code 0} true;
    out_$i905 := $slt.i32(out_$i894, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb868, $bb869;

  $bb898:
    assume !(out_$i943 == 1);
    assume {:verifier.code 0} true;
    goto $bb899;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb899;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5747;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} tcm_qla2xxx_put_sess(out_$p944);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$p944 := $M.57;
    goto corral_source_split_5745;

  $bb897:
    assume out_$i943 == 1;
    goto corral_source_split_5744;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb897, $bb898;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    out_$i943 := $eq.i32(out_$i942, 1);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i942 := $M.88;
    goto corral_source_split_5681;

  $bb869:
    assume !(out_$i905 == 1);
    goto corral_source_split_5680;

  $bb901:
    assume !(out_$i946 == 1);
    assume {:verifier.code 0} true;
    goto $bb902;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb902;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} tcm_qla2xxx_update_sess(out_$p947, out_$i954, out_$i950, out_$i952);
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$i954 := $load.i32($M.67, out_$p953);
    goto corral_source_split_5757;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    out_$p953 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    out_$i952 := $trunc.i8.i1(out_$i951);
    goto corral_source_split_5755;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$i951 := $load.i8($M.74, in_$p8);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i950 := $trunc.i32.i16(out_$i949);
    goto corral_source_split_5753;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i949 := $zext.i16.i32(out_$i948);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$i948 := $load.i16($M.72, in_$p6);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$p947 := $M.57;
    goto corral_source_split_5750;

  $bb900:
    assume out_$i946 == 1;
    goto corral_source_split_5749;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb900, $bb901;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i946 := $eq.i32(out_$i945, 1);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$i945 := $M.88;
    goto corral_source_split_5665;

  $bb860:
    assume out_$i901 == 1;
    goto corral_source_split_5664;

  $bb849:
    assume out_$i896 == 1;
    assume {:verifier.code 0} true;
    out_$i901 := $slt.i32(out_$i894, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb860, $bb861;

  $bb848:
    assume !(out_$i895 == 1);
    assume {:verifier.code 0} true;
    out_$i896 := $slt.i32(out_$i894, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb849, $bb850;

  $bb904:
    assume !(out_$i956 == 1);
    assume {:verifier.code 0} true;
    goto $bb905;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    goto $bb905;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} tcm_qla2xxx_shutdown_sess(out_$p957);
    goto corral_source_split_5763;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$p957 := $M.57;
    goto corral_source_split_5762;

  $bb903:
    assume out_$i956 == 1;
    goto corral_source_split_5761;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb903, $bb904;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i956 := $eq.i32(out_$i955, 1);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i955 := $M.88;
    goto corral_source_split_5669;

  $bb862:
    assume out_$i902 == 1;
    goto corral_source_split_5668;

  $bb861:
    assume !(out_$i901 == 1);
    assume {:verifier.code 0} true;
    out_$i902 := $slt.i32(out_$i894, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb862, $bb863;

  $bb907:
    assume !(out_$i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb908;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5769;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} tcm_qla2xxx_free_mcmd(out_$p960);
    goto corral_source_split_5768;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    out_$p960 := $M.54;
    goto corral_source_split_5767;

  $bb906:
    assume out_$i959 == 1;
    goto corral_source_split_5766;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb906, $bb907;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$i959 := $eq.i32(out_$i958, 1);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i958 := $M.88;
    goto corral_source_split_5673;

  $bb863:
    assume !(out_$i902 == 1);
    goto corral_source_split_5672;

  $bb910:
    assume !(out_$i962 == 1);
    assume {:verifier.code 0} true;
    goto $bb911;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb911;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5774;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} tcm_qla2xxx_handle_data(out_$p963);
    goto corral_source_split_5773;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    out_$p963 := $M.56;
    goto corral_source_split_5772;

  $bb909:
    assume out_$i962 == 1;
    goto corral_source_split_5771;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb909, $bb910;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$i962 := $eq.i32(out_$i961, 1);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i961 := $M.88;
    goto corral_source_split_5657;

  $bb858:
    assume out_$i900 == 1;
    goto corral_source_split_5656;

  $bb851:
    assume out_$i897 == 1;
    assume {:verifier.code 0} true;
    out_$i900 := $slt.i32(out_$i894, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb858, $bb859;

  $bb850:
    assume !(out_$i896 == 1);
    assume {:verifier.code 0} true;
    out_$i897 := $slt.i32(out_$i894, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb851, $bb852;

  $bb913:
    assume !(out_$i965 == 1);
    assume {:verifier.code 0} true;
    goto $bb914;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb914;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5779;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} tcm_qla2xxx_clear_nacl_from_fcport_map(out_$p966);
    goto corral_source_split_5778;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    out_$p966 := $M.57;
    goto corral_source_split_5777;

  $bb912:
    assume out_$i965 == 1;
    goto corral_source_split_5776;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb912, $bb913;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i965 := $eq.i32(out_$i964, 1);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i964 := $M.88;
    goto corral_source_split_5661;

  $bb859:
    assume !(out_$i900 == 1);
    goto corral_source_split_5660;

  $bb916:
    assume !(out_$i968 == 1);
    assume {:verifier.code 0} true;
    goto $bb917;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb917;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} tcm_qla2xxx_free_cmd(out_$p969);
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$p969 := $M.56;
    goto corral_source_split_5782;

  $bb915:
    assume out_$i968 == 1;
    goto corral_source_split_5781;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb915, $bb916;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$i968 := $eq.i32(out_$i967, 1);
    goto corral_source_split_5650;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    out_$i967 := $M.88;
    goto corral_source_split_5649;

  $bb853:
    assume out_$i898 == 1;
    goto corral_source_split_5648;

  $bb852:
    assume !(out_$i897 == 1);
    assume {:verifier.code 0} true;
    out_$i898 := $slt.i32(out_$i894, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb853, $bb854;

  $bb919:
    assume !(out_$i971 == 1);
    assume {:verifier.code 0} true;
    goto $bb920;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb920;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} out_vslice_dummy_var_281 := tcm_qla2xxx_check_initiator_node_acl(out_$p972, in_$p69, in_$p68, in_$p63, out_$i975);
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i975 := $trunc.i32.i16(out_$i974);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$i974 := $zext.i16.i32(out_$i973);
    goto corral_source_split_5789;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    out_$i973 := $load.i16($M.69, in_$p3);
    goto corral_source_split_5788;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    out_$p972 := $M.55;
    goto corral_source_split_5787;

  $bb918:
    assume out_$i971 == 1;
    goto corral_source_split_5786;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb918, $bb919;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$i971 := $eq.i32(out_$i970, 1);
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$i970 := $M.88;
    goto corral_source_split_5653;

  $bb855:
    assume out_$i899 == 1;
    goto corral_source_split_5652;

  $bb854:
    assume !(out_$i898 == 1);
    assume {:verifier.code 0} true;
    out_$i899 := $eq.i32(out_$i894, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb855, $bb856;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ldv_stop();
    goto corral_source_split_5794;

  $bb857:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb856:
    assume {:verifier.code 0} true;
    assume !(out_$i899 == 1);
    goto $bb857;

  $bb877:
    assume {:verifier.code 0} true;
    assume !(out_$i909 == 1);
    goto $bb857;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_stop();
    goto corral_source_split_5796;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb13;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$p271, out_$p272, out_$i274, out_$i275, out_$p276, out_$p277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$p299, out_$i300, out_$i301, out_$p302, out_$p303, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$p321, out_$p322, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i332, out_$i333, out_$p334, out_$i336, out_$i337, out_$p338, out_$i340, out_$i341, out_$p342, out_$i344, out_$i345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$i359, out_$i360, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i380, out_$i381, out_$p382, out_$i384, out_$i385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i392, out_$i393, out_$p394, out_$p395, out_$i397, out_$i398, out_$p399, out_$p400, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$p410, out_$i411, out_$i412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i418, out_$i419, out_$p420, out_$i422, out_$i423, out_$p424, out_$p425, out_$i427, out_$i428, out_$p429, out_$p430, out_$i432, out_$i433, out_$p434, out_$i436, out_$i437, out_$p438, out_$i440, out_$i441, out_$p442, out_$i444, out_$i445, out_$p446, out_$i448, out_$i449, out_$i451, out_$i452, out_$i453, out_$i454, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$i474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$i482, out_$i483, out_$p484, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$p494, out_$i496, out_$i497, out_$p498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$i535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i547, out_$i548, out_$p549, out_$i551, out_$i552, out_$p553, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$p560, out_$i561, out_$i562, out_$p563, out_$i565, out_$i566, out_$p567, out_$i569, out_$i570, out_$p571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$p579, out_$i581, out_$i582, out_$p583, out_$i585, out_$i586, out_$p587, out_$i588, out_$i589, out_$p590, out_$i591, out_$i592, out_$p593, out_$i595, out_$i596, out_$p597, out_$i599, out_$i600, out_$p601, out_$i603, out_$i604, out_$p605, out_$i607, out_$i608, out_$p609, out_$i610, out_$i611, out_$p612, out_$i613, out_$i614, out_$p615, out_$i616, out_$i617, out_$p618, out_$i619, out_$i620, out_$p621, out_$i623, out_$i624, out_$p625, out_$i627, out_$i628, out_$p629, out_$i630, out_$i631, out_$p632, out_$i633, out_$i634, out_$p635, out_$i637, out_$i638, out_$p639, out_$i641, out_$i642, out_$p643, out_$p644, out_$p645, out_$i647, out_$i648, out_$p649, out_$p650, out_$p651, out_$i653, out_$i654, out_$p655, out_$i656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p661, out_$i663, out_$i664, out_$p665, out_$i667, out_$i668, out_$p669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$p678, out_$i679, out_$i680, out_$p681, out_$p682, out_$i683, out_$i684, out_$p685, out_$p686, out_$p687, out_$i689, out_$i690, out_$p691, out_$p692, out_$p693, out_$i695, out_$i696, out_$p697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$i715, out_$i716, out_$p717, out_$i719, out_$i720, out_$p721, out_$i723, out_$i724, out_$p725, out_$i727, out_$i728, out_$p729, out_$i731, out_$i732, out_$p733, out_$i735, out_$i736, out_$i738, out_$i739, out_$i741, out_$i742, out_$p743, out_$i744, out_$i745, out_$p746, out_$i747, out_$i748, out_$p749, out_$i751, out_$i752, out_$p753, out_$i755, out_$i756, out_$p757, out_$i759, out_$i760, out_$p761, out_$i763, out_$i764, out_$p765, out_$i767, out_$i768, out_$p769, out_$i771, out_$i772, out_$p773, out_$p774, out_$i776, out_$i777, out_$p778, out_$p779, out_$i781, out_$i782, out_$p783, out_$i784, out_$i785, out_$p786, out_$i787, out_$i788, out_$p789, out_$i790, out_$i791, out_$p792, out_$i793, out_$i794, out_$p795, out_$i797, out_$i798, out_$p799, out_$i801, out_$i802, out_$p803, out_$p804, out_$i806, out_$i807, out_$p808, out_$p809, out_$i811, out_$i812, out_$p813, out_$i815, out_$i816, out_$p817, out_$i819, out_$i820, out_$p821, out_$i823, out_$i824, out_$p825, out_$i827, out_$i828, out_$i830, out_$i831, out_$i832, out_$i833, out_$i835, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$i843, out_$i844, out_$p845, out_$i847, out_$i848, out_$p849, out_$i851, out_$i852, out_$p853, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$i859, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$p886, out_$i888, out_$i889, out_$p890, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$i904, out_$i905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$i911, out_$p912, out_$i913, out_$i914, out_$p915, out_$i917, out_$i918, out_$p919, out_$p920, out_$i921, out_$i923, out_$i924, out_$p925, out_$i926, out_$i927, out_$i928, out_$i929, out_$i930, out_$i932, out_$i933, out_$p934, out_$i935, out_$i936, out_$p937, out_$i938, out_$i939, out_$i940, out_$i942, out_$i943, out_$p944, out_$i945, out_$i946, out_$p947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$i954, out_$i955, out_$i956, out_$p957, out_$i958, out_$i959, out_$p960, out_$i961, out_$i962, out_$p963, out_$i964, out_$i965, out_$p966, out_$i967, out_$i968, out_$p969, out_$i970, out_$i971, out_$p972, out_$i973, out_$i974, out_$i975, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$i12, in_$p13, in_$p14, in_$p16, in_$p17, in_$p18, in_$p19, in_$p21, in_$p22, in_$p24, in_$p26, in_$p28, in_$p29, in_$p30, in_$i31, in_$p32, in_$p33, in_$i34, in_$p35, in_$p36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p42, in_$p43, in_$p45, in_$p47, in_$p49, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$p57, in_$p59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$p271, out_$p272, out_$i274, out_$i275, out_$p276, out_$p277, out_$p278, out_$i280, out_$i281, out_$p282, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$p299, out_$i300, out_$i301, out_$p302, out_$p303, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$p321, out_$p322, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i332, out_$i333, out_$p334, out_$i336, out_$i337, out_$p338, out_$i340, out_$i341, out_$p342, out_$i344, out_$i345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$i359, out_$i360, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i380, out_$i381, out_$p382, out_$i384, out_$i385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i392, out_$i393, out_$p394, out_$p395, out_$i397, out_$i398, out_$p399, out_$p400, out_$i402, out_$i403, out_$p404, out_$i405, out_$i406, out_$p407, out_$i408, out_$i409, out_$p410, out_$i411, out_$i412, out_$p413, out_$i414, out_$i415, out_$p416, out_$i418, out_$i419, out_$p420, out_$i422, out_$i423, out_$p424, out_$p425, out_$i427, out_$i428, out_$p429, out_$p430, out_$i432, out_$i433, out_$p434, out_$i436, out_$i437, out_$p438, out_$i440, out_$i441, out_$p442, out_$i444, out_$i445, out_$p446, out_$i448, out_$i449, out_$i451, out_$i452, out_$i453, out_$i454, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$i474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$i482, out_$i483, out_$p484, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$p494, out_$i496, out_$i497, out_$p498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$i535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i547, out_$i548, out_$p549, out_$i551, out_$i552, out_$p553, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$p560, out_$i561, out_$i562, out_$p563, out_$i565, out_$i566, out_$p567, out_$i569, out_$i570, out_$p571, out_$i573, out_$i574, out_$p575, out_$i577, out_$i578, out_$p579, out_$i581, out_$i582, out_$p583, out_$i585, out_$i586, out_$p587, out_$i588, out_$i589, out_$p590, out_$i591, out_$i592, out_$p593, out_$i595, out_$i596, out_$p597, out_$i599, out_$i600, out_$p601, out_$i603, out_$i604, out_$p605, out_$i607, out_$i608, out_$p609, out_$i610, out_$i611, out_$p612, out_$i613, out_$i614, out_$p615, out_$i616, out_$i617, out_$p618, out_$i619, out_$i620, out_$p621, out_$i623, out_$i624, out_$p625, out_$i627, out_$i628, out_$p629, out_$i630, out_$i631, out_$p632, out_$i633, out_$i634, out_$p635, out_$i637, out_$i638, out_$p639, out_$i641, out_$i642, out_$p643, out_$p644, out_$p645, out_$i647, out_$i648, out_$p649, out_$p650, out_$p651, out_$i653, out_$i654, out_$p655, out_$i656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p661, out_$i663, out_$i664, out_$p665, out_$i667, out_$i668, out_$p669, out_$i671, out_$i672, out_$p673, out_$i675, out_$i676, out_$p677, out_$p678, out_$i679, out_$i680, out_$p681, out_$p682, out_$i683, out_$i684, out_$p685, out_$p686, out_$p687, out_$i689, out_$i690, out_$p691, out_$p692, out_$p693, out_$i695, out_$i696, out_$p697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$i715, out_$i716, out_$p717, out_$i719, out_$i720, out_$p721, out_$i723, out_$i724, out_$p725, out_$i727, out_$i728, out_$p729, out_$i731, out_$i732, out_$p733, out_$i735, out_$i736, out_$i738, out_$i739, out_$i741, out_$i742, out_$p743, out_$i744, out_$i745, out_$p746, out_$i747, out_$i748, out_$p749, out_$i751, out_$i752, out_$p753, out_$i755, out_$i756, out_$p757, out_$i759, out_$i760, out_$p761, out_$i763, out_$i764, out_$p765, out_$i767, out_$i768, out_$p769, out_$i771, out_$i772, out_$p773, out_$p774, out_$i776, out_$i777, out_$p778, out_$p779, out_$i781, out_$i782, out_$p783, out_$i784, out_$i785, out_$p786, out_$i787, out_$i788, out_$p789, out_$i790, out_$i791, out_$p792, out_$i793, out_$i794, out_$p795, out_$i797, out_$i798, out_$p799, out_$i801, out_$i802, out_$p803, out_$p804, out_$i806, out_$i807, out_$p808, out_$p809, out_$i811, out_$i812, out_$p813, out_$i815, out_$i816, out_$p817, out_$i819, out_$i820, out_$p821, out_$i823, out_$i824, out_$p825, out_$i827, out_$i828, out_$i830, out_$i831, out_$i832, out_$i833, out_$i835, out_$i836, out_$i837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$i843, out_$i844, out_$p845, out_$i847, out_$i848, out_$p849, out_$i851, out_$i852, out_$p853, out_$i854, out_$i855, out_$i856, out_$i857, out_$i858, out_$i859, out_$i861, out_$i862, out_$i863, out_$i864, out_$i865, out_$i866, out_$i867, out_$i868, out_$i869, out_$i870, out_$i871, out_$i872, out_$i873, out_$i874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$p886, out_$i888, out_$i889, out_$p890, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$i904, out_$i905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$i911, out_$p912, out_$i913, out_$i914, out_$p915, out_$i917, out_$i918, out_$p919, out_$p920, out_$i921, out_$i923, out_$i924, out_$p925, out_$i926, out_$i927, out_$i928, out_$i929, out_$i930, out_$i932, out_$i933, out_$p934, out_$i935, out_$i936, out_$p937, out_$i938, out_$i939, out_$i940, out_$i942, out_$i943, out_$p944, out_$i945, out_$i946, out_$p947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$p953, out_$i954, out_$i955, out_$i956, out_$p957, out_$i958, out_$i959, out_$p960, out_$i961, out_$i962, out_$p963, out_$i964, out_$i965, out_$p966, out_$i967, out_$i968, out_$p969, out_$i970, out_$i971, out_$p972, out_$i973, out_$i974, out_$i975, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$p303: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$p315: ref, in_$p316: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$p321: ref, in_$p322: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$i344: i32, in_$i345: i1, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$i359: i32, in_$i360: i1, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i384: i32, in_$i385: i1, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$p395: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$p400: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$i405: i32, in_$i406: i1, in_$p407: ref, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i414: i32, in_$i415: i1, in_$p416: ref, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$i422: i32, in_$i423: i1, in_$p424: ref, in_$p425: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$p430: ref, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i440: i32, in_$i441: i1, in_$p442: ref, in_$i444: i32, in_$i445: i1, in_$p446: ref, in_$i448: i32, in_$i449: i1, in_$i451: i32, in_$i452: i32, in_$i453: i32, in_$i454: i1, in_$i456: i32, in_$i457: i32, in_$i458: i32, in_$i459: i1, in_$i460: i32, in_$i461: i1, in_$i462: i1, in_$i463: i1, in_$i464: i32, in_$i465: i1, in_$p466: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i472: i32, in_$i473: i1, in_$i474: i32, in_$i475: i1, in_$i476: i1, in_$i477: i1, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i1, in_$i490: i1, in_$i491: i1, in_$i492: i32, in_$i493: i1, in_$p494: ref, in_$i496: i32, in_$i497: i1, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i1, in_$i505: i1, in_$i506: i1, in_$i507: i1, in_$i508: i1, in_$i509: i1, in_$i510: i1, in_$i511: i1, in_$i512: i1, in_$i513: i1, in_$i514: i1, in_$i515: i1, in_$i516: i1, in_$i517: i1, in_$i518: i1, in_$i519: i1, in_$i520: i1, in_$i521: i1, in_$i522: i1, in_$i523: i1, in_$i524: i1, in_$i525: i1, in_$i526: i1, in_$i527: i1, in_$i528: i1, in_$i529: i1, in_$i530: i1, in_$i531: i1, in_$i532: i1, in_$i533: i1, in_$i534: i1, in_$i535: i1, in_$i536: i1, in_$i537: i1, in_$i538: i1, in_$i539: i1, in_$i540: i1, in_$i541: i1, in_$i542: i1, in_$i543: i32, in_$i544: i1, in_$p545: ref, in_$i547: i32, in_$i548: i1, in_$p549: ref, in_$i551: i32, in_$i552: i1, in_$p553: ref, in_$i555: i32, in_$i556: i1, in_$p557: ref, in_$i558: i32, in_$i559: i1, in_$p560: ref, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i565: i32, in_$i566: i1, in_$p567: ref, in_$i569: i32, in_$i570: i1, in_$p571: ref, in_$i573: i32, in_$i574: i1, in_$p575: ref, in_$i577: i32, in_$i578: i1, in_$p579: ref, in_$i581: i32, in_$i582: i1, in_$p583: ref, in_$i585: i32, in_$i586: i1, in_$p587: ref, in_$i588: i32, in_$i589: i1, in_$p590: ref, in_$i591: i32, in_$i592: i1, in_$p593: ref, in_$i595: i32, in_$i596: i1, in_$p597: ref, in_$i599: i32, in_$i600: i1, in_$p601: ref, in_$i603: i32, in_$i604: i1, in_$p605: ref, in_$i607: i32, in_$i608: i1, in_$p609: ref, in_$i610: i32, in_$i611: i1, in_$p612: ref, in_$i613: i32, in_$i614: i1, in_$p615: ref, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$i619: i32, in_$i620: i1, in_$p621: ref, in_$i623: i32, in_$i624: i1, in_$p625: ref, in_$i627: i32, in_$i628: i1, in_$p629: ref, in_$i630: i32, in_$i631: i1, in_$p632: ref, in_$i633: i32, in_$i634: i1, in_$p635: ref, in_$i637: i32, in_$i638: i1, in_$p639: ref, in_$i641: i32, in_$i642: i1, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$p650: ref, in_$p651: ref, in_$i653: i32, in_$i654: i1, in_$p655: ref, in_$i656: i32, in_$i657: i1, in_$p658: ref, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_$i663: i32, in_$i664: i1, in_$p665: ref, in_$i667: i32, in_$i668: i1, in_$p669: ref, in_$i671: i32, in_$i672: i1, in_$p673: ref, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$p678: ref, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$p682: ref, in_$i683: i32, in_$i684: i1, in_$p685: ref, in_$p686: ref, in_$p687: ref, in_$i689: i32, in_$i690: i1, in_$p691: ref, in_$p692: ref, in_$p693: ref, in_$i695: i32, in_$i696: i1, in_$p697: ref, in_$i699: i32, in_$i700: i1, in_$p701: ref, in_$i703: i32, in_$i704: i1, in_$p705: ref, in_$i707: i32, in_$i708: i1, in_$p709: ref, in_$i711: i32, in_$i712: i1, in_$p713: ref, in_$i715: i32, in_$i716: i1, in_$p717: ref, in_$i719: i32, in_$i720: i1, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$i727: i32, in_$i728: i1, in_$p729: ref, in_$i731: i32, in_$i732: i1, in_$p733: ref, in_$i735: i32, in_$i736: i1, in_$i738: i32, in_$i739: i1, in_$i741: i32, in_$i742: i1, in_$p743: ref, in_$i744: i32, in_$i745: i1, in_$p746: ref, in_$i747: i32, in_$i748: i1, in_$p749: ref, in_$i751: i32, in_$i752: i1, in_$p753: ref, in_$i755: i32, in_$i756: i1, in_$p757: ref, in_$i759: i32, in_$i760: i1, in_$p761: ref, in_$i763: i32, in_$i764: i1, in_$p765: ref, in_$i767: i32, in_$i768: i1, in_$p769: ref, in_$i771: i32, in_$i772: i1, in_$p773: ref, in_$p774: ref, in_$i776: i32, in_$i777: i1, in_$p778: ref, in_$p779: ref, in_$i781: i32, in_$i782: i1, in_$p783: ref, in_$i784: i32, in_$i785: i1, in_$p786: ref, in_$i787: i32, in_$i788: i1, in_$p789: ref, in_$i790: i32, in_$i791: i1, in_$p792: ref, in_$i793: i32, in_$i794: i1, in_$p795: ref, in_$i797: i32, in_$i798: i1, in_$p799: ref, in_$i801: i32, in_$i802: i1, in_$p803: ref, in_$p804: ref, in_$i806: i32, in_$i807: i1, in_$p808: ref, in_$p809: ref, in_$i811: i32, in_$i812: i1, in_$p813: ref, in_$i815: i32, in_$i816: i1, in_$p817: ref, in_$i819: i32, in_$i820: i1, in_$p821: ref, in_$i823: i32, in_$i824: i1, in_$p825: ref, in_$i827: i32, in_$i828: i1, in_$i830: i32, in_$i831: i32, in_$i832: i32, in_$i833: i1, in_$i835: i32, in_$i836: i32, in_$i837: i32, in_$i838: i1, in_$i839: i32, in_$i840: i1, in_$i841: i1, in_$i842: i1, in_$i843: i32, in_$i844: i1, in_$p845: ref, in_$i847: i32, in_$i848: i1, in_$p849: ref, in_$i851: i32, in_$i852: i1, in_$p853: ref, in_$i854: i32, in_$i855: i1, in_$i856: i32, in_$i857: i1, in_$i858: i32, in_$i859: i1, in_$i861: i32, in_$i862: i1, in_$i863: i32, in_$i864: i1, in_$i865: i1, in_$i866: i1, in_$i867: i32, in_$i868: i1, in_$i869: i32, in_$i870: i1, in_$i871: i32, in_$i872: i1, in_$i873: i32, in_$i874: i32, in_$i875: i1, in_$i876: i32, in_$i877: i1, in_$i878: i32, in_$i879: i1, in_$i880: i32, in_$i881: i1, in_$i882: i1, in_$i883: i1, in_$i884: i32, in_$i885: i1, in_$p886: ref, in_$i888: i32, in_$i889: i1, in_$p890: ref, in_$i892: i32, in_$i893: i1, in_$i894: i32, in_$i895: i1, in_$i896: i1, in_$i897: i1, in_$i898: i1, in_$i899: i1, in_$i900: i1, in_$i901: i1, in_$i902: i1, in_$i903: i1, in_$i904: i1, in_$i905: i1, in_$i906: i1, in_$i907: i1, in_$i908: i1, in_$i909: i1, in_$i910: i32, in_$i911: i1, in_$p912: ref, in_$i913: i32, in_$i914: i1, in_$p915: ref, in_$i917: i32, in_$i918: i1, in_$p919: ref, in_$p920: ref, in_$i921: i32, in_$i923: i32, in_$i924: i1, in_$p925: ref, in_$i926: i32, in_$i927: i8, in_$i928: i32, in_$i929: i8, in_$i930: i32, in_$i932: i32, in_$i933: i1, in_$p934: ref, in_$i935: i32, in_$i936: i1, in_$p937: ref, in_$i938: i16, in_$i939: i32, in_$i940: i16, in_$i942: i32, in_$i943: i1, in_$p944: ref, in_$i945: i32, in_$i946: i1, in_$p947: ref, in_$i948: i16, in_$i949: i32, in_$i950: i16, in_$i951: i8, in_$i952: i1, in_$p953: ref, in_$i954: i32, in_$i955: i32, in_$i956: i1, in_$p957: ref, in_$i958: i32, in_$i959: i1, in_$p960: ref, in_$i961: i32, in_$i962: i1, in_$p963: ref, in_$i964: i32, in_$i965: i1, in_$p966: ref, in_$i967: i32, in_$i968: i1, in_$p969: ref, in_$i970: i32, in_$i971: i1, in_$p972: ref, in_$i973: i16, in_$i974: i32, in_$i975: i16, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i64, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: ref, in_vslice_dummy_var_166: ref, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i8, in_vslice_dummy_var_178: i8, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: i16, in_vslice_dummy_var_188: i16, in_vslice_dummy_var_189: i32, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: ref, in_vslice_dummy_var_192: ref, in_vslice_dummy_var_193: ref, in_vslice_dummy_var_194: ref, in_vslice_dummy_var_195: ref, in_vslice_dummy_var_196: ref, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: ref, in_vslice_dummy_var_200: ref, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: ref, in_vslice_dummy_var_204: ref, in_vslice_dummy_var_205: ref, in_vslice_dummy_var_206: ref, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i64, in_vslice_dummy_var_212: i64, in_vslice_dummy_var_213: i64, in_vslice_dummy_var_214: i64, in_vslice_dummy_var_215: i64, in_vslice_dummy_var_216: i64, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: ref, in_vslice_dummy_var_227: ref, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: i8, in_vslice_dummy_var_239: i8, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32, in_vslice_dummy_var_247: i32, in_vslice_dummy_var_248: i16, in_vslice_dummy_var_249: i16, in_vslice_dummy_var_250: i32, in_vslice_dummy_var_251: i32, in_vslice_dummy_var_252: ref, in_vslice_dummy_var_253: ref, in_vslice_dummy_var_254: ref, in_vslice_dummy_var_255: ref, in_vslice_dummy_var_256: ref, in_vslice_dummy_var_257: ref, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: ref, in_vslice_dummy_var_261: ref, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: ref, in_vslice_dummy_var_265: ref, in_vslice_dummy_var_266: ref, in_vslice_dummy_var_267: ref, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i64, in_vslice_dummy_var_273: i64, in_vslice_dummy_var_274: i64, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i64, in_vslice_dummy_var_277: ref, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: ref, in_vslice_dummy_var_281: i32) returns (out_$i78: i32, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$p303: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$p315: ref, out_$p316: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$p321: ref, out_$p322: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$i344: i32, out_$i345: i1, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$i359: i32, out_$i360: i1, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i384: i32, out_$i385: i1, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$p395: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$p400: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$i405: i32, out_$i406: i1, out_$p407: ref, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i414: i32, out_$i415: i1, out_$p416: ref, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$i422: i32, out_$i423: i1, out_$p424: ref, out_$p425: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$p430: ref, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i440: i32, out_$i441: i1, out_$p442: ref, out_$i444: i32, out_$i445: i1, out_$p446: ref, out_$i448: i32, out_$i449: i1, out_$i451: i32, out_$i452: i32, out_$i453: i32, out_$i454: i1, out_$i456: i32, out_$i457: i32, out_$i458: i32, out_$i459: i1, out_$i460: i32, out_$i461: i1, out_$i462: i1, out_$i463: i1, out_$i464: i32, out_$i465: i1, out_$p466: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i472: i32, out_$i473: i1, out_$i474: i32, out_$i475: i1, out_$i476: i1, out_$i477: i1, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i1, out_$i490: i1, out_$i491: i1, out_$i492: i32, out_$i493: i1, out_$p494: ref, out_$i496: i32, out_$i497: i1, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i1, out_$i505: i1, out_$i506: i1, out_$i507: i1, out_$i508: i1, out_$i509: i1, out_$i510: i1, out_$i511: i1, out_$i512: i1, out_$i513: i1, out_$i514: i1, out_$i515: i1, out_$i516: i1, out_$i517: i1, out_$i518: i1, out_$i519: i1, out_$i520: i1, out_$i521: i1, out_$i522: i1, out_$i523: i1, out_$i524: i1, out_$i525: i1, out_$i526: i1, out_$i527: i1, out_$i528: i1, out_$i529: i1, out_$i530: i1, out_$i531: i1, out_$i532: i1, out_$i533: i1, out_$i534: i1, out_$i535: i1, out_$i536: i1, out_$i537: i1, out_$i538: i1, out_$i539: i1, out_$i540: i1, out_$i541: i1, out_$i542: i1, out_$i543: i32, out_$i544: i1, out_$p545: ref, out_$i547: i32, out_$i548: i1, out_$p549: ref, out_$i551: i32, out_$i552: i1, out_$p553: ref, out_$i555: i32, out_$i556: i1, out_$p557: ref, out_$i558: i32, out_$i559: i1, out_$p560: ref, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i565: i32, out_$i566: i1, out_$p567: ref, out_$i569: i32, out_$i570: i1, out_$p571: ref, out_$i573: i32, out_$i574: i1, out_$p575: ref, out_$i577: i32, out_$i578: i1, out_$p579: ref, out_$i581: i32, out_$i582: i1, out_$p583: ref, out_$i585: i32, out_$i586: i1, out_$p587: ref, out_$i588: i32, out_$i589: i1, out_$p590: ref, out_$i591: i32, out_$i592: i1, out_$p593: ref, out_$i595: i32, out_$i596: i1, out_$p597: ref, out_$i599: i32, out_$i600: i1, out_$p601: ref, out_$i603: i32, out_$i604: i1, out_$p605: ref, out_$i607: i32, out_$i608: i1, out_$p609: ref, out_$i610: i32, out_$i611: i1, out_$p612: ref, out_$i613: i32, out_$i614: i1, out_$p615: ref, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$i619: i32, out_$i620: i1, out_$p621: ref, out_$i623: i32, out_$i624: i1, out_$p625: ref, out_$i627: i32, out_$i628: i1, out_$p629: ref, out_$i630: i32, out_$i631: i1, out_$p632: ref, out_$i633: i32, out_$i634: i1, out_$p635: ref, out_$i637: i32, out_$i638: i1, out_$p639: ref, out_$i641: i32, out_$i642: i1, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$p650: ref, out_$p651: ref, out_$i653: i32, out_$i654: i1, out_$p655: ref, out_$i656: i32, out_$i657: i1, out_$p658: ref, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_$i663: i32, out_$i664: i1, out_$p665: ref, out_$i667: i32, out_$i668: i1, out_$p669: ref, out_$i671: i32, out_$i672: i1, out_$p673: ref, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$p678: ref, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$p682: ref, out_$i683: i32, out_$i684: i1, out_$p685: ref, out_$p686: ref, out_$p687: ref, out_$i689: i32, out_$i690: i1, out_$p691: ref, out_$p692: ref, out_$p693: ref, out_$i695: i32, out_$i696: i1, out_$p697: ref, out_$i699: i32, out_$i700: i1, out_$p701: ref, out_$i703: i32, out_$i704: i1, out_$p705: ref, out_$i707: i32, out_$i708: i1, out_$p709: ref, out_$i711: i32, out_$i712: i1, out_$p713: ref, out_$i715: i32, out_$i716: i1, out_$p717: ref, out_$i719: i32, out_$i720: i1, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$i727: i32, out_$i728: i1, out_$p729: ref, out_$i731: i32, out_$i732: i1, out_$p733: ref, out_$i735: i32, out_$i736: i1, out_$i738: i32, out_$i739: i1, out_$i741: i32, out_$i742: i1, out_$p743: ref, out_$i744: i32, out_$i745: i1, out_$p746: ref, out_$i747: i32, out_$i748: i1, out_$p749: ref, out_$i751: i32, out_$i752: i1, out_$p753: ref, out_$i755: i32, out_$i756: i1, out_$p757: ref, out_$i759: i32, out_$i760: i1, out_$p761: ref, out_$i763: i32, out_$i764: i1, out_$p765: ref, out_$i767: i32, out_$i768: i1, out_$p769: ref, out_$i771: i32, out_$i772: i1, out_$p773: ref, out_$p774: ref, out_$i776: i32, out_$i777: i1, out_$p778: ref, out_$p779: ref, out_$i781: i32, out_$i782: i1, out_$p783: ref, out_$i784: i32, out_$i785: i1, out_$p786: ref, out_$i787: i32, out_$i788: i1, out_$p789: ref, out_$i790: i32, out_$i791: i1, out_$p792: ref, out_$i793: i32, out_$i794: i1, out_$p795: ref, out_$i797: i32, out_$i798: i1, out_$p799: ref, out_$i801: i32, out_$i802: i1, out_$p803: ref, out_$p804: ref, out_$i806: i32, out_$i807: i1, out_$p808: ref, out_$p809: ref, out_$i811: i32, out_$i812: i1, out_$p813: ref, out_$i815: i32, out_$i816: i1, out_$p817: ref, out_$i819: i32, out_$i820: i1, out_$p821: ref, out_$i823: i32, out_$i824: i1, out_$p825: ref, out_$i827: i32, out_$i828: i1, out_$i830: i32, out_$i831: i32, out_$i832: i32, out_$i833: i1, out_$i835: i32, out_$i836: i32, out_$i837: i32, out_$i838: i1, out_$i839: i32, out_$i840: i1, out_$i841: i1, out_$i842: i1, out_$i843: i32, out_$i844: i1, out_$p845: ref, out_$i847: i32, out_$i848: i1, out_$p849: ref, out_$i851: i32, out_$i852: i1, out_$p853: ref, out_$i854: i32, out_$i855: i1, out_$i856: i32, out_$i857: i1, out_$i858: i32, out_$i859: i1, out_$i861: i32, out_$i862: i1, out_$i863: i32, out_$i864: i1, out_$i865: i1, out_$i866: i1, out_$i867: i32, out_$i868: i1, out_$i869: i32, out_$i870: i1, out_$i871: i32, out_$i872: i1, out_$i873: i32, out_$i874: i32, out_$i875: i1, out_$i876: i32, out_$i877: i1, out_$i878: i32, out_$i879: i1, out_$i880: i32, out_$i881: i1, out_$i882: i1, out_$i883: i1, out_$i884: i32, out_$i885: i1, out_$p886: ref, out_$i888: i32, out_$i889: i1, out_$p890: ref, out_$i892: i32, out_$i893: i1, out_$i894: i32, out_$i895: i1, out_$i896: i1, out_$i897: i1, out_$i898: i1, out_$i899: i1, out_$i900: i1, out_$i901: i1, out_$i902: i1, out_$i903: i1, out_$i904: i1, out_$i905: i1, out_$i906: i1, out_$i907: i1, out_$i908: i1, out_$i909: i1, out_$i910: i32, out_$i911: i1, out_$p912: ref, out_$i913: i32, out_$i914: i1, out_$p915: ref, out_$i917: i32, out_$i918: i1, out_$p919: ref, out_$p920: ref, out_$i921: i32, out_$i923: i32, out_$i924: i1, out_$p925: ref, out_$i926: i32, out_$i927: i8, out_$i928: i32, out_$i929: i8, out_$i930: i32, out_$i932: i32, out_$i933: i1, out_$p934: ref, out_$i935: i32, out_$i936: i1, out_$p937: ref, out_$i938: i16, out_$i939: i32, out_$i940: i16, out_$i942: i32, out_$i943: i1, out_$p944: ref, out_$i945: i32, out_$i946: i1, out_$p947: ref, out_$i948: i16, out_$i949: i32, out_$i950: i16, out_$i951: i8, out_$i952: i1, out_$p953: ref, out_$i954: i32, out_$i955: i32, out_$i956: i1, out_$p957: ref, out_$i958: i32, out_$i959: i1, out_$p960: ref, out_$i961: i32, out_$i962: i1, out_$p963: ref, out_$i964: i32, out_$i965: i1, out_$p966: ref, out_$i967: i32, out_$i968: i1, out_$p969: ref, out_$i970: i32, out_$i971: i1, out_$p972: ref, out_$i973: i16, out_$i974: i32, out_$i975: i16, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i64, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: ref, out_vslice_dummy_var_166: ref, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i8, out_vslice_dummy_var_178: i8, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: i16, out_vslice_dummy_var_188: i16, out_vslice_dummy_var_189: i32, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: ref, out_vslice_dummy_var_192: ref, out_vslice_dummy_var_193: ref, out_vslice_dummy_var_194: ref, out_vslice_dummy_var_195: ref, out_vslice_dummy_var_196: ref, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: ref, out_vslice_dummy_var_200: ref, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: ref, out_vslice_dummy_var_204: ref, out_vslice_dummy_var_205: ref, out_vslice_dummy_var_206: ref, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i64, out_vslice_dummy_var_212: i64, out_vslice_dummy_var_213: i64, out_vslice_dummy_var_214: i64, out_vslice_dummy_var_215: i64, out_vslice_dummy_var_216: i64, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: ref, out_vslice_dummy_var_227: ref, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: i8, out_vslice_dummy_var_239: i8, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32, out_vslice_dummy_var_247: i32, out_vslice_dummy_var_248: i16, out_vslice_dummy_var_249: i16, out_vslice_dummy_var_250: i32, out_vslice_dummy_var_251: i32, out_vslice_dummy_var_252: ref, out_vslice_dummy_var_253: ref, out_vslice_dummy_var_254: ref, out_vslice_dummy_var_255: ref, out_vslice_dummy_var_256: ref, out_vslice_dummy_var_257: ref, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: ref, out_vslice_dummy_var_261: ref, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: ref, out_vslice_dummy_var_265: ref, out_vslice_dummy_var_266: ref, out_vslice_dummy_var_267: ref, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i64, out_vslice_dummy_var_273: i64, out_vslice_dummy_var_274: i64, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i64, out_vslice_dummy_var_277: ref, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: ref, out_vslice_dummy_var_281: i32);
  modifies $M.75, $M.0, $CurrAddr, $M.76, $M.77, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.17, $M.19, $M.13, $M.24, $M.14, $M.15, $M.16, assertsPassed, $M.18, $M.22, $M.85, $M.78, $M.79, $M.80, $M.81, $M.29, $M.36, $M.82, $M.84, $M.48, $M.49, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.47, $M.37, $M.58, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.38, $M.87, $M.54, $M.55, $M.56, $M.57, $M.88, $M.86, $M.94, $M.21, $M.30, $M.2, $M.95, $M.4;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


