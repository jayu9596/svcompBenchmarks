var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i16;

var $M.3: [ref]i64;

var $M.4: ref;

var $M.5: i32;

var $M.6: [ref]ref;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.16: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]i16;

var $M.24: [ref]ref;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: [ref]i8;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: i32;

var $M.42: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: ref;

var $M.55: ref;

var $M.56: i32;

var $M.57: ref;

var $M.58: ref;

var $M.59: i32;

var $M.73: [ref]i8;

var $M.74: [ref]ref;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.182: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 743763);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 3084);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 4112);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 5140);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 6168);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 7196);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 8224);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 9252);

const wcn36xx_driver_group0: ref;

axiom wcn36xx_driver_group0 == $sub.ref(0, 10284);

const wcn36xx_ops_group0: ref;

axiom wcn36xx_ops_group0 == $sub.ref(0, 11316);

const wcn36xx_ops_group1: ref;

axiom wcn36xx_ops_group1 == $sub.ref(0, 12348);

const wcn36xx_ops_group2: ref;

axiom wcn36xx_ops_group2 == $sub.ref(0, 13380);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 14408);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 15436);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 16464);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 17492);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 18520);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 19548);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 20576);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 21604);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 22632);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 23660);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 24688);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 25716);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 26744);

const wcn36xx_dbg_mask: ref;

axiom wcn36xx_dbg_mask == $sub.ref(0, 27772);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 28800);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 29832);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 30860);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 31892);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 32920);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 33952);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 34980);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 36012);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 37040);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 38068);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 39096);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 40124);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 41156);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 42188);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 43220);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 44252);

const fops_wcn36xx_dump_group1: ref;

axiom fops_wcn36xx_dump_group1 == $sub.ref(0, 45284);

const fops_wcn36xx_dump_group2: ref;

axiom fops_wcn36xx_dump_group2 == $sub.ref(0, 46316);

const fops_wcn36xx_bmps_group1: ref;

axiom fops_wcn36xx_bmps_group1 == $sub.ref(0, 47348);

const fops_wcn36xx_bmps_group2: ref;

axiom fops_wcn36xx_bmps_group2 == $sub.ref(0, 48380);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 49408);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 50436);

const last_index: ref;

axiom last_index == $sub.ref(0, 51464);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 52496);

const __mod_platform__wcn36xx_platform_id_table_device_table: ref;

axiom __mod_platform__wcn36xx_platform_id_table_device_table == $sub.ref(0, 53552);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 54696);

const fops_wcn36xx_dump: ref;

axiom fops_wcn36xx_dump == $sub.ref(0, 55952);

const fops_wcn36xx_bmps: ref;

axiom fops_wcn36xx_bmps == $sub.ref(0, 57208);

const wowlan_support: ref;

axiom wowlan_support == $sub.ref(0, 58264);

const {:count 23} wcn_5ghz_channels: ref;

axiom wcn_5ghz_channels == $sub.ref(0, 60760);

const wcn_band_5ghz: ref;

axiom wcn_band_5ghz == $sub.ref(0, 61856);

const {:count 14} wcn_2ghz_channels: ref;

axiom wcn_2ghz_channels == $sub.ref(0, 63776);

const wcn_band_2ghz: ref;

axiom wcn_band_2ghz == $sub.ref(0, 64872);

const wcn36xx_ops: ref;

axiom wcn36xx_ops == $sub.ref(0, 66528);

const {:count 2} wcn36xx_platform_id_table: ref;

axiom wcn36xx_platform_id_table == $sub.ref(0, 67616);

const wcn36xx_driver: ref;

axiom wcn36xx_driver == $sub.ref(0, 68816);

const {:count 8} wcn_5ghz_rates: ref;

axiom wcn_5ghz_rates == $sub.ref(0, 69936);

const {:count 12} wcn_2ghz_rates: ref;

axiom wcn_2ghz_rates == $sub.ref(0, 71104);

const {:count 23} wcn36xx_caps_names: ref;

axiom wcn36xx_caps_names == $sub.ref(0, 72312);

const {:count 4} .str.144: ref;

axiom .str.144 == $sub.ref(0, 73340);

const {:count 4} .str.145: ref;

axiom .str.145 == $sub.ref(0, 74368);

const {:count 8} .str.146: ref;

axiom .str.146 == $sub.ref(0, 75400);

const {:count 19} .str.147: ref;

axiom .str.147 == $sub.ref(0, 76443);

const {:count 15} .str.148: ref;

axiom .str.148 == $sub.ref(0, 77482);

const {:count 9} .str.149: ref;

axiom .str.149 == $sub.ref(0, 78515);

const {:count 5} .str.150: ref;

axiom .str.150 == $sub.ref(0, 79544);

const {:count 30} .str.151: ref;

axiom .str.151 == $sub.ref(0, 80598);

const {:count 19} .str.152: ref;

axiom .str.152 == $sub.ref(0, 81641);

const {:count 15} .str.153: ref;

axiom .str.153 == $sub.ref(0, 82680);

const {:count 13} .str.154: ref;

axiom .str.154 == $sub.ref(0, 83717);

const {:count 13} .str.155: ref;

axiom .str.155 == $sub.ref(0, 84754);

const {:count 17} .str.156: ref;

axiom .str.156 == $sub.ref(0, 85795);

const {:count 14} .str.157: ref;

axiom .str.157 == $sub.ref(0, 86833);

const {:count 21} .str.158: ref;

axiom .str.158 == $sub.ref(0, 87878);

const {:count 9} .str.159: ref;

axiom .str.159 == $sub.ref(0, 88911);

const {:count 7} .str.160: ref;

axiom .str.160 == $sub.ref(0, 89942);

const {:count 9} .str.161: ref;

axiom .str.161 == $sub.ref(0, 90975);

const {:count 8} .str.162: ref;

axiom .str.162 == $sub.ref(0, 92007);

const {:count 11} .str.163: ref;

axiom .str.163 == $sub.ref(0, 93042);

const {:count 4} .str.164: ref;

axiom .str.164 == $sub.ref(0, 94070);

const {:count 9} .str.165: ref;

axiom .str.165 == $sub.ref(0, 95103);

const {:count 4} .str.166: ref;

axiom .str.166 == $sub.ref(0, 96131);

const {:count 8} .str.128: ref;

axiom .str.128 == $sub.ref(0, 97163);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 27} .str.215: ref;

axiom .str.215 == $sub.ref(0, 98214);

const {:count 26} .str.204: ref;

axiom .str.204 == $sub.ref(0, 99264);

const {:count 40} .str.205: ref;

axiom .str.205 == $sub.ref(0, 100328);

const {:count 16} .str.206: ref;

axiom .str.206 == $sub.ref(0, 101368);

const {:count 28} .str.207: ref;

axiom .str.207 == $sub.ref(0, 102420);

const {:count 17} .str.208: ref;

axiom .str.208 == $sub.ref(0, 103461);

const {:count 42} .str.209: ref;

axiom .str.209 == $sub.ref(0, 104527);

const {:count 17} .str.210: ref;

axiom .str.210 == $sub.ref(0, 105568);

const {:count 42} .str.211: ref;

axiom .str.211 == $sub.ref(0, 106634);

const {:count 11} .str.212: ref;

axiom .str.212 == $sub.ref(0, 107669);

const {:count 40} .str.213: ref;

axiom .str.213 == $sub.ref(0, 108733);

const {:count 45} .str.214: ref;

axiom .str.214 == $sub.ref(0, 109802);

const {:count 45} .str.196: ref;

axiom .str.196 == $sub.ref(0, 110871);

const {:count 42} .str.197: ref;

axiom .str.197 == $sub.ref(0, 111937);

const {:count 47} .str.110: ref;

axiom .str.110 == $sub.ref(0, 113008);

const {:count 55} .str.111: ref;

axiom .str.111 == $sub.ref(0, 114087);

const {:count 2} .str.6: ref;

axiom .str.6 == $sub.ref(0, 115113);

const {:count 18} .str.230: ref;

axiom .str.230 == $sub.ref(0, 116155);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 35} .str.231: ref;

axiom .str.231 == $sub.ref(0, 117214);

const {:count 54} .str.232: ref;

axiom .str.232 == $sub.ref(0, 118292);

const {:count 40} .str.233: ref;

axiom .str.233 == $sub.ref(0, 119356);

const {:count 9} .str.234: ref;

axiom .str.234 == $sub.ref(0, 120389);

const {:count 51} .str.112: ref;

axiom .str.112 == $sub.ref(0, 121464);

const {:count 59} .str.113: ref;

axiom .str.113 == $sub.ref(0, 122547);

const {:count 47} .str.108: ref;

axiom .str.108 == $sub.ref(0, 123618);

const {:count 55} .str.109: ref;

axiom .str.109 == $sub.ref(0, 124697);

const {:count 55} .str.106: ref;

axiom .str.106 == $sub.ref(0, 125776);

const {:count 63} .str.107: ref;

axiom .str.107 == $sub.ref(0, 126863);

const {:count 50} .str.202: ref;

axiom .str.202 == $sub.ref(0, 127937);

const {:count 39} .str.56: ref;

axiom .str.56 == $sub.ref(0, 129000);

const {:count 51} .str.57: ref;

axiom .str.57 == $sub.ref(0, 130075);

const {:count 59} .str.58: ref;

axiom .str.58 == $sub.ref(0, 131158);

const {:count 38} .str.193: ref;

axiom .str.193 == $sub.ref(0, 132220);

const {:count 97} .str.65: ref;

axiom .str.65 == $sub.ref(0, 133341);

const {:count 51} .str.66: ref;

axiom .str.66 == $sub.ref(0, 134416);

const {:count 59} .str.67: ref;

axiom .str.67 == $sub.ref(0, 135499);

const {:count 55} .str.243: ref;

axiom .str.243 == $sub.ref(0, 136578);

const {:count 91} .str.244: ref;

axiom .str.244 == $sub.ref(0, 137693);

const {:count 100} .str.242: ref;

axiom .str.242 == $sub.ref(0, 138817);

const {:count 36} .str.199: ref;

axiom .str.199 == $sub.ref(0, 139877);

const {:count 51} .str.114: ref;

axiom .str.114 == $sub.ref(0, 140952);

const {:count 59} .str.115: ref;

axiom .str.115 == $sub.ref(0, 142035);

const {:count 51} .str.248: ref;

axiom .str.248 == $sub.ref(0, 143110);

const {:count 35} .str.43: ref;

axiom .str.43 == $sub.ref(0, 144169);

const {:count 52} .str.44: ref;

axiom .str.44 == $sub.ref(0, 145245);

const {:count 60} .str.45: ref;

axiom .str.45 == $sub.ref(0, 146329);

const {:count 35} .str.40: ref;

axiom .str.40 == $sub.ref(0, 147388);

const {:count 49} .str.41: ref;

axiom .str.41 == $sub.ref(0, 148461);

const {:count 57} .str.42: ref;

axiom .str.42 == $sub.ref(0, 149542);

const {:count 37} .str.37: ref;

axiom .str.37 == $sub.ref(0, 150603);

const {:count 51} .str.38: ref;

axiom .str.38 == $sub.ref(0, 151678);

const {:count 59} .str.39: ref;

axiom .str.39 == $sub.ref(0, 152761);

const {:count 33} .str.34: ref;

axiom .str.34 == $sub.ref(0, 153818);

const {:count 50} .str.35: ref;

axiom .str.35 == $sub.ref(0, 154892);

const {:count 58} .str.36: ref;

axiom .str.36 == $sub.ref(0, 155974);

const {:count 28} .str.171: ref;

axiom .str.171 == $sub.ref(0, 157026);

const {:count 61} .str.172: ref;

axiom .str.172 == $sub.ref(0, 158111);

const {:count 15} .str.173: ref;

axiom .str.173 == $sub.ref(0, 159150);

const {:count 47} .str.174: ref;

axiom .str.174 == $sub.ref(0, 160221);

const {:count 46} .str.175: ref;

axiom .str.175 == $sub.ref(0, 161291);

const {:count 54} .str.89: ref;

axiom .str.89 == $sub.ref(0, 162369);

const {:count 62} .str.90: ref;

axiom .str.90 == $sub.ref(0, 163455);

const {:count 54} .str.91: ref;

axiom .str.91 == $sub.ref(0, 164533);

const {:count 62} .str.92: ref;

axiom .str.92 == $sub.ref(0, 165619);

const {:count 51} .str.87: ref;

axiom .str.87 == $sub.ref(0, 166694);

const {:count 59} .str.88: ref;

axiom .str.88 == $sub.ref(0, 167777);

const {:count 51} .str.85: ref;

axiom .str.85 == $sub.ref(0, 168852);

const {:count 59} .str.86: ref;

axiom .str.86 == $sub.ref(0, 169935);

const {:count 235} .str.68: ref;

axiom .str.68 == $sub.ref(0, 171194);

const {:count 51} .str.69: ref;

axiom .str.69 == $sub.ref(0, 172269);

const {:count 90} .str.70: ref;

axiom .str.70 == $sub.ref(0, 173383);

const {:count 88} .str.71: ref;

axiom .str.71 == $sub.ref(0, 174495);

const {:count 51} .str.72: ref;

axiom .str.72 == $sub.ref(0, 175570);

const {:count 59} .str.73: ref;

axiom .str.73 == $sub.ref(0, 176653);

const {:count 55} .str.246: ref;

axiom .str.246 == $sub.ref(0, 177732);

const {:count 145} .str.247: ref;

axiom .str.247 == $sub.ref(0, 178901);

const {:count 93} .str.245: ref;

axiom .str.245 == $sub.ref(0, 180018);

const {:count 32} .str.198: ref;

axiom .str.198 == $sub.ref(0, 181074);

const {:count 54} .str.177: ref;

axiom .str.177 == $sub.ref(0, 182152);

const {:count 42} .str.178: ref;

axiom .str.178 == $sub.ref(0, 183218);

const {:count 29} .str.179: ref;

axiom .str.179 == $sub.ref(0, 184271);

const {:count 37} .str.180: ref;

axiom .str.180 == $sub.ref(0, 185332);

const {:count 32} .str.181: ref;

axiom .str.181 == $sub.ref(0, 186388);

const {:count 15} .str.182: ref;

axiom .str.182 == $sub.ref(0, 187427);

const {:count 44} .str.183: ref;

axiom .str.183 == $sub.ref(0, 188495);

const {:count 42} .str.184: ref;

axiom .str.184 == $sub.ref(0, 189561);

const {:count 48} .str.185: ref;

axiom .str.185 == $sub.ref(0, 190633);

const {:count 41} .str.186: ref;

axiom .str.186 == $sub.ref(0, 191698);

const {:count 50} .str.187: ref;

axiom .str.187 == $sub.ref(0, 192772);

const {:count 45} .str.188: ref;

axiom .str.188 == $sub.ref(0, 193841);

const {:count 48} .str.189: ref;

axiom .str.189 == $sub.ref(0, 194913);

const {:count 54} .str.77: ref;

axiom .str.77 == $sub.ref(0, 195991);

const {:count 44} .str.78: ref;

axiom .str.78 == $sub.ref(0, 197059);

const {:count 52} .str.79: ref;

axiom .str.79 == $sub.ref(0, 198135);

const {:count 60} .str.80: ref;

axiom .str.80 == $sub.ref(0, 199219);

const {:count 58} .str.81: ref;

axiom .str.81 == $sub.ref(0, 200301);

const {:count 49} .str.82: ref;

axiom .str.82 == $sub.ref(0, 201374);

const {:count 62} .str.83: ref;

axiom .str.83 == $sub.ref(0, 202460);

const {:count 70} .str.84: ref;

axiom .str.84 == $sub.ref(0, 203554);

const {:count 67} .str.62: ref;

axiom .str.62 == $sub.ref(0, 204645);

const {:count 52} .str.63: ref;

axiom .str.63 == $sub.ref(0, 205721);

const {:count 60} .str.64: ref;

axiom .str.64 == $sub.ref(0, 206805);

const {:count 25} .str.190: ref;

axiom .str.190 == $sub.ref(0, 207854);

const {:count 44} .str.192: ref;

axiom .str.192 == $sub.ref(0, 208922);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 42} .str.191: ref;

axiom .str.191 == $sub.ref(0, 209988);

const {:count 29} .str.74: ref;

axiom .str.74 == $sub.ref(0, 211041);

const {:count 51} .str.75: ref;

axiom .str.75 == $sub.ref(0, 212116);

const {:count 59} .str.76: ref;

axiom .str.76 == $sub.ref(0, 213199);

const {:count 81} .str.59: ref;

axiom .str.59 == $sub.ref(0, 214304);

const {:count 45} .str.60: ref;

axiom .str.60 == $sub.ref(0, 215373);

const {:count 53} .str.61: ref;

axiom .str.61 == $sub.ref(0, 216450);

const {:count 51} .str.241: ref;

axiom .str.241 == $sub.ref(0, 217525);

const {:count 71} .str.125: ref;

axiom .str.125 == $sub.ref(0, 218620);

const {:count 50} .str.95: ref;

axiom .str.95 == $sub.ref(0, 219694);

const {:count 58} .str.96: ref;

axiom .str.96 == $sub.ref(0, 220776);

const {:count 24} .str.123: ref;

axiom .str.123 == $sub.ref(0, 221824);

const {:count 41} .str.124: ref;

axiom .str.124 == $sub.ref(0, 222889);

const {:count 51} .str.93: ref;

axiom .str.93 == $sub.ref(0, 223964);

const {:count 59} .str.94: ref;

axiom .str.94 == $sub.ref(0, 225047);

const {:count 37} .str.169: ref;

axiom .str.169 == $sub.ref(0, 226108);

const {:count 44} .str.170: ref;

axiom .str.170 == $sub.ref(0, 227176);

const {:count 55} .str.46: ref;

axiom .str.46 == $sub.ref(0, 228255);

const {:count 63} .str.47: ref;

axiom .str.47 == $sub.ref(0, 229342);

const {:count 47} .str.237: ref;

axiom .str.237 == $sub.ref(0, 230413);

const {:count 39} .str.203: ref;

axiom .str.203 == $sub.ref(0, 231476);

const {:count 56} .str.54: ref;

axiom .str.54 == $sub.ref(0, 232556);

const {:count 64} .str.55: ref;

axiom .str.55 == $sub.ref(0, 233644);

const {:count 44} .str.200: ref;

axiom .str.200 == $sub.ref(0, 234712);

const {:count 60} .str.201: ref;

axiom .str.201 == $sub.ref(0, 235796);

const {:count 52} .str.51: ref;

axiom .str.51 == $sub.ref(0, 236872);

const {:count 53} .str.52: ref;

axiom .str.52 == $sub.ref(0, 237949);

const {:count 61} .str.53: ref;

axiom .str.53 == $sub.ref(0, 239034);

const {:count 48} .str.239: ref;

axiom .str.239 == $sub.ref(0, 240106);

const {:count 69} .str.240: ref;

axiom .str.240 == $sub.ref(0, 241199);

const {:count 22} .str.195: ref;

axiom .str.195 == $sub.ref(0, 242245);

const {:count 57} .str.97: ref;

axiom .str.97 == $sub.ref(0, 243326);

const {:count 23} .str.176: ref;

axiom .str.176 == $sub.ref(0, 244373);

const {:count 20} .str.194: ref;

axiom .str.194 == $sub.ref(0, 245417);

const {:count 37} .str.220: ref;

axiom .str.220 == $sub.ref(0, 246478);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 34} .str.221: ref;

axiom .str.221 == $sub.ref(0, 247536);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 45} .str.32: ref;

axiom .str.32 == $sub.ref(0, 248605);

const {:count 53} .str.33: ref;

axiom .str.33 == $sub.ref(0, 249682);

const {:count 21} .str.133: ref;

axiom .str.133 == $sub.ref(0, 250727);

const {:count 52} .str.134: ref;

axiom .str.134 == $sub.ref(0, 251803);

const {:count 53} .str.135: ref;

axiom .str.135 == $sub.ref(0, 252880);

const {:count 56} .str.136: ref;

axiom .str.136 == $sub.ref(0, 253960);

const {:count 48} .str.137: ref;

axiom .str.137 == $sub.ref(0, 255032);

const {:count 47} .str.138: ref;

axiom .str.138 == $sub.ref(0, 256103);

const {:count 42} .str.139: ref;

axiom .str.139 == $sub.ref(0, 257169);

const {:count 48} .str.140: ref;

axiom .str.140 == $sub.ref(0, 258241);

const {:count 37} .str.141: ref;

axiom .str.141 == $sub.ref(0, 259302);

const {:count 45} .str.129: ref;

axiom .str.129 == $sub.ref(0, 260371);

const {:count 14} .str.130: ref;

axiom .str.130 == $sub.ref(0, 261409);

const {:count 50} .str.131: ref;

axiom .str.131 == $sub.ref(0, 262483);

const {:count 5} .str.132: ref;

axiom .str.132 == $sub.ref(0, 263512);

const {:count 11} .str.222: ref;

axiom .str.222 == $sub.ref(0, 264547);

const {:count 44} .str.223: ref;

axiom .str.223 == $sub.ref(0, 265615);

const {:count 11} .str.224: ref;

axiom .str.224 == $sub.ref(0, 266650);

const {:count 44} .str.225: ref;

axiom .str.225 == $sub.ref(0, 267718);

const {:count 44} .str.3: ref;

axiom .str.3 == $sub.ref(0, 268786);

const {:count 35} .str.218: ref;

axiom .str.218 == $sub.ref(0, 269845);

const {:count 19} .str.12: ref;

axiom .str.12 == $sub.ref(0, 270888);

const {:count 27} .str.13: ref;

axiom .str.13 == $sub.ref(0, 271939);

const {:count 46} .str.14: ref;

axiom .str.14 == $sub.ref(0, 273009);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 274051);

const {:count 42} .str.16: ref;

axiom .str.16 == $sub.ref(0, 275117);

const {:count 41} .str.219: ref;

axiom .str.219 == $sub.ref(0, 276182);

const {:count 29} .str.226: ref;

axiom .str.226 == $sub.ref(0, 277235);

const {:count 28} .str.227: ref;

axiom .str.227 == $sub.ref(0, 278287);

const {:count 55} .str.216: ref;

axiom .str.216 == $sub.ref(0, 279366);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 56} .str.217: ref;

axiom .str.217 == $sub.ref(0, 280446);

const {:count 24} .str.167: ref;

axiom .str.167 == $sub.ref(0, 281494);

const {:count 24} .str.168: ref;

axiom .str.168 == $sub.ref(0, 282542);

const {:count 36} .str.103: ref;

axiom .str.103 == $sub.ref(0, 283602);

const {:count 21} .str.142: ref;

axiom .str.142 == $sub.ref(0, 284647);

const {:count 8} .str.143: ref;

axiom .str.143 == $sub.ref(0, 285679);

const {:count 62} .str.104: ref;

axiom .str.104 == $sub.ref(0, 286765);

const {:count 63} .str.105: ref;

axiom .str.105 == $sub.ref(0, 287852);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 288905);

const {:count 46} .str.30: ref;

axiom .str.30 == $sub.ref(0, 289975);

const {:count 54} .str.31: ref;

axiom .str.31 == $sub.ref(0, 291053);

const {:count 59} .str.235: ref;

axiom .str.235 == $sub.ref(0, 292136);

const {:count 60} .str.236: ref;

axiom .str.236 == $sub.ref(0, 293220);

const {:count 34} .str.26: ref;

axiom .str.26 == $sub.ref(0, 294278);

const {:count 51} .str.27: ref;

axiom .str.27 == $sub.ref(0, 295353);

const {:count 56} .str.28: ref;

axiom .str.28 == $sub.ref(0, 296433);

const .str: ref;

axiom .str == $sub.ref(0, 297516);

const {:count 51} .str.4: ref;

axiom .str.4 == $sub.ref(0, 298591);

const {:count 24} .str.116: ref;

axiom .str.116 == $sub.ref(0, 299639);

const {:count 3} .str.117: ref;

axiom .str.117 == $sub.ref(0, 300666);

const {:count 16} .str.118: ref;

axiom .str.118 == $sub.ref(0, 301706);

const {:count 43} .str.119: ref;

axiom .str.119 == $sub.ref(0, 302773);

const {:count 21} .str.120: ref;

axiom .str.120 == $sub.ref(0, 303818);

const {:count 20} .str.121: ref;

axiom .str.121 == $sub.ref(0, 304862);

const {:count 52} .str.122: ref;

axiom .str.122 == $sub.ref(0, 305938);

const {:count 18} .str.257: ref;

axiom .str.257 == $sub.ref(0, 306980);

const {:count 69} .str.258: ref;

axiom .str.258 == $sub.ref(0, 308073);

const {:count 30} .str.259: ref;

axiom .str.259 == $sub.ref(0, 309127);

const {:count 50} .str.249: ref;

axiom .str.249 == $sub.ref(0, 310201);

const {:count 51} .str.254: ref;

axiom .str.254 == $sub.ref(0, 311276);

const {:count 50} .str.255: ref;

axiom .str.255 == $sub.ref(0, 312350);

const {:count 60} .str.256: ref;

axiom .str.256 == $sub.ref(0, 313434);

const {:count 38} .str.251: ref;

axiom .str.251 == $sub.ref(0, 314496);

const {:count 54} .str.252: ref;

axiom .str.252 == $sub.ref(0, 315574);

const {:count 42} .str.253: ref;

axiom .str.253 == $sub.ref(0, 316640);

const {:count 46} .str.250: ref;

axiom .str.250 == $sub.ref(0, 317710);

const {:count 51} .str.1: ref;

axiom .str.1 == $sub.ref(0, 318785);

const {:count 33} .str.2: ref;

axiom .str.2 == $sub.ref(0, 319842);

const {:count 59} .str.17: ref;

axiom .str.17 == $sub.ref(0, 320925);

const {:count 4} .str.19: ref;

axiom .str.19 == $sub.ref(0, 321953);

const {:count 5} .str.20: ref;

axiom .str.20 == $sub.ref(0, 322982);

const {:count 6} .str.21: ref;

axiom .str.21 == $sub.ref(0, 324012);

const {:count 6} .str.22: ref;

axiom .str.22 == $sub.ref(0, 325042);

const {:count 48} .str.18: ref;

axiom .str.18 == $sub.ref(0, 326114);

const {:count 10} .str.23: ref;

axiom .str.23 == $sub.ref(0, 327148);

const {:count 35} .str.24: ref;

axiom .str.24 == $sub.ref(0, 328207);

const {:count 42} .str.25: ref;

axiom .str.25 == $sub.ref(0, 329273);

const {:count 18} .str.5: ref;

axiom .str.5 == $sub.ref(0, 330315);

const {:count 20} .str.7: ref;

axiom .str.7 == $sub.ref(0, 331359);

const {:count 19} .str.8: ref;

axiom .str.8 == $sub.ref(0, 332402);

const {:count 60} .str.9: ref;

axiom .str.9 == $sub.ref(0, 333486);

const {:count 20} .str.10: ref;

axiom .str.10 == $sub.ref(0, 334530);

const {:count 20} .str.11: ref;

axiom .str.11 == $sub.ref(0, 335574);

const {:count 46} .str.229: ref;

axiom .str.229 == $sub.ref(0, 336644);

const {:count 37} .str.228: ref;

axiom .str.228 == $sub.ref(0, 337705);

const {:count 14} .str.126: ref;

axiom .str.126 == $sub.ref(0, 338743);

const {:count 38} .str.127: ref;

axiom .str.127 == $sub.ref(0, 339805);

const {:count 52} .str.98: ref;

axiom .str.98 == $sub.ref(0, 340881);

const {:count 51} .str.99: ref;

axiom .str.99 == $sub.ref(0, 341956);

const {:count 59} .str.100: ref;

axiom .str.100 == $sub.ref(0, 343039);

const {:count 2} .str.260: ref;

axiom .str.260 == $sub.ref(0, 344065);

const {:count 39} .str.261: ref;

axiom .str.261 == $sub.ref(0, 345128);

const {:count 49} .str.101: ref;

axiom .str.101 == $sub.ref(0, 346201);

const {:count 57} .str.102: ref;

axiom .str.102 == $sub.ref(0, 347282);

const {:count 51} .str.48: ref;

axiom .str.48 == $sub.ref(0, 348357);

const {:count 59} .str.49: ref;

axiom .str.49 == $sub.ref(0, 349440);

const {:count 67} .str.50: ref;

axiom .str.50 == $sub.ref(0, 350531);

const {:count 51} .str.238: ref;

axiom .str.238 == $sub.ref(0, 351606);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 352638);

const {:count 3} .str.1.538: ref;

axiom .str.1.538 == $sub.ref(0, 353665);

const {:count 14} .str.539: ref;

axiom .str.539 == $sub.ref(0, 354703);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 355731);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 356763);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 357795);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 358827);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 359859);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const wcn36xx_probe: ref;

axiom wcn36xx_probe == $sub.ref(0, 360891);

procedure wcn36xx_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation wcn36xx_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i39: i32;
  var $i11: i32;
  var $i45: i32;
  var vslice_dummy_var_628: i32;
  var vslice_dummy_var_629: i32;
  var vslice_dummy_var_630: i32;
  var vslice_dummy_var_631: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1024);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p7 := ieee80211_alloc_hw(1240, wcn36xx_ops);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} platform_set_drvdata($p0, $p12);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p7);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(8, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1)), $mul.ref(512, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p21);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} __mutex_init($p24, .str.206, $p2);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    call {:si_unique_call 17} $i30 := devirtbounce($p28, $p29);
    call {:si_unique_call 18} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i37 := wcn36xx_platform_get_resources($p15, $p0);
    call {:si_unique_call 22} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_631 := wcn36xx_init_ieee80211($p15);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i43 := ieee80211_register_hw($p42);
    call {:si_unique_call 26} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(208, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} iounmap($p47);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} ieee80211_free_hw($p7);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i45 := $i11;
    goto $bb19;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_630 := printk.ref.ref(.str.207, $p32);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} SET_IEEE80211_PERM_ADDR($p35, $p36);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_629 := printk.ref(.str.205);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_628 := printk.ref(.str.204);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_remove: ref;

axiom wcn36xx_remove == $sub.ref(0, 361923);

procedure wcn36xx_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wcn36xx_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_632: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1024);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1240)), $mul.ref(32, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} release_firmware($p11);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} mutex_destroy($p12);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} ieee80211_unregister_hw($p2);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 1240)), $mul.ref(208, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} iounmap($p14);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} ieee80211_free_hw($p2);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_632 := printk.ref(.str.215);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 362955);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 363987);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 36} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 37} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 40} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 41} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 43} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.ref.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.ref.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 46} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 47} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 50} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 51} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 1} true;
    call {:si_unique_call 52} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 53} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 55} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 56} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 57} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 61} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 62} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 63} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 64} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 65} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32.i32.ref.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref, p.8: i32, p.9: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32.i32.ref.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref, p.8: i32, p.9: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 67} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: ref, p.5: i32, p.6: ref, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: ref, p.5: i32, p.6: ref, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 365019);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 366051);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 367083);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 368115);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 369147);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 370179);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 371211);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "ieee80211_alloc_hw:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p2 := external_alloc();
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 372243);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} dev_set_drvdata($p2, $p1);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 373275);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    return;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 374307);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64(6, 63);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1768)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 74} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p10, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1768)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 73} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p6, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_platform_get_resources: ref;

axiom wcn36xx_platform_get_resources == $sub.ref(0, 375339);

procedure wcn36xx_platform_get_resources($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_platform_get_resources($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i6: i32;
  var vslice_dummy_var_633: i32;
  var vslice_dummy_var_634: i32;
  var vslice_dummy_var_635: i32;
  var vslice_dummy_var_636: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p2 := platform_get_resource_byname($p1, 1024, .str.208);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(196, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p11 := platform_get_resource_byname($p1, 1024, .str.210);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(200, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p19 := platform_get_resource_byname($p1, 512, .str.212);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i23 := resource_size($p19);
    call {:si_unique_call 82} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p26 := ioremap($i25, $i23);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(208, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(208, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_636 := printk.ref(.str.214);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} vslice_dummy_var_635 := printk.ref(.str.213);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_634 := printk.ref(.str.211);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} vslice_dummy_var_633 := printk.ref(.str.209);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;
}



const wcn36xx_init_ieee80211: ref;

axiom wcn36xx_init_ieee80211 == $sub.ref(0, 376371);

procedure wcn36xx_init_ieee80211($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_init_ieee80211($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1027073);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1027077);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1027074);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1027076);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 67634753);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1768)), $mul.ref(48, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 142);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, wcn_band_2ghz);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, wcn_band_5ghz);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1768)), $mul.ref(88, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1768)), $mul.ref(84, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 4);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1768)), $mul.ref(52, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 524288);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1768)), $mul.ref(52, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i43);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1768)), $mul.ref(152, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, wowlan_support);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 144)), $mul.ref(106, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, 200);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, 4);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(8, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} SET_IEEE80211_DEV($p61, $p63);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 80);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 144)), $mul.ref(92, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 80);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 377403);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 378435);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} set_wiphy_dev($p3, $p1);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 379467);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1768)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    return;
}



const platform_get_resource_byname: ref;

axiom platform_get_resource_byname == $sub.ref(0, 380499);

procedure platform_get_resource_byname($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource_byname($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} {:cexpr "platform_get_resource_byname:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p3 := external_alloc();
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const resource_size: ref;

axiom resource_size == $sub.ref(0, 381531);

procedure resource_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation resource_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i2, $i4);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 382563);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 93} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 383595);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 96} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p2 := external_alloc();
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 384627);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 99} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 385659);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 386691);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_tx: ref;

axiom wcn36xx_tx == $sub.ref(0, 387723);

procedure wcn36xx_tx($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0, $CurrAddr;



implementation wcn36xx_tx($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i15 := wcn36xx_start_tx($p5, $p14, $p2);
    call {:si_unique_call 101} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ieee80211_free_txskb($p18, $p2);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p14 := $p12;
    goto $bb3;
}



const wcn36xx_start: ref;

axiom wcn36xx_start == $sub.ref(0, 388755);

procedure wcn36xx_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation wcn36xx_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i32;
  var $i13: i1;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i28: i32;
  var $i29: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i31: i32;
  var $p49: ref;
  var $p50: ref;
  var $i19: i32;
  var $i27: i32;
  var $i15: i32;
  var $i11: i32;
  var $i47: i32;
  var vslice_dummy_var_637: i32;
  var vslice_dummy_var_638: i32;
  var vslice_dummy_var_639: i32;
  var vslice_dummy_var_640: i32;
  var vslice_dummy_var_641: i32;
  var vslice_dummy_var_642: i32;
  var vslice_dummy_var_643: i32;
  var vslice_dummy_var_644: i32;
  var vslice_dummy_var_645: i32;
  var vslice_dummy_var_646: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1024);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i8 := wcn36xx_smd_open($p3);
    call {:si_unique_call 105} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i12 := wcn36xx_dxe_allocate_mem_pools($p3);
    call {:si_unique_call 108} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i16 := wcn36xx_dxe_alloc_ctl_blks($p3);
    call {:si_unique_call 112} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p20 := kmalloc(4096, 208);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i28 := wcn36xx_smd_load_nv($p3);
    call {:si_unique_call 119} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i32 := wcn36xx_smd_start($p3);
    call {:si_unique_call 123} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i35 := wcn36xx_is_fw_version($p3, 1, 2, 2, 24);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 126} {:cexpr "tmp___0"} boogie_si_record_i8($i36);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} wcn36xx_detect_chip_version($p3);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i43 := wcn36xx_dxe_init($p3);
    call {:si_unique_call 133} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} wcn36xx_debugfs_init($p3);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} INIT_LIST_HEAD($p46);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb36:
    assume $i44 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_645 := printk.ref(.str.141);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_646 := wcn36xx_smd_stop($p3);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i31 := $i43;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} kfree($p50);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} wcn36xx_dxe_free_mem_pools($p3);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i27 := $i19;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} wcn36xx_dxe_free_ctl_blks($p3);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i15 := $i27;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} wcn36xx_smd_close($p3);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i47 := $i11;
    goto $bb40;

  $bb30:
    assume $i39 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i40 := wcn36xx_smd_feature_caps_exchange($p3);
    call {:si_unique_call 128} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i41 == 1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} wcn36xx_feat_caps_info($p3);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i41 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_644 := printk.ref(.str.140);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb29;

  $bb24:
    assume $i33 == 1;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_643 := printk.ref(.str.139);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb22;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_642 := printk.ref(.str.138);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    goto $bb22;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_641 := printk.ref(.str.137);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb18;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_640 := printk.ref.i32(.str.136, $i16);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb14;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_639 := printk.ref.i32(.str.135, $i12);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb10;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_638 := printk.ref.i32(.str.134, $i8);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} vslice_dummy_var_637 := printk.ref(.str.133);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_stop: ref;

axiom wcn36xx_stop == $sub.ref(0, 389787);

procedure wcn36xx_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.6, $M.5;



implementation wcn36xx_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_647: i32;
  var vslice_dummy_var_648: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1024);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} wcn36xx_debugfs_exit($p3);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_648 := wcn36xx_smd_stop($p3);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} wcn36xx_dxe_deinit($p3);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} wcn36xx_smd_close($p3);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} wcn36xx_dxe_free_mem_pools($p3);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} wcn36xx_dxe_free_ctl_blks($p3);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} kfree($p10);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_647 := printk.ref(.str.194);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_suspend: ref;

axiom wcn36xx_suspend == $sub.ref(0, 390819);

procedure wcn36xx_suspend($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_suspend($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_649: i32;
  var vslice_dummy_var_650: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1024);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1240)), $mul.ref(504, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} flush_workqueue($p10);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_650 := wcn36xx_smd_set_power_params($p4, 1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} vslice_dummy_var_649 := printk.ref(.str.176);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_resume: ref;

axiom wcn36xx_resume == $sub.ref(0, 391851);

procedure wcn36xx_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_651: i32;
  var vslice_dummy_var_652: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1024);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1240)), $mul.ref(504, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} flush_workqueue($p9);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_652 := wcn36xx_smd_set_power_params($p3, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_651 := printk.ref(.str.195);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_add_interface: ref;

axiom wcn36xx_add_interface == $sub.ref(0, 392883);

procedure wcn36xx_add_interface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_add_interface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p30: ref;
  var $i28: i32;
  var vslice_dummy_var_653: i32;
  var vslice_dummy_var_654: i32;
  var vslice_dummy_var_655: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1024);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 2);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} list_add($p29, $p30);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_655 := wcn36xx_smd_add_sta_self($p4, $p1);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 3);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 7);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_654 := printk.ref.i32(.str.201, $i26);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 95);
    goto $bb13;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} vslice_dummy_var_653 := printk.ref.ref.i32(.str.200, $p1, $i11);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_remove_interface: ref;

axiom wcn36xx_remove_interface == $sub.ref(0, 393915);

procedure wcn36xx_remove_interface($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_remove_interface($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_656: i32;
  var vslice_dummy_var_657: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1024);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} list_del($p11);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_657 := wcn36xx_smd_delete_sta_self($p4, $p13);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vslice_dummy_var_656 := printk.ref.ref(.str.203, $p1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_config: ref;

axiom wcn36xx_config == $sub.ref(0, 394947);

procedure wcn36xx_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p33: ref;
  var vslice_dummy_var_658: i32;
  var vslice_dummy_var_659: i32;
  var vslice_dummy_var_660: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "wcn36xx_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1024);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i1, 64);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    call {:si_unique_call 161} {:cexpr "ch"} boogie_si_record_i32($i19);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1024);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1240)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i29, $i31);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p33 := $p26;
    goto $bb12;

  $bb12:
    call $p34, $p35, $p36, $p37, $p40, $p41, $p42, $p43, $i44, $i45, $p33, vslice_dummy_var_660 := wcn36xx_config_loop_$bb12($p4, $i19, $i31, $p34, $p35, $p36, $p37, $p40, $p41, $p42, $p43, $i44, $i45, $p33, vslice_dummy_var_660);
    goto $bb12_last;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_660 := wcn36xx_smd_switch_channel($p4, $p37, $i19);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i31);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p41;
    goto $bb14_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_659 := printk.ref.i32(.str.170, $i19);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} vslice_dummy_var_658 := printk.ref.i32(.str.169, $i1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;
}



const wcn36xx_bss_info_changed: ref;

axiom wcn36xx_bss_info_changed == $sub.ref(0, 395979);

procedure wcn36xx_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5;



implementation wcn36xx_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i1;
  var $i35: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i1;
  var $i53: i8;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i8;
  var $i72: i32;
  var $i73: i8;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i8;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $i149: i16;
  var $p150: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i16;
  var $i161: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p174: ref;
  var $i175: i64;
  var $i176: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i8;
  var $i189: i1;
  var $i190: i32;
  var $p192: ref;
  var $i193: i8;
  var $i194: i1;
  var $p195: ref;
  var $i196: i8;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $i203: i64;
  var $i204: i1;
  var $i206: i16;
  var $i207: i32;
  var $i208: i16;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_661: i32;
  var vslice_dummy_var_662: i32;
  var vslice_dummy_var_663: i32;
  var vslice_dummy_var_664: i32;
  var vslice_dummy_var_665: i32;
  var vslice_dummy_var_666: i32;
  var vslice_dummy_var_667: i32;
  var vslice_dummy_var_668: i32;
  var vslice_dummy_var_669: i32;
  var vslice_dummy_var_670: i32;
  var vslice_dummy_var_671: i32;
  var vslice_dummy_var_672: i32;
  var vslice_dummy_var_673: i32;
  var vslice_dummy_var_674: i32;
  var vslice_dummy_var_675: i32;
  var vslice_dummy_var_676: i32;
  var vslice_dummy_var_677: i32;
  var vslice_dummy_var_678: i32;
  var vslice_dummy_var_679: i32;
  var vslice_dummy_var_680: i32;
  var vslice_dummy_var_681: i32;
  var vslice_dummy_var_682: i32;
  var vslice_dummy_var_683: i32;
  var vslice_dummy_var_684: i32;
  var vslice_dummy_var_685: i32;
  var vslice_dummy_var_686: i32;
  var vslice_dummy_var_687: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p5 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 166} {:cexpr "wcn36xx_bss_info_changed:arg:changed"} boogie_si_record_i32($i3);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1024);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i3, 1048576);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i3, 131072);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i3, 128);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i3, 32768);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i3, 1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i3, 65536);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i3, 512);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb65, $bb67;

  $bb67:
    assume !($i181 == 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i3, 256);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    return;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i184 := $M.1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 1024);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i8.i1($i193);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i194 == 1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p225);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} vslice_dummy_var_683 := wcn36xx_smd_set_link_st($p8, $p224, $p226, 0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_684 := wcn36xx_smd_delete_bss($p8, $p1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb73:
    assume $i194 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(18, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.0, $p195);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p197, $i196);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p198, $sub.i8(0, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} vslice_dummy_var_682 := wcn36xx_smd_config_bss($p8, $p1, $0.ref, $p200, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p202 := ieee80211_beacon_get_tim($p0, $p1, $p4, $p5);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i204 := $eq.i64($i203, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.2, $p4);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i206);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i16($i207);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_686 := wcn36xx_smd_send_beacon($p8, $p1, $p202, $i208, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p202);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} ldv_skb_free($p210);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb80;

  $bb80:
    assume !($i213 == 1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 7);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i217 := 3;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_687 := wcn36xx_smd_set_link_st($p8, $p219, $p221, $i217);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i217 := 4;
    goto $bb83;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb79;

  $bb75:
    assume $i204 == 1;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_685 := printk.ref(.str.189);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb70:
    assume $i186 == 1;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.0, $p187);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i8.i1($i188);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i190 := $zext.i1.i32($i189);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} vslice_dummy_var_681 := printk.ref.i32(.str.188, $i190);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb66;

  $bb56:
    assume $i169 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i170 := $M.1;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 1024);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p174 := ieee80211_proberesp_get($p0, $p1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p174);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i176 := $eq.i64($i175, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_680 := wcn36xx_smd_update_proberesp_tmpl($p8, $p1, $p174);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p174);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} ldv_skb_free($p179);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i176 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_679 := printk.ref(.str.187);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb58:
    assume $i172 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_678 := printk.ref(.str.186);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb40:
    assume $i106 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i109);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i110 == 1);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i152 := $M.1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 1024);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_677 := wcn36xx_smd_set_link_st($p8, $p164, $p166, 0);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i154 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $p159);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_676 := printk.ref.ref.ref.i32(.str.185, $p156, $p158, $i161);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb42:
    assume $i110 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i111 := $M.1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 1024);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} rcu_read_lock();
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p124 := ieee80211_find_sta($p1, $p123);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i126 := $eq.i64($i125, 0);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p124, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p8, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p133, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} wcn36xx_update_allowed_rates($p124, $i139);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_673 := wcn36xx_smd_set_link_st($p8, $p141, $p143, 2);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_674 := wcn36xx_smd_config_bss($p8, $p1, $p124, $p146, 1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p131, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, $i149);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_675 := wcn36xx_smd_config_sta($p8, $p1, $p124);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} rcu_read_unlock();
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb47:
    assume $i126 == 1;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_672 := printk.ref.ref(.str.184, $p128);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} rcu_read_unlock();
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i113 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.0, $p118);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} vslice_dummy_var_671 := printk.ref.ref.ref.i32(.str.183, $p115, $p117, $i120);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb31:
    assume $i81 == 1;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i82 := $M.1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1024);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i86 := $M.1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 1024);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(160, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i8($i94);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(33, 1)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $i95);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(160, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    call {:si_unique_call 180} {:cexpr "__len"} boogie_si_record_i64($i99);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(33, 1)), $mul.ref(1, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(127, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 181} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p102, $p104, $i99, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(127, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(160, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} print_hex_dump(.str.6, .str.182, 2, 32, 1, $p90, $i92, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i84 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} vslice_dummy_var_670 := printk.ref(.str.181);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 1024);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i52 := is_zero_ether_addr($p51);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i8($i52);
    call {:si_unique_call 174} {:cexpr "tmp"} boogie_si_record_i8($i53);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i56 == 1);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_669 := wcn36xx_smd_delete_bss($p8, $p1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i56 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $sub.i8(0, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i16.i8($i70);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_667 := wcn36xx_smd_join($p8, $p60, $p62, $i73);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_668 := wcn36xx_smd_config_bss($p8, $p1, $0.ref, $p76, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb26;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_666 := printk.ref.ref(.str.180, $p48);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1024);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(126, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_665 := wcn36xx_pmc_exit_bmps_state($p8, $p1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_664 := wcn36xx_pmc_enter_bmps_state($p8, $p1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(126, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_663 := printk.ref.i32(.str.179, $i35);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i17 := $M.1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1024);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(18, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(18, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_662 := printk.ref.i32(.str.178, $i22);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_661 := printk.ref.ref.i32(.str.177, $p1, $i3);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_configure_filter: ref;

axiom wcn36xx_configure_filter == $sub.ref(0, 397011);

procedure wcn36xx_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var vslice_dummy_var_688: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "wcn36xx_configure_filter:arg:changed"} boogie_si_record_i32($i1);
    call {:si_unique_call 209} {:cexpr "wcn36xx_configure_filter:arg:multicast"} boogie_si_record_i64($i3);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1024);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_688 := printk.ref(.str.198);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_set_key: ref;

axiom wcn36xx_set_key == $sub.ref(0, 398043);

procedure wcn36xx_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i109: i8;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i8;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i8;
  var $p120: ref;
  var $i121: i32;
  var $i122: i8;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i8;
  var $p134: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i8;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i8;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i8;
  var $p154: ref;
  var $i155: i32;
  var $i156: i8;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i8;
  var $p170: ref;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i1;
  var $i175: i8;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i8;
  var $i182: i32;
  var $i183: i8;
  var $i55: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var vslice_dummy_var_689: i32;
  var vslice_dummy_var_690: i32;
  var vslice_dummy_var_691: i32;
  var vslice_dummy_var_692: i32;
  var vslice_dummy_var_693: i32;
  var vslice_dummy_var_694: i32;
  var vslice_dummy_var_695: i32;
  var vslice_dummy_var_696: i32;
  var vslice_dummy_var_697: i32;
  var vslice_dummy_var_698: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 212} {:cexpr "wcn36xx_set_key:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1024);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $M.1;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1024);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i32 := $M.1;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1024);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 1027076);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 1027077);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 1027077);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} vslice_dummy_var_691 := printk.ref.i32(.str.174, $i53);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 95);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} vslice_dummy_var_698 := printk.ref.i32(.str.175, $i1);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 95);
    goto $bb26;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, 8);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i162 == 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(17, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, 0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb26;

  $bb63:
    assume $i174 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i175 := get_sta_index($p2, $p12);
    call {:si_unique_call 235} {:cexpr "tmp___1"} boogie_si_record_i8($i175);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i8($i180);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i175);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i8($i182);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_697 := wcn36xx_smd_remove_stakey($p8, $i177, $i181, $i183);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i162 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i8($i167);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_696 := wcn36xx_smd_remove_bsskey($p8, $i164, $i168);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb28:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb32;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 3);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i64($i92);
    call {:si_unique_call 217} {:cexpr "__len___2"} boogie_si_record_i64($i93);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p5);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 218} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p94, $p96, $i93, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 8);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i101 == 1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p5);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_692 := wcn36xx_smd_set_bsskey($p8, $i125, $i129, $i133, $p134);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1027073);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i138 == 1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 1027077);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(17, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 1);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i143 := get_sta_index($p2, $p12);
    call {:si_unique_call 231} {:cexpr "tmp___0"} boogie_si_record_i8($i143);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p5);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i143);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_695 := wcn36xx_smd_set_stakey($p8, $i145, $i149, $i153, $p154, $i156);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb54;

  $bb47:
    assume $i101 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p12, $mul.ref(0, 80)), $mul.ref(17, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 1);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i109 := get_sta_index($p2, $p12);
    call {:si_unique_call 228} {:cexpr "tmp"} boogie_si_record_i8($i109);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p5);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i109);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_694 := wcn36xx_smd_set_stakey($p8, $i111, $i115, $i119, $p120, $i122);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i105 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_693 := wcn36xx_smd_config_bss($p8, $p2, $p3, $p107, 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i64(16, 63);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i62 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p5);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 220} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p66, $p68, 16, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i64(8, 63);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i69 == 1);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p5);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(16, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(24, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 222} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p76, $p79, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i64(8, 63);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i80 == 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p5);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(24, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(16, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 224} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p87, $p90, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i80 == 1;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p5);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(24, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(16, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 223} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p82, $p85, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i69 == 1;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p5);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(16, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(24, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 221} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p71, $p74, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i62 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p5);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 219} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p63, $p65, 16, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 4);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i41, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb17;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 3);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i41, 1027073);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb17;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} print_hex_dump(.str.6, .str.173, 2, 32, 1, $p36, $i39, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_690 := printk.ref.i32.i32.i32.i32.i32(.str.172, $i1, $i21, $i24, $i27, $i30);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_689 := printk.ref(.str.171);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_sw_scan_start: ref;

axiom wcn36xx_sw_scan_start == $sub.ref(0, 399075);

procedure wcn36xx_sw_scan_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_sw_scan_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_699: i32;
  var vslice_dummy_var_700: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_699 := wcn36xx_smd_init_scan($p3, 2);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_700 := wcn36xx_smd_start_scan($p3);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_sw_scan_complete: ref;

axiom wcn36xx_sw_scan_complete == $sub.ref(0, 400107);

procedure wcn36xx_sw_scan_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_sw_scan_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_701: i32;
  var vslice_dummy_var_702: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_701 := wcn36xx_smd_end_scan($p3);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_702 := wcn36xx_smd_finish_scan($p3, 2);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_set_rts_threshold: ref;

axiom wcn36xx_set_rts_threshold == $sub.ref(0, 401139);

procedure wcn36xx_set_rts_threshold($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr;



implementation wcn36xx_set_rts_threshold($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_703: i32;
  var vslice_dummy_var_704: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "wcn36xx_set_rts_threshold:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1024);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_704 := wcn36xx_smd_update_cfg($p4, 11, $i1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_703 := printk.ref.i32(.str.199, $i1);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_sta_add: ref;

axiom wcn36xx_sta_add == $sub.ref(0, 402171);

procedure wcn36xx_sta_add($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_sta_add($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $p31: ref;
  var vslice_dummy_var_705: i32;
  var vslice_dummy_var_706: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1024);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p8);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p6);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 2);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} wcn36xx_update_allowed_rates($p2, $i28);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(18, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i30);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_706 := wcn36xx_smd_config_sta($p5, $p1, $p2);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_705 := printk.ref.ref.ref(.str.193, $p1, $p14);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_sta_remove: ref;

axiom wcn36xx_sta_remove == $sub.ref(0, 403203);

procedure wcn36xx_sta_remove($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_sta_remove($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $p24: ref;
  var $p25: ref;
  var vslice_dummy_var_707: i32;
  var vslice_dummy_var_708: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1024);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_708 := wcn36xx_smd_delete_sta($p5, $i22);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_707 := printk.ref.ref.ref.i32(.str.202, $p1, $p14, $i17);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_ampdu_action: ref;

axiom wcn36xx_ampdu_action == $sub.ref(0, 404235);

procedure wcn36xx_ampdu_action($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i16, $p5: ref, $i6: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_ampdu_action($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i16, $p5: ref, $i6: i8) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i8;
  var $i33: i8;
  var $i34: i32;
  var $i35: i8;
  var $i37: i32;
  var $i38: i16;
  var $i40: i8;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i8;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i16;
  var $i50: i8;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i8;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i16;
  var vslice_dummy_var_709: i32;
  var vslice_dummy_var_710: i32;
  var vslice_dummy_var_711: i32;
  var vslice_dummy_var_712: i32;
  var vslice_dummy_var_713: i32;
  var vslice_dummy_var_714: i32;
  var vslice_dummy_var_715: i32;
  var vslice_dummy_var_716: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "wcn36xx_ampdu_action:arg:action"} boogie_si_record_i32($i2);
    call {:si_unique_call 251} {:cexpr "wcn36xx_ampdu_action:arg:tid"} boogie_si_record_i16($i4);
    call {:si_unique_call 252} {:cexpr "wcn36xx_ampdu_action:arg:buf_size"} boogie_si_record_i8($i6);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1024);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_716 := printk.ref(.str.197);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i50 := get_sta_index($p1, $p16);
    call {:si_unique_call 255} {:cexpr "tmp___2"} boogie_si_record_i8($i50);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i4);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i50);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_710 := wcn36xx_smd_add_ba_session($p9, $p3, $i52, $p5, 1, $i54);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i4);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} ieee80211_stop_tx_ba_cb_irqsafe($p1, $p57, $i59);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb16;

  $bb5:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i4);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} ieee80211_start_tx_ba_cb_irqsafe($p1, $p47, $i49);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i40 := get_sta_index($p1, $p16);
    call {:si_unique_call 259} {:cexpr "tmp___1"} boogie_si_record_i8($i40);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i4);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i40);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_711 := wcn36xx_smd_del_ba($p9, $i42, $i44);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb14;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref(0, 80)), $mul.ref(10, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i4);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i26 := get_sta_index($p1, $p16);
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i8($i26);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i4);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i26);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} vslice_dummy_var_712 := wcn36xx_smd_add_ba_session($p9, $p3, $i28, $p5, 0, $i30);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_713 := wcn36xx_smd_add_ba($p9);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i33 := get_sta_index($p1, $p16);
    call {:si_unique_call 267} {:cexpr "tmp___0"} boogie_si_record_i8($i33);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_714 := wcn36xx_smd_trigger_ba($p9, $i35);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i4);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_715 := ieee80211_start_tx_ba_session($p3, $i38, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i4);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_709 := printk.ref.i32.i32(.str.196, $i2, $i13);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_sta_index: ref;

axiom get_sta_index == $sub.ref(0, 405267);

procedure get_sta_index($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation get_sta_index($p0: ref, $p1: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i8: i32;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i8);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(15, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const wcn36xx_smd_add_ba_session: ref;

axiom wcn36xx_smd_add_ba_session == $sub.ref(0, 406299);

procedure wcn36xx_smd_add_ba_session($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i8, $i5: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_add_ba_session($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i8, $i5: i8) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i16;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i32;
  var $i55: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i1;
  var $i57: i32;
  var $p65: ref;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var vslice_dummy_var_717: i32;
  var vslice_dummy_var_718: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p6 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 272} {:cexpr "wcn36xx_smd_add_ba_session:arg:tid"} boogie_si_record_i16($i2);
    call {:si_unique_call 273} {:cexpr "wcn36xx_smd_add_ba_session:arg:direction"} boogie_si_record_i8($i4);
    call {:si_unique_call 274} {:cexpr "wcn36xx_smd_add_ba_session:arg:sta_index"} boogie_si_record_i8($i5);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} mutex_lock_nested($p7, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 276} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p8, 0, 26, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 57);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 26);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i5);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i15);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64(6, 63);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(10, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 278} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p23, $p25, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 16);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i16.i8($i2);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(17, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(18, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 64);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(22, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p3);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(26, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i4);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 279} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p38, 0, $i42, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i64(26, 63);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p6);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 281} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p48, $p49, 26, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i54 := wcn36xx_smd_send_and_wait($p0, $i53);
    call {:si_unique_call 283} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i62 := wcn36xx_smd_rsp_status_check($p59, $i61);
    call {:si_unique_call 287} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i57 := $i62;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} mutex_unlock($p65);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_718 := printk.ref.i32(.str.107, $i62);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i57 := $i62;
    goto $bb12;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_717 := printk.ref(.str.106);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i57 := $i54;
    goto $bb12;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p6);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 280} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p45, $p46, 26, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p3);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i34);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(10, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 277} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p19, $p21, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_add_ba: ref;

axiom wcn36xx_smd_add_ba == $sub.ref(0, 407331);

procedure wcn36xx_smd_add_ba($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_add_ba($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $i32: i32;
  var $p40: ref;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var vslice_dummy_var_719: i32;
  var vslice_dummy_var_720: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} mutex_lock_nested($p2, 0);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 291} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p3, 0, 10, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 38);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 10);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 64);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 292} cmdloc_dummy_var_49 := $memset.i8(cmdloc_dummy_var_48, $p13, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(10, 63);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 294} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p23, $p24, 10, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i29 := wcn36xx_smd_send_and_wait($p0, $i28);
    call {:si_unique_call 296} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i37 := wcn36xx_smd_rsp_status_check($p34, $i36);
    call {:si_unique_call 300} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} mutex_unlock($p40);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_720 := printk.ref.i32(.str.109, $i37);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb6;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_719 := printk.ref(.str.108);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 293} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p20, $p21, 10, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_trigger_ba: ref;

axiom wcn36xx_smd_trigger_ba == $sub.ref(0, 408363);

procedure wcn36xx_smd_trigger_ba($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_trigger_ba($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $i51: i1;
  var $i45: i32;
  var $p53: ref;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var vslice_dummy_var_721: i32;
  var vslice_dummy_var_722: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 303} {:cexpr "wcn36xx_smd_trigger_ba:arg:sta_index"} boogie_si_record_i8($i1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} mutex_lock_nested($p3, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 305} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p4, 0, 11, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 59);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 11);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 1);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 2);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 306} cmdloc_dummy_var_59 := $memset.i8(cmdloc_dummy_var_58, $p20, 0, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64(11, 63);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 308} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p30, $p31, 11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(11, 2)), $mul.ref(0, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref(11, 2)), $mul.ref(1, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i42 := wcn36xx_smd_send_and_wait($p0, $i41);
    call {:si_unique_call 310} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i50 := wcn36xx_smd_rsp_status_check($p47, $i49);
    call {:si_unique_call 314} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} mutex_unlock($p53);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb8:
    assume $i51 == 1;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_722 := printk.ref.i32(.str.113, $i50);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb6;

  $bb4:
    assume $i43 == 1;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_721 := printk.ref(.str.112);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 307} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p27, $p28, 11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_start_tx_ba_session: ref;

axiom ieee80211_start_tx_ba_session == $sub.ref(0, 409395);

procedure ieee80211_start_tx_ba_session($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_start_tx_ba_session($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 316} {:cexpr "ieee80211_start_tx_ba_session:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 317} {:cexpr "ieee80211_start_tx_ba_session:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wcn36xx_smd_del_ba: ref;

axiom wcn36xx_smd_del_ba == $sub.ref(0, 410427);

procedure wcn36xx_smd_del_ba($p0: ref, $i1: i16, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_del_ba($p0: ref, $i1: i16, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i1;
  var $i37: i32;
  var $p45: ref;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var vslice_dummy_var_723: i32;
  var vslice_dummy_var_724: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 321} {:cexpr "wcn36xx_smd_del_ba:arg:tid"} boogie_si_record_i16($i1);
    call {:si_unique_call 322} {:cexpr "wcn36xx_smd_del_ba:arg:sta_index"} boogie_si_record_i8($i2);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} mutex_lock_nested($p4, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 324} cmdloc_dummy_var_67 := $memset.i8(cmdloc_dummy_var_66, $p5, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 40);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 12);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i16($i2);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i16.i8($i1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 325} cmdloc_dummy_var_69 := $memset.i8(cmdloc_dummy_var_68, $p18, 0, $i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64(12, 63);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 327} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p28, $p29, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i34 := wcn36xx_smd_send_and_wait($p0, $i33);
    call {:si_unique_call 329} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i42 := wcn36xx_smd_rsp_status_check($p39, $i41);
    call {:si_unique_call 333} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} mutex_unlock($p45);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_724 := printk.ref.i32(.str.111, $i42);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb6;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_723 := printk.ref(.str.110);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 326} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p25, $p26, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_start_tx_ba_cb_irqsafe: ref;

axiom ieee80211_start_tx_ba_cb_irqsafe == $sub.ref(0, 411459);

procedure ieee80211_start_tx_ba_cb_irqsafe($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;



implementation ieee80211_start_tx_ba_cb_irqsafe($p0: ref, $p1: ref, $i2: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "ieee80211_start_tx_ba_cb_irqsafe:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_stop_tx_ba_cb_irqsafe: ref;

axiom ieee80211_stop_tx_ba_cb_irqsafe == $sub.ref(0, 412491);

procedure ieee80211_stop_tx_ba_cb_irqsafe($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;



implementation ieee80211_stop_tx_ba_cb_irqsafe($p0: ref, $p1: ref, $i2: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "ieee80211_stop_tx_ba_cb_irqsafe:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 413523);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 414555);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const wcn36xx_smd_send_and_wait: ref;

axiom wcn36xx_smd_send_and_wait == $sub.ref(0, 415587);

procedure wcn36xx_smd_send_and_wait($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_send_and_wait($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $i29: i32;
  var $i18: i32;
  var vslice_dummy_var_725: i32;
  var vslice_dummy_var_726: i32;
  var vslice_dummy_var_727: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "wcn36xx_smd_send_and_wait:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 8);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(408, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} init_completion($p7);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, jiffies);
    call {:si_unique_call 341} {:cexpr "start"} boogie_si_record_i64($i8);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 342} $i15 := devirtbounce.1($p12, $p14, $i1);
    call {:si_unique_call 343} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i19 := msecs_to_jiffies(500);
    call {:si_unique_call 346} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(408, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i21 := wait_for_completion_timeout($p20, $i19);
    call {:si_unique_call 348} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $M.1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 4);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, jiffies);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64($i27, $i8);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i29 := jiffies_to_msecs($i28);
    call {:si_unique_call 351} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_727 := printk.ref.i32(.str.233, $i29);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_726 := printk.ref.i32(.str.232, 500);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 62);
    goto $bb6;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_725 := printk.ref(.str.231);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} print_hex_dump(.str.6, .str.230, 2, 32, 1, $p6, $i1, 0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_rsp_status_check: ref;

axiom wcn36xx_smd_rsp_status_check == $sub.ref(0, 416619);

procedure wcn36xx_smd_rsp_status_check($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation wcn36xx_smd_rsp_status_check($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "wcn36xx_smd_rsp_status_check:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i2 := $ule.i64($i1, 11);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 5);
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 417651);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    return;
}



const print_hex_dump: ref;

axiom print_hex_dump == $sub.ref(0, 418683);

procedure print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1);
  free requires assertsPassed;



implementation print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "print_hex_dump:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 355} {:cexpr "print_hex_dump:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 356} {:cexpr "print_hex_dump:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 357} {:cexpr "print_hex_dump:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 358} {:cexpr "print_hex_dump:arg:arg7"} boogie_si_record_i1($i7);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 419715);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __init_waitqueue_head($p3, .str.234, $p1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 420747);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 363} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 421779);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 364} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 365} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 366} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 422811);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 368} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 369} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 423843);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_delete_sta: ref;

axiom wcn36xx_smd_delete_sta == $sub.ref(0, 424875);

procedure wcn36xx_smd_delete_sta($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_delete_sta($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $i39: i32;
  var $p47: ref;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var vslice_dummy_var_728: i32;
  var vslice_dummy_var_729: i32;
  var vslice_dummy_var_730: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 371} {:cexpr "wcn36xx_smd_delete_sta:arg:sta_index"} boogie_si_record_i8($i1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} mutex_lock_nested($p3, 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    call {:si_unique_call 373} cmdloc_dummy_var_77 := $memset.i8(cmdloc_dummy_var_76, $p4, 0, 9, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_77;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 14);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 9);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 374} cmdloc_dummy_var_79 := $memset.i8(cmdloc_dummy_var_78, $p13, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(9, 63);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 376} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p23, $p24, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 256);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i36 := wcn36xx_smd_send_and_wait($p0, $i35);
    call {:si_unique_call 379} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i44 := wcn36xx_smd_rsp_status_check($p41, $i43);
    call {:si_unique_call 383} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i39 := $i44;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} mutex_unlock($p47);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_730 := printk.ref.i32(.str.58, $i44);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i39 := $i44;
    goto $bb9;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_729 := printk.ref(.str.57);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_728 := printk.ref.i32(.str.56, $i30);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 375} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p20, $p21, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_update_allowed_rates: ref;

axiom wcn36xx_update_allowed_rates == $sub.ref(0, 425907);

procedure wcn36xx_update_allowed_rates($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_update_allowed_rates($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i53: i16;
  var $p54: ref;
  var $i55: i32;
  var $i52: i32;
  var $i56: i32;
  var $i57: i1;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $i58: i32;
  var $i62: i32;
  var $i63: i1;
  var $i65: i16;
  var $p66: ref;
  var $i67: i32;
  var $i64: i32;
  var $i68: i32;
  var $i69: i1;
  var $i71: i16;
  var $p72: ref;
  var $i73: i32;
  var $i70: i32;
  var $i74: i32;
  var $i75: i1;
  var $i77: i16;
  var $p78: ref;
  var $i79: i32;
  var $i76: i32;
  var $i80: i32;
  var $i81: i1;
  var $i83: i16;
  var $p84: ref;
  var $i85: i32;
  var $i82: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i16;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i93: i16;
  var $p94: ref;
  var $i95: i32;
  var $i92: i32;
  var $i96: i32;
  var $i97: i1;
  var $i99: i16;
  var $p100: ref;
  var $i101: i32;
  var $i98: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i16;
  var $p105: ref;
  var $i106: i32;
  var $i22: i32;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "wcn36xx_update_allowed_rates:arg:band"} boogie_si_record_i32($i1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref($i4, 4));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 386} {:cexpr "rates"} boogie_si_record_i32($i7);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 387} cmdloc_dummy_var_87 := $memset.i8(cmdloc_dummy_var_86, $p9, 0, 58, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 6);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(20, 1)), $mul.ref(12, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i21, 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i21;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i30, 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i30;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i52, 1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i52;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i58, 1);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i58;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i64, 1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i64;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i70, 1);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $i70;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i76, 1);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i76;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i82, 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i64(10, 63);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(20, 1)), $mul.ref(40, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 391} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p45, $p49, 10, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(20, 1)), $mul.ref(40, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_88 := $M.0;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 390} cmdloc_dummy_var_90 := $memcpy.i8(cmdloc_dummy_var_88, cmdloc_dummy_var_89, $p38, $p42, 10, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb48:
    assume $i87 == 1;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p25, $mul.ref(7, 2));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i88);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i81 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p25, $mul.ref(6, 2));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $i83);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i85 := $lshr.i32($i76, 1);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i82 := $i85;
    goto $bb46;

  $bb40:
    assume $i75 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p25, $mul.ref(5, 2));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, $i77);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i79 := $lshr.i32($i70, 1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i76 := $i79;
    goto $bb42;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p25, $mul.ref(4, 2));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i71);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i64, 1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i70 := $i73;
    goto $bb38;

  $bb32:
    assume $i63 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p25, $mul.ref(3, 2));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, $i65);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i67 := $lshr.i32($i58, 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i64 := $i67;
    goto $bb34;

  $bb28:
    assume $i57 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p25, $mul.ref(2, 2));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $i59);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i61 := $lshr.i32($i52, 1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i58 := $i61;
    goto $bb30;

  $bb24:
    assume $i51 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p25, $mul.ref(1, 2));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i30, 1);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i52 := $i55;
    goto $bb26;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i28);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i29 := $lshr.i32($i21, 1);
    call {:si_unique_call 389} {:cexpr "rates"} boogie_si_record_i32($i29);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb15;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i7, 1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i20, 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $i20;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i92, 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $i92;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i98, 1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i98;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb10;

  $bb59:
    assume $i103 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p14, $mul.ref(3, 2));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i104);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i106 := $lshr.i32($i98, 1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i22 := $i106;
    goto $bb61;

  $bb55:
    assume $i97 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p14, $mul.ref(2, 2));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i99);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i101 := $lshr.i32($i92, 1);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i98 := $i101;
    goto $bb57;

  $bb51:
    assume $i91 == 1;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p14, $mul.ref(1, 2));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, $i93);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i95 := $lshr.i32($i20, 1);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i92 := $i95;
    goto $bb53;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i18);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i7, 1);
    call {:si_unique_call 388} {:cexpr "rates"} boogie_si_record_i32($i19);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;
}



const wcn36xx_smd_config_sta: ref;

axiom wcn36xx_smd_config_sta == $sub.ref(0, 426939);

procedure wcn36xx_smd_config_sta($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_config_sta($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $i60: i32;
  var $i19: i32;
  var $i61: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i1;
  var $i63: i32;
  var $p71: ref;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var vslice_dummy_var_731: i32;
  var vslice_dummy_var_732: i32;
  var vslice_dummy_var_733: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p3 := $alloc($mul.ref(120, $zext.i32.i64(1)));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} mutex_lock_nested($p4, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    call {:si_unique_call 394} cmdloc_dummy_var_95 := $memset.i8(cmdloc_dummy_var_94, $p5, 0, 113, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_95;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 12);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 113);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} wcn36xx_smd_set_sta_params($p0, $p1, $p2, $p12);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i13 := wcn36xx_is_fw_version($p0, 1, 2, 2, 24);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_96 := $M.0;
    call {:si_unique_call 400} cmdloc_dummy_var_97 := $memset.i8(cmdloc_dummy_var_96, $p21, 0, $i25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_97;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64(113, 63);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p3);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.0;
    cmdloc_dummy_var_102 := $M.0;
    call {:si_unique_call 402} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p31, $p32, 113, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_103;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 256);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i60 := wcn36xx_smd_send_and_wait($p0, $i59);
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    $i19 := $i60;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i19, 0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i68 := wcn36xx_smd_config_sta_rsp($p0, $p2, $p65, $i67);
    call {:si_unique_call 409} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i63 := $i68;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} mutex_unlock($p71);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $r := $i63;
    return;

  $bb17:
    assume $i69 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_733 := printk.ref.i32(.str.67, $i68);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i63 := $i68;
    goto $bb15;

  $bb13:
    assume $i61 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_732 := printk.ref(.str.66);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i63 := $i19;
    goto $bb15;

  $bb10:
    assume $i35 == 1;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(96, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    $p39 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(107, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(108, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(10, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    $p52 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_731 := printk.ref.i32.i32.i32.ref.i32.ref.i32(.str.65, $i38, $i41, $i44, $p46, $i49, $p51, $i54);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.0;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 401} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p28, $p29, 113, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i18 := wcn36xx_smd_config_sta_v1($p0, $p3);
    call {:si_unique_call 399} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const wcn36xx_smd_set_sta_params: ref;

axiom wcn36xx_smd_set_sta_params == $sub.ref(0, 427971);

procedure wcn36xx_smd_set_sta_params($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_set_sta_params($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i1;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $p103: ref;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 3);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 7);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(107, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i23);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i64(6, 63);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.0;
    cmdloc_dummy_var_114 := $M.0;
    call {:si_unique_call 414} cmdloc_dummy_var_115 := $memcpy.i8(cmdloc_dummy_var_113, cmdloc_dummy_var_114, $p43, $p45, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_115;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(92, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 16);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(9, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i56);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(21, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(97, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(105, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(108, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i65);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(109, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p2);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} wcn36xx_set_default_rates($p113);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} wcn36xx_smd_set_sta_default_ht_params($p3);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i69 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i84 := $ugt.i64(6, 63);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i84 == 1);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_125 := $M.0;
    cmdloc_dummy_var_126 := $M.0;
    call {:si_unique_call 421} cmdloc_dummy_var_127 := $memcpy.i8(cmdloc_dummy_var_125, cmdloc_dummy_var_126, $p90, $p92, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_127;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i8($i95);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(18, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $i96);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(62, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(98, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $i99);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p71, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, $i102);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} wcn36xx_smd_set_sta_ht_params($p2, $p3);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i104 := $ugt.i64(58, 63);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i104 == 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p71, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_131 := $M.0;
    cmdloc_dummy_var_132 := $M.0;
    call {:si_unique_call 423} cmdloc_dummy_var_133 := $memcpy.i8(cmdloc_dummy_var_131, cmdloc_dummy_var_132, $p110, $p112, 58, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_133;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i104 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p71, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_128 := $M.0;
    cmdloc_dummy_var_129 := $M.0;
    call {:si_unique_call 422} cmdloc_dummy_var_130 := $memcpy.i8(cmdloc_dummy_var_128, cmdloc_dummy_var_129, $p106, $p108, 58, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_130;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i84 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_122 := $M.0;
    cmdloc_dummy_var_123 := $M.0;
    call {:si_unique_call 420} cmdloc_dummy_var_124 := $memcpy.i8(cmdloc_dummy_var_122, cmdloc_dummy_var_123, $p86, $p88, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_124;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i64(6, 63);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.0;
    cmdloc_dummy_var_120 := $M.0;
    call {:si_unique_call 418} cmdloc_dummy_var_121 := $memcpy.i8(cmdloc_dummy_var_119, cmdloc_dummy_var_120, $p81, $p83, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_121;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i75 == 1;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_116 := $M.0;
    cmdloc_dummy_var_117 := $M.0;
    call {:si_unique_call 417} cmdloc_dummy_var_118 := $memcpy.i8(cmdloc_dummy_var_116, cmdloc_dummy_var_117, $p77, $p79, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_118;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 413} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p39, $p41, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i64(6, 63);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 412} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p34, $p36, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.0;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 411} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p30, $p32, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(107, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $sub.i8(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const wcn36xx_is_fw_version: ref;

axiom wcn36xx_is_fw_version == $sub.ref(0, 429003);

procedure wcn36xx_is_fw_version($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i1);
  free requires assertsPassed;



implementation wcn36xx_is_fw_version($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i1)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "wcn36xx_is_fw_version:arg:major"} boogie_si_record_i8($i1);
    call {:si_unique_call 425} {:cexpr "wcn36xx_is_fw_version:arg:minor"} boogie_si_record_i8($i2);
    call {:si_unique_call 426} {:cexpr "wcn36xx_is_fw_version:arg:version"} boogie_si_record_i8($i3);
    call {:si_unique_call 427} {:cexpr "wcn36xx_is_fw_version:arg:revision"} boogie_si_record_i8($i4);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(43, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, $i8);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(42, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, $i14);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(41, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i3);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, $i19);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(40, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i4);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, $i24);
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb3;
}



const wcn36xx_smd_config_sta_v1: ref;

axiom wcn36xx_smd_config_sta_v1 == $sub.ref(0, 430035);

procedure wcn36xx_smd_config_sta_v1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_config_sta_v1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i32;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;
  var vslice_dummy_var_734: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p2 := $alloc($mul.ref(120, $zext.i32.i64(1)));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_134 := $M.0;
    call {:si_unique_call 429} cmdloc_dummy_var_135 := $memset.i8(cmdloc_dummy_var_134, $p4, 0, 114, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_135;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 12);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 114);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} wcn36xx_smd_convert_sta_to_v1($p0, $p11, $p12);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_136 := $M.0;
    call {:si_unique_call 431} cmdloc_dummy_var_137 := $memset.i8(cmdloc_dummy_var_136, $p14, 0, $i18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_137;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64(114, 63);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_141 := $M.0;
    cmdloc_dummy_var_142 := $M.0;
    call {:si_unique_call 433} cmdloc_dummy_var_143 := $memcpy.i8(cmdloc_dummy_var_141, cmdloc_dummy_var_142, $p24, $p25, 114, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_143;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 256);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i53 := wcn36xx_smd_send_and_wait($p0, $i52);
    call {:si_unique_call 436} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb4:
    assume $i28 == 1;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(47, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(48, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(10, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_734 := printk.ref.i32.i32.i32.ref.i32.ref.i32(.str.242, $i31, $i34, $i37, $p39, $i42, $p44, $i47);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_138 := $M.0;
    cmdloc_dummy_var_139 := $M.0;
    call {:si_unique_call 432} cmdloc_dummy_var_140 := $memcpy.i8(cmdloc_dummy_var_138, cmdloc_dummy_var_139, $p21, $p22, 114, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_140;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_config_sta_rsp: ref;

axiom wcn36xx_smd_config_sta_rsp == $sub.ref(0, 431067);

procedure wcn36xx_smd_config_sta_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_config_sta_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i7: i32;
  var vslice_dummy_var_735: i32;
  var vslice_dummy_var_736: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} {:cexpr "wcn36xx_smd_config_sta_rsp:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i3, 20);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p16 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    $p19 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(13, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    $p22 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(9, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(14, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 256);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(9, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    $p39 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_736 := printk.ref.i32.i32.i32.i32.i32(.str.244, $i29, $i32, $i35, $i38, $i41);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_735 := printk.ref.i32(.str.243, $i14);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const wcn36xx_smd_convert_sta_to_v1: ref;

axiom wcn36xx_smd_convert_sta_to_v1 == $sub.ref(0, 432099);

procedure wcn36xx_smd_convert_sta_to_v1($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_convert_sta_to_v1($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $p44: ref;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $p56: ref;
  var cmdloc_dummy_var_144: [ref]i8;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;
  var cmdloc_dummy_var_149: [ref]i8;
  var cmdloc_dummy_var_150: [ref]i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;
  var cmdloc_dummy_var_153: [ref]i8;
  var cmdloc_dummy_var_154: [ref]i8;
  var cmdloc_dummy_var_155: [ref]i8;
  var cmdloc_dummy_var_156: [ref]i8;
  var cmdloc_dummy_var_157: [ref]i8;
  var cmdloc_dummy_var_158: [ref]i8;
  var cmdloc_dummy_var_159: [ref]i8;
  var cmdloc_dummy_var_160: [ref]i8;
  var cmdloc_dummy_var_161: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i64(6, 63);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_147 := $M.0;
    cmdloc_dummy_var_148 := $M.0;
    call {:si_unique_call 441} cmdloc_dummy_var_149 := $memcpy.i8(cmdloc_dummy_var_147, cmdloc_dummy_var_148, $p9, $p11, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_149;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64(6, 63);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_153 := $M.0;
    cmdloc_dummy_var_154 := $M.0;
    call {:si_unique_call 443} cmdloc_dummy_var_155 := $memcpy.i8(cmdloc_dummy_var_153, cmdloc_dummy_var_154, $p18, $p20, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_155;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(6, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(19, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(19, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(23, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(23, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i37);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(26, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(26, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(27, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(27, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i64(58, 63);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(52, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_159 := $M.0;
    cmdloc_dummy_var_160 := $M.0;
    call {:si_unique_call 445} cmdloc_dummy_var_161 := $memcpy.i8(cmdloc_dummy_var_159, cmdloc_dummy_var_160, $p51, $p53, 58, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_161;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(107, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(47, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(52, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_156 := $M.0;
    cmdloc_dummy_var_157 := $M.0;
    call {:si_unique_call 444} cmdloc_dummy_var_158 := $memcpy.i8(cmdloc_dummy_var_156, cmdloc_dummy_var_157, $p47, $p49, 58, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_158;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(10, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_150 := $M.0;
    cmdloc_dummy_var_151 := $M.0;
    call {:si_unique_call 442} cmdloc_dummy_var_152 := $memcpy.i8(cmdloc_dummy_var_150, cmdloc_dummy_var_151, $p14, $p16, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_152;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_144 := $M.0;
    cmdloc_dummy_var_145 := $M.0;
    call {:si_unique_call 440} cmdloc_dummy_var_146 := $memcpy.i8(cmdloc_dummy_var_144, cmdloc_dummy_var_145, $p5, $p7, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_146;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_set_sta_ht_params: ref;

axiom wcn36xx_smd_set_sta_ht_params == $sub.ref(0, 433131);

procedure wcn36xx_smd_set_sta_ht_params($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_set_sta_ht_params($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    call {:si_unique_call 446} {:cexpr "caps"} boogie_si_record_i64($i9);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(19, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i16 := is_cap_supported($i9, 2);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i18 := is_cap_supported($i9, 32768);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(22, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(23, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i26);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i28 := is_cap_supported($i9, 2048);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(25, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i30 := is_cap_supported($i9, 32);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(27, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i32 := is_cap_supported($i9, 64);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(26, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i34 := is_cap_supported($i9, 16);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(99, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i36 := is_cap_supported($i9, 1024);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i38 := is_cap_supported($i9, 4096);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_set_default_rates: ref;

axiom wcn36xx_set_default_rates == $sub.ref(0, 434163);

procedure wcn36xx_set_default_rates($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_set_default_rates($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var cmdloc_dummy_var_162: [ref]i8;
  var cmdloc_dummy_var_163: [ref]i8;
  var cmdloc_dummy_var_164: [ref]i8;
  var cmdloc_dummy_var_165: [ref]i8;
  var cmdloc_dummy_var_166: [ref]i8;
  var cmdloc_dummy_var_167: [ref]i8;
  var cmdloc_dummy_var_168: [ref]i8;
  var cmdloc_dummy_var_169: [ref]i8;
  var cmdloc_dummy_var_170: [ref]i8;
  var cmdloc_dummy_var_171: [ref]i8;
  var cmdloc_dummy_var_172: [ref]i8;
  var cmdloc_dummy_var_173: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 2));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, 12);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 2));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, 18);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 2));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 24);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 2));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 36);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 2));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 48);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(5, 2));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 72);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 2));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 96);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(7, 2));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 108);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 130);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 132);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 139);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 150);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 60)), $mul.ref(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 6);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64(8, 63);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 60)), $mul.ref(4, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_165 := $M.0;
    cmdloc_dummy_var_166 := $M.0;
    call {:si_unique_call 458} cmdloc_dummy_var_167 := $memcpy.i8(cmdloc_dummy_var_165, cmdloc_dummy_var_166, $p21, $p22, 8, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_167;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64(16, 63);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 60)), $mul.ref(12, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_171 := $M.0;
    cmdloc_dummy_var_172 := $M.0;
    call {:si_unique_call 460} cmdloc_dummy_var_173 := $memcpy.i8(cmdloc_dummy_var_171, cmdloc_dummy_var_172, $p28, $p29, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_173;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 60)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $sub.i8(0, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 60)), $mul.ref(12, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_168 := $M.0;
    cmdloc_dummy_var_169 := $M.0;
    call {:si_unique_call 459} cmdloc_dummy_var_170 := $memcpy.i8(cmdloc_dummy_var_168, cmdloc_dummy_var_169, $p25, $p26, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_170;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 60)), $mul.ref(4, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_162 := $M.0;
    cmdloc_dummy_var_163 := $M.0;
    call {:si_unique_call 457} cmdloc_dummy_var_164 := $memcpy.i8(cmdloc_dummy_var_162, cmdloc_dummy_var_163, $p18, $p19, 8, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_164;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_set_sta_default_ht_params: ref;

axiom wcn36xx_smd_set_sta_default_ht_params == $sub.ref(0, 435195);

procedure wcn36xx_smd_set_sta_default_ht_params($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_set_sta_default_ht_params($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(19, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(22, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(23, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 3);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 5);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(25, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(27, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(26, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(99, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(106, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    return;
}



const is_cap_supported: ref;

axiom is_cap_supported == $sub.ref(0, 436227);

procedure is_cap_supported($i0: i64, $i1: i64) returns ($r: i8);
  free requires assertsPassed;



implementation is_cap_supported($i0: i64, $i1: i64) returns ($r: i8)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "is_cap_supported:arg:caps"} boogie_si_record_i64($i0);
    call {:si_unique_call 462} {:cexpr "is_cap_supported:arg:flag"} boogie_si_record_i64($i1);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i0, $i1);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const wcn36xx_smd_update_cfg: ref;

axiom wcn36xx_smd_update_cfg == $sub.ref(0, 437259);

procedure wcn36xx_smd_update_cfg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr;



implementation wcn36xx_smd_update_cfg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i34: i64;
  var $i35: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i32;
  var $i55: i1;
  var $i49: i32;
  var $p57: ref;
  var cmdloc_dummy_var_174: [ref]i8;
  var cmdloc_dummy_var_175: [ref]i8;
  var cmdloc_dummy_var_176: [ref]i8;
  var cmdloc_dummy_var_177: [ref]i8;
  var cmdloc_dummy_var_178: [ref]i8;
  var cmdloc_dummy_var_179: [ref]i8;
  var cmdloc_dummy_var_180: [ref]i8;
  var cmdloc_dummy_var_181: [ref]i8;
  var cmdloc_dummy_var_182: [ref]i8;
  var cmdloc_dummy_var_183: [ref]i8;
  var vslice_dummy_var_737: i32;
  var vslice_dummy_var_738: i32;
  var vslice_dummy_var_739: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 465} {:cexpr "wcn36xx_smd_update_cfg:arg:cfg_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 466} {:cexpr "wcn36xx_smd_update_cfg:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} mutex_lock_nested($p5, 0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_174 := $M.0;
    call {:si_unique_call 468} cmdloc_dummy_var_175 := $memset.i8(cmdloc_dummy_var_174, $p6, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_175;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 48);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 12);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_176 := $M.0;
    call {:si_unique_call 469} cmdloc_dummy_var_177 := $memset.i8(cmdloc_dummy_var_176, $p14, 0, $i18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_177;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64(12, 63);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_181 := $M.0;
    cmdloc_dummy_var_182 := $M.0;
    call {:si_unique_call 471} cmdloc_dummy_var_183 := $memcpy.i8(cmdloc_dummy_var_181, cmdloc_dummy_var_182, $p24, $p25, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_183;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p4, $i32);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_737 := put_cfg_tlv_u32($p0, $p4, $i1, $i2);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.3, $p4);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.3, $p4);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 12);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i46 := wcn36xx_smd_send_and_wait($p0, $i45);
    call {:si_unique_call 474} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i54 := wcn36xx_smd_rsp_status_check($p51, $i53);
    call {:si_unique_call 478} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i49 := $i54;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} mutex_unlock($p57);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb8:
    assume $i55 == 1;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_739 := printk.ref.i32(.str.115, $i54);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i49 := $i54;
    goto $bb6;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_738 := printk.ref(.str.114);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_178 := $M.0;
    cmdloc_dummy_var_179 := $M.0;
    call {:si_unique_call 470} cmdloc_dummy_var_180 := $memcpy.i8(cmdloc_dummy_var_178, cmdloc_dummy_var_179, $p21, $p22, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_180;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const put_cfg_tlv_u32: ref;

axiom put_cfg_tlv_u32 == $sub.ref(0, 438291);

procedure put_cfg_tlv_u32($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation put_cfg_tlv_u32($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i8: i32;
  var vslice_dummy_var_740: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} {:cexpr "put_cfg_tlv_u32:arg:id"} boogie_si_record_i32($i2);
    call {:si_unique_call 481} {:cexpr "put_cfg_tlv_u32:arg:value"} boogie_si_record_i32($i3);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.3, $p1);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 12);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i5, 4095);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.3, $p1);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i2);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i14);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 4);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p13);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(1, 4));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i3);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.3, $p1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 12);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p1, $i22);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_740 := printk.ref(.str.248);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const wcn36xx_smd_end_scan: ref;

axiom wcn36xx_smd_end_scan == $sub.ref(0, 439323);

procedure wcn36xx_smd_end_scan($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_end_scan($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $i47: i32;
  var $p55: ref;
  var cmdloc_dummy_var_184: [ref]i8;
  var cmdloc_dummy_var_185: [ref]i8;
  var cmdloc_dummy_var_186: [ref]i8;
  var cmdloc_dummy_var_187: [ref]i8;
  var cmdloc_dummy_var_188: [ref]i8;
  var cmdloc_dummy_var_189: [ref]i8;
  var cmdloc_dummy_var_190: [ref]i8;
  var cmdloc_dummy_var_191: [ref]i8;
  var cmdloc_dummy_var_192: [ref]i8;
  var cmdloc_dummy_var_193: [ref]i8;
  var vslice_dummy_var_741: i32;
  var vslice_dummy_var_742: i32;
  var vslice_dummy_var_743: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} mutex_lock_nested($p2, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_184 := $M.0;
    call {:si_unique_call 485} cmdloc_dummy_var_185 := $memset.i8(cmdloc_dummy_var_184, $p3, 0, 9, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_185;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 8);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 9);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i16.i8($i17);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_186 := $M.0;
    call {:si_unique_call 486} cmdloc_dummy_var_187 := $memset.i8(cmdloc_dummy_var_186, $p21, 0, $i25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_187;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64(9, 63);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_191 := $M.0;
    cmdloc_dummy_var_192 := $M.0;
    call {:si_unique_call 488} cmdloc_dummy_var_193 := $memcpy.i8(cmdloc_dummy_var_191, cmdloc_dummy_var_192, $p31, $p32, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_193;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 256);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i44 := wcn36xx_smd_send_and_wait($p0, $i43);
    call {:si_unique_call 491} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i52 := wcn36xx_smd_rsp_status_check($p49, $i51);
    call {:si_unique_call 495} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i47 := $i52;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} mutex_unlock($p55);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_743 := printk.ref.i32(.str.42, $i52);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i47 := $i52;
    goto $bb9;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_742 := printk.ref(.str.41);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i47 := $i44;
    goto $bb9;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_741 := printk.ref.i32(.str.40, $i38);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_188 := $M.0;
    cmdloc_dummy_var_189 := $M.0;
    call {:si_unique_call 487} cmdloc_dummy_var_190 := $memcpy.i8(cmdloc_dummy_var_188, cmdloc_dummy_var_189, $p28, $p29, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_190;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_finish_scan: ref;

axiom wcn36xx_smd_finish_scan == $sub.ref(0, 440355);

procedure wcn36xx_smd_finish_scan($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_finish_scan($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $i38: i32;
  var $p46: ref;
  var cmdloc_dummy_var_194: [ref]i8;
  var cmdloc_dummy_var_195: [ref]i8;
  var cmdloc_dummy_var_196: [ref]i8;
  var cmdloc_dummy_var_197: [ref]i8;
  var cmdloc_dummy_var_198: [ref]i8;
  var cmdloc_dummy_var_199: [ref]i8;
  var cmdloc_dummy_var_200: [ref]i8;
  var cmdloc_dummy_var_201: [ref]i8;
  var cmdloc_dummy_var_202: [ref]i8;
  var cmdloc_dummy_var_203: [ref]i8;
  var vslice_dummy_var_744: i32;
  var vslice_dummy_var_745: i32;
  var vslice_dummy_var_746: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p2 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    call {:si_unique_call 498} {:cexpr "wcn36xx_smd_finish_scan:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} mutex_lock_nested($p3, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_194 := $M.0;
    call {:si_unique_call 500} cmdloc_dummy_var_195 := $memset.i8(cmdloc_dummy_var_194, $p4, 0, 53, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_195;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 10);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 53);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i1);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_196 := $M.0;
    call {:si_unique_call 501} cmdloc_dummy_var_197 := $memset.i8(cmdloc_dummy_var_196, $p13, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_197;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(53, 63);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_201 := $M.0;
    cmdloc_dummy_var_202 := $M.0;
    call {:si_unique_call 503} cmdloc_dummy_var_203 := $memcpy.i8(cmdloc_dummy_var_201, cmdloc_dummy_var_202, $p23, $p24, 53, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_203;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 256);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i35 := wcn36xx_smd_send_and_wait($p0, $i34);
    call {:si_unique_call 506} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i43 := wcn36xx_smd_rsp_status_check($p40, $i42);
    call {:si_unique_call 510} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $i43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} mutex_unlock($p46);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_746 := printk.ref.i32(.str.45, $i43);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i38 := $i43;
    goto $bb9;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_745 := printk.ref(.str.44);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_744 := printk.ref.i32(.str.43, $i29);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_198 := $M.0;
    cmdloc_dummy_var_199 := $M.0;
    call {:si_unique_call 502} cmdloc_dummy_var_200 := $memcpy.i8(cmdloc_dummy_var_198, cmdloc_dummy_var_199, $p20, $p21, 53, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_200;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_init_scan: ref;

axiom wcn36xx_smd_init_scan == $sub.ref(0, 441387);

procedure wcn36xx_smd_init_scan($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_init_scan($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $i38: i32;
  var $p46: ref;
  var cmdloc_dummy_var_204: [ref]i8;
  var cmdloc_dummy_var_205: [ref]i8;
  var cmdloc_dummy_var_206: [ref]i8;
  var cmdloc_dummy_var_207: [ref]i8;
  var cmdloc_dummy_var_208: [ref]i8;
  var cmdloc_dummy_var_209: [ref]i8;
  var cmdloc_dummy_var_210: [ref]i8;
  var cmdloc_dummy_var_211: [ref]i8;
  var cmdloc_dummy_var_212: [ref]i8;
  var cmdloc_dummy_var_213: [ref]i8;
  var vslice_dummy_var_747: i32;
  var vslice_dummy_var_748: i32;
  var vslice_dummy_var_749: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    call {:si_unique_call 513} {:cexpr "wcn36xx_smd_init_scan:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} mutex_lock_nested($p3, 0);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_204 := $M.0;
    call {:si_unique_call 515} cmdloc_dummy_var_205 := $memset.i8(cmdloc_dummy_var_204, $p4, 0, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_205;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 4);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 48);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_206 := $M.0;
    call {:si_unique_call 516} cmdloc_dummy_var_207 := $memset.i8(cmdloc_dummy_var_206, $p13, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_207;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(48, 63);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_211 := $M.0;
    cmdloc_dummy_var_212 := $M.0;
    call {:si_unique_call 518} cmdloc_dummy_var_213 := $memcpy.i8(cmdloc_dummy_var_211, cmdloc_dummy_var_212, $p23, $p24, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_213;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 256);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i35 := wcn36xx_smd_send_and_wait($p0, $i34);
    call {:si_unique_call 521} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i43 := wcn36xx_smd_rsp_status_check($p40, $i42);
    call {:si_unique_call 525} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $i43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} mutex_unlock($p46);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vslice_dummy_var_749 := printk.ref.i32(.str.36, $i43);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i38 := $i43;
    goto $bb9;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_748 := printk.ref(.str.35);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_747 := printk.ref.i32(.str.34, $i29);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_208 := $M.0;
    cmdloc_dummy_var_209 := $M.0;
    call {:si_unique_call 517} cmdloc_dummy_var_210 := $memcpy.i8(cmdloc_dummy_var_208, cmdloc_dummy_var_209, $p20, $p21, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_210;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_start_scan: ref;

axiom wcn36xx_smd_start_scan == $sub.ref(0, 442419);

procedure wcn36xx_smd_start_scan($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_start_scan($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $i47: i32;
  var $p55: ref;
  var cmdloc_dummy_var_214: [ref]i8;
  var cmdloc_dummy_var_215: [ref]i8;
  var cmdloc_dummy_var_216: [ref]i8;
  var cmdloc_dummy_var_217: [ref]i8;
  var cmdloc_dummy_var_218: [ref]i8;
  var cmdloc_dummy_var_219: [ref]i8;
  var cmdloc_dummy_var_220: [ref]i8;
  var cmdloc_dummy_var_221: [ref]i8;
  var cmdloc_dummy_var_222: [ref]i8;
  var cmdloc_dummy_var_223: [ref]i8;
  var vslice_dummy_var_750: i32;
  var vslice_dummy_var_751: i32;
  var vslice_dummy_var_752: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} mutex_lock_nested($p2, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_214 := $M.0;
    call {:si_unique_call 529} cmdloc_dummy_var_215 := $memset.i8(cmdloc_dummy_var_214, $p3, 0, 9, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_215;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 6);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 9);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i16.i8($i17);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_216 := $M.0;
    call {:si_unique_call 530} cmdloc_dummy_var_217 := $memset.i8(cmdloc_dummy_var_216, $p21, 0, $i25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_217;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64(9, 63);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_221 := $M.0;
    cmdloc_dummy_var_222 := $M.0;
    call {:si_unique_call 532} cmdloc_dummy_var_223 := $memcpy.i8(cmdloc_dummy_var_221, cmdloc_dummy_var_222, $p31, $p32, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_223;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 256);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i44 := wcn36xx_smd_send_and_wait($p0, $i43);
    call {:si_unique_call 535} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i52 := wcn36xx_smd_rsp_status_check($p49, $i51);
    call {:si_unique_call 539} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i47 := $i52;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} mutex_unlock($p55);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_752 := printk.ref.i32(.str.39, $i52);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i47 := $i52;
    goto $bb9;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_751 := printk.ref(.str.38);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i47 := $i44;
    goto $bb9;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_750 := printk.ref.i32(.str.37, $i38);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_218 := $M.0;
    cmdloc_dummy_var_219 := $M.0;
    call {:si_unique_call 531} cmdloc_dummy_var_220 := $memcpy.i8(cmdloc_dummy_var_218, cmdloc_dummy_var_219, $p28, $p29, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_220;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_config_bss: ref;

axiom wcn36xx_smd_config_bss == $sub.ref(0, 443451);

procedure wcn36xx_smd_config_bss($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_config_bss($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i1) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i16;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i16;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i1;
  var $i104: i8;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i1;
  var $i111: i8;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $i118: i8;
  var $p120: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $i136: i8;
  var $i137: i1;
  var $i138: i8;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i8;
  var $p154: ref;
  var $i155: i1;
  var $i156: i8;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $i168: i8;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $p187: ref;
  var $i188: i16;
  var $i189: i32;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $p193: ref;
  var $p194: ref;
  var $i196: i1;
  var $i197: i8;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i64;
  var $i220: i32;
  var $i202: i32;
  var $i221: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i32;
  var $i229: i1;
  var $i223: i32;
  var $p231: ref;
  var cmdloc_dummy_var_224: [ref]i8;
  var cmdloc_dummy_var_225: [ref]i8;
  var cmdloc_dummy_var_226: [ref]i8;
  var cmdloc_dummy_var_227: [ref]i8;
  var cmdloc_dummy_var_228: [ref]i8;
  var cmdloc_dummy_var_229: [ref]i8;
  var cmdloc_dummy_var_230: [ref]i8;
  var cmdloc_dummy_var_231: [ref]i8;
  var cmdloc_dummy_var_232: [ref]i8;
  var cmdloc_dummy_var_233: [ref]i8;
  var cmdloc_dummy_var_234: [ref]i8;
  var cmdloc_dummy_var_235: [ref]i8;
  var cmdloc_dummy_var_236: [ref]i8;
  var cmdloc_dummy_var_237: [ref]i8;
  var cmdloc_dummy_var_238: [ref]i8;
  var cmdloc_dummy_var_239: [ref]i8;
  var cmdloc_dummy_var_240: [ref]i8;
  var cmdloc_dummy_var_241: [ref]i8;
  var cmdloc_dummy_var_242: [ref]i8;
  var cmdloc_dummy_var_243: [ref]i8;
  var cmdloc_dummy_var_244: [ref]i8;
  var cmdloc_dummy_var_245: [ref]i8;
  var cmdloc_dummy_var_246: [ref]i8;
  var cmdloc_dummy_var_247: [ref]i8;
  var cmdloc_dummy_var_248: [ref]i8;
  var vslice_dummy_var_753: i64;
  var vslice_dummy_var_754: i32;
  var vslice_dummy_var_755: i32;
  var vslice_dummy_var_756: i32;
  var vslice_dummy_var_757: i32;
  var vslice_dummy_var_758: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p5 := $alloc($mul.ref(504, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 542} {:cexpr "wcn36xx_smd_config_bss:arg:update"} boogie_si_record_i1($i4);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} mutex_lock_nested($p9, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_224 := $M.0;
    call {:si_unique_call 544} cmdloc_dummy_var_225 := $memset.i8(cmdloc_dummy_var_224, $p10, 0, 469, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_225;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 16);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 0);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 469);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1));
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i19 := is_zero_ether_addr($p3);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 546} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 547} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i22);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 549} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i22, 0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_753 := ldv__builtin_expect($i30, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64(6, 63);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_229 := $M.0;
    cmdloc_dummy_var_230 := $M.0;
    call {:si_unique_call 553} cmdloc_dummy_var_231 := $memcpy.i8(cmdloc_dummy_var_229, cmdloc_dummy_var_230, $p36, $p3, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_231;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i64(6, 63);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    $p42 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_235 := $M.0;
    cmdloc_dummy_var_236 := $M.0;
    call {:si_unique_call 555} cmdloc_dummy_var_237 := $memcpy.i8(cmdloc_dummy_var_235, cmdloc_dummy_var_236, $p43, $p45, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_237;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 3);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i54 == 1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 7);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_754 := printk.ref.i32(.str.69, $i67);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 2);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    $p72 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 3);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    $p78 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i77);
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(25, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    $p80 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(26, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 0);
    $p81 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(27, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    $p82 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(31, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, $i85);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    $p89 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $i88);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} wcn36xx_smd_set_bss_ht_params($p1, $p2, $p17);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p91, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i16.i8($i97);
    $p99 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i98);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i103 := conf_is_ht40_minus($p102);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i8($i103);
    call {:si_unique_call 560} {:cexpr "tmp___2"} boogie_si_record_i8($i104);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i105 == 1);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i110 := conf_is_ht40_plus($p109);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i8($i110);
    call {:si_unique_call 562} {:cexpr "tmp___1"} boogie_si_record_i8($i111);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i112 == 1);
    $p114 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(37, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 0);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p115 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(38, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} wcn36xx_smd_set_sta_params($p0, $p1, $p2, $p18);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(33, 1)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    $p120 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i118);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(33, 1)), $mul.ref(0, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i64($i123);
    call {:si_unique_call 564} {:cexpr "__len___1"} boogie_si_record_i64($i124);
    $p126 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(152, 1)), $mul.ref(1, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(33, 1)), $mul.ref(1, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_238 := $M.0;
    cmdloc_dummy_var_239 := $M.0;
    call {:si_unique_call 565} cmdloc_dummy_var_240 := $memcpy.i8(cmdloc_dummy_var_238, cmdloc_dummy_var_239, $p127, $p130, $i124, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_240;
    $p131 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(200, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 0);
    $p132 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(201, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 0);
    $p133 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(209, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(168, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i8.i1($i136);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i8($i137);
    $p139 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(210, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, $i138);
    $p140 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(211, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, 0);
    $p141 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(212, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, 0);
    $p142 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(230, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    $p143 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(493, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    $p144 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(494, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p146, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    $p154 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(495, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p154, $i153);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i8.i1($i6);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i156 := $zext.i1.i8($i155);
    $p157 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(185, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p157, $i156);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i158 := $M.1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 256);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i173 := $M.1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, 256);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i196 := wcn36xx_is_fw_version($p0, 1, 2, 2, 24);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i197 := $zext.i1.i8($i196);
    call {:si_unique_call 569} {:cexpr "tmp___3"} boogie_si_record_i8($i197);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i8.i1($i197);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    $i199 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i200 == 1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.0, $p206);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i208 := $zext.i32.i64($i207);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_241 := $M.0;
    call {:si_unique_call 572} cmdloc_dummy_var_242 := $memset.i8(cmdloc_dummy_var_241, $p204, 0, $i208, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_242;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i209 := $ugt.i64(469, 63);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i209 == 1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p5);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_246 := $M.0;
    cmdloc_dummy_var_247 := $M.0;
    call {:si_unique_call 574} cmdloc_dummy_var_248 := $memcpy.i8(cmdloc_dummy_var_246, cmdloc_dummy_var_247, $p214, $p215, 469, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_248;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i219 := $zext.i32.i64($i218);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i220 := wcn36xx_smd_send_and_wait($p0, $i219);
    call {:si_unique_call 576} {:cexpr "ret"} boogie_si_record_i32($i220);
    assume {:verifier.code 0} true;
    $i202 := $i220;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i202, 0);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i227 := $load.i64($M.0, $p226);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i228 := wcn36xx_smd_config_bss_rsp($p0, $p1, $p225, $i227);
    call {:si_unique_call 580} {:cexpr "ret"} boogie_si_record_i32($i228);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i223 := $i228;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} mutex_unlock($p231);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $r := $i223;
    return;

  $bb50:
    assume $i229 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_758 := printk.ref.i32(.str.73, $i228);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i223 := $i228;
    goto $bb48;

  $bb46:
    assume $i221 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_757 := printk.ref(.str.72);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i223 := $i202;
    goto $bb48;

  $bb43:
    assume $i209 == 1;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p5);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_243 := $M.0;
    cmdloc_dummy_var_244 := $M.0;
    call {:si_unique_call 573} cmdloc_dummy_var_245 := $memcpy.i8(cmdloc_dummy_var_243, cmdloc_dummy_var_244, $p211, $p212, 469, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_245;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i200 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i201 := wcn36xx_smd_config_bss_v1($p0, $p5);
    call {:si_unique_call 571} {:cexpr "ret"} boogie_si_record_i32($i201);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i202 := $i201;
    goto $bb42;

  $bb37:
    assume $i198 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i199 := 0;
    goto $bb39;

  $bb34:
    assume $i175 == 1;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    $p178 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    $p181 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(107, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p181);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    $p184 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(108, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    $p187 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(6, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.0, $p187);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    $p190 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    $p193 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1)), $mul.ref(10, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_756 := printk.ref.ref.i32.i32.i32.i32.i32.ref(.str.71, $p177, $i180, $i183, $i186, $i189, $i192, $p194);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i160 == 1;
    $p161 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    $p163 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    $p165 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    $p167 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    $p170 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_755 := printk.ref.ref.ref.i32.i32.i32(.str.70, $p162, $p164, $i166, $i169, $i171);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i112 == 1;
    $p113 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(37, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i105 == 1;
    $p106 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(37, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 3);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} wcn36xx_smd_set_bss_nw_type($p0, $p2, $p17);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i63 == 1;
    $p64 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 2);
    $p65 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb14;

  $bb14:
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 1);
    $p59 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 0);
    $p60 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(492, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb14;

  $bb10:
    assume $i48 == 1;
    $p49 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    $p50 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 1);
    $p51 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(492, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i37 == 1;
    $p38 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_232 := $M.0;
    cmdloc_dummy_var_233 := $M.0;
    call {:si_unique_call 554} cmdloc_dummy_var_234 := $memcpy.i8(cmdloc_dummy_var_232, cmdloc_dummy_var_233, $p39, $p41, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_234;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_226 := $M.0;
    cmdloc_dummy_var_227 := $M.0;
    call {:si_unique_call 552} cmdloc_dummy_var_228 := $memcpy.i8(cmdloc_dummy_var_226, cmdloc_dummy_var_227, $p34, $p3, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_228;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} warn_slowpath_null(.str.68, 1224);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_set_stakey: ref;

axiom wcn36xx_smd_set_stakey == $sub.ref(0, 444483);

procedure wcn36xx_smd_set_stakey($p0: ref, $i1: i32, $i2: i8, $i3: i8, $p4: ref, $i5: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_set_stakey($p0: ref, $i1: i32, $i2: i8, $i3: i8, $p4: ref, $i5: i8) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i16;
  var $p17: ref;
  var $p19: ref;
  var $p23: ref;
  var $p27: ref;
  var $p31: ref;
  var $p35: ref;
  var $i36: i16;
  var $p40: ref;
  var $i41: i64;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i32;
  var $i67: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $i75: i1;
  var $i69: i32;
  var $p77: ref;
  var cmdloc_dummy_var_249: [ref]i8;
  var cmdloc_dummy_var_250: [ref]i8;
  var cmdloc_dummy_var_251: [ref]i8;
  var cmdloc_dummy_var_252: [ref]i8;
  var cmdloc_dummy_var_253: [ref]i8;
  var cmdloc_dummy_var_254: [ref]i8;
  var cmdloc_dummy_var_255: [ref]i8;
  var cmdloc_dummy_var_256: [ref]i8;
  var cmdloc_dummy_var_257: [ref]i8;
  var cmdloc_dummy_var_258: [ref]i8;
  var cmdloc_dummy_var_259: [ref]i8;
  var cmdloc_dummy_var_260: [ref]i8;
  var cmdloc_dummy_var_261: [ref]i8;
  var vslice_dummy_var_759: i32;
  var vslice_dummy_var_760: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p6 := $alloc($mul.ref(268, $zext.i32.i64(1)));
    call {:si_unique_call 583} {:cexpr "wcn36xx_smd_set_stakey:arg:enc_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 584} {:cexpr "wcn36xx_smd_set_stakey:arg:keyidx"} boogie_si_record_i8($i2);
    call {:si_unique_call 585} {:cexpr "wcn36xx_smd_set_stakey:arg:keylen"} boogie_si_record_i8($i3);
    call {:si_unique_call 586} {:cexpr "wcn36xx_smd_set_stakey:arg:sta_index"} boogie_si_record_i8($i5);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} mutex_lock_nested($p7, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_249 := $M.0;
    call {:si_unique_call 588} cmdloc_dummy_var_250 := $memset.i8(cmdloc_dummy_var_249, $p8, 0, 248, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_250;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 26);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 248);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i5);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i15);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 60)), $mul.ref(0, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i2);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 60)), $mul.ref(4, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 2);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 60)), $mul.ref(24, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i16($i3);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 60)), $mul.ref(26, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $i36);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i3);
    call {:si_unique_call 589} {:cexpr "__len"} boogie_si_record_i64($i41);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 60)), $mul.ref(28, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_251 := $M.0;
    cmdloc_dummy_var_252 := $M.0;
    call {:si_unique_call 590} cmdloc_dummy_var_253 := $memcpy.i8(cmdloc_dummy_var_251, cmdloc_dummy_var_252, $p46, $p4, $i41, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_253;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(8, 1)), $mul.ref(256, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_254 := $M.0;
    call {:si_unique_call 591} cmdloc_dummy_var_255 := $memset.i8(cmdloc_dummy_var_254, $p50, 0, $i54, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_255;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i55 := $ugt.i64(248, 63);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i55 == 1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p6);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_259 := $M.0;
    cmdloc_dummy_var_260 := $M.0;
    call {:si_unique_call 593} cmdloc_dummy_var_261 := $memcpy.i8(cmdloc_dummy_var_259, cmdloc_dummy_var_260, $p60, $p61, 248, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_261;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 268)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i66 := wcn36xx_smd_send_and_wait($p0, $i65);
    call {:si_unique_call 595} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i74 := wcn36xx_smd_rsp_status_check($p71, $i73);
    call {:si_unique_call 599} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i69 := $i74;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} mutex_unlock($p77);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb8:
    assume $i75 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_760 := printk.ref.i32(.str.86, $i74);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i69 := $i74;
    goto $bb6;

  $bb4:
    assume $i67 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_759 := printk.ref(.str.85);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i69 := $i66;
    goto $bb6;

  $bb1:
    assume $i55 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p6);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_256 := $M.0;
    cmdloc_dummy_var_257 := $M.0;
    call {:si_unique_call 592} cmdloc_dummy_var_258 := $memcpy.i8(cmdloc_dummy_var_256, cmdloc_dummy_var_257, $p57, $p58, 248, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_258;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_set_bsskey: ref;

axiom wcn36xx_smd_set_bsskey == $sub.ref(0, 445515);

procedure wcn36xx_smd_set_bsskey($p0: ref, $i1: i32, $i2: i8, $i3: i8, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_set_bsskey($p0: ref, $i1: i32, $i2: i8, $i3: i8, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p22: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i16;
  var $p32: ref;
  var $i33: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i1;
  var $i58: i32;
  var $p66: ref;
  var cmdloc_dummy_var_262: [ref]i8;
  var cmdloc_dummy_var_263: [ref]i8;
  var cmdloc_dummy_var_264: [ref]i8;
  var cmdloc_dummy_var_265: [ref]i8;
  var cmdloc_dummy_var_266: [ref]i8;
  var cmdloc_dummy_var_267: [ref]i8;
  var cmdloc_dummy_var_268: [ref]i8;
  var cmdloc_dummy_var_269: [ref]i8;
  var cmdloc_dummy_var_270: [ref]i8;
  var cmdloc_dummy_var_271: [ref]i8;
  var cmdloc_dummy_var_272: [ref]i8;
  var cmdloc_dummy_var_273: [ref]i8;
  var cmdloc_dummy_var_274: [ref]i8;
  var vslice_dummy_var_761: i32;
  var vslice_dummy_var_762: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p5 := $alloc($mul.ref(264, $zext.i32.i64(1)));
    call {:si_unique_call 602} {:cexpr "wcn36xx_smd_set_bsskey:arg:enc_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 603} {:cexpr "wcn36xx_smd_set_bsskey:arg:keyidx"} boogie_si_record_i8($i2);
    call {:si_unique_call 604} {:cexpr "wcn36xx_smd_set_bsskey:arg:keylen"} boogie_si_record_i8($i3);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} mutex_lock_nested($p6, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_262 := $M.0;
    call {:si_unique_call 606} cmdloc_dummy_var_263 := $memset.i8(cmdloc_dummy_var_262, $p7, 0, 243, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_263;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 24);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 243);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(12, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(20, 1)), $mul.ref(0, 60)), $mul.ref(0, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i2);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(20, 1)), $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(20, 1)), $mul.ref(0, 60)), $mul.ref(4, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(20, 1)), $mul.ref(0, 60)), $mul.ref(24, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i16($i3);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(20, 1)), $mul.ref(0, 60)), $mul.ref(26, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i29);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i3);
    call {:si_unique_call 607} {:cexpr "__len"} boogie_si_record_i64($i33);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(20, 1)), $mul.ref(0, 60)), $mul.ref(28, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_264 := $M.0;
    cmdloc_dummy_var_265 := $M.0;
    call {:si_unique_call 608} cmdloc_dummy_var_266 := $memcpy.i8(cmdloc_dummy_var_264, cmdloc_dummy_var_265, $p37, $p4, $i33, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_266;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_267 := $M.0;
    call {:si_unique_call 609} cmdloc_dummy_var_268 := $memset.i8(cmdloc_dummy_var_267, $p39, 0, $i43, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_268;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64(243, 63);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i44 == 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p5);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_272 := $M.0;
    cmdloc_dummy_var_273 := $M.0;
    call {:si_unique_call 611} cmdloc_dummy_var_274 := $memcpy.i8(cmdloc_dummy_var_272, cmdloc_dummy_var_273, $p49, $p50, 243, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_274;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i55 := wcn36xx_smd_send_and_wait($p0, $i54);
    call {:si_unique_call 613} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i63 := wcn36xx_smd_rsp_status_check($p60, $i62);
    call {:si_unique_call 617} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i58 := $i63;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} mutex_unlock($p66);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb8:
    assume $i64 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_762 := printk.ref.i32(.str.88, $i63);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i58 := $i63;
    goto $bb6;

  $bb4:
    assume $i56 == 1;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_761 := printk.ref(.str.87);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb6;

  $bb1:
    assume $i44 == 1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p5);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_269 := $M.0;
    cmdloc_dummy_var_270 := $M.0;
    call {:si_unique_call 610} cmdloc_dummy_var_271 := $memcpy.i8(cmdloc_dummy_var_269, cmdloc_dummy_var_270, $p46, $p47, 243, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_271;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_remove_bsskey: ref;

axiom wcn36xx_smd_remove_bsskey == $sub.ref(0, 446547);

procedure wcn36xx_smd_remove_bsskey($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_remove_bsskey($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $i35: i32;
  var $p43: ref;
  var cmdloc_dummy_var_275: [ref]i8;
  var cmdloc_dummy_var_276: [ref]i8;
  var cmdloc_dummy_var_277: [ref]i8;
  var cmdloc_dummy_var_278: [ref]i8;
  var cmdloc_dummy_var_279: [ref]i8;
  var cmdloc_dummy_var_280: [ref]i8;
  var cmdloc_dummy_var_281: [ref]i8;
  var cmdloc_dummy_var_282: [ref]i8;
  var cmdloc_dummy_var_283: [ref]i8;
  var cmdloc_dummy_var_284: [ref]i8;
  var vslice_dummy_var_763: i32;
  var vslice_dummy_var_764: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 620} {:cexpr "wcn36xx_smd_remove_bsskey:arg:enc_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 621} {:cexpr "wcn36xx_smd_remove_bsskey:arg:keyidx"} boogie_si_record_i8($i2);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} mutex_lock_nested($p4, 0);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_275 := $M.0;
    call {:si_unique_call 623} cmdloc_dummy_var_276 := $memset.i8(cmdloc_dummy_var_275, $p5, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_276;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 28);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 18);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i2);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_277 := $M.0;
    call {:si_unique_call 624} cmdloc_dummy_var_278 := $memset.i8(cmdloc_dummy_var_277, $p16, 0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_278;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64(18, 63);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_282 := $M.0;
    cmdloc_dummy_var_283 := $M.0;
    call {:si_unique_call 626} cmdloc_dummy_var_284 := $memcpy.i8(cmdloc_dummy_var_282, cmdloc_dummy_var_283, $p26, $p27, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_284;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i32 := wcn36xx_smd_send_and_wait($p0, $i31);
    call {:si_unique_call 628} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i40 := wcn36xx_smd_rsp_status_check($p37, $i39);
    call {:si_unique_call 632} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $i40;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} mutex_unlock($p43);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_764 := printk.ref.i32(.str.92, $i40);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i35 := $i40;
    goto $bb6;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_763 := printk.ref(.str.91);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_279 := $M.0;
    cmdloc_dummy_var_280 := $M.0;
    call {:si_unique_call 625} cmdloc_dummy_var_281 := $memcpy.i8(cmdloc_dummy_var_279, cmdloc_dummy_var_280, $p23, $p24, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_281;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_remove_stakey: ref;

axiom wcn36xx_smd_remove_stakey == $sub.ref(0, 447579);

procedure wcn36xx_smd_remove_stakey($p0: ref, $i1: i32, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_remove_stakey($p0: ref, $i1: i32, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i1;
  var $i37: i32;
  var $p45: ref;
  var cmdloc_dummy_var_285: [ref]i8;
  var cmdloc_dummy_var_286: [ref]i8;
  var cmdloc_dummy_var_287: [ref]i8;
  var cmdloc_dummy_var_288: [ref]i8;
  var cmdloc_dummy_var_289: [ref]i8;
  var cmdloc_dummy_var_290: [ref]i8;
  var cmdloc_dummy_var_291: [ref]i8;
  var cmdloc_dummy_var_292: [ref]i8;
  var cmdloc_dummy_var_293: [ref]i8;
  var cmdloc_dummy_var_294: [ref]i8;
  var vslice_dummy_var_765: i32;
  var vslice_dummy_var_766: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p4 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 635} {:cexpr "wcn36xx_smd_remove_stakey:arg:enc_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 636} {:cexpr "wcn36xx_smd_remove_stakey:arg:keyidx"} boogie_si_record_i8($i2);
    call {:si_unique_call 637} {:cexpr "wcn36xx_smd_remove_stakey:arg:sta_index"} boogie_si_record_i8($i3);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} mutex_lock_nested($p5, 0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_285 := $M.0;
    call {:si_unique_call 639} cmdloc_dummy_var_286 := $memset.i8(cmdloc_dummy_var_285, $p6, 0, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_286;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 30);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 16);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i16($i3);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_287 := $M.0;
    call {:si_unique_call 640} cmdloc_dummy_var_288 := $memset.i8(cmdloc_dummy_var_287, $p18, 0, $i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_288;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64(16, 63);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_292 := $M.0;
    cmdloc_dummy_var_293 := $M.0;
    call {:si_unique_call 642} cmdloc_dummy_var_294 := $memcpy.i8(cmdloc_dummy_var_292, cmdloc_dummy_var_293, $p28, $p29, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_294;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i34 := wcn36xx_smd_send_and_wait($p0, $i33);
    call {:si_unique_call 644} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i42 := wcn36xx_smd_rsp_status_check($p39, $i41);
    call {:si_unique_call 648} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} mutex_unlock($p45);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_766 := printk.ref.i32(.str.90, $i42);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb6;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_765 := printk.ref(.str.89);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_289 := $M.0;
    cmdloc_dummy_var_290 := $M.0;
    call {:si_unique_call 641} cmdloc_dummy_var_291 := $memcpy.i8(cmdloc_dummy_var_289, cmdloc_dummy_var_290, $p25, $p26, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_291;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 448611);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 449643);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 651} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 450675);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_set_bss_nw_type: ref;

axiom wcn36xx_smd_set_bss_nw_type == $sub.ref(0, 451707);

procedure wcn36xx_smd_set_bss_nw_type($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_set_bss_nw_type($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(20, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 4));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 127);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(20, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 2);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(20, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 3);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(20, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_set_bss_ht_params: ref;

axiom wcn36xx_smd_set_bss_ht_params == $sub.ref(0, 452739);

procedure wcn36xx_smd_set_bss_ht_params($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_set_bss_ht_params($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i64($i11);
    call {:si_unique_call 653} {:cexpr "caps"} boogie_si_record_i64($i12);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(199, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i19 := is_cap_supported($i12, 2);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(35, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i21 := is_cap_supported($i12, 32768);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(30, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(68, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(204, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(68, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 4);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(29, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(208, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(28, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const conf_is_ht40_minus: ref;

axiom conf_is_ht40_minus == $sub.ref(0, 453771);

procedure conf_is_ht40_minus($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation conf_is_ht40_minus($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(12, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i8, $i14);
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb3;
}



const conf_is_ht40_plus: ref;

axiom conf_is_ht40_plus == $sub.ref(0, 454803);

procedure conf_is_ht40_plus($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation conf_is_ht40_plus($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(12, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i8, $i14);
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb3;
}



const wcn36xx_smd_config_bss_v1: ref;

axiom wcn36xx_smd_config_bss_v1 == $sub.ref(0, 455835);

procedure wcn36xx_smd_config_bss_v1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_config_bss_v1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $p54: ref;
  var $i55: i8;
  var $p57: ref;
  var $p59: ref;
  var $i60: i8;
  var $p62: ref;
  var $p64: ref;
  var $i65: i8;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $p72: ref;
  var $p74: ref;
  var $i75: i8;
  var $p77: ref;
  var $p79: ref;
  var $i80: i8;
  var $p82: ref;
  var $p84: ref;
  var $i85: i8;
  var $p87: ref;
  var $p89: ref;
  var $i90: i8;
  var $p92: ref;
  var $p94: ref;
  var $i95: i16;
  var $p97: ref;
  var $p99: ref;
  var $i100: i8;
  var $p102: ref;
  var $p104: ref;
  var $i105: i8;
  var $p107: ref;
  var $p109: ref;
  var $i110: i8;
  var $p112: ref;
  var $p114: ref;
  var $i115: i8;
  var $p117: ref;
  var $p119: ref;
  var $i120: i8;
  var $p122: ref;
  var $i123: i1;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $i138: i8;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $i149: i8;
  var $p151: ref;
  var $p153: ref;
  var $i154: i8;
  var $p156: ref;
  var $p158: ref;
  var $i159: i8;
  var $p161: ref;
  var $p163: ref;
  var $i164: i32;
  var $p166: ref;
  var $p168: ref;
  var $i169: i8;
  var $p171: ref;
  var $p173: ref;
  var $i174: i8;
  var $p176: ref;
  var $p178: ref;
  var $i179: i8;
  var $p181: ref;
  var $p183: ref;
  var $i184: i8;
  var $p186: ref;
  var $p188: ref;
  var $i189: i8;
  var $p191: ref;
  var $i192: i1;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i1;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i1;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i1;
  var $p233: ref;
  var $p234: ref;
  var $p236: ref;
  var $p237: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $p243: ref;
  var $p245: ref;
  var $i246: i8;
  var $p248: ref;
  var $i249: i1;
  var $p251: ref;
  var $p252: ref;
  var $p254: ref;
  var $p255: ref;
  var $p257: ref;
  var $p258: ref;
  var $p260: ref;
  var $p261: ref;
  var $p263: ref;
  var $i264: i8;
  var $p266: ref;
  var $p268: ref;
  var $i269: i8;
  var $p271: ref;
  var $p273: ref;
  var $i274: i8;
  var $p276: ref;
  var $p278: ref;
  var $i279: i8;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $i290: i32;
  var $i291: i64;
  var $i292: i1;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $p308: ref;
  var $i309: i8;
  var $i310: i32;
  var $p311: ref;
  var $i312: i32;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $i320: i8;
  var $i321: i32;
  var $p322: ref;
  var $i323: i8;
  var $i324: i32;
  var $p325: ref;
  var $i326: i8;
  var $i327: i32;
  var $p328: ref;
  var $i329: i16;
  var $i330: i32;
  var $p331: ref;
  var $i332: i8;
  var $i333: i32;
  var $p334: ref;
  var $p335: ref;
  var $p338: ref;
  var $i339: i32;
  var $i340: i64;
  var $i341: i32;
  var cmdloc_dummy_var_295: [ref]i8;
  var cmdloc_dummy_var_296: [ref]i8;
  var cmdloc_dummy_var_297: [ref]i8;
  var cmdloc_dummy_var_298: [ref]i8;
  var cmdloc_dummy_var_299: [ref]i8;
  var cmdloc_dummy_var_300: [ref]i8;
  var cmdloc_dummy_var_301: [ref]i8;
  var cmdloc_dummy_var_302: [ref]i8;
  var cmdloc_dummy_var_303: [ref]i8;
  var cmdloc_dummy_var_304: [ref]i8;
  var cmdloc_dummy_var_305: [ref]i8;
  var cmdloc_dummy_var_306: [ref]i8;
  var cmdloc_dummy_var_307: [ref]i8;
  var cmdloc_dummy_var_308: [ref]i8;
  var cmdloc_dummy_var_309: [ref]i8;
  var cmdloc_dummy_var_310: [ref]i8;
  var cmdloc_dummy_var_311: [ref]i8;
  var cmdloc_dummy_var_312: [ref]i8;
  var cmdloc_dummy_var_313: [ref]i8;
  var cmdloc_dummy_var_314: [ref]i8;
  var cmdloc_dummy_var_315: [ref]i8;
  var cmdloc_dummy_var_316: [ref]i8;
  var cmdloc_dummy_var_317: [ref]i8;
  var cmdloc_dummy_var_318: [ref]i8;
  var cmdloc_dummy_var_319: [ref]i8;
  var cmdloc_dummy_var_320: [ref]i8;
  var cmdloc_dummy_var_321: [ref]i8;
  var cmdloc_dummy_var_322: [ref]i8;
  var cmdloc_dummy_var_323: [ref]i8;
  var cmdloc_dummy_var_324: [ref]i8;
  var cmdloc_dummy_var_325: [ref]i8;
  var cmdloc_dummy_var_326: [ref]i8;
  var cmdloc_dummy_var_327: [ref]i8;
  var cmdloc_dummy_var_328: [ref]i8;
  var cmdloc_dummy_var_329: [ref]i8;
  var cmdloc_dummy_var_330: [ref]i8;
  var cmdloc_dummy_var_331: [ref]i8;
  var cmdloc_dummy_var_332: [ref]i8;
  var cmdloc_dummy_var_333: [ref]i8;
  var cmdloc_dummy_var_334: [ref]i8;
  var cmdloc_dummy_var_335: [ref]i8;
  var cmdloc_dummy_var_336: [ref]i8;
  var cmdloc_dummy_var_337: [ref]i8;
  var cmdloc_dummy_var_338: [ref]i8;
  var cmdloc_dummy_var_339: [ref]i8;
  var cmdloc_dummy_var_340: [ref]i8;
  var cmdloc_dummy_var_341: [ref]i8;
  var cmdloc_dummy_var_342: [ref]i8;
  var cmdloc_dummy_var_343: [ref]i8;
  var cmdloc_dummy_var_344: [ref]i8;
  var cmdloc_dummy_var_345: [ref]i8;
  var cmdloc_dummy_var_346: [ref]i8;
  var cmdloc_dummy_var_347: [ref]i8;
  var cmdloc_dummy_var_348: [ref]i8;
  var cmdloc_dummy_var_349: [ref]i8;
  var cmdloc_dummy_var_350: [ref]i8;
  var cmdloc_dummy_var_351: [ref]i8;
  var cmdloc_dummy_var_352: [ref]i8;
  var cmdloc_dummy_var_353: [ref]i8;
  var cmdloc_dummy_var_354: [ref]i8;
  var cmdloc_dummy_var_355: [ref]i8;
  var vslice_dummy_var_767: i32;
  var vslice_dummy_var_768: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p2 := $alloc($mul.ref(504, $zext.i32.i64(1)));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_295 := $M.0;
    call {:si_unique_call 657} cmdloc_dummy_var_296 := $memset.i8(cmdloc_dummy_var_295, $p5, 0, 470, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_296;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 16);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 470);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64(6, 63);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_300 := $M.0;
    cmdloc_dummy_var_301 := $M.0;
    call {:si_unique_call 659} cmdloc_dummy_var_302 := $memcpy.i8(cmdloc_dummy_var_300, cmdloc_dummy_var_301, $p21, $p24, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_302;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64(6, 63);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_306 := $M.0;
    cmdloc_dummy_var_307 := $M.0;
    call {:si_unique_call 661} cmdloc_dummy_var_308 := $memcpy.i8(cmdloc_dummy_var_306, cmdloc_dummy_var_307, $p34, $p37, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_308;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i40);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i45);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i50);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i55);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(25, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(25, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i60);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(26, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(26, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i65);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(27, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(27, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i70);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i75);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(29, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(29, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i80);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i85);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(31, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(31, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i90);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, $i95);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, $i100);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(35, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(35, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i105);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, $i110);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(37, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(37, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, $i115);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(38, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(38, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, $i120);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i123 := $ugt.i64(33, 63);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i123 == 1);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(39, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(152, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_312 := $M.0;
    cmdloc_dummy_var_313 := $M.0;
    call {:si_unique_call 663} cmdloc_dummy_var_314 := $memcpy.i8(cmdloc_dummy_var_312, cmdloc_dummy_var_313, $p132, $p135, 33, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_314;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(185, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(72, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, $i138);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(73, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(186, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p142);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p144);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_315 := $M.0;
    cmdloc_dummy_var_316 := $M.0;
    call {:si_unique_call 664} cmdloc_dummy_var_317 := $memcpy.i8(cmdloc_dummy_var_315, cmdloc_dummy_var_316, $p145, $p146, 13, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_317;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(199, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.0, $p148);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(86, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, $i149);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(200, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(87, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p156, $i154);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(201, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(88, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p161, $i159);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(204, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(92, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i164);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(208, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.0, $p168);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(96, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p171, $i169);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(209, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.0, $p173);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(97, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p176, $i174);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(210, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(98, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p181, $i179);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(211, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(99, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p186, $i184);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(212, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(100, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p191, $i189);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i192 := $ugt.i64(4, 63);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i192 == 1);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(102, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(214, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_321 := $M.0;
    cmdloc_dummy_var_322 := $M.0;
    call {:si_unique_call 666} cmdloc_dummy_var_323 := $memcpy.i8(cmdloc_dummy_var_321, cmdloc_dummy_var_322, $p201, $p204, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_323;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i205 := $ugt.i64(4, 63);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i205 == 1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(106, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(218, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_327 := $M.0;
    cmdloc_dummy_var_328 := $M.0;
    call {:si_unique_call 668} cmdloc_dummy_var_329 := $memcpy.i8(cmdloc_dummy_var_327, cmdloc_dummy_var_328, $p214, $p217, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_329;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i218 := $ugt.i64(4, 63);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i218 == 1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(110, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(222, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_333 := $M.0;
    cmdloc_dummy_var_334 := $M.0;
    call {:si_unique_call 670} cmdloc_dummy_var_335 := $memcpy.i8(cmdloc_dummy_var_333, cmdloc_dummy_var_334, $p227, $p230, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_335;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i231 := $ugt.i64(4, 63);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i231 == 1);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(114, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(226, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_339 := $M.0;
    cmdloc_dummy_var_340 := $M.0;
    call {:si_unique_call 672} cmdloc_dummy_var_341 := $memcpy.i8(cmdloc_dummy_var_339, cmdloc_dummy_var_340, $p240, $p243, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_341;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(230, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.0, $p245);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(118, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p248, $i246);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i249 := $ugt.i64(4, 63);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i249 == 1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(120, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(232, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p260);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_345 := $M.0;
    cmdloc_dummy_var_346 := $M.0;
    call {:si_unique_call 674} cmdloc_dummy_var_347 := $memcpy.i8(cmdloc_dummy_var_345, cmdloc_dummy_var_346, $p258, $p261, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_347;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(492, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.0, $p263);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(380, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p266, $i264);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(493, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.0, $p268);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(381, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p271, $i269);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(494, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(382, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p276, $i274);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(495, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.0, $p278);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(383, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p281, $i279);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} wcn36xx_smd_convert_sta_to_v1($p0, $p283, $p285);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.0, $p289);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i291 := $zext.i32.i64($i290);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_348 := $M.0;
    call {:si_unique_call 676} cmdloc_dummy_var_349 := $memset.i8(cmdloc_dummy_var_348, $p287, 0, $i291, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_349;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i292 := $ugt.i64(470, 63);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i292 == 1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p298 := $bitcast.ref.ref($p2);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_353 := $M.0;
    cmdloc_dummy_var_354 := $M.0;
    call {:si_unique_call 678} cmdloc_dummy_var_355 := $memcpy.i8(cmdloc_dummy_var_353, cmdloc_dummy_var_354, $p297, $p298, 470, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_355;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i299 := $M.1;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i300 := $and.i32($i299, 256);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i314 := $M.1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 256);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i339 := $load.i32($M.0, $p338);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i340 := $zext.i32.i64($i339);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i341 := wcn36xx_smd_send_and_wait($p0, $i340);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i32($i341);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $r := $i341;
    return;

  $bb31:
    assume $i316 == 1;
    $p317 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p318 := $bitcast.ref.ref($p317);
    $p319 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(36, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.0, $p319);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i32($i320);
    $p322 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(47, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.0, $p322);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i32($i323);
    $p325 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(48, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i326 := $load.i8($M.0, $p325);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    $p328 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(6, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i329 := $load.i16($M.0, $p328);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i330 := $zext.i16.i32($i329);
    $p331 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(8, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i332 := $load.i8($M.0, $p331);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i333 := $zext.i8.i32($i332);
    $p334 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(384, 1)), $mul.ref(10, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_768 := printk.ref.ref.i32.i32.i32.i32.i32.ref(.str.71, $p318, $i321, $i324, $i327, $i330, $i333, $p335);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i301 == 1;
    $p302 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    $p304 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    $p306 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    $p308 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.0, $p308);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    $p311 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_767 := printk.ref.ref.ref.i32.i32.i32(.str.245, $p303, $p305, $i307, $i310, $i312);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i292 == 1;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p295 := $bitcast.ref.ref($p2);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_350 := $M.0;
    cmdloc_dummy_var_351 := $M.0;
    call {:si_unique_call 677} cmdloc_dummy_var_352 := $memcpy.i8(cmdloc_dummy_var_350, cmdloc_dummy_var_351, $p294, $p295, 470, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_352;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i249 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(120, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(232, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_342 := $M.0;
    cmdloc_dummy_var_343 := $M.0;
    call {:si_unique_call 673} cmdloc_dummy_var_344 := $memcpy.i8(cmdloc_dummy_var_342, cmdloc_dummy_var_343, $p252, $p255, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_344;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i231 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(114, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p233);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(226, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_336 := $M.0;
    cmdloc_dummy_var_337 := $M.0;
    call {:si_unique_call 671} cmdloc_dummy_var_338 := $memcpy.i8(cmdloc_dummy_var_336, cmdloc_dummy_var_337, $p234, $p237, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_338;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i218 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(110, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(222, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_330 := $M.0;
    cmdloc_dummy_var_331 := $M.0;
    call {:si_unique_call 669} cmdloc_dummy_var_332 := $memcpy.i8(cmdloc_dummy_var_330, cmdloc_dummy_var_331, $p221, $p224, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_332;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i205 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(106, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(218, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_324 := $M.0;
    cmdloc_dummy_var_325 := $M.0;
    call {:si_unique_call 667} cmdloc_dummy_var_326 := $memcpy.i8(cmdloc_dummy_var_324, cmdloc_dummy_var_325, $p208, $p211, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_326;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i192 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(102, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(214, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_318 := $M.0;
    cmdloc_dummy_var_319 := $M.0;
    call {:si_unique_call 665} cmdloc_dummy_var_320 := $memcpy.i8(cmdloc_dummy_var_318, cmdloc_dummy_var_319, $p195, $p198, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_320;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i123 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(39, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(152, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_309 := $M.0;
    cmdloc_dummy_var_310 := $M.0;
    call {:si_unique_call 662} cmdloc_dummy_var_311 := $memcpy.i8(cmdloc_dummy_var_309, cmdloc_dummy_var_310, $p126, $p129, 33, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_311;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_303 := $M.0;
    cmdloc_dummy_var_304 := $M.0;
    call {:si_unique_call 660} cmdloc_dummy_var_305 := $memcpy.i8(cmdloc_dummy_var_303, cmdloc_dummy_var_304, $p28, $p31, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_305;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_297 := $M.0;
    cmdloc_dummy_var_298 := $M.0;
    call {:si_unique_call 658} cmdloc_dummy_var_299 := $memcpy.i8(cmdloc_dummy_var_297, cmdloc_dummy_var_298, $p15, $p18, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_299;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_config_bss_rsp: ref;

axiom wcn36xx_smd_config_bss_rsp == $sub.ref(0, 456867);

procedure wcn36xx_smd_config_bss_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_config_bss_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $i7: i32;
  var vslice_dummy_var_769: i32;
  var vslice_dummy_var_770: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} {:cexpr "wcn36xx_smd_config_bss_rsp:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i3, 28);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 256);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p45 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p62 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(75, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i63);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i51 == 1;
    $p52 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(11, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 80)), $mul.ref(15, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i53);
    $p57 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i58);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    $p24 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(5, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    $p27 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(11, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(13, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(14, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    $p38 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    $p41 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(6, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_770 := printk.ref.i32.i32.i32.i32.i32.i32.ref.i32.i32(.str.247, $i20, $i23, $i26, $i29, $i32, $i35, $p37, $i40, $i43);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_769 := printk.ref.i32(.str.246, $i14);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const wcn36xx_pmc_enter_bmps_state: ref;

axiom wcn36xx_pmc_enter_bmps_state == $sub.ref(0, 457899);

procedure wcn36xx_pmc_enter_bmps_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_pmc_enter_bmps_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var vslice_dummy_var_771: i32;
  var vslice_dummy_var_772: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i4 := wcn36xx_smd_enter_bmps($p0, $p1);
    call {:si_unique_call 687} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_771 := printk.ref(.str.124);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 8192);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(68, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_772 := printk.ref(.str.123);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const wcn36xx_pmc_exit_bmps_state: ref;

axiom wcn36xx_pmc_exit_bmps_state == $sub.ref(0, 458931);

procedure wcn36xx_pmc_exit_bmps_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_pmc_exit_bmps_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p10: ref;
  var $i8: i32;
  var vslice_dummy_var_773: i32;
  var vslice_dummy_var_774: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(68, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_774 := wcn36xx_smd_exit_bmps($p0, $p1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(68, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_773 := printk.ref(.str.125);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const wcn36xx_smd_join: ref;

axiom wcn36xx_smd_join == $sub.ref(0, 459963);

procedure wcn36xx_smd_join($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_join($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i32;
  var $i72: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i32;
  var $i80: i1;
  var $i74: i32;
  var $p82: ref;
  var cmdloc_dummy_var_356: [ref]i8;
  var cmdloc_dummy_var_357: [ref]i8;
  var cmdloc_dummy_var_358: [ref]i8;
  var cmdloc_dummy_var_359: [ref]i8;
  var cmdloc_dummy_var_360: [ref]i8;
  var cmdloc_dummy_var_361: [ref]i8;
  var cmdloc_dummy_var_362: [ref]i8;
  var cmdloc_dummy_var_363: [ref]i8;
  var cmdloc_dummy_var_364: [ref]i8;
  var cmdloc_dummy_var_365: [ref]i8;
  var cmdloc_dummy_var_366: [ref]i8;
  var cmdloc_dummy_var_367: [ref]i8;
  var cmdloc_dummy_var_368: [ref]i8;
  var cmdloc_dummy_var_369: [ref]i8;
  var cmdloc_dummy_var_370: [ref]i8;
  var cmdloc_dummy_var_371: [ref]i8;
  var cmdloc_dummy_var_372: [ref]i8;
  var cmdloc_dummy_var_373: [ref]i8;
  var cmdloc_dummy_var_374: [ref]i8;
  var cmdloc_dummy_var_375: [ref]i8;
  var cmdloc_dummy_var_376: [ref]i8;
  var cmdloc_dummy_var_377: [ref]i8;
  var vslice_dummy_var_775: i32;
  var vslice_dummy_var_776: i32;
  var vslice_dummy_var_777: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p4 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    call {:si_unique_call 693} {:cexpr "wcn36xx_smd_join:arg:ch"} boogie_si_record_i8($i3);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} mutex_lock_nested($p5, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_356 := $M.0;
    call {:si_unique_call 695} cmdloc_dummy_var_357 := $memset.i8(cmdloc_dummy_var_356, $p6, 0, 31, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_357;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 20);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 31);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64(6, 63);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_361 := $M.0;
    cmdloc_dummy_var_362 := $M.0;
    call {:si_unique_call 697} cmdloc_dummy_var_363 := $memcpy.i8(cmdloc_dummy_var_361, cmdloc_dummy_var_362, $p17, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_363;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(6, 63);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(15, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_367 := $M.0;
    cmdloc_dummy_var_368 := $M.0;
    call {:si_unique_call 699} cmdloc_dummy_var_369 := $memcpy.i8(cmdloc_dummy_var_367, cmdloc_dummy_var_368, $p22, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_369;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(14, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i3);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i27 := conf_is_ht40_minus($p26);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 701} {:cexpr "tmp___0"} boogie_si_record_i8($i28);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i34 := conf_is_ht40_plus($p33);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 703} {:cexpr "tmp"} boogie_si_record_i8($i35);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $sub.i8(0, 65));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_370 := $M.0;
    call {:si_unique_call 704} cmdloc_dummy_var_371 := $memset.i8(cmdloc_dummy_var_370, $p42, 0, $i46, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_371;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i64(31, 63);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p4);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_375 := $M.0;
    cmdloc_dummy_var_376 := $M.0;
    call {:si_unique_call 706} cmdloc_dummy_var_377 := $memcpy.i8(cmdloc_dummy_var_375, cmdloc_dummy_var_376, $p52, $p53, 31, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_377;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 256);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i71 := wcn36xx_smd_send_and_wait($p0, $i70);
    call {:si_unique_call 709} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i79 := wcn36xx_smd_join_rsp($p76, $i78);
    call {:si_unique_call 713} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $i79;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} mutex_unlock($p82);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb23:
    assume $i80 == 1;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} vslice_dummy_var_777 := printk.ref.i32(.str.61, $i79);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i74 := $i79;
    goto $bb21;

  $bb19:
    assume $i72 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_776 := printk.ref(.str.60);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i74 := $i71;
    goto $bb21;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(15, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(14, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_775 := printk.ref.ref.ref.i32.i32(.str.59, $p58, $p60, $i63, $i65);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p4);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_372 := $M.0;
    cmdloc_dummy_var_373 := $M.0;
    call {:si_unique_call 705} cmdloc_dummy_var_374 := $memcpy.i8(cmdloc_dummy_var_372, cmdloc_dummy_var_373, $p49, $p50, 31, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_374;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 3);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(15, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_364 := $M.0;
    cmdloc_dummy_var_365 := $M.0;
    call {:si_unique_call 698} cmdloc_dummy_var_366 := $memcpy.i8(cmdloc_dummy_var_364, cmdloc_dummy_var_365, $p20, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_366;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_358 := $M.0;
    cmdloc_dummy_var_359 := $M.0;
    call {:si_unique_call 696} cmdloc_dummy_var_360 := $memcpy.i8(cmdloc_dummy_var_358, cmdloc_dummy_var_359, $p15, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_360;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_delete_bss: ref;

axiom wcn36xx_smd_delete_bss == $sub.ref(0, 460995);

procedure wcn36xx_smd_delete_bss($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_delete_bss($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $i43: i32;
  var $p51: ref;
  var cmdloc_dummy_var_378: [ref]i8;
  var cmdloc_dummy_var_379: [ref]i8;
  var cmdloc_dummy_var_380: [ref]i8;
  var cmdloc_dummy_var_381: [ref]i8;
  var cmdloc_dummy_var_382: [ref]i8;
  var cmdloc_dummy_var_383: [ref]i8;
  var cmdloc_dummy_var_384: [ref]i8;
  var cmdloc_dummy_var_385: [ref]i8;
  var cmdloc_dummy_var_386: [ref]i8;
  var cmdloc_dummy_var_387: [ref]i8;
  var vslice_dummy_var_778: i32;
  var vslice_dummy_var_779: i32;
  var vslice_dummy_var_780: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} mutex_lock_nested($p5, 0);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_378 := $M.0;
    call {:si_unique_call 717} cmdloc_dummy_var_379 := $memset.i8(cmdloc_dummy_var_378, $p6, 0, 9, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_379;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 18);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 9);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_380 := $M.0;
    call {:si_unique_call 718} cmdloc_dummy_var_381 := $memset.i8(cmdloc_dummy_var_380, $p17, 0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_381;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64(9, 63);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_385 := $M.0;
    cmdloc_dummy_var_386 := $M.0;
    call {:si_unique_call 720} cmdloc_dummy_var_387 := $memcpy.i8(cmdloc_dummy_var_385, cmdloc_dummy_var_386, $p27, $p28, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_387;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 256);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i40 := wcn36xx_smd_send_and_wait($p0, $i39);
    call {:si_unique_call 723} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i48 := wcn36xx_smd_rsp_status_check($p45, $i47);
    call {:si_unique_call 727} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} mutex_unlock($p51);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_780 := printk.ref.i32(.str.76, $i48);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb9;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_779 := printk.ref(.str.75);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb9;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_778 := printk.ref.i32(.str.74, $i34);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_382 := $M.0;
    cmdloc_dummy_var_383 := $M.0;
    call {:si_unique_call 719} cmdloc_dummy_var_384 := $memcpy.i8(cmdloc_dummy_var_382, cmdloc_dummy_var_383, $p24, $p25, 9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_384;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 462027);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} __rcu_read_lock();
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 732} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i3 := rcu_is_watching();
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 734} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} lockdep_rcu_suspicious(.str.190, 871, .str.191);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const ieee80211_find_sta: ref;

axiom ieee80211_find_sta == $sub.ref(0, 463059);

procedure ieee80211_find_sta($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_find_sta($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p2 := external_alloc();
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 464091);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 738} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __rcu_read_unlock();
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i3 := rcu_is_watching();
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 740} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} lockdep_rcu_suspicious(.str.190, 892, .str.192);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const wcn36xx_smd_set_link_st: ref;

axiom wcn36xx_smd_set_link_st == $sub.ref(0, 465123);

procedure wcn36xx_smd_set_link_st($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_set_link_st($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $i51: i32;
  var $i52: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $i60: i1;
  var $i54: i32;
  var $p62: ref;
  var cmdloc_dummy_var_388: [ref]i8;
  var cmdloc_dummy_var_389: [ref]i8;
  var cmdloc_dummy_var_390: [ref]i8;
  var cmdloc_dummy_var_391: [ref]i8;
  var cmdloc_dummy_var_392: [ref]i8;
  var cmdloc_dummy_var_393: [ref]i8;
  var cmdloc_dummy_var_394: [ref]i8;
  var cmdloc_dummy_var_395: [ref]i8;
  var cmdloc_dummy_var_396: [ref]i8;
  var cmdloc_dummy_var_397: [ref]i8;
  var cmdloc_dummy_var_398: [ref]i8;
  var cmdloc_dummy_var_399: [ref]i8;
  var cmdloc_dummy_var_400: [ref]i8;
  var cmdloc_dummy_var_401: [ref]i8;
  var cmdloc_dummy_var_402: [ref]i8;
  var cmdloc_dummy_var_403: [ref]i8;
  var cmdloc_dummy_var_404: [ref]i8;
  var cmdloc_dummy_var_405: [ref]i8;
  var cmdloc_dummy_var_406: [ref]i8;
  var cmdloc_dummy_var_407: [ref]i8;
  var cmdloc_dummy_var_408: [ref]i8;
  var cmdloc_dummy_var_409: [ref]i8;
  var vslice_dummy_var_781: i32;
  var vslice_dummy_var_782: i32;
  var vslice_dummy_var_783: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p4 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 745} {:cexpr "wcn36xx_smd_set_link_st:arg:state"} boogie_si_record_i32($i3);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} mutex_lock_nested($p5, 0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_388 := $M.0;
    call {:si_unique_call 747} cmdloc_dummy_var_389 := $memset.i8(cmdloc_dummy_var_388, $p6, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_389;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 44);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 24);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64(6, 63);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_393 := $M.0;
    cmdloc_dummy_var_394 := $M.0;
    call {:si_unique_call 749} cmdloc_dummy_var_395 := $memcpy.i8(cmdloc_dummy_var_393, cmdloc_dummy_var_394, $p17, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_395;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(6, 63);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_399 := $M.0;
    cmdloc_dummy_var_400 := $M.0;
    call {:si_unique_call 751} cmdloc_dummy_var_401 := $memcpy.i8(cmdloc_dummy_var_399, cmdloc_dummy_var_400, $p22, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_401;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i3);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_402 := $M.0;
    call {:si_unique_call 752} cmdloc_dummy_var_403 := $memset.i8(cmdloc_dummy_var_402, $p25, 0, $i29, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_403;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64(24, 63);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_407 := $M.0;
    cmdloc_dummy_var_408 := $M.0;
    call {:si_unique_call 754} cmdloc_dummy_var_409 := $memcpy.i8(cmdloc_dummy_var_407, cmdloc_dummy_var_408, $p35, $p36, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_409;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 256);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i51 := wcn36xx_smd_send_and_wait($p0, $i50);
    call {:si_unique_call 757} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i59 := wcn36xx_smd_rsp_status_check($p56, $i58);
    call {:si_unique_call 761} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i54 := $i59;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} mutex_unlock($p62);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_783 := printk.ref.i32(.str.64, $i59);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i54 := $i59;
    goto $bb15;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_782 := printk.ref(.str.63);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i54 := $i51;
    goto $bb15;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_781 := printk.ref.ref.ref.i32(.str.62, $p41, $p43, $i45);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p4);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_404 := $M.0;
    cmdloc_dummy_var_405 := $M.0;
    call {:si_unique_call 753} cmdloc_dummy_var_406 := $memcpy.i8(cmdloc_dummy_var_404, cmdloc_dummy_var_405, $p32, $p33, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_406;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_396 := $M.0;
    cmdloc_dummy_var_397 := $M.0;
    call {:si_unique_call 750} cmdloc_dummy_var_398 := $memcpy.i8(cmdloc_dummy_var_396, cmdloc_dummy_var_397, $p20, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_398;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_390 := $M.0;
    cmdloc_dummy_var_391 := $M.0;
    call {:si_unique_call 748} cmdloc_dummy_var_392 := $memcpy.i8(cmdloc_dummy_var_390, cmdloc_dummy_var_391, $p15, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_392;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_proberesp_get: ref;

axiom ieee80211_proberesp_get == $sub.ref(0, 466155);

procedure ieee80211_proberesp_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_proberesp_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p2 := external_alloc();
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const wcn36xx_smd_update_proberesp_tmpl: ref;

axiom wcn36xx_smd_update_proberesp_tmpl == $sub.ref(0, 467187);

procedure wcn36xx_smd_update_proberesp_tmpl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_update_proberesp_tmpl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $i71: i1;
  var $i18: i32;
  var $p73: ref;
  var cmdloc_dummy_var_410: [ref]i8;
  var cmdloc_dummy_var_411: [ref]i8;
  var cmdloc_dummy_var_412: [ref]i8;
  var cmdloc_dummy_var_413: [ref]i8;
  var cmdloc_dummy_var_414: [ref]i8;
  var cmdloc_dummy_var_415: [ref]i8;
  var cmdloc_dummy_var_416: [ref]i8;
  var cmdloc_dummy_var_417: [ref]i8;
  var cmdloc_dummy_var_418: [ref]i8;
  var cmdloc_dummy_var_419: [ref]i8;
  var cmdloc_dummy_var_420: [ref]i8;
  var cmdloc_dummy_var_421: [ref]i8;
  var cmdloc_dummy_var_422: [ref]i8;
  var cmdloc_dummy_var_423: [ref]i8;
  var cmdloc_dummy_var_424: [ref]i8;
  var cmdloc_dummy_var_425: [ref]i8;
  var cmdloc_dummy_var_426: [ref]i8;
  var cmdloc_dummy_var_427: [ref]i8;
  var cmdloc_dummy_var_428: [ref]i8;
  var vslice_dummy_var_784: i32;
  var vslice_dummy_var_785: i32;
  var vslice_dummy_var_786: i32;
  var vslice_dummy_var_787: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p3 := $alloc($mul.ref(436, $zext.i32.i64(1)));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} mutex_lock_nested($p4, 0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_410 := $M.0;
    call {:si_unique_call 766} cmdloc_dummy_var_411 := $memset.i8(cmdloc_dummy_var_410, $p5, 0, 436, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_411;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 68);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 436);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 384);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(392, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    call {:si_unique_call 769} {:cexpr "__len"} boogie_si_record_i64($i24);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(8, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_412 := $M.0;
    cmdloc_dummy_var_413 := $M.0;
    call {:si_unique_call 770} cmdloc_dummy_var_414 := $memcpy.i8(cmdloc_dummy_var_412, cmdloc_dummy_var_413, $p26, $p28, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_414;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64(6, 63);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(428, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_418 := $M.0;
    cmdloc_dummy_var_419 := $M.0;
    call {:si_unique_call 772} cmdloc_dummy_var_420 := $memcpy.i8(cmdloc_dummy_var_418, cmdloc_dummy_var_419, $p35, $p37, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_420;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_421 := $M.0;
    call {:si_unique_call 773} cmdloc_dummy_var_422 := $memset.i8(cmdloc_dummy_var_421, $p39, 0, $i43, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_422;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64(436, 63);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_426 := $M.0;
    cmdloc_dummy_var_427 := $M.0;
    call {:si_unique_call 775} cmdloc_dummy_var_428 := $memcpy.i8(cmdloc_dummy_var_426, cmdloc_dummy_var_427, $p49, $p50, 436, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_428;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i51 := $M.1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 256);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i63 := wcn36xx_smd_send_and_wait($p0, $i62);
    call {:si_unique_call 778} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i70 := wcn36xx_smd_rsp_status_check($p67, $i69);
    call {:si_unique_call 781} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i18 := $i70;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} mutex_unlock($p73);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_787 := printk.ref.i32(.str.84, $i70);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i18 := $i70;
    goto $bb3;

  $bb14:
    assume $i64 == 1;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_786 := printk.ref(.str.83);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i18 := $i63;
    goto $bb3;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(392, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(428, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_785 := printk.ref.i32.ref(.str.82, $i55, $p57);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_423 := $M.0;
    cmdloc_dummy_var_424 := $M.0;
    call {:si_unique_call 774} cmdloc_dummy_var_425 := $memcpy.i8(cmdloc_dummy_var_423, cmdloc_dummy_var_424, $p46, $p47, 436, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_425;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 436)), $mul.ref(428, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_415 := $M.0;
    cmdloc_dummy_var_416 := $M.0;
    call {:si_unique_call 771} cmdloc_dummy_var_417 := $memcpy.i8(cmdloc_dummy_var_415, cmdloc_dummy_var_416, $p31, $p33, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_417;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_784 := printk.ref.i32(.str.81, $i16);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 7);
    goto $bb3;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 468219);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p1 := $M.4;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} ldv_set_remove($p1, $p2);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_beacon_get_tim: ref;

axiom ieee80211_beacon_get_tim == $sub.ref(0, 469251);

procedure ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p4 := external_alloc();
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const wcn36xx_smd_send_beacon: ref;

axiom wcn36xx_smd_send_beacon == $sub.ref(0, 470283);

procedure wcn36xx_smd_send_beacon($p0: ref, $p1: ref, $p2: ref, $i3: i16, $i4: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_send_beacon($p0: ref, $p1: ref, $p2: ref, $i3: i16, $i4: i16) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i32;
  var $i90: i1;
  var $i41: i32;
  var $p92: ref;
  var cmdloc_dummy_var_429: [ref]i8;
  var cmdloc_dummy_var_430: [ref]i8;
  var cmdloc_dummy_var_431: [ref]i8;
  var cmdloc_dummy_var_432: [ref]i8;
  var cmdloc_dummy_var_433: [ref]i8;
  var cmdloc_dummy_var_434: [ref]i8;
  var cmdloc_dummy_var_435: [ref]i8;
  var cmdloc_dummy_var_436: [ref]i8;
  var cmdloc_dummy_var_437: [ref]i8;
  var cmdloc_dummy_var_438: [ref]i8;
  var cmdloc_dummy_var_439: [ref]i8;
  var cmdloc_dummy_var_440: [ref]i8;
  var cmdloc_dummy_var_441: [ref]i8;
  var cmdloc_dummy_var_442: [ref]i8;
  var cmdloc_dummy_var_443: [ref]i8;
  var cmdloc_dummy_var_444: [ref]i8;
  var cmdloc_dummy_var_445: [ref]i8;
  var cmdloc_dummy_var_446: [ref]i8;
  var cmdloc_dummy_var_447: [ref]i8;
  var cmdloc_dummy_var_448: [ref]i8;
  var cmdloc_dummy_var_449: [ref]i8;
  var cmdloc_dummy_var_450: [ref]i8;
  var cmdloc_dummy_var_451: [ref]i8;
  var cmdloc_dummy_var_452: [ref]i8;
  var cmdloc_dummy_var_453: [ref]i8;
  var vslice_dummy_var_788: i32;
  var vslice_dummy_var_789: i32;
  var vslice_dummy_var_790: i32;
  var vslice_dummy_var_791: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p5 := $alloc($mul.ref(412, $zext.i32.i64(1)));
    call {:si_unique_call 786} {:cexpr "wcn36xx_smd_send_beacon:arg:tim_off"} boogie_si_record_i16($i3);
    call {:si_unique_call 787} {:cexpr "wcn36xx_smd_send_beacon:arg:p2p_off"} boogie_si_record_i16($i4);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} mutex_lock_nested($p6, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_429 := $M.0;
    call {:si_unique_call 789} cmdloc_dummy_var_430 := $memset.i8(cmdloc_dummy_var_429, $p7, 0, 408, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_430;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 63);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 408);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 6);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(8, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(8, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i19, 383);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(8, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_788 := printk.ref.i32(.str.77, $i39);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} mutex_unlock($p92);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64(4, 63);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(12, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_434 := $M.0;
    cmdloc_dummy_var_435 := $M.0;
    call {:si_unique_call 792} cmdloc_dummy_var_436 := $memcpy.i8(cmdloc_dummy_var_434, cmdloc_dummy_var_435, $p27, $p29, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_436;
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    call {:si_unique_call 793} {:cexpr "__len___0"} boogie_si_record_i64($i32);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(12, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(4, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_437 := $M.0;
    cmdloc_dummy_var_438 := $M.0;
    call {:si_unique_call 794} cmdloc_dummy_var_439 := $memcpy.i8(cmdloc_dummy_var_437, cmdloc_dummy_var_438, $p35, $p37, $i32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_439;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i64(6, 63);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(396, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_443 := $M.0;
    cmdloc_dummy_var_444 := $M.0;
    call {:si_unique_call 797} cmdloc_dummy_var_445 := $memcpy.i8(cmdloc_dummy_var_443, cmdloc_dummy_var_444, $p48, $p50, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_445;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 7);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i3);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 4);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(404, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(408, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i4);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_446 := $M.0;
    call {:si_unique_call 798} cmdloc_dummy_var_447 := $memset.i8(cmdloc_dummy_var_446, $p60, 0, $i64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_447;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i64(408, 63);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i65 == 1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p5);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_451 := $M.0;
    cmdloc_dummy_var_452 := $M.0;
    call {:si_unique_call 800} cmdloc_dummy_var_453 := $memcpy.i8(cmdloc_dummy_var_451, cmdloc_dummy_var_452, $p70, $p71, 408, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_453;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i72 := $M.1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 256);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i82 := wcn36xx_smd_send_and_wait($p0, $i81);
    call {:si_unique_call 803} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i89 := wcn36xx_smd_rsp_status_check($p86, $i88);
    call {:si_unique_call 806} {:cexpr "ret"} boogie_si_record_i32($i89);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i41 := $i89;
    goto $bb7;

  $bb23:
    assume $i90 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_791 := printk.ref.i32(.str.80, $i89);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i41 := $i89;
    goto $bb7;

  $bb20:
    assume $i83 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_790 := printk.ref(.str.79);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i41 := $i82;
    goto $bb7;

  $bb17:
    assume $i74 == 1;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(8, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_789 := printk.ref.i32(.str.78, $i76);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i65 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p5);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_448 := $M.0;
    cmdloc_dummy_var_449 := $M.0;
    call {:si_unique_call 799} cmdloc_dummy_var_450 := $memcpy.i8(cmdloc_dummy_var_448, cmdloc_dummy_var_449, $p67, $p68, 408, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_450;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(404, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 256);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(396, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_440 := $M.0;
    cmdloc_dummy_var_441 := $M.0;
    call {:si_unique_call 796} cmdloc_dummy_var_442 := $memcpy.i8(cmdloc_dummy_var_440, cmdloc_dummy_var_441, $p44, $p46, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_442;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 412)), $mul.ref(12, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_431 := $M.0;
    cmdloc_dummy_var_432 := $M.0;
    call {:si_unique_call 791} cmdloc_dummy_var_433 := $memcpy.i8(cmdloc_dummy_var_431, cmdloc_dummy_var_432, $p23, $p25, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_433;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 471315);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 809} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i18 := $M.5;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.5;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.5 := $i31;
    call {:si_unique_call 811} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, $p23);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 810} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i28 := $M.5;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 808} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4712;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4685;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 472347);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 812} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 813} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 473379);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 814} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 815} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 474411);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 475443);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} lock_release($p0, 1, 0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 476475);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} devirtbounce.2(0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} __preempt_count_sub(1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 477507);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 823} devirtbounce.4(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 822} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 821} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 478539);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 825} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 479571);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} __preempt_count_add(1);
    call {:si_unique_call 827} devirtbounce.2(0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 480603);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 481635);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 830} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 831} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 832} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 833} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 482667);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 837} devirtbounce.4(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 836} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 835} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_join_rsp: ref;

axiom wcn36xx_smd_join_rsp == $sub.ref(0, 483699);

procedure wcn36xx_smd_join_rsp($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation wcn36xx_smd_join_rsp($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i4: i32;
  var vslice_dummy_var_792: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} {:cexpr "wcn36xx_smd_join_rsp:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i2 := wcn36xx_smd_rsp_status_check($p0, $i1);
    call {:si_unique_call 840} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 256);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_792 := printk.ref.i32.i32(.str.241, $i10, $i13);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const wcn36xx_smd_exit_bmps: ref;

axiom wcn36xx_smd_exit_bmps == $sub.ref(0, 484731);

procedure wcn36xx_smd_exit_bmps($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_exit_bmps($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $i36: i32;
  var $p44: ref;
  var cmdloc_dummy_var_454: [ref]i8;
  var cmdloc_dummy_var_455: [ref]i8;
  var cmdloc_dummy_var_456: [ref]i8;
  var cmdloc_dummy_var_457: [ref]i8;
  var cmdloc_dummy_var_458: [ref]i8;
  var cmdloc_dummy_var_459: [ref]i8;
  var cmdloc_dummy_var_460: [ref]i8;
  var cmdloc_dummy_var_461: [ref]i8;
  var cmdloc_dummy_var_462: [ref]i8;
  var cmdloc_dummy_var_463: [ref]i8;
  var vslice_dummy_var_793: i32;
  var vslice_dummy_var_794: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} mutex_lock_nested($p5, 0);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_454 := $M.0;
    call {:si_unique_call 844} cmdloc_dummy_var_455 := $memset.i8(cmdloc_dummy_var_454, $p6, 0, 28, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_455;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 79);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 28);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_456 := $M.0;
    call {:si_unique_call 845} cmdloc_dummy_var_457 := $memset.i8(cmdloc_dummy_var_456, $p17, 0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_457;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64(28, 63);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_461 := $M.0;
    cmdloc_dummy_var_462 := $M.0;
    call {:si_unique_call 847} cmdloc_dummy_var_463 := $memcpy.i8(cmdloc_dummy_var_461, cmdloc_dummy_var_462, $p27, $p28, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_463;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i33 := wcn36xx_smd_send_and_wait($p0, $i32);
    call {:si_unique_call 849} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i41 := wcn36xx_smd_rsp_status_check($p38, $i40);
    call {:si_unique_call 853} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} mutex_unlock($p44);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_794 := printk.ref.i32(.str.96, $i41);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb6;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_793 := printk.ref(.str.95);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i36 := $i33;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_458 := $M.0;
    cmdloc_dummy_var_459 := $M.0;
    call {:si_unique_call 846} cmdloc_dummy_var_460 := $memcpy.i8(cmdloc_dummy_var_458, cmdloc_dummy_var_459, $p24, $p25, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_460;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_enter_bmps: ref;

axiom wcn36xx_smd_enter_bmps == $sub.ref(0, 485763);

procedure wcn36xx_smd_enter_bmps($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_enter_bmps($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $i43: i32;
  var $p51: ref;
  var cmdloc_dummy_var_464: [ref]i8;
  var cmdloc_dummy_var_465: [ref]i8;
  var cmdloc_dummy_var_466: [ref]i8;
  var cmdloc_dummy_var_467: [ref]i8;
  var cmdloc_dummy_var_468: [ref]i8;
  var cmdloc_dummy_var_469: [ref]i8;
  var cmdloc_dummy_var_470: [ref]i8;
  var cmdloc_dummy_var_471: [ref]i8;
  var cmdloc_dummy_var_472: [ref]i8;
  var cmdloc_dummy_var_473: [ref]i8;
  var vslice_dummy_var_795: i32;
  var vslice_dummy_var_796: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} mutex_lock_nested($p5, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_464 := $M.0;
    call {:si_unique_call 857} cmdloc_dummy_var_465 := $memset.i8(cmdloc_dummy_var_464, $p6, 0, 28, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_465;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 78);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 28);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_466 := $M.0;
    call {:si_unique_call 858} cmdloc_dummy_var_467 := $memset.i8(cmdloc_dummy_var_466, $p24, 0, $i28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_467;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64(28, 63);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_471 := $M.0;
    cmdloc_dummy_var_472 := $M.0;
    call {:si_unique_call 860} cmdloc_dummy_var_473 := $memcpy.i8(cmdloc_dummy_var_471, cmdloc_dummy_var_472, $p34, $p35, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_473;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i40 := wcn36xx_smd_send_and_wait($p0, $i39);
    call {:si_unique_call 862} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i48 := wcn36xx_smd_rsp_status_check($p45, $i47);
    call {:si_unique_call 866} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} mutex_unlock($p51);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_796 := printk.ref.i32(.str.94, $i48);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i43 := $i48;
    goto $bb6;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_795 := printk.ref(.str.93);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb6;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_468 := $M.0;
    cmdloc_dummy_var_469 := $M.0;
    call {:si_unique_call 859} cmdloc_dummy_var_470 := $memcpy.i8(cmdloc_dummy_var_468, cmdloc_dummy_var_469, $p31, $p32, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_470;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_switch_channel: ref;

axiom wcn36xx_smd_switch_channel == $sub.ref(0, 486795);

procedure wcn36xx_smd_switch_channel($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_switch_channel($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $i51: i1;
  var $i45: i32;
  var $p53: ref;
  var cmdloc_dummy_var_474: [ref]i8;
  var cmdloc_dummy_var_475: [ref]i8;
  var cmdloc_dummy_var_476: [ref]i8;
  var cmdloc_dummy_var_477: [ref]i8;
  var cmdloc_dummy_var_478: [ref]i8;
  var cmdloc_dummy_var_479: [ref]i8;
  var cmdloc_dummy_var_480: [ref]i8;
  var cmdloc_dummy_var_481: [ref]i8;
  var cmdloc_dummy_var_482: [ref]i8;
  var cmdloc_dummy_var_483: [ref]i8;
  var cmdloc_dummy_var_484: [ref]i8;
  var cmdloc_dummy_var_485: [ref]i8;
  var cmdloc_dummy_var_486: [ref]i8;
  var cmdloc_dummy_var_487: [ref]i8;
  var cmdloc_dummy_var_488: [ref]i8;
  var cmdloc_dummy_var_489: [ref]i8;
  var vslice_dummy_var_797: i32;
  var vslice_dummy_var_798: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 869} {:cexpr "wcn36xx_smd_switch_channel:arg:ch"} boogie_si_record_i32($i2);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} mutex_lock_nested($p4, 0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_474 := $M.0;
    call {:si_unique_call 871} cmdloc_dummy_var_475 := $memset.i8(cmdloc_dummy_var_474, $p5, 0, 28, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_475;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 42);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 28);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i2);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $sub.i8(0, 65));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(17, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $sub.i8(0, 65));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64(6, 63);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_479 := $M.0;
    cmdloc_dummy_var_480 := $M.0;
    call {:si_unique_call 873} cmdloc_dummy_var_481 := $memcpy.i8(cmdloc_dummy_var_479, cmdloc_dummy_var_480, $p22, $p24, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_481;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_482 := $M.0;
    call {:si_unique_call 874} cmdloc_dummy_var_483 := $memset.i8(cmdloc_dummy_var_482, $p26, 0, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_483;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i64(28, 63);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_487 := $M.0;
    cmdloc_dummy_var_488 := $M.0;
    call {:si_unique_call 876} cmdloc_dummy_var_489 := $memcpy.i8(cmdloc_dummy_var_487, cmdloc_dummy_var_488, $p36, $p37, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_489;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i42 := wcn36xx_smd_send_and_wait($p0, $i41);
    call {:si_unique_call 878} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i50 := wcn36xx_smd_switch_channel_rsp($p47, $i49);
    call {:si_unique_call 882} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} mutex_unlock($p53);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb11:
    assume $i51 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_798 := printk.ref.i32(.str.47, $i50);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb9;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_797 := printk.ref(.str.46);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    goto $bb9;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_484 := $M.0;
    cmdloc_dummy_var_485 := $M.0;
    call {:si_unique_call 875} cmdloc_dummy_var_486 := $memcpy.i8(cmdloc_dummy_var_484, cmdloc_dummy_var_485, $p33, $p34, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_486;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_476 := $M.0;
    cmdloc_dummy_var_477 := $M.0;
    call {:si_unique_call 872} cmdloc_dummy_var_478 := $memcpy.i8(cmdloc_dummy_var_476, cmdloc_dummy_var_477, $p18, $p20, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_478;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_switch_channel_rsp: ref;

axiom wcn36xx_smd_switch_channel_rsp == $sub.ref(0, 487827);

procedure wcn36xx_smd_switch_channel_rsp($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation wcn36xx_smd_switch_channel_rsp($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var vslice_dummy_var_799: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} {:cexpr "wcn36xx_smd_switch_channel_rsp:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i2 := wcn36xx_smd_rsp_status_check($p0, $i1);
    call {:si_unique_call 886} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 256);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} vslice_dummy_var_799 := printk.ref.i32.i32(.str.237, $i10, $i12);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 488859);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_delete_sta_self: ref;

axiom wcn36xx_smd_delete_sta_self == $sub.ref(0, 489891);

procedure wcn36xx_smd_delete_sta_self($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_delete_sta_self($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $i36: i32;
  var $p44: ref;
  var cmdloc_dummy_var_490: [ref]i8;
  var cmdloc_dummy_var_491: [ref]i8;
  var cmdloc_dummy_var_492: [ref]i8;
  var cmdloc_dummy_var_493: [ref]i8;
  var cmdloc_dummy_var_494: [ref]i8;
  var cmdloc_dummy_var_495: [ref]i8;
  var cmdloc_dummy_var_496: [ref]i8;
  var cmdloc_dummy_var_497: [ref]i8;
  var cmdloc_dummy_var_498: [ref]i8;
  var cmdloc_dummy_var_499: [ref]i8;
  var cmdloc_dummy_var_500: [ref]i8;
  var cmdloc_dummy_var_501: [ref]i8;
  var cmdloc_dummy_var_502: [ref]i8;
  var cmdloc_dummy_var_503: [ref]i8;
  var cmdloc_dummy_var_504: [ref]i8;
  var cmdloc_dummy_var_505: [ref]i8;
  var vslice_dummy_var_800: i32;
  var vslice_dummy_var_801: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} mutex_lock_nested($p3, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_490 := $M.0;
    call {:si_unique_call 890} cmdloc_dummy_var_491 := $memset.i8(cmdloc_dummy_var_490, $p4, 0, 14, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_491;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 127);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 14);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64(6, 63);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_495 := $M.0;
    cmdloc_dummy_var_496 := $M.0;
    call {:si_unique_call 892} cmdloc_dummy_var_497 := $memcpy.i8(cmdloc_dummy_var_495, cmdloc_dummy_var_496, $p15, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_497;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_498 := $M.0;
    call {:si_unique_call 893} cmdloc_dummy_var_499 := $memset.i8(cmdloc_dummy_var_498, $p17, 0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_499;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64(14, 63);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_503 := $M.0;
    cmdloc_dummy_var_504 := $M.0;
    call {:si_unique_call 895} cmdloc_dummy_var_505 := $memcpy.i8(cmdloc_dummy_var_503, cmdloc_dummy_var_504, $p27, $p28, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_505;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i33 := wcn36xx_smd_send_and_wait($p0, $i32);
    call {:si_unique_call 897} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i41 := wcn36xx_smd_rsp_status_check($p38, $i40);
    call {:si_unique_call 901} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} mutex_unlock($p44);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_801 := printk.ref.i32(.str.55, $i41);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb9;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_800 := printk.ref(.str.54);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i36 := $i33;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_500 := $M.0;
    cmdloc_dummy_var_501 := $M.0;
    call {:si_unique_call 894} cmdloc_dummy_var_502 := $memcpy.i8(cmdloc_dummy_var_500, cmdloc_dummy_var_501, $p24, $p25, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_502;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_492 := $M.0;
    cmdloc_dummy_var_493 := $M.0;
    call {:si_unique_call 891} cmdloc_dummy_var_494 := $memcpy.i8(cmdloc_dummy_var_492, cmdloc_dummy_var_493, $p13, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_494;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 490923);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} __list_add($p0, $p1, $p3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_add_sta_self: ref;

axiom wcn36xx_smd_add_sta_self == $sub.ref(0, 491955);

procedure wcn36xx_smd_add_sta_self($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_add_sta_self($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i32;
  var $i46: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i1;
  var $i48: i32;
  var $p56: ref;
  var cmdloc_dummy_var_506: [ref]i8;
  var cmdloc_dummy_var_507: [ref]i8;
  var cmdloc_dummy_var_508: [ref]i8;
  var cmdloc_dummy_var_509: [ref]i8;
  var cmdloc_dummy_var_510: [ref]i8;
  var cmdloc_dummy_var_511: [ref]i8;
  var cmdloc_dummy_var_512: [ref]i8;
  var cmdloc_dummy_var_513: [ref]i8;
  var cmdloc_dummy_var_514: [ref]i8;
  var cmdloc_dummy_var_515: [ref]i8;
  var cmdloc_dummy_var_516: [ref]i8;
  var cmdloc_dummy_var_517: [ref]i8;
  var cmdloc_dummy_var_518: [ref]i8;
  var cmdloc_dummy_var_519: [ref]i8;
  var cmdloc_dummy_var_520: [ref]i8;
  var cmdloc_dummy_var_521: [ref]i8;
  var vslice_dummy_var_802: i32;
  var vslice_dummy_var_803: i32;
  var vslice_dummy_var_804: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} mutex_lock_nested($p3, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_506 := $M.0;
    call {:si_unique_call 906} cmdloc_dummy_var_507 := $memset.i8(cmdloc_dummy_var_506, $p4, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_507;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 125);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 18);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64(6, 63);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_511 := $M.0;
    cmdloc_dummy_var_512 := $M.0;
    call {:si_unique_call 908} cmdloc_dummy_var_513 := $memcpy.i8(cmdloc_dummy_var_511, cmdloc_dummy_var_512, $p17, $p19, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_513;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_514 := $M.0;
    call {:si_unique_call 909} cmdloc_dummy_var_515 := $memset.i8(cmdloc_dummy_var_514, $p21, 0, $i25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_515;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64(18, 63);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_519 := $M.0;
    cmdloc_dummy_var_520 := $M.0;
    call {:si_unique_call 911} cmdloc_dummy_var_521 := $memcpy.i8(cmdloc_dummy_var_519, cmdloc_dummy_var_520, $p31, $p32, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_521;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 256);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i43);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i45 := wcn36xx_smd_send_and_wait($p0, $i44);
    call {:si_unique_call 914} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i53 := wcn36xx_smd_add_sta_self_rsp($p0, $p1, $p50, $i52);
    call {:si_unique_call 918} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $i53;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} mutex_unlock($p56);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_804 := printk.ref.i32(.str.53, $i53);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i48 := $i53;
    goto $bb12;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_803 := printk.ref(.str.52);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i48 := $i45;
    goto $bb12;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_802 := printk.ref.ref.i32(.str.51, $p37, $i39);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_516 := $M.0;
    cmdloc_dummy_var_517 := $M.0;
    call {:si_unique_call 910} cmdloc_dummy_var_518 := $memcpy.i8(cmdloc_dummy_var_516, cmdloc_dummy_var_517, $p28, $p29, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_518;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_508 := $M.0;
    cmdloc_dummy_var_509 := $M.0;
    call {:si_unique_call 907} cmdloc_dummy_var_510 := $memcpy.i8(cmdloc_dummy_var_508, cmdloc_dummy_var_509, $p13, $p15, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_510;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_add_sta_self_rsp: ref;

axiom wcn36xx_smd_add_sta_self_rsp == $sub.ref(0, 492987);

procedure wcn36xx_smd_add_sta_self_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_add_sta_self_rsp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $p34: ref;
  var $i7: i32;
  var vslice_dummy_var_805: i32;
  var vslice_dummy_var_806: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} {:cexpr "wcn36xx_smd_add_sta_self_rsp:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i3, 14);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $M.1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 256);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(73, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(74, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_806 := printk.ref.i32.i32.i32(.str.240, $i21, $i24, $i27);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} vslice_dummy_var_805 := printk.ref.i32(.str.239, $i13);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 494019);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 495051);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_set_power_params: ref;

axiom wcn36xx_smd_set_power_params == $sub.ref(0, 496083);

procedure wcn36xx_smd_set_power_params($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_set_power_params($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var cmdloc_dummy_var_522: [ref]i8;
  var cmdloc_dummy_var_523: [ref]i8;
  var cmdloc_dummy_var_524: [ref]i8;
  var cmdloc_dummy_var_525: [ref]i8;
  var cmdloc_dummy_var_526: [ref]i8;
  var cmdloc_dummy_var_527: [ref]i8;
  var cmdloc_dummy_var_528: [ref]i8;
  var cmdloc_dummy_var_529: [ref]i8;
  var cmdloc_dummy_var_530: [ref]i8;
  var cmdloc_dummy_var_531: [ref]i8;
  var vslice_dummy_var_807: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 924} {:cexpr "wcn36xx_smd_set_power_params:arg:ignore_dtim"} boogie_si_record_i1($i1);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} mutex_lock_nested($p4, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_522 := $M.0;
    call {:si_unique_call 926} cmdloc_dummy_var_523 := $memset.i8(cmdloc_dummy_var_522, $p5, 0, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_523;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 166);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 32);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i3);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_524 := $M.0;
    call {:si_unique_call 927} cmdloc_dummy_var_525 := $memset.i8(cmdloc_dummy_var_524, $p23, 0, $i27, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_525;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i64(32, 63);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_529 := $M.0;
    cmdloc_dummy_var_530 := $M.0;
    call {:si_unique_call 929} cmdloc_dummy_var_531 := $memcpy.i8(cmdloc_dummy_var_529, cmdloc_dummy_var_530, $p33, $p34, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_531;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i39 := wcn36xx_smd_send_and_wait($p0, $i38);
    call {:si_unique_call 931} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} mutex_unlock($p42);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_807 := printk.ref(.str.97);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_526 := $M.0;
    cmdloc_dummy_var_527 := $M.0;
    call {:si_unique_call 928} cmdloc_dummy_var_528 := $memcpy.i8(cmdloc_dummy_var_526, cmdloc_dummy_var_527, $p30, $p31, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_528;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 2);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_debugfs_exit: ref;

axiom wcn36xx_debugfs_exit == $sub.ref(0, 497115);

procedure wcn36xx_debugfs_exit($p0: ref);
  free requires assertsPassed;



implementation wcn36xx_debugfs_exit($p0: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} debugfs_remove_recursive($p3);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_stop: ref;

axiom wcn36xx_smd_stop == $sub.ref(0, 498147);

procedure wcn36xx_smd_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $i32: i32;
  var $p40: ref;
  var cmdloc_dummy_var_532: [ref]i8;
  var cmdloc_dummy_var_533: [ref]i8;
  var cmdloc_dummy_var_534: [ref]i8;
  var cmdloc_dummy_var_535: [ref]i8;
  var cmdloc_dummy_var_536: [ref]i8;
  var cmdloc_dummy_var_537: [ref]i8;
  var cmdloc_dummy_var_538: [ref]i8;
  var cmdloc_dummy_var_539: [ref]i8;
  var cmdloc_dummy_var_540: [ref]i8;
  var cmdloc_dummy_var_541: [ref]i8;
  var vslice_dummy_var_808: i32;
  var vslice_dummy_var_809: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} mutex_lock_nested($p2, 0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_532 := $M.0;
    call {:si_unique_call 937} cmdloc_dummy_var_533 := $memset.i8(cmdloc_dummy_var_532, $p3, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_533;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 2);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 0);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 12);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 2);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_534 := $M.0;
    call {:si_unique_call 938} cmdloc_dummy_var_535 := $memset.i8(cmdloc_dummy_var_534, $p13, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_535;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(12, 63);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_539 := $M.0;
    cmdloc_dummy_var_540 := $M.0;
    call {:si_unique_call 940} cmdloc_dummy_var_541 := $memcpy.i8(cmdloc_dummy_var_539, cmdloc_dummy_var_540, $p23, $p24, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_541;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i29 := wcn36xx_smd_send_and_wait($p0, $i28);
    call {:si_unique_call 942} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i37 := wcn36xx_smd_rsp_status_check($p34, $i36);
    call {:si_unique_call 946} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} mutex_unlock($p40);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_809 := printk.ref.i32(.str.33, $i37);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb6;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_808 := printk.ref(.str.32);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_536 := $M.0;
    cmdloc_dummy_var_537 := $M.0;
    call {:si_unique_call 939} cmdloc_dummy_var_538 := $memcpy.i8(cmdloc_dummy_var_536, cmdloc_dummy_var_537, $p20, $p21, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_538;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_deinit: ref;

axiom wcn36xx_dxe_deinit == $sub.ref(0, 499179);

procedure wcn36xx_dxe_deinit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.11, $M.13, $M.6, $M.5;



implementation wcn36xx_dxe_deinit($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(196, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ldv_free_irq_32($i2, $p3);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(200, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} ldv_free_irq_33($i5, $p6);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1192, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} wcn36xx_dxe_ch_free_skbs($p0, $p16);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} wcn36xx_dxe_ch_free_skbs($p0, $p17);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1192, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ieee80211_tx_status_irqsafe($p12, $p14);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1192, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_close: ref;

axiom wcn36xx_smd_close == $sub.ref(0, 500211);

procedure wcn36xx_smd_close($p0: ref);
  free requires assertsPassed;



implementation wcn36xx_smd_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 953} devirtbounce.2($p4);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(504, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} destroy_workqueue($p6);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(592, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} mutex_destroy($p7);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_dxe_free_mem_pools: ref;

axiom wcn36xx_dxe_free_mem_pools == $sub.ref(0, 501243);

procedure wcn36xx_dxe_free_mem_pools($p0: ref);
  free requires assertsPassed;



implementation wcn36xx_dxe_free_mem_pools($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(8, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(8, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 128);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(8, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(16, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} dma_free_attrs($0.ref, $i26, $p29, $i32, $0.ref);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 10);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(8, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} dma_free_attrs($0.ref, $i10, $p13, $i16, $0.ref);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_free_ctl_blks: ref;

axiom wcn36xx_dxe_free_ctl_blks == $sub.ref(0, 502275);

procedure wcn36xx_dxe_free_ctl_blks($p0: ref);
  free requires assertsPassed;



implementation wcn36xx_dxe_free_ctl_blks($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} wcn36xx_dxe_free_ctl_block($p1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} wcn36xx_dxe_free_ctl_block($p2);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} wcn36xx_dxe_free_ctl_block($p3);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} wcn36xx_dxe_free_ctl_block($p4);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 503307);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} free_($p0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 504339);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 963} $free($p0);
    return;
}



const wcn36xx_dxe_free_ctl_block: ref;

axiom wcn36xx_dxe_free_ctl_block == $sub.ref(0, 505371);

procedure wcn36xx_dxe_free_ctl_block($p0: ref);
  free requires assertsPassed;



implementation wcn36xx_dxe_free_ctl_block($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i6: i32;
  var $p7: ref;
  var $i14: i64;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i6, $p7 := 0, $p2;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $i11, $i12, $i13, $i6, $p7, $i14, $i15 := wcn36xx_dxe_free_ctl_block_loop_$bb4($p3, $p8, $p9, $p10, $i11, $i12, $i13, $i6, $p7, $i14, $i15);
    goto $bb4_last;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p7);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} kfree($p10);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i6, 1);
    call {:si_unique_call 965} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p3);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32($i11, $i12);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i6, $p7 := $i11, $p9;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 506403);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_810: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 967} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p5 := get_dma_ops($p0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i6 := arch_local_save_flags();
    call {:si_unique_call 970} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 972} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 973} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 975} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_810 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 979} devirtbounce.5($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} warn_slowpath_null(.str.220, 166);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 507435);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 981} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 508467);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 985} $i7 := devirtbounce.7(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 986} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 984} devirtbounce.6(0, .str.221, 804, 12);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 509499);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 510531);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 989} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 511563);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_32: ref;

axiom ldv_free_irq_32 == $sub.ref(0, 512595);

procedure ldv_free_irq_32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation ldv_free_irq_32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} {:cexpr "ldv_free_irq_32:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} free_irq($i0, $p1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_33: ref;

axiom ldv_free_irq_33 == $sub.ref(0, 513627);

procedure ldv_free_irq_33($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation ldv_free_irq_33($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} {:cexpr "ldv_free_irq_33:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} free_irq($i0, $p1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 514659);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_tx_status_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_dxe_ch_free_skbs: ref;

axiom wcn36xx_dxe_ch_free_skbs == $sub.ref(0, 515691);

procedure wcn36xx_dxe_ch_free_skbs($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation wcn36xx_dxe_ch_free_skbs($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i7, $p8 := 0, $p3;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $i13, $i14, $i15, $i7, $p8 := wcn36xx_dxe_ch_free_skbs_loop_$bb4($p4, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $i7, $p8);
    goto $bb4_last;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_kfree_skb_28($p10);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i7, 1);
    call {:si_unique_call 997} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p4);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i13, $i14);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i7, $p8 := $i13, $p12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;
}



const ldv_kfree_skb_28: ref;

axiom ldv_kfree_skb_28 == $sub.ref(0, 516723);

procedure ldv_kfree_skb_28($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation ldv_kfree_skb_28($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_skb_free($p1);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 517755);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 518787);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.13;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 1004} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i12 := $M.12;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 1003} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const debugfs_remove_recursive: ref;

axiom debugfs_remove_recursive == $sub.ref(0, 519819);

procedure debugfs_remove_recursive($p0: ref);
  free requires assertsPassed;



implementation debugfs_remove_recursive($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_smd_open: ref;

axiom wcn36xx_smd_open == $sub.ref(0, 520851);

procedure wcn36xx_smd_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $p37: ref;
  var $i12: i32;
  var $i35: i32;
  var cmdloc_dummy_var_542: [ref]i8;
  var cmdloc_dummy_var_543: [ref]i8;
  var cmdloc_dummy_var_544: [ref]i8;
  var vslice_dummy_var_811: i32;
  var vslice_dummy_var_812: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p5 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.117, 14, 1, $p1, .str.116, .str.118);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(504, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(504, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(512, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} __init_work($p13, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 137438953408);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(512, 1)), $mul.ref(0, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_542 := $M.0;
    cmdloc_dummy_var_543 := $M.0;
    call {:si_unique_call 1012} cmdloc_dummy_var_544 := $memcpy.i8(cmdloc_dummy_var_542, cmdloc_dummy_var_543, $p17, $p18, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_544;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(512, 1)), $mul.ref(32, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} lockdep_init_map($p20, .str.120, $p2, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(512, 1)), $mul.ref(8, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} INIT_LIST_HEAD($p22);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(512, 1)), $mul.ref(24, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, wcn36xx_ind_smd_work);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(760, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} INIT_LIST_HEAD($p25);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(592, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} __mutex_init($p26, .str.121, $p4);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1017} $i32 := devirtbounce.8($p30, $p31, wcn36xx_smd_rsp_process);
    call {:si_unique_call 1018} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_812 := printk.ref(.str.122);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(504, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} destroy_workqueue($p37);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i12 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i35 := $i12;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_811 := printk.ref(.str.119);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;
}



const wcn36xx_dxe_allocate_mem_pools: ref;

axiom wcn36xx_dxe_allocate_mem_pools == $sub.ref(0, 521883);

procedure wcn36xx_dxe_allocate_mem_pools($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_dxe_allocate_mem_pools($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var cmdloc_dummy_var_545: [ref]i8;
  var cmdloc_dummy_var_546: [ref]i8;
  var cmdloc_dummy_var_547: [ref]i8;
  var cmdloc_dummy_var_548: [ref]i8;
  var vslice_dummy_var_813: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 144);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 10);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1021} {:cexpr "s"} boogie_si_record_i64($i7);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(16, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $p10 := dma_alloc_attrs($0.ref, $i7, $p9, 208, $0.ref);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1)), $mul.ref(8, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p10);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_545 := $M.0;
    call {:si_unique_call 1025} cmdloc_dummy_var_546 := $memset.i8(cmdloc_dummy_var_545, $p10, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_546;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 144);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 128);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    call {:si_unique_call 1026} {:cexpr "s"} boogie_si_record_i64($i21);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(16, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p24 := dma_alloc_attrs($0.ref, $i21, $p23, 208, $0.ref);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1)), $mul.ref(8, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p24);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_547 := $M.0;
    call {:si_unique_call 1028} cmdloc_dummy_var_548 := $memset.i8(cmdloc_dummy_var_547, $p24, 0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_548;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} wcn36xx_dxe_free_mem_pools($p0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_813 := printk.ref(.str.4);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_alloc_ctl_blks: ref;

axiom wcn36xx_dxe_alloc_ctl_blks == $sub.ref(0, 522915);

procedure wcn36xx_dxe_alloc_ctl_blks($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_dxe_alloc_ctl_blks($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var vslice_dummy_var_814: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1)), $mul.ref(0, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 2);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 3);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(24, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 128);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(24, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 10);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1)), $mul.ref(24, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 512);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 40);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(48, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 23);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(48, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 23);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(52, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 3181125);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(52, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 3198533);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(56, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 3312205);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(56, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 3329613);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(60, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 2106368);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(60, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 2106624);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(64, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $sub.i32(0, 2076275891));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(64, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $sub.i32(0, 2059481267));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i38 := wcn36xx_dxe_allocate_ctl_block($p37);
    call {:si_unique_call 1030} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i41 := wcn36xx_dxe_allocate_ctl_block($p40);
    call {:si_unique_call 1034} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i44 := wcn36xx_dxe_allocate_ctl_block($p43);
    call {:si_unique_call 1036} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i47 := wcn36xx_dxe_allocate_ctl_block($p46);
    call {:si_unique_call 1038} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    call {:si_unique_call 1039} $i53 := devirtbounce.9($p52, 1024, 512);
    call {:si_unique_call 1040} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_814 := printk.ref(.str);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} wcn36xx_dxe_free_ctl_blks($p0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 12);
    goto $bb14;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i42 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 523947);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1042} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const wcn36xx_smd_load_nv: ref;

axiom wcn36xx_smd_load_nv == $sub.ref(0, 524979);

procedure wcn36xx_smd_load_nv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_load_nv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i73: i32;
  var $p96: ref;
  var $i12: i32;
  var cmdloc_dummy_var_549: [ref]i8;
  var cmdloc_dummy_var_550: [ref]i8;
  var cmdloc_dummy_var_551: [ref]i8;
  var cmdloc_dummy_var_552: [ref]i8;
  var cmdloc_dummy_var_553: [ref]i8;
  var cmdloc_dummy_var_554: [ref]i8;
  var cmdloc_dummy_var_555: [ref]i8;
  var cmdloc_dummy_var_556: [ref]i8;
  var cmdloc_dummy_var_557: [ref]i8;
  var cmdloc_dummy_var_558: [ref]i8;
  var cmdloc_dummy_var_559: [ref]i8;
  var vslice_dummy_var_815: i32;
  var vslice_dummy_var_816: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(32, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(32, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_549 := $M.0;
    call {:si_unique_call 1048} cmdloc_dummy_var_550 := $memset.i8(cmdloc_dummy_var_549, $p18, 0, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_550;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 55);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 16);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 3072);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i28);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} mutex_lock_nested($p32, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb8;

  $bb8:
    call $i33, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $p49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $p65, $p67, $i68, $i69, $i70, $i71, $i72, $p74, $p75, $p76, $i77, $i78, $i79, $i80, $p82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, cmdloc_dummy_var_551, cmdloc_dummy_var_552, cmdloc_dummy_var_553, cmdloc_dummy_var_554, cmdloc_dummy_var_555, cmdloc_dummy_var_556, cmdloc_dummy_var_557, cmdloc_dummy_var_558, cmdloc_dummy_var_559 := wcn36xx_smd_load_nv_loop_$bb8($p0, $p1, $p17, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $p49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $p65, $p67, $i68, $i69, $i70, $i71, $i72, $p74, $p75, $p76, $i77, $i78, $i79, $i80, $p82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, cmdloc_dummy_var_551, cmdloc_dummy_var_552, cmdloc_dummy_var_553, cmdloc_dummy_var_554, cmdloc_dummy_var_555, cmdloc_dummy_var_556, cmdloc_dummy_var_557, cmdloc_dummy_var_558, cmdloc_dummy_var_559);
    goto $bb8_last;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(32, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i33);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i38, $i39);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 4);
    call {:si_unique_call 1050} {:cexpr "fw_bytes_left"} boogie_si_record_i32($i41);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 3072);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 1);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i41);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i41, 16);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i64(16, 63);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p1);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_554 := $M.0;
    cmdloc_dummy_var_555 := $M.0;
    call {:si_unique_call 1052} cmdloc_dummy_var_556 := $memcpy.i8(cmdloc_dummy_var_554, cmdloc_dummy_var_555, $p55, $p56, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_556;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    call {:si_unique_call 1053} {:cexpr "__len___0"} boogie_si_record_i64($i59);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(16, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i64($i33);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_557 := $M.0;
    cmdloc_dummy_var_558 := $M.0;
    call {:si_unique_call 1054} cmdloc_dummy_var_559 := $memcpy.i8(cmdloc_dummy_var_557, cmdloc_dummy_var_558, $p62, $p65, $i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_559;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i70 := wcn36xx_smd_send_and_wait($p0, $i69);
    call {:si_unique_call 1056} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i72 := $i70;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i78 := wcn36xx_smd_rsp_status_check($p75, $i77);
    call {:si_unique_call 1059} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, $i86);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i33);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 3072);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    call {:si_unique_call 1061} {:cexpr "fm_offset"} boogie_si_record_i16($i90);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i95 := $i78;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i73 := $i95;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} mutex_unlock($p96);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i12 := $i73;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb22:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i90;
    goto $bb22_dummy;

  $bb19:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_816 := printk.ref.i32(.str.28, $i80);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i73 := $i80;
    goto $bb17;

  $bb15:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb17;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_551 := $M.0;
    cmdloc_dummy_var_552 := $M.0;
    call {:si_unique_call 1051} cmdloc_dummy_var_553 := $memcpy.i8(cmdloc_dummy_var_551, cmdloc_dummy_var_552, $p52, $p53, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_553;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 0);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 3072);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(32, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(8, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i9 := request_firmware($p6, .str.26, $p8);
    call {:si_unique_call 1046} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_815 := printk.ref.ref.i32(.str.27, .str.26, $i9);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb5;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;
}



const wcn36xx_smd_start: ref;

axiom wcn36xx_smd_start == $sub.ref(0, 526011);

procedure wcn36xx_smd_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $i41: i32;
  var $p49: ref;
  var cmdloc_dummy_var_560: [ref]i8;
  var cmdloc_dummy_var_561: [ref]i8;
  var cmdloc_dummy_var_562: [ref]i8;
  var cmdloc_dummy_var_563: [ref]i8;
  var cmdloc_dummy_var_564: [ref]i8;
  var cmdloc_dummy_var_565: [ref]i8;
  var cmdloc_dummy_var_566: [ref]i8;
  var cmdloc_dummy_var_567: [ref]i8;
  var cmdloc_dummy_var_568: [ref]i8;
  var cmdloc_dummy_var_569: [ref]i8;
  var vslice_dummy_var_817: i32;
  var vslice_dummy_var_818: i32;
  var vslice_dummy_var_819: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} mutex_lock_nested($p2, 0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_560 := $M.0;
    call {:si_unique_call 1064} cmdloc_dummy_var_561 := $memset.i8(cmdloc_dummy_var_560, $p3, 0, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_561;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 0);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 16);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_562 := $M.0;
    call {:si_unique_call 1065} cmdloc_dummy_var_563 := $memset.i8(cmdloc_dummy_var_562, $p15, 0, $i19, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_563;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i64(16, 63);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_567 := $M.0;
    cmdloc_dummy_var_568 := $M.0;
    call {:si_unique_call 1067} cmdloc_dummy_var_569 := $memcpy.i8(cmdloc_dummy_var_567, cmdloc_dummy_var_568, $p25, $p26, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_569;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 256);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i38 := wcn36xx_smd_send_and_wait($p0, $i37);
    call {:si_unique_call 1070} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i46 := wcn36xx_smd_start_rsp($p0, $p43, $i45);
    call {:si_unique_call 1074} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i41 := $i46;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} mutex_unlock($p49);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_819 := printk.ref.i32(.str.31, $i46);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i41 := $i46;
    goto $bb9;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_818 := printk.ref(.str.30);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    goto $bb9;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_817 := printk.ref.i32(.str.29, $i32);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_564 := $M.0;
    cmdloc_dummy_var_565 := $M.0;
    call {:si_unique_call 1066} cmdloc_dummy_var_566 := $memcpy.i8(cmdloc_dummy_var_564, cmdloc_dummy_var_565, $p22, $p23, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_566;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_feature_caps_exchange: ref;

axiom wcn36xx_smd_feature_caps_exchange == $sub.ref(0, 527043);

procedure wcn36xx_smd_feature_caps_exchange($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_feature_caps_exchange($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var cmdloc_dummy_var_570: [ref]i8;
  var cmdloc_dummy_var_571: [ref]i8;
  var cmdloc_dummy_var_572: [ref]i8;
  var cmdloc_dummy_var_573: [ref]i8;
  var cmdloc_dummy_var_574: [ref]i8;
  var cmdloc_dummy_var_575: [ref]i8;
  var cmdloc_dummy_var_576: [ref]i8;
  var cmdloc_dummy_var_577: [ref]i8;
  var cmdloc_dummy_var_578: [ref]i8;
  var cmdloc_dummy_var_579: [ref]i8;
  var vslice_dummy_var_820: i32;
  var vslice_dummy_var_821: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} mutex_lock_nested($p2, 0);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_570 := $M.0;
    call {:si_unique_call 1078} cmdloc_dummy_var_571 := $memset.i8(cmdloc_dummy_var_570, $p3, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_571;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 175);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 0);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 24);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} set_feat_caps($p11, 13);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_572 := $M.0;
    call {:si_unique_call 1080} cmdloc_dummy_var_573 := $memset.i8(cmdloc_dummy_var_572, $p13, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_573;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(24, 63);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_577 := $M.0;
    cmdloc_dummy_var_578 := $M.0;
    call {:si_unique_call 1082} cmdloc_dummy_var_579 := $memcpy.i8(cmdloc_dummy_var_577, cmdloc_dummy_var_578, $p23, $p24, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_579;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i29 := wcn36xx_smd_send_and_wait($p0, $i28);
    call {:si_unique_call 1084} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 24);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(44, 1)), $mul.ref(0, 4));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(44, 1)), $mul.ref(1, 4));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(44, 1)), $mul.ref(2, 4));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i52);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(44, 1)), $mul.ref(3, 4));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i57);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} mutex_unlock($p44);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} vslice_dummy_var_821 := printk.ref(.str.105);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_820 := printk.ref(.str.104);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_574 := $M.0;
    cmdloc_dummy_var_575 := $M.0;
    call {:si_unique_call 1081} cmdloc_dummy_var_576 := $memcpy.i8(cmdloc_dummy_var_574, cmdloc_dummy_var_575, $p20, $p21, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_576;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_feat_caps_info: ref;

axiom wcn36xx_feat_caps_info == $sub.ref(0, 528075);

procedure wcn36xx_feat_caps_info($p0: ref);
  free requires assertsPassed;



implementation wcn36xx_feat_caps_info($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $i1: i32;
  var vslice_dummy_var_822: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $p2, $p3, $i4, $i5, $p6, $i8, $i9, $i1, vslice_dummy_var_822 := wcn36xx_feat_caps_info_loop_$bb1($p0, $p2, $p3, $i4, $i5, $p6, $i8, $i9, $i1, vslice_dummy_var_822);
    goto $bb1_last;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(44, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i4 := get_feat_caps($p3, $i1);
    call {:si_unique_call 1089} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i1, 1);
    call {:si_unique_call 1092} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 127);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i8;
    goto $bb6_dummy;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p6 := wcn36xx_get_cap_name($i1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_822 := printk.ref.ref(.str.142, $p6);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6030;
}



const wcn36xx_detect_chip_version: ref;

axiom wcn36xx_detect_chip_version == $sub.ref(0, 529107);

procedure wcn36xx_detect_chip_version($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_detect_chip_version($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_823: i32;
  var vslice_dummy_var_824: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(44, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i3 := get_feat_caps($p2, 2);
    call {:si_unique_call 1094} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_824 := printk.ref(.str.168);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(60, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_823 := printk.ref(.str.167);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(60, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 1);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_init: ref;

axiom wcn36xx_dxe_init == $sub.ref(0, 530139);

procedure wcn36xx_dxe_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation wcn36xx_dxe_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var vslice_dummy_var_825: i32;
  var vslice_dummy_var_826: i32;
  var vslice_dummy_var_827: i32;
  var vslice_dummy_var_828: i32;
  var vslice_dummy_var_829: i32;
  var vslice_dummy_var_830: i32;
  var vslice_dummy_var_831: i32;
  var vslice_dummy_var_832: i32;
  var vslice_dummy_var_833: i32;
  var vslice_dummy_var_834: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 0);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 23689);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.16, $p1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} wcn36xx_dxe_write_register($p0, 2105344, $i2);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, 655377);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(60, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.16, $p1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} wcn36xx_dxe_write_register($p0, 2099984, $i7);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_825 := wcn36xx_dxe_init_descs($p8);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1168, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} wcn36xx_dxe_init_tx_bd($p10, $p11);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1)), $mul.ref(32, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} wcn36xx_dxe_write_register($p0, 2106396, $i16);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} wcn36xx_dxe_write_register($p0, 2106388, 23);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} wcn36xx_dxe_read_register($p0, 2105352, $p1);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_826 := wcn36xx_dxe_enable_ch_int($p0, 1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_827 := wcn36xx_dxe_init_descs($p18);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1144, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} wcn36xx_dxe_init_tx_bd($p20, $p21);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1)), $mul.ref(32, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} wcn36xx_dxe_write_register($p0, 2106652, $i26);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} wcn36xx_dxe_write_register($p0, 2106644, 23);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} wcn36xx_dxe_read_register($p0, 2105352, $p1);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vslice_dummy_var_828 := wcn36xx_dxe_enable_ch_int($p0, 16);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_829 := wcn36xx_dxe_init_descs($p28);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} vslice_dummy_var_830 := wcn36xx_dxe_ch_alloc_skb($p0, $p30);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1)), $mul.ref(32, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} wcn36xx_dxe_write_register($p0, 2106460, $i36);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} wcn36xx_dxe_write_register($p0, 2106444, 11);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(920, 1)), $mul.ref(32, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} wcn36xx_dxe_write_register($p0, 2106452, $i43);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} wcn36xx_dxe_write_register($p0, 2106432, $sub.i32(0, 2072072913));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_831 := wcn36xx_dxe_enable_ch_int($p0, 2);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_832 := wcn36xx_dxe_init_descs($p45);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} vslice_dummy_var_833 := wcn36xx_dxe_ch_alloc_skb($p0, $p47);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1)), $mul.ref(32, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} wcn36xx_dxe_write_register($p0, 2106588, $i53);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} wcn36xx_dxe_write_register($p0, 2106572, 4);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(992, 1)), $mul.ref(32, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} wcn36xx_dxe_write_register($p0, 2106580, $i60);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} wcn36xx_dxe_write_register($p0, 2106560, $sub.i32(0, 2063675089));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_834 := wcn36xx_dxe_enable_ch_int($p0, 8);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i62 := wcn36xx_dxe_request_irqs($p0);
    call {:si_unique_call 1128} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i64 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb4:
    assume $i63 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.16, $p1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} wcn36xx_dxe_write_register($p0, 2117852, $i6);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_debugfs_init: ref;

axiom wcn36xx_debugfs_init == $sub.ref(0, 531171);

procedure wcn36xx_debugfs_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_debugfs_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p43: ref;
  var vslice_dummy_var_835: i32;
  var vslice_dummy_var_836: i32;
  var vslice_dummy_var_837: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1768)), $mul.ref(1688, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p8 := debugfs_create_dir(.str.128, $p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i13 := IS_ERR($p12);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1131} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p21 := debugfs_create_file(.str.130, 384, $p19, $p20, fops_wcn36xx_bmps);
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p21);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p21);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i25 := IS_ERR($p24);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 1135} {:cexpr "tmp___0"} boogie_si_record_i8($i26);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p34 := debugfs_create_file(.str.132, 128, $p32, $p33, fops_wcn36xx_dump);
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p34);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p34);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i38 := IS_ERR($p37);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 1139} {:cexpr "tmp___1"} boogie_si_record_i8($i39);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_837 := printk.ref(.str.131);
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_836 := printk.ref(.str.131);
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_835 := printk.ref(.str.129);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 532203);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    return;
}



const debugfs_create_dir: ref;

axiom debugfs_create_dir == $sub.ref(0, 533235);

procedure debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p2 := external_alloc();
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 534267);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i1 := ldv_is_err($p0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debugfs_create_file: ref;

axiom debugfs_create_file == $sub.ref(0, 535299);

procedure debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} {:cexpr "debugfs_create_file:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p5 := external_alloc();
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 536331);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wcn36xx_dxe_write_register: ref;

axiom wcn36xx_dxe_write_register == $sub.ref(0, 537363);

procedure wcn36xx_dxe_write_register($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation wcn36xx_dxe_write_register($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var vslice_dummy_var_838: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} {:cexpr "wcn36xx_dxe_write_register:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1147} {:cexpr "wcn36xx_dxe_write_register:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(208, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} writel($i2, $p10);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_838 := printk.ref.i32.i32(.str.217, $i1, $i2);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_init_descs: ref;

axiom wcn36xx_dxe_init_descs == $sub.ref(0, 538395);

procedure wcn36xx_dxe_init_descs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_dxe_init_descs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i63: i32;
  var $p64: ref;
  var $i53: i32;
  var $p54: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i12: i32;
  var cmdloc_dummy_var_580: [ref]i8;
  var cmdloc_dummy_var_581: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i4 := $mul.i64($i3, 32);
    call {:si_unique_call 1150} {:cexpr "size"} boogie_si_record_i64($i4);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $p6 := dma_alloc_attrs($0.ref, $i4, $p5, 208, $0.ref);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_580 := $M.0;
    call {:si_unique_call 1152} cmdloc_dummy_var_581 := $memset.i8(cmdloc_dummy_var_580, $p14, 0, $i4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_581;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32(0, $i21);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i23, $p24, $p25, $p26 := 0, $p16, $0.ref, $p19;
    goto $bb8;

  $bb8:
    call $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $p52, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $p62, $p65, $i66, $i67, $i68, $p69, $i70, $p71, $p72, $p73, $p74, $i75, $p76, $i63, $p64, $i53, $p54, $p77, $p78, $p79, $i80, $i81, $i82, $i23, $p24, $p25, $p26 := wcn36xx_dxe_init_descs_loop_$bb8($p0, $p20, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $p52, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $p62, $p65, $i66, $i67, $i68, $p69, $i70, $p71, $p72, $p73, $p74, $i75, $p76, $i63, $p64, $i53, $p54, $p77, $p78, $p79, $i80, $i81, $i82, $i23, $p24, $p25, $p26);
    goto $bb8_last;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p24);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i23);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i32, 32);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i30, $i33);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i23, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i51 == 1);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i23, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i66, 1);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i23, $i67);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i63, $p64 := $i23, $p26;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i53, $p54 := $i63, $p64;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p54, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p24, $mul.ref(1, 32));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i53, 1);
    call {:si_unique_call 1153} {:cexpr "i"} boogie_si_record_i32($i80);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p20);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32($i80, $i81);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i82 == 1);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb36:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i23, $p24, $p25, $p26 := $i80, $p79, $p24, $p78;
    goto $bb36_dummy;

  $bb33:
    assume $i68 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i75);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i57, 1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i59 := $ult.i32($i23, $i58);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb29;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i63, $p64 := $i23, $p26;
    goto $bb32;

  $bb24:
    assume $i51 == 1;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i53, $p54 := $i23, $p26;
    goto $bb26;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1233199);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 4);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 1223983);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 11);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 3329604);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 23);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb18:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb17;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 3312196);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 23);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6264;
}



const wcn36xx_dxe_init_tx_bd: ref;

axiom wcn36xx_dxe_init_tx_bd == $sub.ref(0, 539427);

procedure wcn36xx_dxe_init_tx_bd($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_dxe_init_tx_bd($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $i25: i64;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1154} {:cexpr "chunk_size"} boogie_si_record_i32($i3);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    call {:si_unique_call 1155} {:cexpr "bd_phy_addr"} boogie_si_record_i64($i5);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32(0, $i11);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p13, $p14, $i15, $i16 := $p9, $p7, 0, $i5;
    goto $bb4;

  $bb4:
    call $i17, $i18, $p19, $p20, $i21, $i22, $i23, $p24, $p27, $p28, $i25, $p26, $p29, $p30, $i31, $i32, $i33, $p13, $p14, $i15, $i16 := wcn36xx_dxe_init_tx_bd_loop_$bb4($i3, $p10, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $p24, $p27, $p28, $i25, $p26, $p29, $p30, $i31, $i32, $i33, $p13, $p14, $i15, $i16);
    goto $bb4_last;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i15, 1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, 0);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    assume {:verifier.code 0} true;
    $i25, $p26 := $i16, $p14;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i15, 1);
    call {:si_unique_call 1157} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p10);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i33 := $ult.i32($i31, $i32);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14, $i15, $i16 := $p30, $p26, $i31, $i25;
    goto $bb9_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i16);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p14);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i3);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, $i16);
    call {:si_unique_call 1156} {:cexpr "bd_phy_addr"} boogie_si_record_i64($i22);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i3);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p14, $mul.ref($i23, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i25, $p26 := $i22, $p24;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;
}



const wcn36xx_dxe_read_register: ref;

axiom wcn36xx_dxe_read_register == $sub.ref(0, 540459);

procedure wcn36xx_dxe_read_register($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.16, $M.0, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation wcn36xx_dxe_read_register($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var vslice_dummy_var_839: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} {:cexpr "wcn36xx_dxe_read_register:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(208, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i7 := readl($p6);
    call {:si_unique_call 1160} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, $i7);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.16, $p2);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} vslice_dummy_var_839 := printk.ref.i32.i32(.str.216, $i1, $i11);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_enable_ch_int: ref;

axiom wcn36xx_dxe_enable_ch_int == $sub.ref(0, 541491);

procedure wcn36xx_dxe_enable_ch_int($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $CurrAddr, $M.0, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation wcn36xx_dxe_enable_ch_int($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1163} {:cexpr "wcn36xx_dxe_enable_ch_int:arg:wcn_ch"} boogie_si_record_i16($i1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, 0);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} wcn36xx_dxe_read_register($p0, 2105368, $p2);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.16, $p2);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i3, $i4);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, $i5);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.16, $p2);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} wcn36xx_dxe_write_register($p0, 2105368, $i6);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const wcn36xx_dxe_ch_alloc_skb: ref;

axiom wcn36xx_dxe_ch_alloc_skb == $sub.ref(0, 542523);

procedure wcn36xx_dxe_ch_alloc_skb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $CurrAddr;



implementation wcn36xx_dxe_ch_alloc_skb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p7: ref;
  var $i8: i32;
  var vslice_dummy_var_840: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p3, 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $i14, $p7, $i8, vslice_dummy_var_840 := wcn36xx_dxe_ch_alloc_skb_loop_$bb4($p4, $p10, $p11, $i12, $i13, $i14, $p7, $i8, vslice_dummy_var_840);
    goto $bb4_last;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} vslice_dummy_var_840 := wcn36xx_dxe_fill_skb($p7);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i8, 1);
    call {:si_unique_call 1167} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p4);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32($i12, $i13);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p11, $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6429;
}



const wcn36xx_dxe_request_irqs: ref;

axiom wcn36xx_dxe_request_irqs == $sub.ref(0, 543555);

procedure wcn36xx_dxe_request_irqs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14;



implementation wcn36xx_dxe_request_irqs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i7: i32;
  var $i17: i32;
  var vslice_dummy_var_841: i32;
  var vslice_dummy_var_842: i32;
  var vslice_dummy_var_843: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(196, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i4 := ldv_request_irq_29($i2, wcn36xx_irq_tx_complete, 4, .str.222, $p3);
    call {:si_unique_call 1169} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(200, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i11 := ldv_request_irq_30($i9, wcn36xx_irq_rx_ready, 4, .str.224, $p10);
    call {:si_unique_call 1172} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(200, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} vslice_dummy_var_843 := enable_irq_wake($i15);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} vslice_dummy_var_842 := printk.ref(.str.225);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(196, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} ldv_free_irq_31($i19, $p20);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i17 := $i7;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_841 := printk.ref(.str.223);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;
}



const wcn36xx_irq_tx_complete: ref;

axiom wcn36xx_irq_tx_complete == $sub.ref(0, 544587);

procedure wcn36xx_irq_tx_complete($i0: i32, $p1: ref) returns ($r: i32);



const ldv_request_irq_29: ref;

axiom ldv_request_irq_29 == $sub.ref(0, 545619);

procedure ldv_request_irq_29($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13;



implementation ldv_request_irq_29($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} {:cexpr "ldv_request_irq_29:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1177} {:cexpr "ldv_request_irq_29:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i6 := reg_check_1($p1);
    call {:si_unique_call 1181} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const wcn36xx_irq_rx_ready: ref;

axiom wcn36xx_irq_rx_ready == $sub.ref(0, 546651);

procedure wcn36xx_irq_rx_ready($i0: i32, $p1: ref) returns ($r: i32);



const ldv_request_irq_30: ref;

axiom ldv_request_irq_30 == $sub.ref(0, 547683);

procedure ldv_request_irq_30($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13;



implementation ldv_request_irq_30($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} {:cexpr "ldv_request_irq_30:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1184} {:cexpr "ldv_request_irq_30:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i6 := reg_check_1($p1);
    call {:si_unique_call 1188} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const enable_irq_wake: ref;

axiom enable_irq_wake == $sub.ref(0, 548715);

procedure enable_irq_wake($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation enable_irq_wake($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} {:cexpr "enable_irq_wake:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i1 := irq_set_irq_wake($i0, 1);
    call {:si_unique_call 1192} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_irq_31: ref;

axiom ldv_free_irq_31 == $sub.ref(0, 549747);

procedure ldv_free_irq_31($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation ldv_free_irq_31($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} {:cexpr "ldv_free_irq_31:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} free_irq($i0, $p1);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    return;
}



const irq_set_irq_wake: ref;

axiom irq_set_irq_wake == $sub.ref(0, 550779);

procedure irq_set_irq_wake($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_irq_wake($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} {:cexpr "irq_set_irq_wake:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1197} {:cexpr "irq_set_irq_wake:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 551811);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1201} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 552843);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(wcn36xx_irq_tx_complete));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 553875);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.9;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.13;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.14 := $i0;
    call {:si_unique_call 1211} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 1212} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.12 := $i0;
    call {:si_unique_call 1209} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 1210} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 1207} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 1208} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 1205} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 1206} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 554907);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1214} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const disable_irq_nosync: ref;

axiom disable_irq_nosync == $sub.ref(0, 555939);

procedure disable_irq_nosync($i0: i32);



const wcn36xx_dxe_rx_frame: ref;

axiom wcn36xx_dxe_rx_frame == $sub.ref(0, 556971);

procedure wcn36xx_dxe_rx_frame($p0: ref);



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 558003);

procedure enable_irq($i0: i32);



const wcn36xx_rx_handle_packets: ref;

axiom wcn36xx_rx_handle_packets == $sub.ref(0, 559035);

procedure wcn36xx_rx_handle_packets($p0: ref, $p1: ref) returns ($r: i32);



const wcn36xx_dxe_fill_skb: ref;

axiom wcn36xx_dxe_fill_skb == $sub.ref(0, 560067);

procedure wcn36xx_dxe_fill_skb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $CurrAddr;



implementation wcn36xx_dxe_fill_skb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p3 := ldv_alloc_skb_27(3872, 32);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $p7 := skb_tail_pointer($p3);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i8 := dma_map_single_attrs($0.ref, $p7, 3872, 2, $0.ref);
    call {:si_unique_call 1220} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p3);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 561099);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);



const wcn36xx_rx_skb: ref;

axiom wcn36xx_rx_skb == $sub.ref(0, 562131);

procedure wcn36xx_rx_skb($p0: ref, $p1: ref) returns ($r: i32);



const buff_to_be: ref;

axiom buff_to_be == $sub.ref(0, 563163);

procedure buff_to_be($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation buff_to_be($p0: ref, $i1: i64)
{
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} {:cexpr "buff_to_be:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i2 := $ult.i64(0, $i1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $i3 := buff_to_be_loop_$bb4($p0, $i1, $i4, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $i3);
    goto $bb4_last;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 4));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i7 := __fswab32($i6);
    call {:si_unique_call 1223} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i3);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref($i8, 4));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i7);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i3, 1);
    call {:si_unique_call 1224} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i11, $i1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 564195);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 565227);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);



const get_rssi0: ref;

axiom get_rssi0 == $sub.ref(0, 566259);

procedure get_rssi0($p0: ref) returns ($r: i32);



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 567291);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);



const ieee80211_is_beacon: ref;

axiom ieee80211_is_beacon == $sub.ref(0, 568323);

procedure ieee80211_is_beacon($i0: i16) returns ($r: i32);



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 569355);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 570387);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i1 := __arch_swab32($i0);
    call {:si_unique_call 1227} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 571419);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 1229} $i1 := devirtbounce.11(0, $i0);
    call {:si_unique_call 1230} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 572451);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 573483);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);



const ldv_alloc_skb_27: ref;

axiom ldv_alloc_skb_27 == $sub.ref(0, 574515);

procedure ldv_alloc_skb_27($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.0, $CurrAddr;



implementation ldv_alloc_skb_27($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} {:cexpr "ldv_alloc_skb_27:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 1233} {:cexpr "ldv_alloc_skb_27:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p2 := ldv_skb_alloc();
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 575547);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 576579);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1236} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $p5 := get_dma_ops($p0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 1240} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1242} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i14 := __phys_addr($i13);
    call {:si_unique_call 1245} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 1246} $i21 := devirtbounce.12($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 1247} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i23 := __phys_addr($i22);
    call {:si_unique_call 1249} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 1243} devirtbounce.6(0, .str.219, 19, 12);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 577611);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 578643);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1253} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1254} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 579675);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1256} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1257} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1258} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1259} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 580707);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p0 := ldv_zalloc(232);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p5 := $M.4;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} ldv_set_add($p5, $p2);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 581739);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1262} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1263} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1265} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p4 := calloc(1, $i0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1267} __VERIFIER_assume($i7);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 582771);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i16 := $M.5;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $p1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i19 := $M.5;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.5 := $i20;
    call {:si_unique_call 1269} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 1268} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6691;
}



const reap_tx_dxes: ref;

axiom reap_tx_dxes == $sub.ref(0, 583803);

procedure reap_tx_dxes($p0: ref, $p1: ref);



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 584835);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_free_txskb: ref;

axiom ieee80211_free_txskb == $sub.ref(0, 585867);

procedure ieee80211_free_txskb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_free_txskb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 586899);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 587931);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1270} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1271} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ieee80211_wake_queues: ref;

axiom ieee80211_wake_queues == $sub.ref(0, 588963);

procedure ieee80211_wake_queues($p0: ref);



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 589995);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 591027);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 592059);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1275} $i2 := devirtbounce.13(0, $p1);
    call {:si_unique_call 1276} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 593091);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1278} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p5 := get_dma_ops($p0);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 1280} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 1282} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 1284} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 1285} $p20 := devirtbounce.14($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 594123);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 595155);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 1289} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 1291} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 1290} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 596187);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1293} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 597219);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 1295} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 1296} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const writel: ref;

axiom writel == $sub.ref(0, 598251);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1298} devirtbounce.15(0, $i0, $p2);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    return;
}



const get_feat_caps: ref;

axiom get_feat_caps == $sub.ref(0, 599283);

procedure get_feat_caps($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation get_feat_caps($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i4: i32;
  var vslice_dummy_var_844: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} {:cexpr "get_feat_caps:arg:cap"} boogie_si_record_i32($i1);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 127);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i32($i1, 32);
    call {:si_unique_call 1301} {:cexpr "arr_idx"} boogie_si_record_i32($i5);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 31);
    call {:si_unique_call 1302} {:cexpr "bit_idx"} boogie_si_record_i32($i6);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref($i7, 4));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32(1, $i6);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, $i10);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 1303} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_844 := printk.ref.i32(.str.103, $i1);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const wcn36xx_get_cap_name: ref;

axiom wcn36xx_get_cap_name == $sub.ref(0, 600315);

procedure wcn36xx_get_cap_name($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation wcn36xx_get_cap_name($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "wcn36xx_get_cap_name:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 22);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i0);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref($i3, 8));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.21, $p4);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p2 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p2 := .str.143;
    goto $bb3;
}



const set_feat_caps: ref;

axiom set_feat_caps == $sub.ref(0, 601347);

procedure set_feat_caps($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_feat_caps($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var vslice_dummy_var_845: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} {:cexpr "set_feat_caps:arg:cap"} boogie_si_record_i32($i1);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 127);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i1, 32);
    call {:si_unique_call 1307} {:cexpr "arr_idx"} boogie_si_record_i32($i4);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 31);
    call {:si_unique_call 1308} {:cexpr "bit_idx"} boogie_si_record_i32($i5);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref($i6, 4));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32(1, $i5);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i8, $i9);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i4);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref($i11, 4));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i10);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_845 := printk.ref.i32(.str.103, $i1);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_start_rsp: ref;

axiom wcn36xx_smd_start_rsp == $sub.ref(0, 602379);

procedure wcn36xx_smd_start_rsp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_smd_start_rsp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i4: i32;
  var cmdloc_dummy_var_582: [ref]i8;
  var cmdloc_dummy_var_583: [ref]i8;
  var cmdloc_dummy_var_584: [ref]i8;
  var cmdloc_dummy_var_585: [ref]i8;
  var cmdloc_dummy_var_586: [ref]i8;
  var cmdloc_dummy_var_587: [ref]i8;
  var cmdloc_dummy_var_588: [ref]i8;
  var cmdloc_dummy_var_589: [ref]i8;
  var cmdloc_dummy_var_590: [ref]i8;
  var cmdloc_dummy_var_591: [ref]i8;
  var cmdloc_dummy_var_592: [ref]i8;
  var cmdloc_dummy_var_593: [ref]i8;
  var vslice_dummy_var_846: i32;
  var vslice_dummy_var_847: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} {:cexpr "wcn36xx_smd_start_rsp:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 143);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64(64, 63);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(64, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_585 := $M.0;
    cmdloc_dummy_var_586 := $M.0;
    call {:si_unique_call 1311} cmdloc_dummy_var_587 := $memcpy.i8(cmdloc_dummy_var_585, cmdloc_dummy_var_586, $p18, $p21, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_587;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64(64, 63);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(129, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(72, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_591 := $M.0;
    cmdloc_dummy_var_592 := $M.0;
    call {:si_unique_call 1313} cmdloc_dummy_var_593 := $memcpy.i8(cmdloc_dummy_var_591, cmdloc_dummy_var_592, $p29, $p32, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_593;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(64, 1)), $mul.ref(64, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(129, 1)), $mul.ref(64, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(40, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(41, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(42, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(43, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(129, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(64, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} vslice_dummy_var_846 := printk.ref.ref.ref(.str.235, $p58, $p60);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(43, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(42, 1));
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(41, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(40, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(3, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_847 := printk.ref.i32.i32.i32.i32.i32.i32(.str.236, $i64, $i67, $i70, $i73, $i77, $i81);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(129, 1));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(72, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_588 := $M.0;
    cmdloc_dummy_var_589 := $M.0;
    call {:si_unique_call 1312} cmdloc_dummy_var_590 := $memcpy.i8(cmdloc_dummy_var_588, cmdloc_dummy_var_589, $p24, $p27, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_590;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(64, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_582 := $M.0;
    cmdloc_dummy_var_583 := $M.0;
    call {:si_unique_call 1310} cmdloc_dummy_var_584 := $memcpy.i8(cmdloc_dummy_var_582, cmdloc_dummy_var_583, $p13, $p16, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_584;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 603411);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1316} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wcn36xx_dxe_allocate_ctl_block: ref;

axiom wcn36xx_dxe_allocate_ctl_block == $sub.ref(0, 604443);

procedure wcn36xx_dxe_allocate_ctl_block($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_dxe_allocate_ctl_block($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i4: i32;
  var $p5: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i4, $p5 := 0, $0.ref;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $i9, $p10, $i11, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $i4, $p5 := wcn36xx_dxe_allocate_ctl_block_loop_$bb4($p0, $p1, $p6, $p7, $i8, $i9, $p10, $i11, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $i4, $p5);
    goto $bb4_last;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p6 := kzalloc(120, 208);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(20, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 0);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $i4);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p6);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i4, 1);
    call {:si_unique_call 1320} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p1);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32($i23, $i24);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i4, $p5 := $i23, $p6;
    goto $bb16_dummy;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p6);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} wcn36xx_dxe_free_ctl_block($p0);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb19;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 605475);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1322} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 606507);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1325} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p5 := external_alloc();
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 607539);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 608571);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_ind_smd_work: ref;

axiom wcn36xx_ind_smd_work == $sub.ref(0, 609603);

procedure wcn36xx_ind_smd_work($p0: ref);



const wcn36xx_smd_rsp_process: ref;

axiom wcn36xx_smd_rsp_process == $sub.ref(0, 610635);

procedure wcn36xx_smd_rsp_process($p0: ref, $p1: ref, $i2: i64);



const complete_: ref;

axiom complete_ == $sub.ref(0, 611667);

procedure complete_($p0: ref);



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 612699);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 613731);

procedure list_add_tail($p0: ref, $p1: ref);



const queue_work: ref;

axiom queue_work == $sub.ref(0, 614763);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 615795);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const wcn36xx_smd_tx_compl_ind: ref;

axiom wcn36xx_smd_tx_compl_ind == $sub.ref(0, 616827);

procedure wcn36xx_smd_tx_compl_ind($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const wcn36xx_smd_missed_beacon_ind: ref;

axiom wcn36xx_smd_missed_beacon_ind == $sub.ref(0, 617859);

procedure wcn36xx_smd_missed_beacon_ind($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const wcn36xx_smd_delete_sta_context_ind: ref;

axiom wcn36xx_smd_delete_sta_context_ind == $sub.ref(0, 618891);

procedure wcn36xx_smd_delete_sta_context_ind($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const ieee80211_report_low_ack: ref;

axiom ieee80211_report_low_ack == $sub.ref(0, 619923);

procedure ieee80211_report_low_ack($p0: ref, $i1: i32);



const ieee80211_connection_loss: ref;

axiom ieee80211_connection_loss == $sub.ref(0, 620955);

procedure ieee80211_connection_loss($p0: ref);



const wcn36xx_dxe_tx_ack_ind: ref;

axiom wcn36xx_dxe_tx_ack_ind == $sub.ref(0, 621987);

procedure wcn36xx_dxe_tx_ack_ind($p0: ref, $i1: i32);



const wcn36xx_start_tx: ref;

axiom wcn36xx_start_tx == $sub.ref(0, 623019);

procedure wcn36xx_start_tx($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.0, $CurrAddr;



implementation wcn36xx_start_tx($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i20: i32;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i70: i16;
  var $i71: i16;
  var $i72: i16;
  var $i73: i16;
  var $i74: i16;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i1;
  var $i99: i1;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i16;
  var $i116: i1;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i1;
  var $i130: i32;
  var $i35: i32;
  var cmdloc_dummy_var_594: [ref]i8;
  var cmdloc_dummy_var_595: [ref]i8;
  var vslice_dummy_var_848: i32;
  var vslice_dummy_var_849: i32;
  var vslice_dummy_var_850: i32;
  var vslice_dummy_var_851: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p3, $0.ref);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p7 := IEEE80211_SKB_CB($p2);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i12 := ieee80211_is_data($i11);
    call {:si_unique_call 1332} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1333} {:cexpr "is_low"} boogie_si_record_i8($i14);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i17 := is_broadcast_ether_addr($p16);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1335} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i23 := is_multicast_ether_addr($p22);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 1337} {:cexpr "tmp___2"} boogie_si_record_i8($i24);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i20, 0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 1338} {:cexpr "bcast"} boogie_si_record_i8($i28);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i14);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p30 := wcn36xx_dxe_get_next_bd($p0, $i29);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p31);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_594 := $M.0;
    call {:si_unique_call 1341} cmdloc_dummy_var_595 := $memset.i8(cmdloc_dummy_var_594, $p36, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_595;
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 64);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 128);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p31, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 25);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p31);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i16($i68);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p69);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i72 := $and.i16($i70, 1);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i73 := $shl.i16($i72, 5);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i74 := $and.i16($i71, $sub.i16(0, 33));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i75 := $or.i16($i74, $i73);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i75);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p31);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(0, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i8.i1($i14);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i98 == 1);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i8.i1($i28);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} wcn36xx_set_tx_mgmt($p31, $p0, $p3, $p6, $i116);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.0, $p117);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i121 := ieee80211_is_data_qos($i120);
    call {:si_unique_call 1357} {:cexpr "tmp___7"} boogie_si_record_i32($i121);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i123 := (if $i122 == 1 then 26 else 24);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} wcn36xx_set_tx_pdu($p31, $i123, $i125, 7);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p31);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} buff_to_be($p126, 10);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p31, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $sub.i32(0, 1111638595));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.22, $p3);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i14);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i130 := wcn36xx_dxe_tx_frame($p0, $p128, $p2, $i129);
    call {:si_unique_call 1362} {:cexpr "tmp___8"} boogie_si_record_i32($i130);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i35 := $i130;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb26:
    assume $i98 == 1;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i28);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} wcn36xx_set_tx_data($p31, $p0, $p3, $p1, $p6, $i99);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i104 := ieee80211_is_data_qos($i103);
    call {:si_unique_call 1354} {:cexpr "tmp___6"} boogie_si_record_i32($i104);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i106 := (if $i105 == 1 then 26 else 24);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i110 == 1);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} wcn36xx_set_tx_pdu($p31, $i106, $i108, $i115);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i110 == 1;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(10, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.23, $p111);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb30;

  $bb17:
    assume $i80 == 1;
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1064, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p86 := spinlock_check($p85);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i87 := _raw_spin_lock_irqsave($p86);
    call {:si_unique_call 1347} {:cexpr "flags"} boogie_si_record_i64($i87);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1192, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1192, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $p2);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1064, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} spin_unlock_irqrestore($p95, $i87);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} ieee80211_stop_queues($p97);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i91 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1064, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} spin_unlock_irqrestore($p92, $i87);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_851 := printk.ref(.str.25);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb9;

  $bb19:
    assume $i83 == 1;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_850 := printk.ref(.str.24);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} print_hex_dump(.str.6, .str.23, 2, 32, 1, $p58, $i61, 0);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i48 := $ashr.i32($i47, 4);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i14);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p50 := (if $i49 == 1 then .str.19 else .str.20);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i28);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p52 := (if $i51 == 1 then .str.21 else .str.22);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vslice_dummy_var_849 := printk.ref.ref.i32.i32.i32.ref.ref(.str.18, $p2, $i41, $i44, $i48, $p50, $p52);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} vslice_dummy_var_848 := printk.ref(.str.17);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb3;
}



const ieee80211_is_data: ref;

axiom ieee80211_is_data == $sub.ref(0, 624051);

procedure ieee80211_is_data($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_data($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} {:cexpr "ieee80211_is_data:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 12);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 8);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_broadcast_ether_addr: ref;

axiom is_broadcast_ether_addr == $sub.ref(0, 625083);

procedure is_broadcast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_broadcast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(2, 2));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i3, $i7);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 2));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i8, $i12);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 65535);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 626115);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wcn36xx_dxe_get_next_bd: ref;

axiom wcn36xx_dxe_get_next_bd == $sub.ref(0, 627147);

procedure wcn36xx_dxe_get_next_bd($p0: ref, $i1: i1) returns ($r: ref);
  free requires assertsPassed;



implementation wcn36xx_dxe_get_next_bd($p0: ref, $i1: i1) returns ($r: ref)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1364} {:cexpr "wcn36xx_dxe_get_next_bd:arg:is_low"} boogie_si_record_i1($i1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const ieee80211_stop_queues: ref;

axiom ieee80211_stop_queues == $sub.ref(0, 628179);

procedure ieee80211_stop_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_stop_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_set_tx_data: ref;

axiom wcn36xx_set_tx_data == $sub.ref(0, 629211);

procedure wcn36xx_set_tx_data($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i1);
  free requires assertsPassed;
  modifies $M.0, $M.22;



implementation wcn36xx_set_tx_data($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i1)
{
  var $i6: i8;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i16;
  var $i22: i16;
  var $i23: i16;
  var $i24: i16;
  var $i25: i16;
  var $i26: i16;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $p63: ref;
  var $i64: i16;
  var $i65: i16;
  var $i66: i16;
  var $i67: i16;
  var $i68: i16;
  var $i69: i16;
  var $p51: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i75: i1;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i1;
  var $p81: ref;
  var $i82: i16;
  var $i83: i16;
  var $i84: i16;
  var $i85: i1;
  var $p86: ref;
  var $i87: i16;
  var $i88: i16;
  var $i89: i16;
  var $p90: ref;
  var $i91: i8;
  var $i92: i8;
  var $i93: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1365} {:cexpr "wcn36xx_set_tx_data:arg:bcast"} boogie_si_record_i1($i5);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(23, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i9 := $and.i8($i8, $sub.i8(0, 97));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i9);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p3);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p54 := get_vif_by_addr($p1, $p53);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 80)), $mul.ref(73, 1));
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(25, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i56);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p54, $mul.ref(0, 80)), $mul.ref(74, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(26, 1));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i59);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p54, $mul.ref(0, 80)), $mul.ref(75, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(2, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i16($i62);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p63);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i66 := $and.i16($i64, 7);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i67 := $shl.i16($i66, 12);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i68 := $and.i16($i65, $sub.i16(0, 28673));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i69 := $or.i16($i68, $i67);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $i69);
    assume {:verifier.code 0} true;
    $p51 := $p54;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i74 := ieee80211_is_nullfunc($i73);
    call {:si_unique_call 1368} {:cexpr "tmp"} boogie_si_record_i32($i74);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i75 == 1);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p3);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i6);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p2, $p51);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i85 == 1;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p0);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i88 := $and.i16($i87, $sub.i16(0, 129));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i89 := $or.i16($i88, 128);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, $i89);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i92 := $and.i8($i91, $sub.i8(0, 4));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i93 := $or.i8($i92, 1);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i93);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i77 == 1;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(17, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.30, $p78);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i79);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p0);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i83 := $and.i16($i82, $sub.i16(0, 9));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i84 := $or.i16($i83, 8);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i84);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb16;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.24, $p12);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(14, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.25, $p18);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(2, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i16($i19);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p20);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i23 := $and.i16($i21, 7);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i24 := $shl.i16($i23, 12);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i25 := $and.i16($i22, $sub.i16(0, 28673));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i26 := $or.i16($i25, $i24);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i26);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 3);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i38 == 1);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 7);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p51 := $p13;
    goto $bb14;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.28, $p45);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(25, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(13, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.29, $p48);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(26, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb7;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(15, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.26, $p30);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(25, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.27, $p33);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(26, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ieee80211_is_data_qos: ref;

axiom ieee80211_is_data_qos == $sub.ref(0, 630243);

procedure ieee80211_is_data_qos($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_data_qos($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} {:cexpr "ieee80211_is_data_qos:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 140);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 136);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wcn36xx_set_tx_pdu: ref;

axiom wcn36xx_set_tx_pdu == $sub.ref(0, 631275);

procedure wcn36xx_set_tx_pdu($p0: ref, $i1: i32, $i2: i32, $i3: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_set_tx_pdu($p0: ref, $i1: i32, $i2: i32, $i3: i16)
{
  var $i4: i8;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i16;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p22: ref;
  var $i23: i16;
  var $i24: i16;
  var $i25: i16;
  var $i26: i16;
  var $i27: i16;
  var $i28: i16;
  var $p30: ref;
  var $i31: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} {:cexpr "wcn36xx_set_tx_pdu:arg:mpdu_header_len"} boogie_si_record_i32($i1);
    call {:si_unique_call 1371} {:cexpr "wcn36xx_set_tx_pdu:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1372} {:cexpr "wcn36xx_set_tx_pdu:arg:tid"} boogie_si_record_i16($i3);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i1);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(11, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i4);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(10, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 40);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(11, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i16($i11);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(10, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i16($i16);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i13, $i18);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(8, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i24 := $and.i16($i20, 511);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i25 := $shl.i16($i24, 7);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i26 := $and.i16($i23, 127);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i27 := $or.i16($i26, $i25);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $i27);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i2);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(14, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i28);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i16.i8($i3);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(6, 1)), $mul.ref(13, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i31, 15);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i34, $sub.i8(0, 16));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i37 := $or.i8($i36, $i35);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i37);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_set_tx_mgmt: ref;

axiom wcn36xx_set_tx_mgmt == $sub.ref(0, 632307);

procedure wcn36xx_set_tx_mgmt($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i1);
  free requires assertsPassed;
  modifies $M.0, $M.22;



implementation wcn36xx_set_tx_mgmt($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i1)
{
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i16;
  var $i18: i16;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $i41: i8;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i8;
  var $i51: i8;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $i62: i8;
  var $i63: i8;
  var $i64: i1;
  var $p65: ref;
  var $i66: i16;
  var $i67: i16;
  var $i68: i16;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $i72: i8;
  var $p73: ref;
  var $i74: i8;
  var $i75: i8;
  var $i76: i8;
  var $p77: ref;
  var $i78: i8;
  var $i79: i8;
  var $i80: i8;
  var vslice_dummy_var_852: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1373} {:cexpr "wcn36xx_set_tx_mgmt:arg:bcast"} boogie_si_record_i1($i4);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p8 := get_vif_by_addr($p1, $p7);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(73, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(25, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(74, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(26, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i17 := $and.i16($i16, $sub.i16(0, 9));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i18 := $or.i16($i17, 8);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i18);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i23 := ieee80211_is_mgmt($i22);
    call {:si_unique_call 1376} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i46 := ieee80211_is_ctl($i45);
    call {:si_unique_call 1378} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vslice_dummy_var_852 := printk.ref(.str.229);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i5;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i64 == 1);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(23, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i79 := $and.i8($i78, $sub.i8(0, 32));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i80 := $or.i8($i79, 9);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i80);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p2, $p8);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i64 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i67 := $and.i16($i66, $sub.i16(0, 129));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i68 := $or.i16($i67, 128);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i68);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, $sub.i8(0, 4));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i72 := $or.i8($i71, 1);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i72);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(23, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i75 := $and.i8($i74, $sub.i8(0, 32));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i76 := $or.i8($i75, 10);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, $i76);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i55 == 1;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i60 := ieee80211_is_probe_req($i59);
    call {:si_unique_call 1381} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i5;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb12;

  $bb9:
    assume $i61 == 1;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb11;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(23, 1));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i49, $sub.i8(0, 97));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i51 := $or.i8($i50, 96);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i51);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i34 := (if $i33 == 1 then 3 else 2);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(23, 1));
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i35, 3);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i39 := $shl.i8($i38, 5);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i37, $sub.i8(0, 97));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i41 := $or.i8($i40, $i39);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i41);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_dxe_tx_frame: ref;

axiom wcn36xx_dxe_tx_frame == $sub.ref(0, 633339);

procedure wcn36xx_dxe_tx_frame($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wcn36xx_dxe_tx_frame($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $i28: i32;
  var vslice_dummy_var_853: i32;
  var vslice_dummy_var_854: i32;
  var vslice_dummy_var_855: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1382} {:cexpr "wcn36xx_dxe_tx_frame:arg:is_low"} boogie_si_record_i1($i3);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(848, 1));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p7 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p14 := spinlock_check($p13);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 1385} {:cexpr "flags"} boogie_si_record_i64($i15);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} spin_unlock_irqrestore($p31, $i15);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 40);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i46 := $M.1;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i50 := $M.1;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 2);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 2);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p2);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i78 := dma_map_single_attrs($0.ref, $p72, $i77, 1, $0.ref);
    call {:si_unique_call 1394} {:cexpr "tmp___0"} boogie_si_record_i64($i78);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i64.i32($i78);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p63, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p63, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p63, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p63, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i92 := $M.1;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 2);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i96 := $M.1;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 2);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p109);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i4);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(60, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} wcn36xx_dxe_write_register($p0, $i121, $i123);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb26:
    assume $i111 == 1;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(68, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb28;

  $bb29:
    assume $i114 == 1;
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(216, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    call {:si_unique_call 1398} vslice_dummy_var_855 := devirtbounce.9($p118, 0, 1024);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i98 == 1;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p60, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} print_hex_dump(.str.6, .str.11, 2, 32, 1, $p102, $i107, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i94 == 1;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p63);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} print_hex_dump(.str.6, .str.10, 2, 32, 1, $p95, 32, 0);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i67 == 1;
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_854 := printk.ref(.str.9);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb6;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} print_hex_dump(.str.6, .str.8, 2, 32, 1, $p58, 40, 0);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i52 == 1;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p34);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} print_hex_dump(.str.6, .str.7, 2, 32, 1, $p53, 32, 0);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_853 := printk.ref(.str.5);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(0, 1));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} ieee80211_stop_queues($p23);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(1136, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} spin_unlock_irqrestore($p27, $i15);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(776, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const get_vif_by_addr: ref;

axiom get_vif_by_addr == $sub.ref(0, 634371);

procedure get_vif_by_addr($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_vif_by_addr($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p11: ref;
  var $p21: ref;
  var vslice_dummy_var_856: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} vslice_dummy_var_856 := printk.ref.ref(.str.228, $p1);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $p16, $p17, $i18, $i19, $p20, $p23, $p24, $p25, $p26, $i27, $i28, $p11 := get_vif_by_addr_loop_$bb4($p1, $i9, $p12, $p13, $p14, $p16, $p17, $i18, $i19, $p20, $p23, $p24, $p25, $p26, $i27, $i28, $p11);
    goto $bb4_last;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(256, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i18 := memcmp($p17, $p1, 6);
    call {:si_unique_call 1400} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i9);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p24;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7699;
}



const ieee80211_is_mgmt: ref;

axiom ieee80211_is_mgmt == $sub.ref(0, 635403);

procedure ieee80211_is_mgmt($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_mgmt($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} {:cexpr "ieee80211_is_mgmt:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 12);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_is_ctl: ref;

axiom ieee80211_is_ctl == $sub.ref(0, 636435);

procedure ieee80211_is_ctl($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_ctl($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} {:cexpr "ieee80211_is_ctl:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 12);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 4);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_is_probe_req: ref;

axiom ieee80211_is_probe_req == $sub.ref(0, 637467);

procedure ieee80211_is_probe_req($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_probe_req($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} {:cexpr "ieee80211_is_probe_req:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 64);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 638499);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const ieee80211_is_nullfunc: ref;

axiom ieee80211_is_nullfunc == $sub.ref(0, 639531);

procedure ieee80211_is_nullfunc($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_nullfunc($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} {:cexpr "ieee80211_is_nullfunc:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 72);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const read_file_bool_bmps: ref;

axiom read_file_bool_bmps == $sub.ref(0, 640563);

procedure read_file_bool_bmps($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.31, $CurrAddr;



implementation read_file_bool_bmps($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p17: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p4 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    call {:si_unique_call 1407} {:cexpr "read_file_bool_bmps:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(464, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1240)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p38, 10);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p39, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i41 := simple_read_from_buffer($p1, $i2, $p3, $p40, 2);
    call {:si_unique_call 1409} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p17 := $p10;
    goto $bb4;

  $bb4:
    call $p18, $p19, $p20, $p22, $i23, $i24, $p25, $p32, $p33, $p34, $p35, $i36, $i37, $p17 := read_file_bool_bmps_loop_$bb4($i15, $p18, $p19, $p20, $p22, $i23, $i24, $p25, $p32, $p33, $p34, $p35, $i36, $i37, $p17);
    goto $bb4_last;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p25 := $p17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, $i15);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p33;
    goto $bb13_dummy;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 80)), $mul.ref(68, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p30, 48);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p29, 49);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7764;
}



const write_file_bool_bmps: ref;

axiom write_file_bool_bmps == $sub.ref(0, 641595);

procedure write_file_bool_bmps($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation write_file_bool_bmps($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p39: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p65: ref;
  var $i15: i64;
  var vslice_dummy_var_857: i32;
  var vslice_dummy_var_858: i32;
  var vslice_dummy_var_859: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1411} {:cexpr "write_file_bool_bmps:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(464, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    call {:si_unique_call 1412} {:cexpr "write_file_bool_bmps:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i8 := $ult.i64($i2, 31);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i9 := 31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 1413} {:cexpr "buf_size"} boogie_si_record_i32($i10);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $i13 := copy_from_user($p11, $p1, $i12);
    call {:si_unique_call 1415} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 89);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 110);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i18, 121);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, 121);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i15 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1240)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i35, $i37);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb36:
    assume $i38 == 1;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p39 := $p32;
    goto $bb39;

  $bb39:
    call $p40, $p41, $p42, $p43, $p44, $i45, $i46, $p50, $p51, $p52, $p53, $i54, $i55, $p39, vslice_dummy_var_857, vslice_dummy_var_858 := write_file_bool_bmps_loop_$bb39($p7, $i37, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $p50, $p51, $p52, $p53, $i54, $i55, $p39, vslice_dummy_var_857, vslice_dummy_var_858);
    goto $bb39_last;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i37);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i55 == 1);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p39 := $p51;
    goto $bb44_dummy;

  $bb41:
    assume $i46 == 1;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_857 := wcn36xx_enable_keep_alive_null_packet($p7, $p43);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_858 := wcn36xx_pmc_enter_bmps_state($p7, $p43);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i18, 110);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1240)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 1240)), $mul.ref(16, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i61, $i63);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb48:
    assume $i64 == 1;
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p65 := $p58;
    goto $bb51;

  $bb51:
    call $p66, $p67, $p68, $p69, $p70, $i71, $i72, $p75, $p76, $p77, $p78, $i79, $i80, $p65, vslice_dummy_var_859 := write_file_bool_bmps_loop_$bb51($p7, $i63, $p66, $p67, $p68, $p69, $p70, $i71, $i72, $p75, $p76, $p77, $p78, $i79, $i80, $p65, vslice_dummy_var_859);
    goto $bb51_last;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p68, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p68, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 2);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, $i63);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i80 == 1);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb56:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $p65 := $p76;
    goto $bb56_dummy;

  $bb53:
    assume $i72 == 1;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_859 := wcn36xx_pmc_exit_bmps_state($p7, $p69);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, 89);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb21;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i18, 49);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i18, 78);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i18, 78);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb28;

  $bb25:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i18, 49);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb31;

  $bb23:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i18, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb34;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 14);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i9 := $i2;
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7850;

  $bb56_dummy:
    assume false;
    return;

  $bb51_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7875;
}



const simple_open: ref;

axiom simple_open == $sub.ref(0, 642627);

procedure simple_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation simple_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 643659);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1423} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1424} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} might_fault();
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 1427} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1431} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 1433} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 1429} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const wcn36xx_enable_keep_alive_null_packet: ref;

axiom wcn36xx_enable_keep_alive_null_packet == $sub.ref(0, 644691);

procedure wcn36xx_enable_keep_alive_null_packet($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_enable_keep_alive_null_packet($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var vslice_dummy_var_860: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 8192);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i6 := wcn36xx_smd_keep_alive_req($p0, $p1, 1);
    call {:si_unique_call 1437} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_860 := printk.ref.ref(.str.126, .str.127);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wcn36xx_smd_keep_alive_req: ref;

axiom wcn36xx_smd_keep_alive_req == $sub.ref(0, 645723);

procedure wcn36xx_smd_keep_alive_req($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_keep_alive_req($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i1;
  var $i22: i32;
  var $p50: ref;
  var cmdloc_dummy_var_596: [ref]i8;
  var cmdloc_dummy_var_597: [ref]i8;
  var cmdloc_dummy_var_598: [ref]i8;
  var cmdloc_dummy_var_599: [ref]i8;
  var cmdloc_dummy_var_600: [ref]i8;
  var cmdloc_dummy_var_601: [ref]i8;
  var cmdloc_dummy_var_602: [ref]i8;
  var cmdloc_dummy_var_603: [ref]i8;
  var cmdloc_dummy_var_604: [ref]i8;
  var cmdloc_dummy_var_605: [ref]i8;
  var vslice_dummy_var_861: i32;
  var vslice_dummy_var_862: i32;
  var vslice_dummy_var_863: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1439} {:cexpr "wcn36xx_smd_keep_alive_req:arg:packet_type"} boogie_si_record_i32($i2);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(296, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} mutex_lock_nested($p6, 0);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_596 := $M.0;
    call {:si_unique_call 1441} cmdloc_dummy_var_597 := $memset.i8(cmdloc_dummy_var_596, $p7, 0, 28, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_597;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 145);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 0);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 28);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 2);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_861 := printk.ref.i32(.str.98, $i2);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} mutex_unlock($p50);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_598 := $M.0;
    call {:si_unique_call 1442} cmdloc_dummy_var_599 := $memset.i8(cmdloc_dummy_var_598, $p24, 0, $i28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_599;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64(28, 63);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_603 := $M.0;
    cmdloc_dummy_var_604 := $M.0;
    call {:si_unique_call 1446} cmdloc_dummy_var_605 := $memcpy.i8(cmdloc_dummy_var_603, cmdloc_dummy_var_604, $p34, $p35, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_605;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i40 := wcn36xx_smd_send_and_wait($p0, $i39);
    call {:si_unique_call 1448} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i47 := wcn36xx_smd_rsp_status_check($p44, $i46);
    call {:si_unique_call 1451} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i22 := $i47;
    goto $bb7;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} vslice_dummy_var_863 := printk.ref.i32(.str.100, $i47);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i22 := $i47;
    goto $bb7;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_862 := printk.ref(.str.99);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i22 := $i40;
    goto $bb7;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p3);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_600 := $M.0;
    cmdloc_dummy_var_601 := $M.0;
    call {:si_unique_call 1445} cmdloc_dummy_var_602 := $memcpy.i8(cmdloc_dummy_var_600, cmdloc_dummy_var_601, $p31, $p32, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_602;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(30, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 1);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 30);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 646755);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 647787);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 648819);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1453} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1454} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1455} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 649851);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    return;
}



const simple_read_from_buffer: ref;

axiom simple_read_from_buffer == $sub.ref(0, 650883);

procedure simple_read_from_buffer($p0: ref, $i1: i64, $p2: ref, $p3: ref, $i4: i64) returns ($r: i64);
  free requires assertsPassed;



implementation simple_read_from_buffer($p0: ref, $i1: i64, $p2: ref, $p3: ref, $i4: i64) returns ($r: i64)
{
  var $i5: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} {:cexpr "simple_read_from_buffer:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1457} {:cexpr "simple_read_from_buffer:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1458} $i5 := __VERIFIER_nondet_long();
    call {:si_unique_call 1459} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i5);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const write_file_dump: ref;

axiom write_file_dump == $sub.ref(0, 651915);

procedure write_file_dump($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $CurrAddr;



implementation write_file_dump($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i21: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i19: i64;
  var cmdloc_dummy_var_606: [ref]i8;
  var cmdloc_dummy_var_607: [ref]i8;
  var cmdloc_dummy_var_608: [ref]i8;
  var cmdloc_dummy_var_609: [ref]i8;
  var vslice_dummy_var_864: i32;
  var vslice_dummy_var_865: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p4 := $alloc($mul.ref(255, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p6 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 1463} {:cexpr "write_file_dump:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(464, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_606 := $M.0;
    call {:si_unique_call 1464} cmdloc_dummy_var_607 := $memset.i8(cmdloc_dummy_var_606, $p10, 0, 255, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_607;
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p6);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_608 := $M.32;
    call {:si_unique_call 1465} cmdloc_dummy_var_609 := $memset.i8(cmdloc_dummy_var_608, $p11, 0, 20, $zext.i32.i64(16), 0 == 1);
    $M.32 := cmdloc_dummy_var_609;
    call {:si_unique_call 1466} {:cexpr "write_file_dump:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i2, 254);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i13 := 254;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 1467} {:cexpr "buf_size"} boogie_si_record_i32($i14);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i17 := copy_from_user($p15, $p1, $i16);
    call {:si_unique_call 1469} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p5, $p4);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb8:
    call $p22, $i23, $i24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $i21 := write_file_dump_loop_$bb8($p5, $p6, $p22, $i23, $i24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $i21);
    goto $bb8_last;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p22 := strsep($p5, .str.260);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i21);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 4));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i28 := kstrtou32($p22, 0, $p27);
    call {:si_unique_call 1474} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i21, 1);
    call {:si_unique_call 1475} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32($i30, 4);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 4));
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.32, $p32);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(1, 4));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.32, $p34);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(2, 4));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.32, $p36);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(3, 4));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.32, $p38);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(4, 4));
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.32, $p40);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_864 := printk.ref.i32.i32.i32.i32.i32(.str.261, $i33, $i35, $i37, $i39, $i41);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 4));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.32, $p43);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(1, 4));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.32, $p45);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(2, 4));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.32, $p47);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(3, 4));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.32, $p49);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(4, 4));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.32, $p51);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} vslice_dummy_var_865 := wcn36xx_smd_dump_cmd_req($p9, $i44, $i46, $i48, $i50, $i52);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb17:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i30;
    goto $bb17_dummy;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, 14);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8054;
}



const strsep: ref;

axiom strsep == $sub.ref(0, 652947);

procedure strsep($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation strsep($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p2 := external_alloc();
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kstrtou32: ref;

axiom kstrtou32 == $sub.ref(0, 653979);

procedure kstrtou32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} {:cexpr "kstrtou32:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i3 := kstrtouint($p0, $i1, $p2);
    call {:si_unique_call 1479} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const wcn36xx_smd_dump_cmd_req: ref;

axiom wcn36xx_smd_dump_cmd_req == $sub.ref(0, 655011);

procedure wcn36xx_smd_dump_cmd_req($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation wcn36xx_smd_dump_cmd_req($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $i46: i1;
  var $i40: i32;
  var $p48: ref;
  var cmdloc_dummy_var_610: [ref]i8;
  var cmdloc_dummy_var_611: [ref]i8;
  var cmdloc_dummy_var_612: [ref]i8;
  var cmdloc_dummy_var_613: [ref]i8;
  var cmdloc_dummy_var_614: [ref]i8;
  var cmdloc_dummy_var_615: [ref]i8;
  var cmdloc_dummy_var_616: [ref]i8;
  var cmdloc_dummy_var_617: [ref]i8;
  var cmdloc_dummy_var_618: [ref]i8;
  var cmdloc_dummy_var_619: [ref]i8;
  var vslice_dummy_var_866: i32;
  var vslice_dummy_var_867: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $p6 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 1481} {:cexpr "wcn36xx_smd_dump_cmd_req:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1482} {:cexpr "wcn36xx_smd_dump_cmd_req:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1483} {:cexpr "wcn36xx_smd_dump_cmd_req:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1484} {:cexpr "wcn36xx_smd_dump_cmd_req:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1485} {:cexpr "wcn36xx_smd_dump_cmd_req:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} mutex_lock_nested($p7, 0);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_610 := $M.0;
    call {:si_unique_call 1487} cmdloc_dummy_var_611 := $memset.i8(cmdloc_dummy_var_610, $p8, 0, 28, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_611;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 121);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 28);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i1);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i3);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i4);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i5);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_612 := $M.0;
    call {:si_unique_call 1488} cmdloc_dummy_var_613 := $memset.i8(cmdloc_dummy_var_612, $p21, 0, $i25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_613;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64(28, 63);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p6);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_617 := $M.0;
    cmdloc_dummy_var_618 := $M.0;
    call {:si_unique_call 1490} cmdloc_dummy_var_619 := $memcpy.i8(cmdloc_dummy_var_617, cmdloc_dummy_var_618, $p31, $p32, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_619;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i37 := wcn36xx_smd_send_and_wait($p0, $i36);
    call {:si_unique_call 1492} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i45 := wcn36xx_smd_rsp_status_check($p42, $i44);
    call {:si_unique_call 1496} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i40 := $i45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(240, 1));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} mutex_unlock($p48);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} vslice_dummy_var_867 := printk.ref.i32(.str.102, $i45);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i40 := $i45;
    goto $bb6;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_866 := printk.ref(.str.101);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i40 := $i37;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p6);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_614 := $M.0;
    cmdloc_dummy_var_615 := $M.0;
    call {:si_unique_call 1489} cmdloc_dummy_var_616 := $memcpy.i8(cmdloc_dummy_var_614, cmdloc_dummy_var_615, $p28, $p29, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_616;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kstrtouint: ref;

axiom kstrtouint == $sub.ref(0, 656043);

procedure kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1498} {:cexpr "kstrtouint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1499} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 657075);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1501} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_platform_driver_5: ref;

axiom ldv_initialize_platform_driver_5 == $sub.ref(0, 658107);

procedure ldv_initialize_platform_driver_5();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_initialize_platform_driver_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p0 := ldv_zalloc(1464);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ieee80211_ops_6: ref;

axiom ldv_initialize_ieee80211_ops_6 == $sub.ref(0, 659139);

procedure ldv_initialize_ieee80211_ops_6();
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_ieee80211_ops_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p0 := ldv_zalloc(88);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p2 := ldv_zalloc(144);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $M.36 := $p2;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p4 := ldv_zalloc(280);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $M.37 := $p4;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 660171);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.40, $M.41, $M.42, $M.44, $M.45, $M.46, $M.48, $M.0, $M.49, $M.50, $M.51, $M.52, $M.35, $M.36, $M.37, $M.53, $M.13, $M.7, $M.11, $M.9, $M.34, $M.1, $M.8, $M.10, $M.12, $M.14, $M.57, $M.58, $M.54, $M.55, $M.56, $M.59, $M.5, $M.4, $M.73, $M.6, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.182, $M.21, $CurrAddr, $M.16, $M.22, $M.3, $M.31, $M.32, $M.33, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $p172: ref;
  var $i173: i32;
  var $i174: i16;
  var $i175: i32;
  var $i176: i8;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $p183: ref;
  var $i184: i32;
  var $i185: i16;
  var $i186: i32;
  var $i187: i8;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $i195: i32;
  var $i196: i16;
  var $i197: i32;
  var $i198: i8;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i64;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i64;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i211: i64;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $p277: ref;
  var $i278: i32;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i1;
  var $i304: i1;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i317: i32;
  var $i318: i32;
  var cmdloc_dummy_var_620: [ref]i8;
  var cmdloc_dummy_var_621: [ref]i8;
  var cmdloc_dummy_var_622: [ref]i8;
  var cmdloc_dummy_var_623: [ref]i8;
  var cmdloc_dummy_var_624: [ref]i8;
  var cmdloc_dummy_var_625: [ref]i8;
  var vslice_dummy_var_868: i32;
  var vslice_dummy_var_869: i32;
  var vslice_dummy_var_870: i32;
  var vslice_dummy_var_871: i32;
  var vslice_dummy_var_872: i32;
  var vslice_dummy_var_873: i32;
  var vslice_dummy_var_874: i32;
  var vslice_dummy_var_875: i32;
  var vslice_dummy_var_876: i32;
  var vslice_dummy_var_877: i32;
  var vslice_dummy_var_878: i32;
  var vslice_dummy_var_879: i32;
  var vslice_dummy_var_880: i32;
  var vslice_dummy_var_881: i32;
  var vslice_dummy_var_882: i32;
  var vslice_dummy_var_883: i32;
  var vslice_dummy_var_884: i32;
  var vslice_dummy_var_885: i32;
  var vslice_dummy_var_886: i32;
  var vslice_dummy_var_887: i32;
  var vslice_dummy_var_888: i32;
  var vslice_dummy_var_889: i32;

  $bb0:
    call {:si_unique_call 1506} $initialize();
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p3 := ldv_zalloc(232);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} $i5 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i5);
    call {:si_unique_call 1514} {:cexpr "tmp___0"} boogie_si_record_i16($i5);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} $i6 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1516} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i6);
    call {:si_unique_call 1517} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p7 := ldv_zalloc(32);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p9 := ldv_zalloc(232);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1520} $i11 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1521} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i11);
    call {:si_unique_call 1522} {:cexpr "tmp___4"} boogie_si_record_i32($i11);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p12 := ldv_zalloc(8);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1524} $i14 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1525} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i14);
    call {:si_unique_call 1526} {:cexpr "tmp___6"} boogie_si_record_i32($i14);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1527} $i15 := __VERIFIER_nondet_u8();
    call {:si_unique_call 1528} {:cexpr "smack:ext:__VERIFIER_nondet_u8"} boogie_si_record_i8($i15);
    call {:si_unique_call 1529} {:cexpr "tmp___7"} boogie_si_record_i8($i15);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1530} $i16 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1531} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i16);
    call {:si_unique_call 1532} {:cexpr "tmp___8"} boogie_si_record_i32($i16);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p17 := ldv_zalloc(2);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p19 := ldv_zalloc(12);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $p21 := ldv_zalloc(4);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_initialize();
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_620 := $M.38;
    call {:si_unique_call 1537} cmdloc_dummy_var_621 := $memset.i8(cmdloc_dummy_var_620, $p23, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.38 := cmdloc_dummy_var_621;
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_622 := $M.39;
    call {:si_unique_call 1538} cmdloc_dummy_var_623 := $memset.i8(cmdloc_dummy_var_622, $p24, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.39 := cmdloc_dummy_var_623;
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_624 := $M.40;
    call {:si_unique_call 1539} cmdloc_dummy_var_625 := $memset.i8(cmdloc_dummy_var_624, $p25, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.40 := cmdloc_dummy_var_625;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1543} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i69, $p70, $i72, $i73, $p74, $i76, $i77, $p78, $i79, $p80, $p81, $i83, $i84, $p85, $i86, $p87, $p88, $i90, $i91, $p92, $i93, $p94, $p95, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $p126, $p127, $p128, $i130, $i131, $p132, $p133, $p134, $i136, $i137, $p138, $p139, $p140, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $p160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i171, $p172, $i173, $i174, $i175, $i176, $i178, $i179, $p180, $p181, $i182, $p183, $i184, $i185, $i186, $i187, $i189, $i190, $p191, $p192, $i193, $p194, $i195, $i196, $i197, $i198, $i200, $i201, $p202, $i203, $i204, $i205, $p206, $i207, $i208, $i209, $p210, $i211, $i212, $i213, $p214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i225, $i226, $p227, $i229, $i230, $p231, $i233, $i234, $p235, $p236, $i238, $i239, $p240, $p241, $i243, $i244, $p245, $p246, $i248, $i249, $p250, $p251, $p252, $i254, $i255, $p256, $p257, $p258, $i260, $i261, $p262, $p263, $p264, $i266, $i267, $p268, $p269, $i270, $i271, $p272, $p273, $i274, $i275, $p276, $p277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $p315, $i317, $i318, vslice_dummy_var_868, vslice_dummy_var_869, vslice_dummy_var_870, vslice_dummy_var_871, vslice_dummy_var_872, vslice_dummy_var_873, vslice_dummy_var_874, vslice_dummy_var_875, vslice_dummy_var_876, vslice_dummy_var_877, vslice_dummy_var_878, vslice_dummy_var_879, vslice_dummy_var_880, vslice_dummy_var_881, vslice_dummy_var_882, vslice_dummy_var_883, vslice_dummy_var_884, vslice_dummy_var_885, vslice_dummy_var_886, vslice_dummy_var_887, vslice_dummy_var_888, vslice_dummy_var_889 := main_loop_$bb1($p0, $p1, $p2, $p4, $i5, $i6, $p8, $p10, $i11, $p13, $i14, $i15, $i16, $p18, $p20, $p22, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i69, $p70, $i72, $i73, $p74, $i76, $i77, $p78, $i79, $p80, $p81, $i83, $i84, $p85, $i86, $p87, $p88, $i90, $i91, $p92, $i93, $p94, $p95, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $p109, $p110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $p126, $p127, $p128, $i130, $i131, $p132, $p133, $p134, $i136, $i137, $p138, $p139, $p140, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $p160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i171, $p172, $i173, $i174, $i175, $i176, $i178, $i179, $p180, $p181, $i182, $p183, $i184, $i185, $i186, $i187, $i189, $i190, $p191, $p192, $i193, $p194, $i195, $i196, $i197, $i198, $i200, $i201, $p202, $i203, $i204, $i205, $p206, $i207, $i208, $i209, $p210, $i211, $i212, $i213, $p214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i225, $i226, $p227, $i229, $i230, $p231, $i233, $i234, $p235, $p236, $i238, $i239, $p240, $p241, $i243, $i244, $p245, $p246, $i248, $i249, $p250, $p251, $p252, $i254, $i255, $p256, $p257, $p258, $i260, $i261, $p262, $p263, $p264, $i266, $i267, $p268, $p269, $i270, $i271, $p272, $p273, $i274, $i275, $p276, $p277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $p315, $i317, $i318, vslice_dummy_var_868, vslice_dummy_var_869, vslice_dummy_var_870, vslice_dummy_var_871, vslice_dummy_var_872, vslice_dummy_var_873, vslice_dummy_var_874, vslice_dummy_var_875, vslice_dummy_var_876, vslice_dummy_var_877, vslice_dummy_var_878, vslice_dummy_var_879, vslice_dummy_var_880, vslice_dummy_var_881, vslice_dummy_var_882, vslice_dummy_var_883, vslice_dummy_var_884, vslice_dummy_var_885, vslice_dummy_var_886, vslice_dummy_var_887, vslice_dummy_var_888, vslice_dummy_var_889);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ldv_stop();
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb205_dummy;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i299 := $M.48;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb242:
    assume $i300 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1668} $i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i301);
    call {:si_unique_call 1670} {:cexpr "tmp___15"} boogie_si_record_i32($i301);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i302 := $slt.i32($i301, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i301, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_stop();
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb247:
    assume $i303 == 1;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i313 := $M.48;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 2);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb259:
    assume $i314 == 1;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p315 := $M.34;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} vslice_dummy_var_889 := wcn36xx_remove($p315);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i317 := $M.44;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i318 := $sub.i32($i317, 1);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.44 := $i318;
    call {:si_unique_call 1677} {:cexpr "ref_cnt"} boogie_si_record_i32($i318);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb245:
    assume $i302 == 1;
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb249;

  $bb250:
    assume $i304 == 1;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i305 := $M.48;
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 1);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb252:
    assume $i306 == 1;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p307 := $M.34;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $i308 := wcn36xx_probe($p307);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.53 := $i308;
    call {:si_unique_call 1672} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i308);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i309 := $M.53;
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 0);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb254:
    assume $i310 == 1;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i311 := $M.44;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i312 := $add.i32($i311, 1);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.44 := $i312;
    call {:si_unique_call 1674} {:cexpr "ref_cnt"} boogie_si_record_i32($i312);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb5:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i297 := $M.46;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb239:
    assume $i298 == 1;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ldv_main_exported_3();
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i280 := $M.45;
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb209:
    assume $i281 == 1;
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1650} $i282 := __VERIFIER_nondet_int();
    call {:si_unique_call 1651} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i282);
    call {:si_unique_call 1652} {:cexpr "tmp___14"} boogie_si_record_i32($i282);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i282, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i282, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_stop();
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb214:
    assume $i284 == 1;
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i290 := $M.45;
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 1);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb227:
    assume $i291 == 1;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i292 := wcn36xx_init();
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $M.52 := $i292;
    call {:si_unique_call 1657} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i292);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i293 := $M.52;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 0);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i295 := $M.52;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb232:
    assume $i296 == 1;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb229:
    assume $i294 == 1;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_file_operations_3();
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_file_operations_4();
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_initialize_ieee80211_ops_6();
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb212:
    assume $i283 == 1;
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i282, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb216;

  $bb217:
    assume $i285 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i286 := $M.45;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 3);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb219:
    assume $i287 == 1;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i288 := $M.44;
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 0);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb221;

  $bb222:
    assume $i289 == 1;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} wcn36xx_exit();
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb3:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i26, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i278 := $M.42;
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i279 := $ne.i32($i278, 0);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb206:
    assume $i279 == 1;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} ldv_main_exported_4();
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb14:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb11;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i35 := $M.41;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1551} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1552} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 1553} {:cexpr "tmp___13"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i37, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i37, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_stop();
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb33:
    assume $i43 == 1;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i266 := $M.41;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i270 := $M.41;
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 3);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i274 := $M.41;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 2);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb199:
    assume $i275 == 1;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p276 := $M.36;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p277 := $M.37;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} wcn36xx_remove_interface($p276, $p277);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb196:
    assume $i271 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p272 := $M.36;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p273 := $M.37;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} wcn36xx_remove_interface($p272, $p273);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume $i267 == 1;
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p268 := $M.36;
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p269 := $M.37;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} wcn36xx_remove_interface($p268, $p269);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb31:
    assume $i42 == 1;
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i248 := $M.41;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 1);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i254 := $M.41;
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 3);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i260 := $M.41;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 2);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb190:
    assume $i261 == 1;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p262 := $M.36;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p263 := $M.37;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p264 := $M.35;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_888 := wcn36xx_sta_remove($p262, $p263, $p264);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb187:
    assume $i255 == 1;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p256 := $M.36;
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p257 := $M.37;
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p258 := $M.35;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_887 := wcn36xx_sta_remove($p256, $p257, $p258);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb184:
    assume $i249 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p250 := $M.36;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p251 := $M.37;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p252 := $M.35;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_886 := wcn36xx_sta_remove($p250, $p251, $p252);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb29:
    assume $i41 == 1;
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i233 := $M.41;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i238 := $M.41;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 3);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i243 := $M.41;
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 2);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb181:
    assume $i244 == 1;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p245 := $M.36;
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p246 := $M.37;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_885 := wcn36xx_add_interface($p245, $p246);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb178:
    assume $i239 == 1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p240 := $M.36;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p241 := $M.37;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_884 := wcn36xx_add_interface($p240, $p241);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i234 == 1;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p235 := $M.36;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p236 := $M.37;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_883 := wcn36xx_add_interface($p235, $p236);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb27:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i37, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i44 == 1);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i221 := $M.41;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i225 := $M.41;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 3);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i229 := $M.41;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 2);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb172:
    assume $i230 == 1;
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p231 := $M.36;
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_882 := wcn36xx_set_rts_threshold($p231, $i14);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i226 == 1;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p227 := $M.36;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_881 := wcn36xx_set_rts_threshold($p227, $i14);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume $i222 == 1;
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $p223 := $M.36;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} vslice_dummy_var_880 := wcn36xx_set_rts_threshold($p223, $i14);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb36:
    assume $i44 == 1;
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i212 := $M.41;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i215 := $M.41;
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 3);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i218 := $M.41;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 2);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb163:
    assume $i219 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p220 := $M.36;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} wcn36xx_sw_scan_start($p220);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i216 == 1;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p217 := $M.36;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} wcn36xx_sw_scan_start($p217);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i213 == 1;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p214 := $M.36;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} wcn36xx_sw_scan_start($p214);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb25:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i37, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i37, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i46 == 1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i200 := $M.41;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i204 := $M.41;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 3);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i208 := $M.41;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 2);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb154:
    assume $i209 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p210 := $M.36;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i211 := $load.i64($M.38, $p0);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} wcn36xx_configure_filter($p210, $i6, $p22, $i211);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i205 == 1;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p206 := $M.36;
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.38, $p0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} wcn36xx_configure_filter($p206, $i6, $p22, $i207);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i201 == 1;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p202 := $M.36;
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.38, $p0);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} wcn36xx_configure_filter($p202, $i6, $p22, $i203);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb40:
    assume $i46 == 1;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i167 := $M.41;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i178 := $M.41;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 3);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i189 := $M.41;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 2);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb145:
    assume $i190 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p191 := $M.36;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p192 := $M.37;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.40, $p2);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p194 := $M.35;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i5);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i195);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i15);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i8($i197);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} vslice_dummy_var_879 := wcn36xx_ampdu_action($p191, $p192, $i193, $p194, $i196, $p18, $i198);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i179 == 1;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p180 := $M.36;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p181 := $M.37;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.40, $p2);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p183 := $M.35;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i5);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i16($i184);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i15);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_878 := wcn36xx_ampdu_action($p180, $p181, $i182, $p183, $i185, $p18, $i187);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i168 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p169 := $M.36;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p170 := $M.37;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.40, $p2);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p172 := $M.35;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i5);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i16($i173);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i15);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i8($i175);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_877 := wcn36xx_ampdu_action($p169, $p170, $i171, $p172, $i174, $p18, $i176);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb38:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i37, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i161 := $M.41;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 3);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb133:
    assume $i162 == 1;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p163 := $M.36;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $i164 := wcn36xx_resume($p163);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $M.51 := $i164;
    call {:si_unique_call 1604} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i164);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i165 := $M.51;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb135:
    assume $i166 == 1;
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb42:
    assume $i47 == 1;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i152 := $M.41;
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i155 := $M.41;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 3);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i158 := $M.41;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb130:
    assume $i159 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p160 := $M.36;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} wcn36xx_tx($p160, $p13, $p10);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i156 == 1;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p157 := $M.36;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} wcn36xx_tx($p157, $p13, $p10);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i153 == 1;
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $p154 := $M.36;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} wcn36xx_tx($p154, $p13, $p10);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb23:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i50 == 1);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i142 := $M.41;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 3);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i147 := $M.41;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb121:
    assume $i148 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p149 := $M.36;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} wcn36xx_stop($p149);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i150 := $M.44;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32($i150, 1);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.44 := $i151;
    call {:si_unique_call 1596} {:cexpr "ref_cnt"} boogie_si_record_i32($i151);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume $i143 == 1;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p144 := $M.36;
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} wcn36xx_stop($p144);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i145 := $M.44;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32($i145, 1);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.44 := $i146;
    call {:si_unique_call 1593} {:cexpr "ref_cnt"} boogie_si_record_i32($i146);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb48:
    assume $i50 == 1;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i124 := $M.41;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i130 := $M.41;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 3);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i136 := $M.41;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 2);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb115:
    assume $i137 == 1;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p138 := $M.36;
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p139 := $M.37;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p140 := $M.35;
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_876 := wcn36xx_sta_add($p138, $p139, $p140);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i131 == 1;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p132 := $M.36;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p133 := $M.37;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p134 := $M.35;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} vslice_dummy_var_875 := wcn36xx_sta_add($p132, $p133, $p134);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume $i125 == 1;
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p126 := $M.36;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p127 := $M.37;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p128 := $M.35;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_874 := wcn36xx_sta_add($p126, $p127, $p128);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb46:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i51 == 1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i115 := $M.41;
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i118 := $M.41;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 3);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i121 := $M.41;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 2);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume $i122 == 1;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p123 := $M.36;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} wcn36xx_sw_scan_complete($p123);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb103:
    assume $i119 == 1;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p120 := $M.36;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} wcn36xx_sw_scan_complete($p120);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume $i116 == 1;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p117 := $M.36;
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} wcn36xx_sw_scan_complete($p117);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb50:
    assume $i51 == 1;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i103 := $M.41;
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i107 := $M.41;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 3);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i111 := $M.41;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 2);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb97:
    assume $i112 == 1;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p113 := $M.36;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p114 := $M.37;
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} wcn36xx_bss_info_changed($p113, $p114, $p4, $i11);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i108 == 1;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p109 := $M.36;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p110 := $M.37;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} wcn36xx_bss_info_changed($p109, $p110, $p4, $i11);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i104 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p105 := $M.36;
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p106 := $M.37;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} wcn36xx_bss_info_changed($p105, $p106, $p4, $i11);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb44:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i53 == 1);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i97 := $M.41;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume $i98 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p99 := $M.36;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i100 := wcn36xx_suspend($p99, $p8);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.50 := $i100;
    call {:si_unique_call 1571} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i100);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i101 := $M.50;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i102 == 1;
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb54:
    assume $i53 == 1;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i76 := $M.41;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i83 := $M.41;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 3);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i90 := $M.41;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb82:
    assume $i91 == 1;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p92 := $M.36;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.39, $p1);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p94 := $M.37;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p95 := $M.35;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_873 := wcn36xx_set_key($p92, $i93, $p94, $p95, $p20);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume $i84 == 1;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p85 := $M.36;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.39, $p1);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p87 := $M.37;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p88 := $M.35;
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_872 := wcn36xx_set_key($p85, $i86, $p87, $p88, $p20);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume $i77 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p78 := $M.36;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.39, $p1);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p80 := $M.37;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p81 := $M.35;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_871 := wcn36xx_set_key($p78, $i79, $p80, $p81, $p20);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb52:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i54 == 1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i64 := $M.41;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i68 := $M.41;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 3);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i72 := $M.41;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb73:
    assume $i73 == 1;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p74 := $M.36;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_870 := wcn36xx_config($p74, $i16);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i69 == 1;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p70 := $M.36;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_869 := wcn36xx_config($p70, $i16);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i65 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p66 := $M.36;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_868 := wcn36xx_config($p66, $i16);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb56:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb35;

  $bb58:
    assume $i55 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i56 := $M.41;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i57 == 1;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $p58 := $M.36;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $i59 := wcn36xx_start($p58);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.49 := $i59;
    call {:si_unique_call 1555} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i59);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i60 := $M.49;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i61 == 1;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i62 := $M.44;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.44 := $i63;
    call {:si_unique_call 1557} {:cexpr "ref_cnt"} boogie_si_record_i32($i63);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb205_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1548} $i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 1549} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i26);
    call {:si_unique_call 1550} {:cexpr "tmp___12"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 661203);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 662235);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const __VERIFIER_nondet_u8: ref;

axiom __VERIFIER_nondet_u8 == $sub.ref(0, 663267);

procedure __VERIFIER_nondet_u8() returns ($r: i8);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 664299);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p0 := $M.4;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} ldv_set_init($p0);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 665331);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 666363);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.56, $M.42, $M.44, $M.0, $M.31, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var vslice_dummy_var_890: i64;
  var vslice_dummy_var_891: i64;
  var vslice_dummy_var_892: i64;
  var vslice_dummy_var_893: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p0 := ldv_zalloc(8);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $p2 := ldv_zalloc(8);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1683} $i4 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1684} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i4);
    call {:si_unique_call 1685} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} $i5 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1687} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i5);
    call {:si_unique_call 1688} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p6 := ldv_zalloc(1);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $p7 := ldv_zalloc(1);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1691} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1692} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1693} {:cexpr "tmp___5"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} ldv_stop();
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i35 := $M.42;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i36 == 1;
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_893 := ldv_release_4();
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i38 := $M.44;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.44 := $i39;
    call {:si_unique_call 1706} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i31 := $M.42;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i32 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $p33 := $M.55;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} vslice_dummy_var_892 := read_file_bool_bmps($p33, $p6, $i4, $p1);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i23 := $M.42;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i27 := $M.42;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i28 == 1;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p29 := $M.55;
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_891 := write_file_bool_bmps($p29, $p7, $i5, $p3);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p25 := $M.55;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_890 := write_file_bool_bmps($p25, $p7, $i5, $p3);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i14 := $M.42;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p16 := $M.54;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p17 := $M.55;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $i18 := simple_open($p16, $p17);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.56 := $i18;
    call {:si_unique_call 1695} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i18);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i19 := $M.56;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i21 := $M.44;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.44 := $i22;
    call {:si_unique_call 1697} {:cexpr "ref_cnt"} boogie_si_record_i32($i22);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const wcn36xx_exit: ref;

axiom wcn36xx_exit == $sub.ref(0, 667395);

procedure wcn36xx_exit();
  free requires assertsPassed;
  modifies $M.48;



implementation wcn36xx_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} ldv_platform_driver_unregister_13(wcn36xx_driver);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    return;
}



const wcn36xx_init: ref;

axiom wcn36xx_init == $sub.ref(0, 668427);

procedure wcn36xx_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.48, $M.34, $M.0, $CurrAddr;



implementation wcn36xx_init() returns ($r: i32)
{
  var vslice_dummy_var_894: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} vslice_dummy_var_894 := ldv___platform_driver_register_12(wcn36xx_driver, __this_module);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 669459);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.57, $M.58, $M.0, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p0 := ldv_zalloc(1032);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.57 := $p0;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p2 := ldv_zalloc(512);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $M.58 := $p2;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_4: ref;

axiom ldv_file_operations_4 == $sub.ref(0, 670491);

procedure ldv_file_operations_4();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_file_operations_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $p0 := ldv_zalloc(1032);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $p2 := ldv_zalloc(512);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 671523);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.59, $M.46, $M.44, $M.0, $M.32, $M.33, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var vslice_dummy_var_895: i64;
  var vslice_dummy_var_896: i64;
  var vslice_dummy_var_897: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $p0 := ldv_zalloc(8);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1715} $i2 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1716} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i2);
    call {:si_unique_call 1717} {:cexpr "tmp___0"} boogie_si_record_i64($i2);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $p3 := ldv_zalloc(1);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1719} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1721} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_stop();
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i26 := $M.46;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_897 := ldv_release_3();
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i29 := $M.44;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, 1);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.44 := $i30;
    call {:si_unique_call 1732} {:cexpr "ref_cnt"} boogie_si_record_i32($i30);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i18 := $M.46;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i22 := $M.46;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p24 := $M.58;
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} vslice_dummy_var_896 := write_file_dump($p24, $p3, $i2, $p1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p20 := $M.58;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} vslice_dummy_var_895 := write_file_dump($p20, $p3, $i2, $p1);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i9 := $M.46;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p11 := $M.57;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p12 := $M.58;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i13 := simple_open($p11, $p12);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $M.59 := $i13;
    call {:si_unique_call 1723} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i13);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i14 := $M.59;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i16 := $M.44;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $M.44 := $i17;
    call {:si_unique_call 1725} {:cexpr "ref_cnt"} boogie_si_record_i32($i17);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 672555);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p0 := $M.4;
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1735} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 673587);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 674619);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 675651);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1737} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1738} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv___platform_driver_register_12: ref;

axiom ldv___platform_driver_register_12 == $sub.ref(0, 676683);

procedure ldv___platform_driver_register_12($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.48, $M.34, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_12($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1740} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} ldv_initialize_platform_driver_5();
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 677715);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_13: ref;

axiom ldv_platform_driver_unregister_13 == $sub.ref(0, 678747);

procedure ldv_platform_driver_unregister_13($p0: ref);
  free requires assertsPassed;
  modifies $M.48;



implementation ldv_platform_driver_unregister_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} platform_driver_unregister($p0);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 679779);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 680811);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1747} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1748} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 681843);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 1749} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 682875);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 1} true;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 683907);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 684939);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 685971);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 687003);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 688035);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 689067);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 690099);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 691131);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 692163);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 693195);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 694227);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 695259);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 696291);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1753} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1754} __VERIFIER_assume($i4);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 697323);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 698355);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 699387);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 700419);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1755} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1756} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1757} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1758} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1759} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1760} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1761} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1762} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1763} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1764} __VERIFIER_assume($i7);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} __VERIFIER_assume($i11);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 701451);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 702483);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1766} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1767} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1768} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1769} __VERIFIER_assume($i4);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 703515);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 704547);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 705579);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 706611);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 707643);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1770} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1771} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1772} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1773} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1774} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1775} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1776} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1777} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1778} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1779} __VERIFIER_assume($i7);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1780} __VERIFIER_assume($i11);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 708675);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 709707);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 710739);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 711771);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 712803);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 713835);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 714867);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 715899);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 716931);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1781} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1783} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1784} __VERIFIER_assume($i10);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 717963);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1785} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1786} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1787} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 718995);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1788} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1789} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1790} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 720027);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1791} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1792} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 721059);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 722091);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1793} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1794} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 723123);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 724155);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 725187);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_626: [ref]i8;
  var cmdloc_dummy_var_627: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1795} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1796} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1797} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1798} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} $p6 := malloc($i5);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_626 := $M.0;
    call {:si_unique_call 1800} cmdloc_dummy_var_627 := $memset.i8(cmdloc_dummy_var_626, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_627;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 726219);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 727251);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.13, $M.7, $M.11, $M.9, $M.34, $M.35, $M.36, $M.37, $M.41, $M.42, $M.44, $M.45, $M.46, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.1, $M.8, $M.10, $M.12, $M.14, $M.57, $M.58, $M.54, $M.55, $M.56, $M.59, $M.5, $M.4, $M.73, $M.6, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.0, $M.182, $M.21;



implementation __SMACK_static_init()
{

  $bb0:
    $M.13 := 0;
    call {:si_unique_call 1801} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1802} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 1803} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1804} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1805} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.9 := 0;
    call {:si_unique_call 1806} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1807} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    call {:si_unique_call 1808} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1809} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.41 := 0;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1813} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1815} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1818} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1819} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1820} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1821} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1822} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 1823} {:cexpr "wcn36xx_dbg_mask"} boogie_si_record_i32(0);
    call {:si_unique_call 1824} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    call {:si_unique_call 1825} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1826} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1827} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1828} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1829} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1830} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 1831} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.57 := $0.ref;
    $M.58 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 1832} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1833} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1834} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.4 := $0.ref;
    $M.73 := $store.i8($M.73, __mod_platform__wcn36xx_platform_id_table_device_table, 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref(__mod_platform__wcn36xx_platform_id_table_device_table, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.6 := $store.ref($M.6, set_impl, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.74 := $store.ref($M.74, fops_wcn36xx_dump, $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(16, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(24, 1)), write_file_dump);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(32, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(40, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(48, 1)), $0.ref);
    $M.81 := $store.ref($M.81, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(56, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(64, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(72, 1)), $0.ref);
    $M.84 := $store.ref($M.84, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(80, 1)), $0.ref);
    $M.85 := $store.ref($M.85, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(88, 1)), $0.ref);
    $M.86 := $store.ref($M.86, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(96, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(104, 1)), simple_open);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(112, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(120, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(128, 1)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(136, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(144, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(152, 1)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(160, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(168, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(176, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(184, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(192, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(200, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(208, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(216, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(fops_wcn36xx_dump, $mul.ref(0, 232)), $mul.ref(224, 1)), $0.ref);
    $M.74 := $store.ref($M.74, fops_wcn36xx_bmps, $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(16, 1)), read_file_bool_bmps);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(24, 1)), write_file_bool_bmps);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(32, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(40, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(48, 1)), $0.ref);
    $M.81 := $store.ref($M.81, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(56, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(64, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(72, 1)), $0.ref);
    $M.84 := $store.ref($M.84, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(80, 1)), $0.ref);
    $M.85 := $store.ref($M.85, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(88, 1)), $0.ref);
    $M.86 := $store.ref($M.86, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(96, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(104, 1)), simple_open);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(112, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(120, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(128, 1)), $0.ref);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(136, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(144, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(152, 1)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(160, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(168, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(176, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(184, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(192, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(200, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(208, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(216, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(fops_wcn36xx_bmps, $mul.ref(0, 232)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.i32($M.0, wowlan_support, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wowlan_support, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wowlan_support, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wowlan_support, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wowlan_support, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wowlan_support, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, wcn_5ghz_channels, 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(4, 1)), 5180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(6, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(4, 1)), 5200);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(6, 1)), 40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(4, 1)), 5220);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(6, 1)), 44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(4, 1)), 5240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(4, 1)), 5260);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(6, 1)), 52);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(4, 1)), 5280);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(6, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(4, 1)), 5300);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(6, 1)), 60);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(4, 1)), 5320);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(6, 1)), 64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(4, 1)), 5500);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(4, 1)), 5520);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(4, 1)), 5540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(4, 1)), 5560);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(4, 1)), 5580);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(4, 1)), 5600);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(4, 1)), 5620);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(6, 1)), 124);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(14, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(4, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(6, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(15, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(4, 1)), 5660);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(6, 1)), 132);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(16, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(4, 1)), 5700);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(6, 1)), 140);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(17, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(4, 1)), 5745);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(6, 1)), 149);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(18, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(4, 1)), 5765);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(6, 1)), 153);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(19, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(4, 1)), 5785);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(6, 1)), 157);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(20, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(4, 1)), 5805);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(6, 1)), 161);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(21, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(4, 1)), 5825);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(6, 1)), 165);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_channels, $mul.ref(0, 1472)), $mul.ref(22, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, wcn_band_5ghz, wcn_5ghz_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(8, 1)), wcn_5ghz_rates);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(20, 1)), 23);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(24, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(0, 1)), $sub.i16(0, 28558));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(4, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(10, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(12, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_5ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, wcn_2ghz_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, wcn_band_2ghz, wcn_2ghz_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(8, 1)), wcn_2ghz_rates);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(20, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(24, 1)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(0, 1)), $sub.i16(0, 28624));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(4, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(10, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(12, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(wcn_band_2ghz, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.182 := $store.i8($M.182, wcn36xx_platform_id_table, 119);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 99);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 110);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 51);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 120);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.182 := $store.i64($M.182, $add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.182 := $store.i64($M.182, $add.ref($add.ref($add.ref(wcn36xx_platform_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, wcn_5ghz_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(8, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(6, 1)), 18);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(8, 1)), 18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(6, 1)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(8, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(6, 1)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(8, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(6, 1)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(8, 1)), 72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(6, 1)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(8, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_5ghz_rates, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i32($M.0, wcn_2ghz_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 130);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 130);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 132);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 132);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 139);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 139);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 150);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 150);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 18);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 72);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 96);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(wcn_2ghz_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 108);
    $M.21 := $store.ref($M.21, wcn36xx_caps_names, .str.144);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(1, 8)), .str.145);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(2, 8)), .str.146);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(3, 8)), .str.147);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(4, 8)), .str.148);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(5, 8)), .str.149);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(6, 8)), .str.150);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(7, 8)), .str.151);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(8, 8)), .str.152);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(9, 8)), .str.153);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(10, 8)), .str.154);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(11, 8)), .str.155);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(12, 8)), .str.156);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(13, 8)), .str.157);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(14, 8)), .str.158);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(15, 8)), .str.159);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(16, 8)), .str.160);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(17, 8)), .str.161);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(18, 8)), .str.162);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(19, 8)), .str.163);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(20, 8)), .str.164);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(21, 8)), .str.165);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(wcn36xx_caps_names, $mul.ref(0, 184)), $mul.ref(22, 8)), .str.166);
    $M.0 := $store.i8($M.0, .str.19, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 4)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 4)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(3, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 6)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 6)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 6)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 6)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 6)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 6)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    call {:si_unique_call 1835} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 728283);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(wcn36xx_resume, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(wcn36xx_start, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(wcn36xx_remove, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(wcn36xx_probe, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1836} $i2 := wcn36xx_probe($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1837} $i4 := wcn36xx_remove($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1838} $i6 := wcn36xx_start($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i13 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1839} $i8 := wcn36xx_resume($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i14 == 1;
    call {:si_unique_call 1840} $i9 := __builtinx_object_size();
    $r := $i9;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 729315);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1841} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 730347);

procedure devirtbounce.2(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 731379);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(wcn36xx_remove_interface, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1842} wcn36xx_remove_interface($p1, $p2);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 732411);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 733443);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 734475);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 735507);

procedure devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 736539);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(simple_open, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(wcn36xx_add_interface, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(wcn36xx_suspend, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1843} $i3 := wcn36xx_suspend($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1844} $i6 := wcn36xx_add_interface($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i13 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1845} $i9 := simple_open($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 1846} $i10 := __builtinx_object_size();
    $r := $i10;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 737571);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1847} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 738603);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 739635);

procedure devirtbounce.11(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1848} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 740667);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 741699);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5;



implementation devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(wcn36xx_resume, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(wcn36xx_start, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(wcn36xx_remove, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(wcn36xx_probe, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1849} $i2 := wcn36xx_probe($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1850} $i4 := wcn36xx_remove($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1851} $i6 := wcn36xx_start($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i13 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1852} $i8 := wcn36xx_resume($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i14 == 1;
    call {:si_unique_call 1853} $i9 := __builtinx_object_size();
    $r := $i9;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 742731);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 743763);

procedure devirtbounce.15(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.13, $M.7, $M.11, $M.9, $M.34, $M.35, $M.36, $M.37, $M.41, $M.42, $M.44, $M.45, $M.46, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.1, $M.8, $M.10, $M.12, $M.14, $M.57, $M.58, $M.54, $M.55, $M.56, $M.59, $M.5, $M.4, $M.73, $M.6, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.0, $M.182, $M.21, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1854} __SMACK_static_init();
    call {:si_unique_call 1855} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.38, $M.39, $M.40, $M.41, $M.42, $M.44, $M.45, $M.46, $M.48, $M.0, $M.49, $M.50, $M.51, $M.52, $M.35, $M.36, $M.37, $M.53, $M.13, $M.7, $M.11, $M.9, $M.34, $M.1, $M.8, $M.10, $M.12, $M.14, $M.57, $M.58, $M.54, $M.55, $M.56, $M.59, $M.5, $M.4, $M.73, $M.6, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.182, $M.21, $CurrAddr, $M.16, $M.22, $M.3, $M.31, $M.32, $M.33;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation wcn36xx_config_loop_$bb12(in_$p4: ref, in_$i19: i32, in_$i31: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p33: ref, in_vslice_dummy_var_660: i32) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p33: ref, out_vslice_dummy_var_660: i32)
{

  entry:
    out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p33, out_vslice_dummy_var_660 := in_$p34, in_$p35, in_$p36, in_$p37, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p33, in_vslice_dummy_var_660;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  $bb14:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p41;
    goto $bb14_dummy;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, in_$i31);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} out_vslice_dummy_var_660 := wcn36xx_smd_switch_channel(in_$p4, out_$p37, in_$i19);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_667;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_666;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_665;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p33, out_vslice_dummy_var_660 := wcn36xx_config_loop_$bb12(in_$p4, in_$i19, in_$i31, out_$p34, out_$p35, out_$p36, out_$p37, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p33, out_vslice_dummy_var_660);
    return;

  exit:
    return;
}



procedure wcn36xx_config_loop_$bb12(in_$p4: ref, in_$i19: i32, in_$i31: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p33: ref, in_vslice_dummy_var_660: i32) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p33: ref, out_vslice_dummy_var_660: i32);
  modifies $M.0, $CurrAddr;



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4712;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$i28 := $M.5;
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 810} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p26, out_$p23);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.6, out_$p22);
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_4715;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.6;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4685;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$i14 := $M.5;
    goto corral_source_split_4702;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 808} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_4701;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.6, out_$p7);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_4688;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation wcn36xx_dxe_free_ctl_block_loop_$bb4(in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32, in_$p7: ref, in_$i14: i64, in_$i15: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32, out_$p7: ref, out_$i14: i64, out_$i15: i1)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6, out_$p7, out_$i14, out_$i15 := in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i6, in_$p7, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$p7 := out_$i11, out_$p9;
    goto $bb6_dummy;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$i13 := $ult.i32(out_$i11, out_$i12);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i6, 1);
    call {:si_unique_call 965} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} kfree(out_$p10);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_5433;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_5432;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_5442;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_5430;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_5429;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6, out_$p7, out_$i14, out_$i15 := wcn36xx_dxe_free_ctl_block_loop_$bb4(in_$p3, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6, out_$p7, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure wcn36xx_dxe_free_ctl_block_loop_$bb4(in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32, in_$p7: ref, in_$i14: i64, in_$i15: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32, out_$p7: ref, out_$i14: i64, out_$i15: i1);



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation wcn36xx_dxe_ch_free_skbs_loop_$bb4(in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i7: i32, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i7: i32, out_$p8: ref)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i7, out_$p8 := in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i7, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5538;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$p8 := out_$i13, out_$p12;
    goto $bb6_dummy;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(out_$i13, out_$i14);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, in_$p4);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i7, 1);
    call {:si_unique_call 997} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5544;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_kfree_skb_28(out_$p10);
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5541;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i7, out_$p8 := wcn36xx_dxe_ch_free_skbs_loop_$bb4(in_$p4, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i7, out_$p8);
    return;

  exit:
    return;
}



procedure wcn36xx_dxe_ch_free_skbs_loop_$bb4(in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i7: i32, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i7: i32, out_$p8: ref);
  modifies $M.6, $M.5;



implementation wcn36xx_smd_load_nv_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p17: ref, in_$i33: i16, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p49: ref, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i32, in_$i86: i16, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i16, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_cmdloc_dummy_var_551: [ref]i8, in_cmdloc_dummy_var_552: [ref]i8, in_cmdloc_dummy_var_553: [ref]i8, in_cmdloc_dummy_var_554: [ref]i8, in_cmdloc_dummy_var_555: [ref]i8, in_cmdloc_dummy_var_556: [ref]i8, in_cmdloc_dummy_var_557: [ref]i8, in_cmdloc_dummy_var_558: [ref]i8, in_cmdloc_dummy_var_559: [ref]i8) returns (out_$i33: i16, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p49: ref, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i32, out_$i86: i16, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i16, out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_cmdloc_dummy_var_551: [ref]i8, out_cmdloc_dummy_var_552: [ref]i8, out_cmdloc_dummy_var_553: [ref]i8, out_cmdloc_dummy_var_554: [ref]i8, out_cmdloc_dummy_var_555: [ref]i8, out_cmdloc_dummy_var_556: [ref]i8, out_cmdloc_dummy_var_557: [ref]i8, out_cmdloc_dummy_var_558: [ref]i8, out_cmdloc_dummy_var_559: [ref]i8)
{

  entry:
    out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_cmdloc_dummy_var_551, out_cmdloc_dummy_var_552, out_cmdloc_dummy_var_553, out_cmdloc_dummy_var_554, out_cmdloc_dummy_var_555, out_cmdloc_dummy_var_556, out_cmdloc_dummy_var_557, out_cmdloc_dummy_var_558, out_cmdloc_dummy_var_559 := in_$i33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$p49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$p65, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_cmdloc_dummy_var_551, in_cmdloc_dummy_var_552, in_cmdloc_dummy_var_553, in_cmdloc_dummy_var_554, in_cmdloc_dummy_var_555, in_cmdloc_dummy_var_556, in_cmdloc_dummy_var_557, in_cmdloc_dummy_var_558, in_cmdloc_dummy_var_559;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  $bb22:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i90;
    goto $bb22_dummy;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i78;
    assume true;
    goto $bb22;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 1);
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i92);
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.0, out_$p91);
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i32.i16(out_$i89);
    call {:si_unique_call 1061} {:cexpr "fm_offset"} boogie_si_record_i16(out_$i90);
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i88, 3072);
    goto corral_source_split_5880;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i32(out_$i33);
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p87, out_$i86);
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i32.i16(out_$i85);
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i84, 1);
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_5873;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5872;

  $bb20:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    assume true;
    goto $bb20;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_$i78 := wcn36xx_smd_rsp_status_check(out_$p75, out_$i77);
    call {:si_unique_call 1059} {:cexpr "ret"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(232, 1));
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_5863;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5862;

  $bb16:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i70;
    assume true;
    goto $bb16;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} out_$i70 := wcn36xx_smd_send_and_wait(in_$p0, out_$i69);
    call {:si_unique_call 1056} {:cexpr "ret"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(out_$i68);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5850;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_557 := $M.0;
    out_cmdloc_dummy_var_558 := $M.0;
    call {:si_unique_call 1054} out_cmdloc_dummy_var_559 := $memcpy.i8(out_cmdloc_dummy_var_557, out_cmdloc_dummy_var_558, out_$p62, out_$p65, out_$i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_559;
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p63, $mul.ref(out_$i64, 1));
    goto corral_source_split_5848;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i64(out_$i33);
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5846;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p61, $mul.ref(16, 1));
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i58);
    call {:si_unique_call 1053} {:cexpr "__len___0"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_5842;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_5841;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_554 := $M.0;
    out_cmdloc_dummy_var_555 := $M.0;
    call {:si_unique_call 1052} out_cmdloc_dummy_var_556 := $memcpy.i8(out_cmdloc_dummy_var_554, out_cmdloc_dummy_var_555, out_$p55, out_$p56, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_556;
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_551 := $M.0;
    out_cmdloc_dummy_var_552 := $M.0;
    call {:si_unique_call 1051} out_cmdloc_dummy_var_553 := $memcpy.i8(out_cmdloc_dummy_var_551, out_cmdloc_dummy_var_552, out_$p52, out_$p53, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_553;
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5830;

  $bb12:
    assume out_$i50 == 1;
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i50 := $ugt.i64(16, 63);
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p49, out_$i47);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p44, 3072);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p43, 0);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5814;

  $bb9:
    assume out_$i42 == 1;
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, 3072);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i40, 4);
    call {:si_unique_call 1050} {:cexpr "fw_bytes_left"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i38, out_$i39);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i33);
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i64.i32(out_$i37);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(32, 1));
    goto corral_source_split_5803;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i41, 16);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, out_$i41);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p45, 1);
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_5820;

  $bb10:
    assume !(out_$i42 == 1);
    goto corral_source_split_5819;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(224, 1));
    goto corral_source_split_5836;

  $bb13:
    assume !(out_$i50 == 1);
    goto corral_source_split_5835;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_cmdloc_dummy_var_551, out_cmdloc_dummy_var_552, out_cmdloc_dummy_var_553, out_cmdloc_dummy_var_554, out_cmdloc_dummy_var_555, out_cmdloc_dummy_var_556, out_cmdloc_dummy_var_557, out_cmdloc_dummy_var_558, out_cmdloc_dummy_var_559 := wcn36xx_smd_load_nv_loop_$bb8(in_$p0, in_$p1, in_$p17, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_cmdloc_dummy_var_551, out_cmdloc_dummy_var_552, out_cmdloc_dummy_var_553, out_cmdloc_dummy_var_554, out_cmdloc_dummy_var_555, out_cmdloc_dummy_var_556, out_cmdloc_dummy_var_557, out_cmdloc_dummy_var_558, out_cmdloc_dummy_var_559);
    return;

  exit:
    return;
}



procedure wcn36xx_smd_load_nv_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p17: ref, in_$i33: i16, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p49: ref, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i32, in_$i86: i16, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i16, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_cmdloc_dummy_var_551: [ref]i8, in_cmdloc_dummy_var_552: [ref]i8, in_cmdloc_dummy_var_553: [ref]i8, in_cmdloc_dummy_var_554: [ref]i8, in_cmdloc_dummy_var_555: [ref]i8, in_cmdloc_dummy_var_556: [ref]i8, in_cmdloc_dummy_var_557: [ref]i8, in_cmdloc_dummy_var_558: [ref]i8, in_cmdloc_dummy_var_559: [ref]i8) returns (out_$i33: i16, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p49: ref, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i32, out_$i86: i16, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i16, out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_cmdloc_dummy_var_551: [ref]i8, out_cmdloc_dummy_var_552: [ref]i8, out_cmdloc_dummy_var_553: [ref]i8, out_cmdloc_dummy_var_554: [ref]i8, out_cmdloc_dummy_var_555: [ref]i8, out_cmdloc_dummy_var_556: [ref]i8, out_cmdloc_dummy_var_557: [ref]i8, out_cmdloc_dummy_var_558: [ref]i8, out_cmdloc_dummy_var_559: [ref]i8);
  modifies $M.0, $CurrAddr;



implementation wcn36xx_feat_caps_info_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i8: i32, in_$i9: i1, in_$i1: i32, in_vslice_dummy_var_822: i32) returns (out_$p2: ref, out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i8: i32, out_$i9: i1, out_$i1: i32, out_vslice_dummy_var_822: i32)
{

  entry:
    out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i8, out_$i9, out_$i1, out_vslice_dummy_var_822 := in_$p2, in_$p3, in_$i4, in_$i5, in_$p6, in_$i8, in_$i9, in_$i1, in_vslice_dummy_var_822;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_6030;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i8;
    goto $bb6_dummy;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i9 := $sle.i32(out_$i8, 127);
    goto corral_source_split_6042;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i1, 1);
    call {:si_unique_call 1092} {:cexpr "i"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_6041;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_vslice_dummy_var_822 := printk.ref.ref(.str.142, out_$p6);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_$p6 := wcn36xx_get_cap_name(out_$i1);
    goto corral_source_split_6038;

  $bb3:
    assume out_$i5 == 1;
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_$i4 := get_feat_caps(out_$p3, out_$i1);
    call {:si_unique_call 1089} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$p3 := $bitcast.ref.ref(out_$p2);
    goto corral_source_split_6033;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p2 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1240)), $mul.ref(44, 1));
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i8, out_$i9, out_$i1, out_vslice_dummy_var_822 := wcn36xx_feat_caps_info_loop_$bb1(in_$p0, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$i8, out_$i9, out_$i1, out_vslice_dummy_var_822);
    return;

  exit:
    return;
}



procedure wcn36xx_feat_caps_info_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i8: i32, in_$i9: i1, in_$i1: i32, in_vslice_dummy_var_822: i32) returns (out_$p2: ref, out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i8: i32, out_$i9: i1, out_$i1: i32, out_vslice_dummy_var_822: i32);



implementation wcn36xx_dxe_init_descs_loop_$bb8(in_$p0: ref, in_$p20: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i32, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i1, in_$p52: ref, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$p76: ref, in_$i63: i32, in_$p64: ref, in_$i53: i32, in_$p54: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i32, out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i1, out_$p52: ref, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$p76: ref, out_$i63: i32, out_$p64: ref, out_$i53: i32, out_$p54: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref)
{

  entry:
    out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$p76, out_$i63, out_$p64, out_$i53, out_$p54, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i23, out_$p24, out_$p25, out_$p26 := in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p52, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$p62, in_$p65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$p76, in_$i63, in_$p64, in_$i53, in_$p54, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i23, in_$p24, in_$p25, in_$p26;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6264;

  $bb36:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i23, out_$p24, out_$p25, out_$p26 := out_$i80, out_$p79, out_$p24, out_$p78;
    goto $bb36_dummy;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i32(out_$i80, out_$i81);
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, in_$p20);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i53, 1);
    call {:si_unique_call 1153} {:cexpr "i"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p24, $mul.ref(1, 32));
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p54, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i53, out_$p54 := out_$i63, out_$p64;
    goto $bb26;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$i53, out_$p54 := out_$i23, out_$p26;
    goto $bb26;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p52, 0);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6306;

  $bb24:
    assume out_$i51 == 1;
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i23, 0);
    goto corral_source_split_6303;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p44, 23);
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, 3312196);
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6298;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_6297;

  $bb18:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb11:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, out_$i34);
    goto corral_source_split_6276;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p26, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6275;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i30, out_$i33);
    goto corral_source_split_6274;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    out_$i33 := $mul.i32(out_$i32, 32);
    goto corral_source_split_6273;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i64.i32(out_$i31);
    goto corral_source_split_6272;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i23);
    goto corral_source_split_6271;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i64.i32(out_$i29);
    goto corral_source_split_6270;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_6269;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6268;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p27, out_$p24);
    goto corral_source_split_6267;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_6266;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, 23);
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, 3329604);
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  $bb19:
    assume !(out_$i41 == 1);
    goto corral_source_split_6291;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, 11);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p47, 1223983);
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6280;

  $bb13:
    assume out_$i39 == 1;
    goto corral_source_split_6279;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p50, 4);
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p49, 1233199);
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6286;

  $bb15:
    assume out_$i40 == 1;
    goto corral_source_split_6285;

  $bb14:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb17;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb17;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := out_$i23, out_$p26;
    goto $bb32;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := out_$i23, out_$p26;
    goto $bb32;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i61);
    goto corral_source_split_6335;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6334;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_6333;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p26, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6332;

  $bb30:
    assume out_$i59 == 1;
    goto corral_source_split_6331;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$i59 := $ult.i32(out_$i23, out_$i58);
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i57, 1);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6321;

  $bb27:
    assume out_$i55 == 1;
    goto corral_source_split_6320;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i23, 0);
    goto corral_source_split_6310;

  $bb25:
    assume !(out_$i51 == 1);
    goto corral_source_split_6309;

  $bb34:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p76, out_$i75);
    goto corral_source_split_6347;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6346;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p74);
    goto corral_source_split_6345;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p71, out_$i70);
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_6339;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p26, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_6338;

  $bb33:
    assume out_$i68 == 1;
    goto corral_source_split_6337;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i23, out_$i67);
    goto corral_source_split_6329;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    out_$i67 := $sub.i32(out_$i66, 1);
    goto corral_source_split_6328;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_6327;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6326;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb29;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$p76, out_$i63, out_$p64, out_$i53, out_$p54, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i23, out_$p24, out_$p25, out_$p26 := wcn36xx_dxe_init_descs_loop_$bb8(in_$p0, in_$p20, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$p76, out_$i63, out_$p64, out_$i53, out_$p54, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i23, out_$p24, out_$p25, out_$p26);
    return;

  exit:
    return;
}



procedure wcn36xx_dxe_init_descs_loop_$bb8(in_$p0: ref, in_$p20: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i32, in_$i31: i64, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i1, in_$p52: ref, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$p76: ref, in_$i63: i32, in_$p64: ref, in_$i53: i32, in_$p54: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i32, out_$i31: i64, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i1, out_$p52: ref, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$p76: ref, out_$i63: i32, out_$p64: ref, out_$i53: i32, out_$p54: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref);
  modifies $M.0;



implementation wcn36xx_dxe_init_tx_bd_loop_$bb4(in_$i3: i32, in_$p10: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i25: i64, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64) returns (out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i25: i64, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64)
{

  entry:
    out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$i25, out_$p26, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p13, out_$p14, out_$i15, out_$i16 := in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p27, in_$p28, in_$i25, in_$p26, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p13, in_$p14, in_$i15, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  $bb9:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14, out_$i15, out_$i16 := out_$p30, out_$p26, out_$i31, out_$i25;
    goto $bb9_dummy;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$i33 := $ult.i32(out_$i31, out_$i32);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, in_$p10);
    goto corral_source_split_6390;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1157} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6389;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_6388;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6387;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6386;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p28, $0.ref);
    assume {:verifier.code 0} true;
    out_$i25, out_$p26 := out_$i16, out_$p14;
    goto $bb8;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    out_$i25, out_$p26 := out_$i22, out_$p24;
    goto $bb8;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p14, $mul.ref(out_$i23, 1));
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(in_$i3);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, out_$i16);
    call {:si_unique_call 1156} {:cexpr "bd_phy_addr"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(in_$i3);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, out_$p14);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p19, out_$i16);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6372;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_6369;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i15, 1);
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p27, 0);
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6382;

  $bb7:
    assume !(out_$i18 == 1);
    goto corral_source_split_6381;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$i25, out_$p26, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p13, out_$p14, out_$i15, out_$i16 := wcn36xx_dxe_init_tx_bd_loop_$bb4(in_$i3, in_$p10, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$i25, out_$p26, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p13, out_$p14, out_$i15, out_$i16);
    return;

  exit:
    return;
}



procedure wcn36xx_dxe_init_tx_bd_loop_$bb4(in_$i3: i32, in_$p10: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i25: i64, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64) returns (out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i25: i64, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64);
  modifies $M.0;



implementation wcn36xx_dxe_ch_alloc_skb_loop_$bb4(in_$p4: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p7: ref, in_$i8: i32, in_vslice_dummy_var_840: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p7: ref, out_$i8: i32, out_vslice_dummy_var_840: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p7, out_$i8, out_vslice_dummy_var_840 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p7, in_$i8, in_vslice_dummy_var_840;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6429;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p11, out_$i12;
    goto $bb6_dummy;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i32(out_$i12, out_$i13);
    goto corral_source_split_6436;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, in_$p4);
    goto corral_source_split_6435;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1167} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6432;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} out_vslice_dummy_var_840 := wcn36xx_dxe_fill_skb(out_$p7);
    goto corral_source_split_6431;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p7, out_$i8, out_vslice_dummy_var_840 := wcn36xx_dxe_ch_alloc_skb_loop_$bb4(in_$p4, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p7, out_$i8, out_vslice_dummy_var_840);
    return;

  exit:
    return;
}



procedure wcn36xx_dxe_ch_alloc_skb_loop_$bb4(in_$p4: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p7: ref, in_$i8: i32, in_vslice_dummy_var_840: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p7: ref, out_$i8: i32, out_vslice_dummy_var_840: i32);
  modifies $M.0, $M.6, $M.5, $CurrAddr;



implementation buff_to_be_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i4: i64, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i64, in_$i12: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i64, out_$p9: ref, out_$i10: i32, out_$i11: i64, out_$i12: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i3 := in_$i4, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i64(out_$i11, in_$i1);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i3, 1);
    call {:si_unique_call 1224} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p9, out_$i7);
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(in_$p0, $mul.ref(out_$i8, 4));
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i3);
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} out_$i7 := __fswab32(out_$i6);
    call {:si_unique_call 1223} {:cexpr "tmp"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i32($M.0, out_$p5);
    goto corral_source_split_6579;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(in_$p0, $mul.ref(out_$i4, 4));
    goto corral_source_split_6578;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_6577;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i3 := buff_to_be_loop_$bb4(in_$p0, in_$i1, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i3);
    return;

  exit:
    return;
}



procedure buff_to_be_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i4: i64, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i64, in_$i12: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i64, out_$p9: ref, out_$i10: i32, out_$i11: i64, out_$i12: i1, out_$i3: i32);
  modifies $M.0;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6691;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i12 := $M.5;
    goto corral_source_split_6708;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1268} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_6707;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.6, out_$p6);
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_6694;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation wcn36xx_dxe_allocate_ctl_block_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i4: i32, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i4: i32, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i4, out_$p5 := in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$i11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i4, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  $bb16:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i4, out_$p5 := out_$i23, out_$p6;
    goto $bb16_dummy;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i32(out_$i23, out_$i24);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p1);
    goto corral_source_split_6996;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1320} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_6995;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p13, out_$p6);
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6986;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p12, out_$p6);
    goto corral_source_split_6985;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6984;

  $bb10:
    assume out_$i11 == 1;
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i4, 0);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p10, out_$i4);
    goto corral_source_split_6980;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(0, 120)), $mul.ref(20, 1));
    goto corral_source_split_6979;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i64(out_$i8, 0);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_6971;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_$p6 := kzalloc(120, 208);
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p22, out_$p6);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p21, out_$p20);
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p7, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_7003;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p18, out_$p6);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p5, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7000;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_6999;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, out_$i4);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i15, 1);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6990;

  $bb11:
    assume !(out_$i11 == 1);
    goto corral_source_split_6989;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p5, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7008;

  $bb14:
    assume !(out_$i17 == 1);
    goto corral_source_split_7007;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i4, out_$p5 := wcn36xx_dxe_allocate_ctl_block_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i4, out_$p5);
    return;

  exit:
    return;
}



procedure wcn36xx_dxe_allocate_ctl_block_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i4: i32, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i4: i32, out_$p5: ref);
  modifies $M.0, $CurrAddr;



implementation get_vif_by_addr_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p11 := in_$p12, in_$p13, in_$p14, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7699;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p24;
    goto $bb10_dummy;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i9);
    goto corral_source_split_7719;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7717;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_7715;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7714;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 0);
    goto corral_source_split_7708;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} out_$i18 := memcmp(out_$p17, in_$p1, 6);
    call {:si_unique_call 1400} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p14, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(256, 1));
    goto corral_source_split_7705;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    goto corral_source_split_7704;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_7703;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_7702;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_7701;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p11 := get_vif_by_addr_loop_$bb4(in_$p1, in_$i9, out_$p12, out_$p13, out_$p14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p11);
    return;

  exit:
    return;
}



procedure get_vif_by_addr_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p11: ref);



implementation read_file_bool_bmps_loop_$bb4(in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p17: ref)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$p22, out_$i23, out_$i24, out_$p25, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p17 := in_$p18, in_$p19, in_$p20, in_$p22, in_$i23, in_$i24, in_$p25, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7764;

  $bb13:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p33;
    goto $bb13_dummy;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, in_$i15);
    goto corral_source_split_7798;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_7797;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7796;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_7795;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_7794;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7793;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p17;
    assume true;
    goto $bb7;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 2);
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_7771;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7770;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto corral_source_split_7769;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_7768;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_7767;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_7766;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$p22, out_$i23, out_$i24, out_$p25, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p17 := read_file_bool_bmps_loop_$bb4(in_$i15, out_$p18, out_$p19, out_$p20, out_$p22, out_$i23, out_$i24, out_$p25, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p17);
    return;

  exit:
    return;
}



procedure read_file_bool_bmps_loop_$bb4(in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p17: ref);



implementation write_file_bool_bmps_loop_$bb39(in_$p7: ref, in_$i37: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p39: ref, in_vslice_dummy_var_857: i32, in_vslice_dummy_var_858: i32) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p39: ref, out_vslice_dummy_var_857: i32, out_vslice_dummy_var_858: i32)
{

  entry:
    out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p39, out_vslice_dummy_var_857, out_vslice_dummy_var_858 := in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p39, in_vslice_dummy_var_857, in_vslice_dummy_var_858;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7850;

  $bb44:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p51;
    goto $bb44_dummy;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i37);
    goto corral_source_split_7869;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_7868;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7867;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_7866;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_7865;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7864;

  $bb42:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} out_vslice_dummy_var_858 := wcn36xx_pmc_enter_bmps_state(in_$p7, out_$p43);
    goto corral_source_split_7862;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} out_vslice_dummy_var_857 := wcn36xx_enable_keep_alive_null_packet(in_$p7, out_$p43);
    goto corral_source_split_7861;

  $bb41:
    assume out_$i46 == 1;
    goto corral_source_split_7860;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 2);
    goto corral_source_split_7858;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_7857;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p42, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7856;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_7855;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_7854;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_7853;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_7852;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p39, out_vslice_dummy_var_857, out_vslice_dummy_var_858 := write_file_bool_bmps_loop_$bb39(in_$p7, in_$i37, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p39, out_vslice_dummy_var_857, out_vslice_dummy_var_858);
    return;

  exit:
    return;
}



procedure write_file_bool_bmps_loop_$bb39(in_$p7: ref, in_$i37: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p39: ref, in_vslice_dummy_var_857: i32, in_vslice_dummy_var_858: i32) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p39: ref, out_vslice_dummy_var_857: i32, out_vslice_dummy_var_858: i32);
  modifies $M.0, $CurrAddr;



implementation write_file_bool_bmps_loop_$bb51(in_$p7: ref, in_$i63: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p65: ref, in_vslice_dummy_var_859: i32) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p65: ref, out_vslice_dummy_var_859: i32)
{

  entry:
    out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p65, out_vslice_dummy_var_859 := in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p65, in_vslice_dummy_var_859;
    goto $bb51, exit;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_7875;

  $bb56:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$p65 := out_$p76;
    goto $bb56_dummy;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i64(out_$i79, in_$i63);
    goto corral_source_split_7893;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_7892;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7891;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_7890;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_7889;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p65, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7888;

  $bb54:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} out_vslice_dummy_var_859 := wcn36xx_pmc_exit_bmps_state(in_$p7, out_$p69);
    goto corral_source_split_7886;

  $bb53:
    assume out_$i72 == 1;
    goto corral_source_split_7885;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 2);
    goto corral_source_split_7883;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    goto corral_source_split_7882;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p68, $mul.ref($sub.ref(0, 280), 296)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p68, $mul.ref($sub.ref(0, 280), 296));
    goto corral_source_split_7880;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_7879;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_7878;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_7877;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb56_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p65, out_vslice_dummy_var_859 := write_file_bool_bmps_loop_$bb51(in_$p7, in_$i63, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p65, out_vslice_dummy_var_859);
    return;

  exit:
    return;
}



procedure write_file_bool_bmps_loop_$bb51(in_$p7: ref, in_$i63: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p65: ref, in_vslice_dummy_var_859: i32) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p65: ref, out_vslice_dummy_var_859: i32);
  modifies $M.0, $CurrAddr;



implementation write_file_dump_loop_$bb8(in_$p5: ref, in_$p6: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i21: i32) returns (out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i21: i32)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i21 := in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8054;

  $bb17:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i30;
    goto $bb17_dummy;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$i31 := $sle.i32(out_$i30, 4);
    goto corral_source_split_8094;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1475} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8093;

  $bb15:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} out_$i28 := kstrtou32(out_$p22, 0, out_$p27);
    call {:si_unique_call 1474} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_8088;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 4));
    goto corral_source_split_8087;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i21);
    goto corral_source_split_8086;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_8085;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_8058;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_8057;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} out_$p22 := strsep(in_$p5, .str.260);
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i21 := write_file_dump_loop_$bb8(in_$p5, in_$p6, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i21);
    return;

  exit:
    return;
}



procedure write_file_dump_loop_$bb8(in_$p5: ref, in_$p6: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i21: i32) returns (out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i21: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i5: i16, in_$i6: i32, in_$p8: ref, in_$p10: ref, in_$i11: i32, in_$p13: ref, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$p172: ref, in_$i173: i32, in_$i174: i16, in_$i175: i32, in_$i176: i8, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$i182: i32, in_$p183: ref, in_$i184: i32, in_$i185: i16, in_$i186: i32, in_$i187: i8, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$i193: i32, in_$p194: ref, in_$i195: i32, in_$i196: i16, in_$i197: i32, in_$i198: i8, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i64, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i64, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i64, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i317: i32, in_$i318: i32, in_vslice_dummy_var_868: i32, in_vslice_dummy_var_869: i32, in_vslice_dummy_var_870: i32, in_vslice_dummy_var_871: i32, in_vslice_dummy_var_872: i32, in_vslice_dummy_var_873: i32, in_vslice_dummy_var_874: i32, in_vslice_dummy_var_875: i32, in_vslice_dummy_var_876: i32, in_vslice_dummy_var_877: i32, in_vslice_dummy_var_878: i32, in_vslice_dummy_var_879: i32, in_vslice_dummy_var_880: i32, in_vslice_dummy_var_881: i32, in_vslice_dummy_var_882: i32, in_vslice_dummy_var_883: i32, in_vslice_dummy_var_884: i32, in_vslice_dummy_var_885: i32, in_vslice_dummy_var_886: i32, in_vslice_dummy_var_887: i32, in_vslice_dummy_var_888: i32, in_vslice_dummy_var_889: i32) returns (out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$p172: ref, out_$i173: i32, out_$i174: i16, out_$i175: i32, out_$i176: i8, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$i182: i32, out_$p183: ref, out_$i184: i32, out_$i185: i16, out_$i186: i32, out_$i187: i8, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$i193: i32, out_$p194: ref, out_$i195: i32, out_$i196: i16, out_$i197: i32, out_$i198: i8, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i64, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i64, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i64, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i317: i32, out_$i318: i32, out_vslice_dummy_var_868: i32, out_vslice_dummy_var_869: i32, out_vslice_dummy_var_870: i32, out_vslice_dummy_var_871: i32, out_vslice_dummy_var_872: i32, out_vslice_dummy_var_873: i32, out_vslice_dummy_var_874: i32, out_vslice_dummy_var_875: i32, out_vslice_dummy_var_876: i32, out_vslice_dummy_var_877: i32, out_vslice_dummy_var_878: i32, out_vslice_dummy_var_879: i32, out_vslice_dummy_var_880: i32, out_vslice_dummy_var_881: i32, out_vslice_dummy_var_882: i32, out_vslice_dummy_var_883: i32, out_vslice_dummy_var_884: i32, out_vslice_dummy_var_885: i32, out_vslice_dummy_var_886: i32, out_vslice_dummy_var_887: i32, out_vslice_dummy_var_888: i32, out_vslice_dummy_var_889: i32)
{

  entry:
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i72, out_$i73, out_$p74, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i178, out_$i179, out_$p180, out_$p181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$p191, out_$p192, out_$i193, out_$p194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$p235, out_$p236, out_$i238, out_$i239, out_$p240, out_$p241, out_$i243, out_$i244, out_$p245, out_$p246, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$p257, out_$p258, out_$i260, out_$i261, out_$p262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p315, out_$i317, out_$i318, out_vslice_dummy_var_868, out_vslice_dummy_var_869, out_vslice_dummy_var_870, out_vslice_dummy_var_871, out_vslice_dummy_var_872, out_vslice_dummy_var_873, out_vslice_dummy_var_874, out_vslice_dummy_var_875, out_vslice_dummy_var_876, out_vslice_dummy_var_877, out_vslice_dummy_var_878, out_vslice_dummy_var_879, out_vslice_dummy_var_880, out_vslice_dummy_var_881, out_vslice_dummy_var_882, out_vslice_dummy_var_883, out_vslice_dummy_var_884, out_vslice_dummy_var_885, out_vslice_dummy_var_886, out_vslice_dummy_var_887, out_vslice_dummy_var_888, out_vslice_dummy_var_889 := in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i69, in_$p70, in_$i72, in_$i73, in_$p74, in_$i76, in_$i77, in_$p78, in_$i79, in_$p80, in_$p81, in_$i83, in_$i84, in_$p85, in_$i86, in_$p87, in_$p88, in_$i90, in_$i91, in_$p92, in_$i93, in_$p94, in_$p95, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$p127, in_$p128, in_$i130, in_$i131, in_$p132, in_$p133, in_$p134, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$p160, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$i171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i178, in_$i179, in_$p180, in_$p181, in_$i182, in_$p183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i189, in_$i190, in_$p191, in_$p192, in_$i193, in_$p194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$i205, in_$p206, in_$i207, in_$i208, in_$i209, in_$p210, in_$i211, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$p223, in_$i225, in_$i226, in_$p227, in_$i229, in_$i230, in_$p231, in_$i233, in_$i234, in_$p235, in_$p236, in_$i238, in_$i239, in_$p240, in_$p241, in_$i243, in_$i244, in_$p245, in_$p246, in_$i248, in_$i249, in_$p250, in_$p251, in_$p252, in_$i254, in_$i255, in_$p256, in_$p257, in_$p258, in_$i260, in_$i261, in_$p262, in_$p263, in_$p264, in_$i266, in_$i267, in_$p268, in_$p269, in_$i270, in_$i271, in_$p272, in_$p273, in_$i274, in_$i275, in_$p276, in_$p277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$p315, in_$i317, in_$i318, in_vslice_dummy_var_868, in_vslice_dummy_var_869, in_vslice_dummy_var_870, in_vslice_dummy_var_871, in_vslice_dummy_var_872, in_vslice_dummy_var_873, in_vslice_dummy_var_874, in_vslice_dummy_var_875, in_vslice_dummy_var_876, in_vslice_dummy_var_877, in_vslice_dummy_var_878, in_vslice_dummy_var_879, in_vslice_dummy_var_880, in_vslice_dummy_var_881, in_vslice_dummy_var_882, in_vslice_dummy_var_883, in_vslice_dummy_var_884, in_vslice_dummy_var_885, in_vslice_dummy_var_886, in_vslice_dummy_var_887, in_vslice_dummy_var_888, in_vslice_dummy_var_889;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1548} out_$i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 1549} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i26);
    call {:si_unique_call 1550} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i26);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb205_dummy;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb21:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.44 := out_$i63;
    call {:si_unique_call 1557} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8331;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    goto corral_source_split_8330;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    out_$i62 := $M.44;
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8328;

  $bb62:
    assume out_$i61 == 1;
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_8325;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    out_$i60 := $M.49;
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.49 := out_$i59;
    call {:si_unique_call 1555} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_8323;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} out_$i59 := wcn36xx_start(out_$p58);
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    out_$p58 := $M.36;
    goto corral_source_split_8321;

  $bb60:
    assume out_$i57 == 1;
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_8318;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    out_$i56 := $M.41;
    goto corral_source_split_8317;

  $bb58:
    assume out_$i55 == 1;
    goto corral_source_split_8316;

  $bb56:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb52:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb44:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb23:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_8250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1551} out_$i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1552} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i37);
    call {:si_unique_call 1553} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i37);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i36 == 1;
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i35 := $M.41;
    goto corral_source_split_8247;

  $bb18:
    assume out_$i34 == 1;
    goto corral_source_split_8246;

  $bb14:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i26, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i26, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb74:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_vslice_dummy_var_870 := wcn36xx_config(out_$p74, in_$i16);
    goto corral_source_split_8351;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$p74 := $M.36;
    goto corral_source_split_8350;

  $bb73:
    assume out_$i73 == 1;
    goto corral_source_split_8349;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 2);
    goto corral_source_split_8347;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i72 := $M.41;
    goto corral_source_split_8346;

  $bb71:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} out_vslice_dummy_var_869 := wcn36xx_config(out_$p70, in_$i16);
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$p70 := $M.36;
    goto corral_source_split_8342;

  $bb70:
    assume out_$i69 == 1;
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 3);
    goto corral_source_split_8339;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i68 := $M.41;
    goto corral_source_split_8338;

  $bb68:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8336;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_vslice_dummy_var_868 := wcn36xx_config(out_$p66, in_$i16);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$p66 := $M.36;
    goto corral_source_split_8334;

  $bb67:
    assume out_$i65 == 1;
    goto corral_source_split_8333;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$i64 := $M.41;
    goto corral_source_split_8313;

  $bb57:
    assume !(out_$i54 == 1);
    goto corral_source_split_8312;

  $bb83:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8382;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_vslice_dummy_var_873 := wcn36xx_set_key(out_$p92, out_$i93, out_$p94, out_$p95, in_$p20);
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$p95 := $M.35;
    goto corral_source_split_8380;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    out_$p94 := $M.37;
    goto corral_source_split_8379;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.39, in_$p1);
    goto corral_source_split_8378;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    out_$p92 := $M.36;
    goto corral_source_split_8377;

  $bb82:
    assume out_$i91 == 1;
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 2);
    goto corral_source_split_8374;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i90 := $M.41;
    goto corral_source_split_8373;

  $bb80:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} out_vslice_dummy_var_872 := wcn36xx_set_key(out_$p85, out_$i86, out_$p87, out_$p88, in_$p20);
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$p88 := $M.35;
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    out_$p87 := $M.37;
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.39, in_$p1);
    goto corral_source_split_8367;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    out_$p85 := $M.36;
    goto corral_source_split_8366;

  $bb79:
    assume out_$i84 == 1;
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 3);
    goto corral_source_split_8363;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i83 := $M.41;
    goto corral_source_split_8362;

  $bb77:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8360;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} out_vslice_dummy_var_871 := wcn36xx_set_key(out_$p78, out_$i79, out_$p80, out_$p81, in_$p20);
    goto corral_source_split_8359;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$p81 := $M.35;
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    out_$p80 := $M.37;
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.39, in_$p1);
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$p78 := $M.36;
    goto corral_source_split_8355;

  $bb76:
    assume out_$i77 == 1;
    goto corral_source_split_8354;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    out_$i76 := $M.41;
    goto corral_source_split_8305;

  $bb54:
    assume out_$i53 == 1;
    goto corral_source_split_8304;

  $bb53:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb86:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8392;

  $bb87:
    assume out_$i102 == 1;
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_8389;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    out_$i101 := $M.50;
    goto corral_source_split_8388;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.50 := out_$i100;
    call {:si_unique_call 1571} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_$i100 := wcn36xx_suspend(out_$p99, in_$p8);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$p99 := $M.36;
    goto corral_source_split_8385;

  $bb85:
    assume out_$i98 == 1;
    goto corral_source_split_8384;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$i97 := $M.41;
    goto corral_source_split_8309;

  $bb55:
    assume !(out_$i53 == 1);
    goto corral_source_split_8308;

  $bb98:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} wcn36xx_bss_info_changed(out_$p113, out_$p114, in_$p4, in_$i11);
    goto corral_source_split_8415;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$p114 := $M.37;
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$p113 := $M.36;
    goto corral_source_split_8413;

  $bb97:
    assume out_$i112 == 1;
    goto corral_source_split_8412;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 2);
    goto corral_source_split_8410;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i111 := $M.41;
    goto corral_source_split_8409;

  $bb95:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8407;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} wcn36xx_bss_info_changed(out_$p109, out_$p110, in_$p4, in_$i11);
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    out_$p110 := $M.37;
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    out_$p109 := $M.36;
    goto corral_source_split_8404;

  $bb94:
    assume out_$i108 == 1;
    goto corral_source_split_8403;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 3);
    goto corral_source_split_8401;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i107 := $M.41;
    goto corral_source_split_8400;

  $bb92:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} wcn36xx_bss_info_changed(out_$p105, out_$p106, in_$p4, in_$i11);
    goto corral_source_split_8397;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    out_$p106 := $M.37;
    goto corral_source_split_8396;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    out_$p105 := $M.36;
    goto corral_source_split_8395;

  $bb91:
    assume out_$i104 == 1;
    goto corral_source_split_8394;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_8298;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    out_$i103 := $M.41;
    goto corral_source_split_8297;

  $bb50:
    assume out_$i51 == 1;
    goto corral_source_split_8296;

  $bb46:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb45:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb107:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8437;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} wcn36xx_sw_scan_complete(out_$p123);
    goto corral_source_split_8436;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    out_$p123 := $M.36;
    goto corral_source_split_8435;

  $bb106:
    assume out_$i122 == 1;
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 2);
    goto corral_source_split_8432;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i121 := $M.41;
    goto corral_source_split_8431;

  $bb104:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} wcn36xx_sw_scan_complete(out_$p120);
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    out_$p120 := $M.36;
    goto corral_source_split_8427;

  $bb103:
    assume out_$i119 == 1;
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 3);
    goto corral_source_split_8424;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i118 := $M.41;
    goto corral_source_split_8423;

  $bb101:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8421;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} wcn36xx_sw_scan_complete(out_$p117);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    out_$p117 := $M.36;
    goto corral_source_split_8419;

  $bb100:
    assume out_$i116 == 1;
    goto corral_source_split_8418;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 1);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$i115 := $M.41;
    goto corral_source_split_8301;

  $bb51:
    assume !(out_$i51 == 1);
    goto corral_source_split_8300;

  $bb116:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8464;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} out_vslice_dummy_var_876 := wcn36xx_sta_add(out_$p138, out_$p139, out_$p140);
    goto corral_source_split_8463;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$p140 := $M.35;
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$p139 := $M.37;
    goto corral_source_split_8461;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    out_$p138 := $M.36;
    goto corral_source_split_8460;

  $bb115:
    assume out_$i137 == 1;
    goto corral_source_split_8459;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 2);
    goto corral_source_split_8457;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i136 := $M.41;
    goto corral_source_split_8456;

  $bb113:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8454;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_vslice_dummy_var_875 := wcn36xx_sta_add(out_$p132, out_$p133, out_$p134);
    goto corral_source_split_8453;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    out_$p134 := $M.35;
    goto corral_source_split_8452;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    out_$p133 := $M.37;
    goto corral_source_split_8451;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    out_$p132 := $M.36;
    goto corral_source_split_8450;

  $bb112:
    assume out_$i131 == 1;
    goto corral_source_split_8449;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 3);
    goto corral_source_split_8447;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i130 := $M.41;
    goto corral_source_split_8446;

  $bb110:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8444;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_vslice_dummy_var_874 := wcn36xx_sta_add(out_$p126, out_$p127, out_$p128);
    goto corral_source_split_8443;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    out_$p128 := $M.35;
    goto corral_source_split_8442;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    out_$p127 := $M.37;
    goto corral_source_split_8441;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    out_$p126 := $M.36;
    goto corral_source_split_8440;

  $bb109:
    assume out_$i125 == 1;
    goto corral_source_split_8439;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 1);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$i124 := $M.41;
    goto corral_source_split_8289;

  $bb48:
    assume out_$i50 == 1;
    goto corral_source_split_8288;

  $bb47:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb122:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.44 := out_$i151;
    call {:si_unique_call 1596} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$i151 := $sub.i32(out_$i150, 1);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$i150 := $M.44;
    goto corral_source_split_8481;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} wcn36xx_stop(out_$p149);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$p149 := $M.36;
    goto corral_source_split_8478;

  $bb121:
    assume out_$i148 == 1;
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_8475;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i147 := $M.41;
    goto corral_source_split_8474;

  $bb119:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.44 := out_$i146;
    call {:si_unique_call 1593} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_8472;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i32(out_$i145, 1);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$i145 := $M.44;
    goto corral_source_split_8470;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8469;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} wcn36xx_stop(out_$p144);
    goto corral_source_split_8468;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    out_$p144 := $M.36;
    goto corral_source_split_8467;

  $bb118:
    assume out_$i143 == 1;
    goto corral_source_split_8466;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 3);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$i142 := $M.41;
    goto corral_source_split_8293;

  $bb49:
    assume !(out_$i50 == 1);
    goto corral_source_split_8292;

  $bb131:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} wcn36xx_tx(out_$p160, in_$p13, in_$p10);
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    out_$p160 := $M.36;
    goto corral_source_split_8502;

  $bb130:
    assume out_$i159 == 1;
    goto corral_source_split_8501;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_8499;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i158 := $M.41;
    goto corral_source_split_8498;

  $bb128:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} wcn36xx_tx(out_$p157, in_$p13, in_$p10);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$p157 := $M.36;
    goto corral_source_split_8494;

  $bb127:
    assume out_$i156 == 1;
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 3);
    goto corral_source_split_8491;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i155 := $M.41;
    goto corral_source_split_8490;

  $bb125:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8488;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} wcn36xx_tx(out_$p154, in_$p13, in_$p10);
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    out_$p154 := $M.36;
    goto corral_source_split_8486;

  $bb124:
    assume out_$i153 == 1;
    goto corral_source_split_8485;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_8282;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i152 := $M.41;
    goto corral_source_split_8281;

  $bb42:
    assume out_$i47 == 1;
    goto corral_source_split_8280;

  $bb38:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i37, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb25:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i37, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb24:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb134:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb136:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8514;

  $bb135:
    assume out_$i166 == 1;
    goto corral_source_split_8513;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 0);
    goto corral_source_split_8511;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    out_$i165 := $M.51;
    goto corral_source_split_8510;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $M.51 := out_$i164;
    call {:si_unique_call 1604} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_8509;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} out_$i164 := wcn36xx_resume(out_$p163);
    goto corral_source_split_8508;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    out_$p163 := $M.36;
    goto corral_source_split_8507;

  $bb133:
    assume out_$i162 == 1;
    goto corral_source_split_8506;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 3);
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$i161 := $M.41;
    goto corral_source_split_8285;

  $bb43:
    assume !(out_$i47 == 1);
    goto corral_source_split_8284;

  $bb146:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8556;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_vslice_dummy_var_879 := wcn36xx_ampdu_action(out_$p191, out_$p192, out_$i193, out_$p194, out_$i196, in_$p18, out_$i198);
    goto corral_source_split_8555;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$i198 := $trunc.i32.i8(out_$i197);
    goto corral_source_split_8554;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i197 := $zext.i8.i32(in_$i15);
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$i196 := $trunc.i32.i16(out_$i195);
    goto corral_source_split_8552;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i16.i32(in_$i5);
    goto corral_source_split_8551;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$p194 := $M.35;
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.40, in_$p2);
    goto corral_source_split_8549;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    out_$p192 := $M.37;
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    out_$p191 := $M.36;
    goto corral_source_split_8547;

  $bb145:
    assume out_$i190 == 1;
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 2);
    goto corral_source_split_8544;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i189 := $M.41;
    goto corral_source_split_8543;

  $bb143:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8541;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_vslice_dummy_var_878 := wcn36xx_ampdu_action(out_$p180, out_$p181, out_$i182, out_$p183, out_$i185, in_$p18, out_$i187);
    goto corral_source_split_8540;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    out_$i187 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_8539;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    out_$i186 := $zext.i8.i32(in_$i15);
    goto corral_source_split_8538;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$i185 := $trunc.i32.i16(out_$i184);
    goto corral_source_split_8537;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    out_$i184 := $zext.i16.i32(in_$i5);
    goto corral_source_split_8536;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$p183 := $M.35;
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.40, in_$p2);
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$p181 := $M.37;
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$p180 := $M.36;
    goto corral_source_split_8532;

  $bb142:
    assume out_$i179 == 1;
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 3);
    goto corral_source_split_8529;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i178 := $M.41;
    goto corral_source_split_8528;

  $bb140:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} out_vslice_dummy_var_877 := wcn36xx_ampdu_action(out_$p169, out_$p170, out_$i171, out_$p172, out_$i174, in_$p18, out_$i176);
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$i176 := $trunc.i32.i8(out_$i175);
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i8.i32(in_$i15);
    goto corral_source_split_8523;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i174 := $trunc.i32.i16(out_$i173);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i16.i32(in_$i5);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    out_$p172 := $M.35;
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.40, in_$p2);
    goto corral_source_split_8519;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    out_$p170 := $M.37;
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    out_$p169 := $M.36;
    goto corral_source_split_8517;

  $bb139:
    assume out_$i168 == 1;
    goto corral_source_split_8516;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    out_$i167 := $M.41;
    goto corral_source_split_8273;

  $bb40:
    assume out_$i46 == 1;
    goto corral_source_split_8272;

  $bb39:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i37, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb155:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8580;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} wcn36xx_configure_filter(out_$p210, in_$i6, in_$p22, out_$i211);
    goto corral_source_split_8579;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$i211 := $load.i64($M.38, in_$p0);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$p210 := $M.36;
    goto corral_source_split_8577;

  $bb154:
    assume out_$i209 == 1;
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 2);
    goto corral_source_split_8574;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i208 := $M.41;
    goto corral_source_split_8573;

  $bb152:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8571;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} wcn36xx_configure_filter(out_$p206, in_$i6, in_$p22, out_$i207);
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i64($M.38, in_$p0);
    goto corral_source_split_8569;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    out_$p206 := $M.36;
    goto corral_source_split_8568;

  $bb151:
    assume out_$i205 == 1;
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 3);
    goto corral_source_split_8565;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i204 := $M.41;
    goto corral_source_split_8564;

  $bb149:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} wcn36xx_configure_filter(out_$p202, in_$i6, in_$p22, out_$i203);
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i64($M.38, in_$p0);
    goto corral_source_split_8560;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$p202 := $M.36;
    goto corral_source_split_8559;

  $bb148:
    assume out_$i201 == 1;
    goto corral_source_split_8558;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 1);
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$i200 := $M.41;
    goto corral_source_split_8277;

  $bb41:
    assume !(out_$i46 == 1);
    goto corral_source_split_8276;

  $bb164:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} wcn36xx_sw_scan_start(out_$p220);
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    out_$p220 := $M.36;
    goto corral_source_split_8599;

  $bb163:
    assume out_$i219 == 1;
    goto corral_source_split_8598;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 2);
    goto corral_source_split_8596;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i218 := $M.41;
    goto corral_source_split_8595;

  $bb161:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8593;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} wcn36xx_sw_scan_start(out_$p217);
    goto corral_source_split_8592;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    out_$p217 := $M.36;
    goto corral_source_split_8591;

  $bb160:
    assume out_$i216 == 1;
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 3);
    goto corral_source_split_8588;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i215 := $M.41;
    goto corral_source_split_8587;

  $bb158:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} wcn36xx_sw_scan_start(out_$p214);
    goto corral_source_split_8584;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    out_$p214 := $M.36;
    goto corral_source_split_8583;

  $bb157:
    assume out_$i213 == 1;
    goto corral_source_split_8582;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_8266;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    out_$i212 := $M.41;
    goto corral_source_split_8265;

  $bb36:
    assume out_$i44 == 1;
    goto corral_source_split_8264;

  $bb27:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i37, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb26:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i37, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb173:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8622;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} out_vslice_dummy_var_882 := wcn36xx_set_rts_threshold(out_$p231, in_$i14);
    goto corral_source_split_8621;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    out_$p231 := $M.36;
    goto corral_source_split_8620;

  $bb172:
    assume out_$i230 == 1;
    goto corral_source_split_8619;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 2);
    goto corral_source_split_8617;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i229 := $M.41;
    goto corral_source_split_8616;

  $bb170:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8614;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} out_vslice_dummy_var_881 := wcn36xx_set_rts_threshold(out_$p227, in_$i14);
    goto corral_source_split_8613;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    out_$p227 := $M.36;
    goto corral_source_split_8612;

  $bb169:
    assume out_$i226 == 1;
    goto corral_source_split_8611;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 3);
    goto corral_source_split_8609;

  $bb168:
    assume {:verifier.code 0} true;
    out_$i225 := $M.41;
    goto corral_source_split_8608;

  $bb167:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8606;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} out_vslice_dummy_var_880 := wcn36xx_set_rts_threshold(out_$p223, in_$i14);
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    out_$p223 := $M.36;
    goto corral_source_split_8604;

  $bb166:
    assume out_$i222 == 1;
    goto corral_source_split_8603;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_8270;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    out_$i221 := $M.41;
    goto corral_source_split_8269;

  $bb37:
    assume !(out_$i44 == 1);
    goto corral_source_split_8268;

  $bb182:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8646;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} out_vslice_dummy_var_885 := wcn36xx_add_interface(out_$p245, out_$p246);
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    out_$p246 := $M.37;
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$p245 := $M.36;
    goto corral_source_split_8643;

  $bb181:
    assume out_$i244 == 1;
    goto corral_source_split_8642;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 2);
    goto corral_source_split_8640;

  $bb180:
    assume {:verifier.code 0} true;
    out_$i243 := $M.41;
    goto corral_source_split_8639;

  $bb179:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8637;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_vslice_dummy_var_884 := wcn36xx_add_interface(out_$p240, out_$p241);
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$p241 := $M.37;
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$p240 := $M.36;
    goto corral_source_split_8634;

  $bb178:
    assume out_$i239 == 1;
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 3);
    goto corral_source_split_8631;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i238 := $M.41;
    goto corral_source_split_8630;

  $bb176:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8628;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_vslice_dummy_var_883 := wcn36xx_add_interface(out_$p235, out_$p236);
    goto corral_source_split_8627;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$p236 := $M.37;
    goto corral_source_split_8626;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    out_$p235 := $M.36;
    goto corral_source_split_8625;

  $bb175:
    assume out_$i234 == 1;
    goto corral_source_split_8624;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 1);
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$i233 := $M.41;
    goto corral_source_split_8253;

  $bb29:
    assume out_$i41 == 1;
    goto corral_source_split_8252;

  $bb28:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i37, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb191:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} out_vslice_dummy_var_888 := wcn36xx_sta_remove(out_$p262, out_$p263, out_$p264);
    goto corral_source_split_8672;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    out_$p264 := $M.35;
    goto corral_source_split_8671;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    out_$p263 := $M.37;
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    out_$p262 := $M.36;
    goto corral_source_split_8669;

  $bb190:
    assume out_$i261 == 1;
    goto corral_source_split_8668;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 2);
    goto corral_source_split_8666;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i260 := $M.41;
    goto corral_source_split_8665;

  $bb188:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8663;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} out_vslice_dummy_var_887 := wcn36xx_sta_remove(out_$p256, out_$p257, out_$p258);
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    out_$p258 := $M.35;
    goto corral_source_split_8661;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    out_$p257 := $M.37;
    goto corral_source_split_8660;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    out_$p256 := $M.36;
    goto corral_source_split_8659;

  $bb187:
    assume out_$i255 == 1;
    goto corral_source_split_8658;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 3);
    goto corral_source_split_8656;

  $bb186:
    assume {:verifier.code 0} true;
    out_$i254 := $M.41;
    goto corral_source_split_8655;

  $bb185:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8653;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} out_vslice_dummy_var_886 := wcn36xx_sta_remove(out_$p250, out_$p251, out_$p252);
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$p252 := $M.35;
    goto corral_source_split_8651;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    out_$p251 := $M.37;
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    out_$p250 := $M.36;
    goto corral_source_split_8649;

  $bb184:
    assume out_$i249 == 1;
    goto corral_source_split_8648;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 1);
    goto corral_source_split_8258;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    out_$i248 := $M.41;
    goto corral_source_split_8257;

  $bb31:
    assume out_$i42 == 1;
    goto corral_source_split_8256;

  $bb30:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i37, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb200:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8697;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} wcn36xx_remove_interface(out_$p276, out_$p277);
    goto corral_source_split_8696;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    out_$p277 := $M.37;
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    out_$p276 := $M.36;
    goto corral_source_split_8694;

  $bb199:
    assume out_$i275 == 1;
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 2);
    goto corral_source_split_8691;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i274 := $M.41;
    goto corral_source_split_8690;

  $bb197:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} wcn36xx_remove_interface(out_$p272, out_$p273);
    goto corral_source_split_8687;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    out_$p273 := $M.37;
    goto corral_source_split_8686;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    out_$p272 := $M.36;
    goto corral_source_split_8685;

  $bb196:
    assume out_$i271 == 1;
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 3);
    goto corral_source_split_8682;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i270 := $M.41;
    goto corral_source_split_8681;

  $bb194:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} wcn36xx_remove_interface(out_$p268, out_$p269);
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    out_$p269 := $M.37;
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    out_$p268 := $M.36;
    goto corral_source_split_8676;

  $bb193:
    assume out_$i267 == 1;
    goto corral_source_split_8675;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_8262;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i266 := $M.41;
    goto corral_source_split_8261;

  $bb33:
    assume out_$i43 == 1;
    goto corral_source_split_8260;

  $bb32:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i37, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_stop();
    goto corral_source_split_8699;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb35;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb35;

  $bb207:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} ldv_main_exported_4();
    goto corral_source_split_8702;

  $bb206:
    assume out_$i279 == 1;
    goto corral_source_split_8701;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    out_$i279 := $ne.i32(out_$i278, 0);
    goto corral_source_split_8242;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$i278 := $M.42;
    goto corral_source_split_8241;

  $bb16:
    assume out_$i33 == 1;
    goto corral_source_split_8240;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !(out_$i33 == 1);
    goto corral_source_split_8244;

  $bb210:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb220:
    assume {:verifier.code 0} true;
    assume !(out_$i287 == 1);
    goto $bb221;

  $bb223:
    assume {:verifier.code 0} true;
    assume !(out_$i289 == 1);
    goto $bb221;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 0);
    goto corral_source_split_8716;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    out_$i288 := $M.44;
    goto corral_source_split_8715;

  $bb219:
    assume out_$i287 == 1;
    goto corral_source_split_8714;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 3);
    goto corral_source_split_8712;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$i286 := $M.45;
    goto corral_source_split_8711;

  $bb217:
    assume out_$i285 == 1;
    goto corral_source_split_8710;

  $bb212:
    assume out_$i283 == 1;
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i282, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i283 := $slt.i32(out_$i282, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_8704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1650} out_$i282 := __VERIFIER_nondet_int();
    call {:si_unique_call 1651} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i282);
    call {:si_unique_call 1652} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i282);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume out_$i281 == 1;
    goto corral_source_split_8704;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$i280 := $M.45;
    goto corral_source_split_8233;

  $bb12:
    assume out_$i31 == 1;
    goto corral_source_split_8232;

  $bb5:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i26, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb228:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb233:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    out_$i296 := $ne.i32(out_$i295, 0);
    goto corral_source_split_8740;

  $bb231:
    assume {:verifier.code 0} true;
    out_$i295 := $M.52;
    goto corral_source_split_8739;

  $bb230:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_initialize_ieee80211_ops_6();
    goto corral_source_split_8737;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8736;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_file_operations_4();
    goto corral_source_split_8735;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8734;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_file_operations_3();
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8732;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8731;

  $bb229:
    assume out_$i294 == 1;
    goto corral_source_split_8730;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 0);
    goto corral_source_split_8728;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    out_$i293 := $M.52;
    goto corral_source_split_8727;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $M.52 := out_$i292;
    call {:si_unique_call 1657} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i292);
    goto corral_source_split_8726;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_$i292 := wcn36xx_init();
    goto corral_source_split_8725;

  $bb227:
    assume out_$i291 == 1;
    goto corral_source_split_8724;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 1);
    goto corral_source_split_8708;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    out_$i290 := $M.45;
    goto corral_source_split_8707;

  $bb214:
    assume out_$i284 == 1;
    goto corral_source_split_8706;

  $bb213:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i282, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_stop();
    goto corral_source_split_8745;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb215:
    assume {:verifier.code 0} true;
    assume !(out_$i284 == 1);
    goto $bb216;

  $bb218:
    assume {:verifier.code 0} true;
    assume !(out_$i285 == 1);
    goto $bb216;

  $bb240:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ldv_main_exported_3();
    goto corral_source_split_8748;

  $bb239:
    assume out_$i298 == 1;
    goto corral_source_split_8747;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    out_$i298 := $ne.i32(out_$i297, 0);
    goto corral_source_split_8238;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i297 := $M.46;
    goto corral_source_split_8237;

  $bb13:
    assume !(out_$i31 == 1);
    goto corral_source_split_8236;

  $bb7:
    assume out_$i29 == 1;
    goto corral_source_split_8226;

  $bb6:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb243:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb253:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb255:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.44 := out_$i312;
    call {:si_unique_call 1674} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i312);
    goto corral_source_split_8771;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    out_$i312 := $add.i32(out_$i311, 1);
    goto corral_source_split_8770;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    out_$i311 := $M.44;
    goto corral_source_split_8769;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8768;

  $bb254:
    assume out_$i310 == 1;
    goto corral_source_split_8767;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 0);
    goto corral_source_split_8765;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    out_$i309 := $M.53;
    goto corral_source_split_8764;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.53 := out_$i308;
    call {:si_unique_call 1672} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i308);
    goto corral_source_split_8763;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} out_$i308 := wcn36xx_probe(out_$p307);
    goto corral_source_split_8762;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    out_$p307 := $M.34;
    goto corral_source_split_8761;

  $bb252:
    assume out_$i306 == 1;
    goto corral_source_split_8760;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 1);
    goto corral_source_split_8758;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    out_$i305 := $M.48;
    goto corral_source_split_8757;

  $bb250:
    assume out_$i304 == 1;
    goto corral_source_split_8756;

  $bb245:
    assume out_$i302 == 1;
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i302 := $slt.i32(out_$i301, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_8750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1668} out_$i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i301);
    call {:si_unique_call 1670} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i301);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb242:
    assume out_$i300 == 1;
    goto corral_source_split_8750;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$i300 := $ne.i32(out_$i299, 0);
    goto corral_source_split_8230;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i299 := $M.48;
    goto corral_source_split_8229;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_8228;

  $bb8:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb260:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.44 := out_$i318;
    call {:si_unique_call 1677} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i318);
    goto corral_source_split_8779;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    out_$i318 := $sub.i32(out_$i317, 1);
    goto corral_source_split_8778;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    out_$i317 := $M.44;
    goto corral_source_split_8777;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8776;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} out_vslice_dummy_var_889 := wcn36xx_remove(out_$p315);
    goto corral_source_split_8775;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    out_$p315 := $M.34;
    goto corral_source_split_8774;

  $bb259:
    assume out_$i314 == 1;
    goto corral_source_split_8773;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 2);
    goto corral_source_split_8754;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    out_$i313 := $M.48;
    goto corral_source_split_8753;

  $bb247:
    assume out_$i303 == 1;
    goto corral_source_split_8752;

  $bb246:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i301, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_stop();
    goto corral_source_split_8781;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb248:
    assume {:verifier.code 0} true;
    assume !(out_$i303 == 1);
    goto $bb249;

  $bb251:
    assume {:verifier.code 0} true;
    assume !(out_$i304 == 1);
    goto $bb249;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ldv_stop();
    goto corral_source_split_8783;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb11;

  $bb205_dummy:
    call {:si_unique_call 1} out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i72, out_$i73, out_$p74, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i178, out_$i179, out_$p180, out_$p181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$p191, out_$p192, out_$i193, out_$p194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$p235, out_$p236, out_$i238, out_$i239, out_$p240, out_$p241, out_$i243, out_$i244, out_$p245, out_$p246, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$p257, out_$p258, out_$i260, out_$i261, out_$p262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p315, out_$i317, out_$i318, out_vslice_dummy_var_868, out_vslice_dummy_var_869, out_vslice_dummy_var_870, out_vslice_dummy_var_871, out_vslice_dummy_var_872, out_vslice_dummy_var_873, out_vslice_dummy_var_874, out_vslice_dummy_var_875, out_vslice_dummy_var_876, out_vslice_dummy_var_877, out_vslice_dummy_var_878, out_vslice_dummy_var_879, out_vslice_dummy_var_880, out_vslice_dummy_var_881, out_vslice_dummy_var_882, out_vslice_dummy_var_883, out_vslice_dummy_var_884, out_vslice_dummy_var_885, out_vslice_dummy_var_886, out_vslice_dummy_var_887, out_vslice_dummy_var_888, out_vslice_dummy_var_889 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p4, in_$i5, in_$i6, in_$p8, in_$p10, in_$i11, in_$p13, in_$i14, in_$i15, in_$i16, in_$p18, in_$p20, in_$p22, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i72, out_$i73, out_$p74, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$p81, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i178, out_$i179, out_$p180, out_$p181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$p191, out_$p192, out_$i193, out_$p194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$p235, out_$p236, out_$i238, out_$i239, out_$p240, out_$p241, out_$i243, out_$i244, out_$p245, out_$p246, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$p257, out_$p258, out_$i260, out_$i261, out_$p262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$p315, out_$i317, out_$i318, out_vslice_dummy_var_868, out_vslice_dummy_var_869, out_vslice_dummy_var_870, out_vslice_dummy_var_871, out_vslice_dummy_var_872, out_vslice_dummy_var_873, out_vslice_dummy_var_874, out_vslice_dummy_var_875, out_vslice_dummy_var_876, out_vslice_dummy_var_877, out_vslice_dummy_var_878, out_vslice_dummy_var_879, out_vslice_dummy_var_880, out_vslice_dummy_var_881, out_vslice_dummy_var_882, out_vslice_dummy_var_883, out_vslice_dummy_var_884, out_vslice_dummy_var_885, out_vslice_dummy_var_886, out_vslice_dummy_var_887, out_vslice_dummy_var_888, out_vslice_dummy_var_889);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i5: i16, in_$i6: i32, in_$p8: ref, in_$p10: ref, in_$i11: i32, in_$p13: ref, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$p172: ref, in_$i173: i32, in_$i174: i16, in_$i175: i32, in_$i176: i8, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$i182: i32, in_$p183: ref, in_$i184: i32, in_$i185: i16, in_$i186: i32, in_$i187: i8, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$i193: i32, in_$p194: ref, in_$i195: i32, in_$i196: i16, in_$i197: i32, in_$i198: i8, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i64, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i64, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i64, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$i278: i32, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i317: i32, in_$i318: i32, in_vslice_dummy_var_868: i32, in_vslice_dummy_var_869: i32, in_vslice_dummy_var_870: i32, in_vslice_dummy_var_871: i32, in_vslice_dummy_var_872: i32, in_vslice_dummy_var_873: i32, in_vslice_dummy_var_874: i32, in_vslice_dummy_var_875: i32, in_vslice_dummy_var_876: i32, in_vslice_dummy_var_877: i32, in_vslice_dummy_var_878: i32, in_vslice_dummy_var_879: i32, in_vslice_dummy_var_880: i32, in_vslice_dummy_var_881: i32, in_vslice_dummy_var_882: i32, in_vslice_dummy_var_883: i32, in_vslice_dummy_var_884: i32, in_vslice_dummy_var_885: i32, in_vslice_dummy_var_886: i32, in_vslice_dummy_var_887: i32, in_vslice_dummy_var_888: i32, in_vslice_dummy_var_889: i32) returns (out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$p172: ref, out_$i173: i32, out_$i174: i16, out_$i175: i32, out_$i176: i8, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$i182: i32, out_$p183: ref, out_$i184: i32, out_$i185: i16, out_$i186: i32, out_$i187: i8, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$i193: i32, out_$p194: ref, out_$i195: i32, out_$i196: i16, out_$i197: i32, out_$i198: i8, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i64, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i64, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i64, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$i278: i32, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i317: i32, out_$i318: i32, out_vslice_dummy_var_868: i32, out_vslice_dummy_var_869: i32, out_vslice_dummy_var_870: i32, out_vslice_dummy_var_871: i32, out_vslice_dummy_var_872: i32, out_vslice_dummy_var_873: i32, out_vslice_dummy_var_874: i32, out_vslice_dummy_var_875: i32, out_vslice_dummy_var_876: i32, out_vslice_dummy_var_877: i32, out_vslice_dummy_var_878: i32, out_vslice_dummy_var_879: i32, out_vslice_dummy_var_880: i32, out_vslice_dummy_var_881: i32, out_vslice_dummy_var_882: i32, out_vslice_dummy_var_883: i32, out_vslice_dummy_var_884: i32, out_vslice_dummy_var_885: i32, out_vslice_dummy_var_886: i32, out_vslice_dummy_var_887: i32, out_vslice_dummy_var_888: i32, out_vslice_dummy_var_889: i32);
  modifies $M.44, $M.41, $M.49, $M.0, $M.16, $CurrAddr, $M.7, $M.9, $M.11, $M.13, $M.8, $M.10, $M.12, $M.14, $M.6, $M.5, $M.50, $M.22, $M.51, $M.3, $M.56, $M.42, $M.31, $M.35, $M.36, $M.37, $M.54, $M.55, $M.57, $M.58, $M.46, $M.45, $M.52, $M.48, $M.34, $M.59, $M.32, $M.33, $M.53;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


